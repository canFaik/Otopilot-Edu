
ACCE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800b448  0800b448  0000c448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b900  0800b900  0000d200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b900  0800b900  0000c900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b908  0800b908  0000d200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b908  0800b908  0000c908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b90c  0800b90c  0000c90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800b910  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d200  2**0
                  CONTENTS
 10 .bss          00000448  20000200  20000200  0000d200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000648  20000648  0000d200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc34  00000000  00000000  0000d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002181  00000000  00000000  0001ce64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  0001efe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be0  00000000  00000000  0001ff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022535  00000000  00000000  00020af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ec9  00000000  00000000  0004302d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfca7  00000000  00000000  00053ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123b9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005680  00000000  00000000  00123be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  00129260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b430 	.word	0x0800b430

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800b430 	.word	0x0800b430

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f001 fc63 	bl	80028b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 f873 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff2:	f000 fae5 	bl	80015c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ff6:	f000 f8d9 	bl	80011ac <MX_SPI1_Init>
  MX_TIM1_Init();
 8000ffa:	f000 f90d 	bl	8001218 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000ffe:	f000 fa8b 	bl	8001518 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001002:	f000 fab3 	bl	800156c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001006:	f000 f99d 	bl	8001344 <MX_TIM2_Init>
  MX_TIM3_Init();
 800100a:	f000 fa15 	bl	8001438 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800100e:	482a      	ldr	r0, [pc, #168]	@ (80010b8 <main+0xd4>)
 8001010:	f003 fa9e 	bl	8004550 <HAL_TIM_Base_Start>
  myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 8001014:	2340      	movs	r3, #64	@ 0x40
 8001016:	703b      	strb	r3, [r7, #0]
  myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8001018:	2308      	movs	r3, #8
 800101a:	707b      	strb	r3, [r7, #1]
  myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 800101c:	23c0      	movs	r3, #192	@ 0xc0
 800101e:	70bb      	strb	r3, [r7, #2]
  myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001020:	2307      	movs	r3, #7
 8001022:	70fb      	strb	r3, [r7, #3]
  myAccConfigDef.interruptEnable = true;
 8001024:	2301      	movs	r3, #1
 8001026:	713b      	strb	r3, [r7, #4]
  LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4823      	ldr	r0, [pc, #140]	@ (80010bc <main+0xd8>)
 800102e:	f005 f8d7 	bl	80061e0 <LIS3DSH_Init>

  LIS3DSH_X_calibrate(-1000.0, 980.0);
 8001032:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80010c0 <main+0xdc>
 8001036:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80010c4 <main+0xe0>
 800103a:	f005 fa93 	bl	8006564 <LIS3DSH_X_calibrate>
  LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 800103e:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80010c8 <main+0xe4>
 8001042:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80010cc <main+0xe8>
 8001046:	f005 fabb 	bl	80065c0 <LIS3DSH_Y_calibrate>
  LIS3DSH_Z_calibrate(-920.0, 1040.0);
 800104a:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80010c8 <main+0xe4>
 800104e:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 80010d0 <main+0xec>
 8001052:	f005 fae3 	bl	800661c <LIS3DSH_Z_calibrate>

  /* HAL PWM START */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001056:	2100      	movs	r1, #0
 8001058:	481e      	ldr	r0, [pc, #120]	@ (80010d4 <main+0xf0>)
 800105a:	f003 fb31 	bl	80046c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800105e:	2104      	movs	r1, #4
 8001060:	481c      	ldr	r0, [pc, #112]	@ (80010d4 <main+0xf0>)
 8001062:	f003 fb2d 	bl	80046c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001066:	2108      	movs	r1, #8
 8001068:	481a      	ldr	r0, [pc, #104]	@ (80010d4 <main+0xf0>)
 800106a:	f003 fb29 	bl	80046c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800106e:	210c      	movs	r1, #12
 8001070:	4818      	ldr	r0, [pc, #96]	@ (80010d4 <main+0xf0>)
 8001072:	f003 fb25 	bl	80046c0 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,1000);
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <main+0xf0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1000);
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <main+0xf0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001088:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,1000);
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <main+0xf0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001092:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,1000);
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <main+0xf0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_Delay(3000);
 800109e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010a2:	f001 fc79 	bl	8002998 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  tim_start(); 											/* Timer start htim1, input capture */
 80010a6:	f000 fdd3 	bl	8001c50 <tim_start>

	  stabilize_drone_mode();								/* Drone is stabilize mode active */
 80010aa:	f000 fb5b 	bl	8001764 <stabilize_drone_mode>

	  loiter_drone_mode();									/* Drone is loiter mode active */
 80010ae:	f000 fcd5 	bl	8001a5c <loiter_drone_mode>
	  tim_start(); 											/* Timer start htim1, input capture */
 80010b2:	bf00      	nop
 80010b4:	e7f7      	b.n	80010a6 <main+0xc2>
 80010b6:	bf00      	nop
 80010b8:	20000294 	.word	0x20000294
 80010bc:	2000023c 	.word	0x2000023c
 80010c0:	44750000 	.word	0x44750000
 80010c4:	c47a0000 	.word	0xc47a0000
 80010c8:	44820000 	.word	0x44820000
 80010cc:	c47f0000 	.word	0xc47f0000
 80010d0:	c4660000 	.word	0xc4660000
 80010d4:	200002dc 	.word	0x200002dc

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	@ 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 fa57 	bl	800759a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <SystemClock_Config+0xcc>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <SystemClock_Config+0xcc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <SystemClock_Config+0xd0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <SystemClock_Config+0xd0>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <SystemClock_Config+0xd0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800114c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001150:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001152:	2302      	movs	r3, #2
 8001154:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001156:	2307      	movs	r3, #7
 8001158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	4618      	mov	r0, r3
 8001160:	f001 ff38 	bl	8002fd4 <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800116a:	f001 f875 	bl	8002258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001172:	2302      	movs	r3, #2
 8001174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800117a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800117e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001184:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2105      	movs	r1, #5
 800118c:	4618      	mov	r0, r3
 800118e:	f002 f999 	bl	80034c4 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001198:	f001 f85e 	bl	8002258 <Error_Handler>
  }
}
 800119c:	bf00      	nop
 800119e:	3750      	adds	r7, #80	@ 0x50
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011b2:	4a18      	ldr	r2, [pc, #96]	@ (8001214 <MX_SPI1_Init+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011f8:	220a      	movs	r2, #10
 80011fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011fe:	f002 fb81 	bl	8003904 <HAL_SPI_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001208:	f001 f826 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000023c 	.word	0x2000023c
 8001214:	40013000 	.word	0x40013000

08001218 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001242:	4b3e      	ldr	r3, [pc, #248]	@ (800133c <MX_TIM1_Init+0x124>)
 8001244:	4a3e      	ldr	r2, [pc, #248]	@ (8001340 <MX_TIM1_Init+0x128>)
 8001246:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001248:	4b3c      	ldr	r3, [pc, #240]	@ (800133c <MX_TIM1_Init+0x124>)
 800124a:	2253      	movs	r2, #83	@ 0x53
 800124c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b3b      	ldr	r3, [pc, #236]	@ (800133c <MX_TIM1_Init+0x124>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 8001254:	4b39      	ldr	r3, [pc, #228]	@ (800133c <MX_TIM1_Init+0x124>)
 8001256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800125a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b37      	ldr	r3, [pc, #220]	@ (800133c <MX_TIM1_Init+0x124>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001262:	4b36      	ldr	r3, [pc, #216]	@ (800133c <MX_TIM1_Init+0x124>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b34      	ldr	r3, [pc, #208]	@ (800133c <MX_TIM1_Init+0x124>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800126e:	4833      	ldr	r0, [pc, #204]	@ (800133c <MX_TIM1_Init+0x124>)
 8001270:	f003 f91e 	bl	80044b0 <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800127a:	f000 ffed 	bl	8002258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001282:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	4619      	mov	r1, r3
 800128a:	482c      	ldr	r0, [pc, #176]	@ (800133c <MX_TIM1_Init+0x124>)
 800128c:	f003 feb0 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001296:	f000 ffdf 	bl	8002258 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800129a:	4828      	ldr	r0, [pc, #160]	@ (800133c <MX_TIM1_Init+0x124>)
 800129c:	f003 fad8 	bl	8004850 <HAL_TIM_IC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80012a6:	f000 ffd7 	bl	8002258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	4820      	ldr	r0, [pc, #128]	@ (800133c <MX_TIM1_Init+0x124>)
 80012ba:	f004 fbcf 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80012c4:	f000 ffc8 	bl	8002258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012c8:	230a      	movs	r3, #10
 80012ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	4817      	ldr	r0, [pc, #92]	@ (800133c <MX_TIM1_Init+0x124>)
 80012e0:	f003 fd28 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80012ea:	f000 ffb5 	bl	8002258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	2204      	movs	r2, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	@ (800133c <MX_TIM1_Init+0x124>)
 80012fa:	f003 fd1b 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001304:	f000 ffa8 	bl	8002258 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	2208      	movs	r2, #8
 800130c:	4619      	mov	r1, r3
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <MX_TIM1_Init+0x124>)
 8001310:	f003 fd10 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800131a:	f000 ff9d 	bl	8002258 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	220c      	movs	r2, #12
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_TIM1_Init+0x124>)
 8001326:	f003 fd05 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001330:	f000 ff92 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000294 	.word	0x20000294
 8001340:	40010000 	.word	0x40010000

08001344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001366:	4b33      	ldr	r3, [pc, #204]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800136e:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001370:	2253      	movs	r2, #83	@ 0x53
 8001372:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800137a:	4b2e      	ldr	r3, [pc, #184]	@ (8001434 <MX_TIM2_Init+0xf0>)
 800137c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001380:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <MX_TIM2_Init+0xf0>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800138e:	4829      	ldr	r0, [pc, #164]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001390:	f003 f946 	bl	8004620 <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800139a:	f000 ff5d 	bl	8002258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	4619      	mov	r1, r3
 80013ac:	4821      	ldr	r0, [pc, #132]	@ (8001434 <MX_TIM2_Init+0xf0>)
 80013ae:	f004 fb55 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013b8:	f000 ff4e 	bl	8002258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	@ 0x60
 80013be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4818      	ldr	r0, [pc, #96]	@ (8001434 <MX_TIM2_Init+0xf0>)
 80013d4:	f003 fd4a 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013de:	f000 ff3b 	bl	8002258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2204      	movs	r2, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4812      	ldr	r0, [pc, #72]	@ (8001434 <MX_TIM2_Init+0xf0>)
 80013ea:	f003 fd3f 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013f4:	f000 ff30 	bl	8002258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2208      	movs	r2, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001400:	f003 fd34 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800140a:	f000 ff25 	bl	8002258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	220c      	movs	r2, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4807      	ldr	r0, [pc, #28]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001416:	f003 fd29 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001420:	f000 ff1a 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001424:	4803      	ldr	r0, [pc, #12]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001426:	f001 f839 	bl	800249c <HAL_TIM_MspPostInit>

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	@ 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200002dc 	.word	0x200002dc

08001438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0318 	add.w	r3, r7, #24
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001462:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <MX_TIM3_Init+0xd8>)
 8001464:	4a2b      	ldr	r2, [pc, #172]	@ (8001514 <MX_TIM3_Init+0xdc>)
 8001466:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001468:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <MX_TIM3_Init+0xd8>)
 800146a:	2253      	movs	r2, #83	@ 0x53
 800146c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <MX_TIM3_Init+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8001474:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <MX_TIM3_Init+0xd8>)
 8001476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800147a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <MX_TIM3_Init+0xd8>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <MX_TIM3_Init+0xd8>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001488:	4821      	ldr	r0, [pc, #132]	@ (8001510 <MX_TIM3_Init+0xd8>)
 800148a:	f003 f811 	bl	80044b0 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001494:	f000 fee0 	bl	8002258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	4619      	mov	r1, r3
 80014a4:	481a      	ldr	r0, [pc, #104]	@ (8001510 <MX_TIM3_Init+0xd8>)
 80014a6:	f003 fda3 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014b0:	f000 fed2 	bl	8002258 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014b4:	4816      	ldr	r0, [pc, #88]	@ (8001510 <MX_TIM3_Init+0xd8>)
 80014b6:	f003 f9cb 	bl	8004850 <HAL_TIM_IC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014c0:	f000 feca 	bl	8002258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	480f      	ldr	r0, [pc, #60]	@ (8001510 <MX_TIM3_Init+0xd8>)
 80014d4:	f004 fac2 	bl	8005a5c <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80014de:	f000 febb 	bl	8002258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80014e2:	230a      	movs	r3, #10
 80014e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_TIM3_Init+0xd8>)
 80014fa:	f003 fc1b 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001504:	f000 fea8 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000324 	.word	0x20000324
 8001514:	40000400 	.word	0x40000400

08001518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <MX_USART1_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001550:	f004 fb14 	bl	8005b7c <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f000 fe7d 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000036c 	.word	0x2000036c
 8001568:	40011000 	.word	0x40011000

0800156c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <MX_USART3_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 80015a4:	f004 faea 	bl	8005b7c <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ae:	f000 fe53 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200003b4 	.word	0x200003b4
 80015bc:	40004800 	.word	0x40004800

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	@ 0x30
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	4b54      	ldr	r3, [pc, #336]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a53      	ldr	r2, [pc, #332]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b51      	ldr	r3, [pc, #324]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	4b4d      	ldr	r3, [pc, #308]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a4c      	ldr	r2, [pc, #304]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b4a      	ldr	r3, [pc, #296]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b46      	ldr	r3, [pc, #280]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a45      	ldr	r2, [pc, #276]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b43      	ldr	r3, [pc, #268]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a3e      	ldr	r2, [pc, #248]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <MX_GPIO_Init+0x16c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <MX_GPIO_Init+0x16c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a37      	ldr	r2, [pc, #220]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b35      	ldr	r3, [pc, #212]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b31      	ldr	r3, [pc, #196]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a30      	ldr	r2, [pc, #192]	@ (800172c <MX_GPIO_Init+0x16c>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2108      	movs	r1, #8
 8001682:	482b      	ldr	r0, [pc, #172]	@ (8001730 <MX_GPIO_Init+0x170>)
 8001684:	f001 fc5a 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800168e:	4829      	ldr	r0, [pc, #164]	@ (8001734 <MX_GPIO_Init+0x174>)
 8001690:	f001 fc54 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001694:	2308      	movs	r3, #8
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	4821      	ldr	r0, [pc, #132]	@ (8001730 <MX_GPIO_Init+0x170>)
 80016ac:	f001 faaa 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80016b0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	481a      	ldr	r0, [pc, #104]	@ (8001734 <MX_GPIO_Init+0x174>)
 80016ca:	f001 fa9b 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4813      	ldr	r0, [pc, #76]	@ (8001734 <MX_GPIO_Init+0x174>)
 80016e6:	f001 fa8d 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	480c      	ldr	r0, [pc, #48]	@ (8001730 <MX_GPIO_Init+0x170>)
 8001700:	f001 fa80 	bl	8002c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2006      	movs	r0, #6
 800170a:	f001 fa44 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800170e:	2006      	movs	r0, #6
 8001710:	f001 fa5d 	bl	8002bce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2028      	movs	r0, #40	@ 0x28
 800171a:	f001 fa3c 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800171e:	2028      	movs	r0, #40	@ 0x28
 8001720:	f001 fa55 	bl	8002bce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	@ 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	40021000 	.word	0x40021000
 8001734:	40020c00 	.word	0x40020c00

08001738 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	80fb      	strh	r3, [r7, #6]

	UNUSED(GPIO_Pin);

	drdyFlag = 1;
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_GPIO_EXTI_Callback+0x24>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001748:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <HAL_GPIO_EXTI_Callback+0x28>)
 800174e:	f001 fc0e 	bl	8002f6e <HAL_GPIO_TogglePin>
	//End
};
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000478 	.word	0x20000478
 8001760:	40020c00 	.word	0x40020c00

08001764 <stabilize_drone_mode>:

void stabilize_drone_mode(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	// Receiver value is control.
	receiver_motor_value();
 8001768:	f000 fb78 	bl	8001e5c <receiver_motor_value>

	//Motor speed, roll, pitch, yaw value.
	stabilize_mode.motor_speed[0] = 1000 + rec_throttle + roll_right - roll_left + pitch_back - pitch_forward + yaw_right - yaw_left;
 800176c:	4b57      	ldr	r3, [pc, #348]	@ (80018cc <stabilize_drone_mode+0x168>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001774:	4a56      	ldr	r2, [pc, #344]	@ (80018d0 <stabilize_drone_mode+0x16c>)
 8001776:	8812      	ldrh	r2, [r2, #0]
 8001778:	4413      	add	r3, r2
 800177a:	4a56      	ldr	r2, [pc, #344]	@ (80018d4 <stabilize_drone_mode+0x170>)
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	4a55      	ldr	r2, [pc, #340]	@ (80018d8 <stabilize_drone_mode+0x174>)
 8001782:	8812      	ldrh	r2, [r2, #0]
 8001784:	4413      	add	r3, r2
 8001786:	4a55      	ldr	r2, [pc, #340]	@ (80018dc <stabilize_drone_mode+0x178>)
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	4a54      	ldr	r2, [pc, #336]	@ (80018e0 <stabilize_drone_mode+0x17c>)
 800178e:	8812      	ldrh	r2, [r2, #0]
 8001790:	4413      	add	r3, r2
 8001792:	4a54      	ldr	r2, [pc, #336]	@ (80018e4 <stabilize_drone_mode+0x180>)
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4b53      	ldr	r3, [pc, #332]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800179c:	601a      	str	r2, [r3, #0]
	stabilize_mode.motor_speed[1] = 1000 + rec_throttle + roll_right - roll_left - pitch_back + pitch_forward + yaw_left - yaw_right;
 800179e:	4b4b      	ldr	r3, [pc, #300]	@ (80018cc <stabilize_drone_mode+0x168>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017a6:	4a4a      	ldr	r2, [pc, #296]	@ (80018d0 <stabilize_drone_mode+0x16c>)
 80017a8:	8812      	ldrh	r2, [r2, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a49      	ldr	r2, [pc, #292]	@ (80018d4 <stabilize_drone_mode+0x170>)
 80017ae:	8812      	ldrh	r2, [r2, #0]
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	4a49      	ldr	r2, [pc, #292]	@ (80018d8 <stabilize_drone_mode+0x174>)
 80017b4:	8812      	ldrh	r2, [r2, #0]
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	4a48      	ldr	r2, [pc, #288]	@ (80018dc <stabilize_drone_mode+0x178>)
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	4a49      	ldr	r2, [pc, #292]	@ (80018e4 <stabilize_drone_mode+0x180>)
 80017c0:	8812      	ldrh	r2, [r2, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a46      	ldr	r2, [pc, #280]	@ (80018e0 <stabilize_drone_mode+0x17c>)
 80017c6:	8812      	ldrh	r2, [r2, #0]
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b46      	ldr	r3, [pc, #280]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80017ce:	605a      	str	r2, [r3, #4]
	stabilize_mode.motor_speed[2] = 1000 + rec_throttle + roll_left - roll_right - pitch_back + pitch_forward + yaw_right - yaw_left;
 80017d0:	4b3e      	ldr	r3, [pc, #248]	@ (80018cc <stabilize_drone_mode+0x168>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017d8:	4a3e      	ldr	r2, [pc, #248]	@ (80018d4 <stabilize_drone_mode+0x170>)
 80017da:	8812      	ldrh	r2, [r2, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	4a3c      	ldr	r2, [pc, #240]	@ (80018d0 <stabilize_drone_mode+0x16c>)
 80017e0:	8812      	ldrh	r2, [r2, #0]
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	4a3c      	ldr	r2, [pc, #240]	@ (80018d8 <stabilize_drone_mode+0x174>)
 80017e6:	8812      	ldrh	r2, [r2, #0]
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	4a3c      	ldr	r2, [pc, #240]	@ (80018dc <stabilize_drone_mode+0x178>)
 80017ec:	8812      	ldrh	r2, [r2, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a3b      	ldr	r2, [pc, #236]	@ (80018e0 <stabilize_drone_mode+0x17c>)
 80017f2:	8812      	ldrh	r2, [r2, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a3b      	ldr	r2, [pc, #236]	@ (80018e4 <stabilize_drone_mode+0x180>)
 80017f8:	8812      	ldrh	r2, [r2, #0]
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001800:	609a      	str	r2, [r3, #8]
	stabilize_mode.motor_speed[3] = 1000 + rec_throttle + roll_left - roll_right + pitch_back - pitch_forward + yaw_left - yaw_right;
 8001802:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <stabilize_drone_mode+0x168>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800180a:	4a32      	ldr	r2, [pc, #200]	@ (80018d4 <stabilize_drone_mode+0x170>)
 800180c:	8812      	ldrh	r2, [r2, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a2f      	ldr	r2, [pc, #188]	@ (80018d0 <stabilize_drone_mode+0x16c>)
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4a30      	ldr	r2, [pc, #192]	@ (80018d8 <stabilize_drone_mode+0x174>)
 8001818:	8812      	ldrh	r2, [r2, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <stabilize_drone_mode+0x178>)
 800181e:	8812      	ldrh	r2, [r2, #0]
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	4a30      	ldr	r2, [pc, #192]	@ (80018e4 <stabilize_drone_mode+0x180>)
 8001824:	8812      	ldrh	r2, [r2, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a2d      	ldr	r2, [pc, #180]	@ (80018e0 <stabilize_drone_mode+0x17c>)
 800182a:	8812      	ldrh	r2, [r2, #0]
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	461a      	mov	r2, r3
 8001830:	4b2d      	ldr	r3, [pc, #180]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001832:	60da      	str	r2, [r3, #12]

	// Motor speed roll, pitch, yaw stopper 0 - 2000.
	if(stabilize_mode.motor_speed[0] >=2000 ) stabilize_mode.motor_speed[0] = 2000;
 8001834:	4b2c      	ldr	r3, [pc, #176]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800183c:	d303      	bcc.n	8001846 <stabilize_drone_mode+0xe2>
 800183e:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001840:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001844:	601a      	str	r2, [r3, #0]
	if(stabilize_mode.motor_speed[1] >=2000 ) stabilize_mode.motor_speed[1] = 2000;
 8001846:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800184e:	d303      	bcc.n	8001858 <stabilize_drone_mode+0xf4>
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001852:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001856:	605a      	str	r2, [r3, #4]
	if(stabilize_mode.motor_speed[2] >=2000 ) stabilize_mode.motor_speed[2] = 2000;
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001860:	d303      	bcc.n	800186a <stabilize_drone_mode+0x106>
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001864:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001868:	609a      	str	r2, [r3, #8]
	if(stabilize_mode.motor_speed[3] >=2000 ) stabilize_mode.motor_speed[3] = 2000;
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001872:	d303      	bcc.n	800187c <stabilize_drone_mode+0x118>
 8001874:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001876:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800187a:	60da      	str	r2, [r3, #12]

	if(stabilize_mode.motor_speed[0] <=1000 ) stabilize_mode.motor_speed[0] = 1000;
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001884:	d803      	bhi.n	800188e <stabilize_drone_mode+0x12a>
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001888:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800188c:	601a      	str	r2, [r3, #0]
	if(stabilize_mode.motor_speed[1] <=1000 ) stabilize_mode.motor_speed[1] = 1000;
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001896:	d803      	bhi.n	80018a0 <stabilize_drone_mode+0x13c>
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800189a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800189e:	605a      	str	r2, [r3, #4]
	if(stabilize_mode.motor_speed[2] <=1000 ) stabilize_mode.motor_speed[2] = 1000;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018a8:	d803      	bhi.n	80018b2 <stabilize_drone_mode+0x14e>
 80018aa:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80018ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018b0:	609a      	str	r2, [r3, #8]
	if(stabilize_mode.motor_speed[3] <=1000 ) stabilize_mode.motor_speed[3] = 1000;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018ba:	d803      	bhi.n	80018c4 <stabilize_drone_mode+0x160>
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80018be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018c2:	60da      	str	r2, [r3, #12]

	// Motor value to pwm compare set.
	stabilize_motor_output();
 80018c4:	f000 f9da 	bl	8001c7c <stabilize_motor_output>
   // End
};
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000048c 	.word	0x2000048c
 80018d0:	2000047c 	.word	0x2000047c
 80018d4:	2000047e 	.word	0x2000047e
 80018d8:	20000482 	.word	0x20000482
 80018dc:	20000480 	.word	0x20000480
 80018e0:	20000484 	.word	0x20000484
 80018e4:	20000486 	.word	0x20000486
 80018e8:	2000022c 	.word	0x2000022c

080018ec <pid_rol_pitch_value>:

void pid_rol_pitch_value(float measured_roll, float measured_pitch) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80018f6:	edc7 0a00 	vstr	s1, [r7]
    // Roll PID calculate

    error_roll = desired_roll - measured_roll;
 80018fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001a24 <pid_rol_pitch_value+0x138>)
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	edd7 7a01 	vldr	s15, [r7, #4]
 8001904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001908:	4b47      	ldr	r3, [pc, #284]	@ (8001a28 <pid_rol_pitch_value+0x13c>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
    integral_roll += error_roll;
 800190e:	4b47      	ldr	r3, [pc, #284]	@ (8001a2c <pid_rol_pitch_value+0x140>)
 8001910:	ed93 7a00 	vldr	s14, [r3]
 8001914:	4b44      	ldr	r3, [pc, #272]	@ (8001a28 <pid_rol_pitch_value+0x13c>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191e:	4b43      	ldr	r3, [pc, #268]	@ (8001a2c <pid_rol_pitch_value+0x140>)
 8001920:	edc3 7a00 	vstr	s15, [r3]

     pid_roll_value = kp * error_roll + ki * integral_roll + kd * (error_roll - last_error_roll);
 8001924:	4b42      	ldr	r3, [pc, #264]	@ (8001a30 <pid_rol_pitch_value+0x144>)
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a28 <pid_rol_pitch_value+0x13c>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	4b3f      	ldr	r3, [pc, #252]	@ (8001a34 <pid_rol_pitch_value+0x148>)
 8001936:	edd3 6a00 	vldr	s13, [r3]
 800193a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a2c <pid_rol_pitch_value+0x140>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001948:	4b37      	ldr	r3, [pc, #220]	@ (8001a28 <pid_rol_pitch_value+0x13c>)
 800194a:	edd3 6a00 	vldr	s13, [r3]
 800194e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a38 <pid_rol_pitch_value+0x14c>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001958:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <pid_rol_pitch_value+0x150>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001966:	4b36      	ldr	r3, [pc, #216]	@ (8001a40 <pid_rol_pitch_value+0x154>)
 8001968:	edc3 7a00 	vstr	s15, [r3]
     pid_roll_value /= 800;
 800196c:	4b34      	ldr	r3, [pc, #208]	@ (8001a40 <pid_rol_pitch_value+0x154>)
 800196e:	ed93 7a00 	vldr	s14, [r3]
 8001972:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001a44 <pid_rol_pitch_value+0x158>
 8001976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197a:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <pid_rol_pitch_value+0x154>)
 800197c:	edc3 7a00 	vstr	s15, [r3]

    last_error_roll = error_roll;
 8001980:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <pid_rol_pitch_value+0x13c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a2c      	ldr	r2, [pc, #176]	@ (8001a38 <pid_rol_pitch_value+0x14c>)
 8001986:	6013      	str	r3, [r2, #0]

    // Pitch PID calculate
    error_pitch = desired_pitch - measured_pitch;
 8001988:	4b2f      	ldr	r3, [pc, #188]	@ (8001a48 <pid_rol_pitch_value+0x15c>)
 800198a:	ed93 7a00 	vldr	s14, [r3]
 800198e:	edd7 7a00 	vldr	s15, [r7]
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	4b2d      	ldr	r3, [pc, #180]	@ (8001a4c <pid_rol_pitch_value+0x160>)
 8001998:	edc3 7a00 	vstr	s15, [r3]
    integral_pitch += error_pitch;
 800199c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a50 <pid_rol_pitch_value+0x164>)
 800199e:	ed93 7a00 	vldr	s14, [r3]
 80019a2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a4c <pid_rol_pitch_value+0x160>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ac:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <pid_rol_pitch_value+0x164>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]

    pid_pitch_value = kp * error_pitch + ki * integral_pitch + kd * (error_pitch - last_error_pitch);
 80019b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <pid_rol_pitch_value+0x144>)
 80019b4:	ed93 7a00 	vldr	s14, [r3]
 80019b8:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <pid_rol_pitch_value+0x160>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <pid_rol_pitch_value+0x148>)
 80019c4:	edd3 6a00 	vldr	s13, [r3]
 80019c8:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <pid_rol_pitch_value+0x164>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <pid_rol_pitch_value+0x160>)
 80019d8:	edd3 6a00 	vldr	s13, [r3]
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <pid_rol_pitch_value+0x168>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <pid_rol_pitch_value+0x150>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f4:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <pid_rol_pitch_value+0x16c>)
 80019f6:	edc3 7a00 	vstr	s15, [r3]
    pid_pitch_value /= 800;
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <pid_rol_pitch_value+0x16c>)
 80019fc:	ed93 7a00 	vldr	s14, [r3]
 8001a00:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001a44 <pid_rol_pitch_value+0x158>
 8001a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <pid_rol_pitch_value+0x16c>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
    last_error_pitch = error_pitch;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <pid_rol_pitch_value+0x160>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a10      	ldr	r2, [pc, #64]	@ (8001a54 <pid_rol_pitch_value+0x168>)
 8001a14:	6013      	str	r3, [r2, #0]

};
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	2000044c 	.word	0x2000044c
 8001a28:	20000434 	.word	0x20000434
 8001a2c:	20000444 	.word	0x20000444
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004
 8001a38:	2000043c 	.word	0x2000043c
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	200003fc 	.word	0x200003fc
 8001a44:	44480000 	.word	0x44480000
 8001a48:	20000450 	.word	0x20000450
 8001a4c:	20000438 	.word	0x20000438
 8001a50:	20000448 	.word	0x20000448
 8001a54:	20000440 	.word	0x20000440
 8001a58:	20000400 	.word	0x20000400

08001a5c <loiter_drone_mode>:


void loiter_drone_mode(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	receiver_motor_value();									/* Receiver value is control 	*/
 8001a60:	f000 f9fc 	bl	8001e5c <receiver_motor_value>

	acces_measure();										/* Roll and pitch angle measure */
 8001a64:	f000 f92c 	bl	8001cc0 <acces_measure>

	pid_rol_pitch_value(measured_roll, measured_pitch);		/* Roll and pitch  pid control */
 8001a68:	4b5c      	ldr	r3, [pc, #368]	@ (8001bdc <loiter_drone_mode+0x180>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8001be0 <loiter_drone_mode+0x184>)
 8001a70:	ed93 7a00 	vldr	s14, [r3]
 8001a74:	eef0 0a47 	vmov.f32	s1, s14
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	f7ff ff36 	bl	80018ec <pid_rol_pitch_value>

	loiter_mode.motor_speed[0] = 1000 + rec_throttle + roll_right - roll_left + pitch_back - pitch_forward + yaw_right - yaw_left;
 8001a80:	4b58      	ldr	r3, [pc, #352]	@ (8001be4 <loiter_drone_mode+0x188>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a88:	4a57      	ldr	r2, [pc, #348]	@ (8001be8 <loiter_drone_mode+0x18c>)
 8001a8a:	8812      	ldrh	r2, [r2, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a57      	ldr	r2, [pc, #348]	@ (8001bec <loiter_drone_mode+0x190>)
 8001a90:	8812      	ldrh	r2, [r2, #0]
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	4a56      	ldr	r2, [pc, #344]	@ (8001bf0 <loiter_drone_mode+0x194>)
 8001a96:	8812      	ldrh	r2, [r2, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a56      	ldr	r2, [pc, #344]	@ (8001bf4 <loiter_drone_mode+0x198>)
 8001a9c:	8812      	ldrh	r2, [r2, #0]
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	4a55      	ldr	r2, [pc, #340]	@ (8001bf8 <loiter_drone_mode+0x19c>)
 8001aa2:	8812      	ldrh	r2, [r2, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a55      	ldr	r2, [pc, #340]	@ (8001bfc <loiter_drone_mode+0x1a0>)
 8001aa8:	8812      	ldrh	r2, [r2, #0]
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b54      	ldr	r3, [pc, #336]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001ab0:	601a      	str	r2, [r3, #0]
	loiter_mode.motor_speed[1] = 1000 + rec_throttle + roll_right - roll_left - pitch_back + pitch_forward + yaw_left - yaw_right;
 8001ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8001be4 <loiter_drone_mode+0x188>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001aba:	4a4b      	ldr	r2, [pc, #300]	@ (8001be8 <loiter_drone_mode+0x18c>)
 8001abc:	8812      	ldrh	r2, [r2, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8001bec <loiter_drone_mode+0x190>)
 8001ac2:	8812      	ldrh	r2, [r2, #0]
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf0 <loiter_drone_mode+0x194>)
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	4a49      	ldr	r2, [pc, #292]	@ (8001bf4 <loiter_drone_mode+0x198>)
 8001ace:	8812      	ldrh	r2, [r2, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a4a      	ldr	r2, [pc, #296]	@ (8001bfc <loiter_drone_mode+0x1a0>)
 8001ad4:	8812      	ldrh	r2, [r2, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a47      	ldr	r2, [pc, #284]	@ (8001bf8 <loiter_drone_mode+0x19c>)
 8001ada:	8812      	ldrh	r2, [r2, #0]
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b47      	ldr	r3, [pc, #284]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001ae2:	605a      	str	r2, [r3, #4]
	loiter_mode.motor_speed[2] = 1000 + rec_throttle + roll_left - roll_right - pitch_back + pitch_forward + yaw_right - yaw_left;
 8001ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <loiter_drone_mode+0x188>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001aec:	4a3f      	ldr	r2, [pc, #252]	@ (8001bec <loiter_drone_mode+0x190>)
 8001aee:	8812      	ldrh	r2, [r2, #0]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a3d      	ldr	r2, [pc, #244]	@ (8001be8 <loiter_drone_mode+0x18c>)
 8001af4:	8812      	ldrh	r2, [r2, #0]
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	4a3d      	ldr	r2, [pc, #244]	@ (8001bf0 <loiter_drone_mode+0x194>)
 8001afa:	8812      	ldrh	r2, [r2, #0]
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	4a3d      	ldr	r2, [pc, #244]	@ (8001bf4 <loiter_drone_mode+0x198>)
 8001b00:	8812      	ldrh	r2, [r2, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a3c      	ldr	r2, [pc, #240]	@ (8001bf8 <loiter_drone_mode+0x19c>)
 8001b06:	8812      	ldrh	r2, [r2, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001bfc <loiter_drone_mode+0x1a0>)
 8001b0c:	8812      	ldrh	r2, [r2, #0]
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b14:	609a      	str	r2, [r3, #8]
	loiter_mode.motor_speed[3] = 1000 + rec_throttle + roll_left - roll_right + pitch_back - pitch_forward + yaw_left - yaw_right;
 8001b16:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <loiter_drone_mode+0x188>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b1e:	4a33      	ldr	r2, [pc, #204]	@ (8001bec <loiter_drone_mode+0x190>)
 8001b20:	8812      	ldrh	r2, [r2, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a30      	ldr	r2, [pc, #192]	@ (8001be8 <loiter_drone_mode+0x18c>)
 8001b26:	8812      	ldrh	r2, [r2, #0]
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	4a31      	ldr	r2, [pc, #196]	@ (8001bf0 <loiter_drone_mode+0x194>)
 8001b2c:	8812      	ldrh	r2, [r2, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a30      	ldr	r2, [pc, #192]	@ (8001bf4 <loiter_drone_mode+0x198>)
 8001b32:	8812      	ldrh	r2, [r2, #0]
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	4a31      	ldr	r2, [pc, #196]	@ (8001bfc <loiter_drone_mode+0x1a0>)
 8001b38:	8812      	ldrh	r2, [r2, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf8 <loiter_drone_mode+0x19c>)
 8001b3e:	8812      	ldrh	r2, [r2, #0]
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b46:	60da      	str	r2, [r3, #12]

	// Motor speed roll, pitch, yaw stopper 0 - 2000.
	if(loiter_mode.motor_speed[0] >=2000 ) loiter_mode.motor_speed[0] = 2000;
 8001b48:	4b2d      	ldr	r3, [pc, #180]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b50:	d303      	bcc.n	8001b5a <loiter_drone_mode+0xfe>
 8001b52:	4b2b      	ldr	r3, [pc, #172]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b54:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b58:	601a      	str	r2, [r3, #0]
	if(loiter_mode.motor_speed[1] >=2000 ) loiter_mode.motor_speed[1] = 2000;
 8001b5a:	4b29      	ldr	r3, [pc, #164]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b62:	d303      	bcc.n	8001b6c <loiter_drone_mode+0x110>
 8001b64:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b66:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b6a:	605a      	str	r2, [r3, #4]
	if(loiter_mode.motor_speed[2] >=2000 ) loiter_mode.motor_speed[2] = 2000;
 8001b6c:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b74:	d303      	bcc.n	8001b7e <loiter_drone_mode+0x122>
 8001b76:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b78:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b7c:	609a      	str	r2, [r3, #8]
	if(loiter_mode.motor_speed[3] >=2000 ) loiter_mode.motor_speed[3] = 2000;
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b86:	d303      	bcc.n	8001b90 <loiter_drone_mode+0x134>
 8001b88:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b8a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b8e:	60da      	str	r2, [r3, #12]

	if(loiter_mode.motor_speed[0] <=1000 ) loiter_mode.motor_speed[0] = 1000;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b98:	d803      	bhi.n	8001ba2 <loiter_drone_mode+0x146>
 8001b9a:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001b9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ba0:	601a      	str	r2, [r3, #0]
	if(loiter_mode.motor_speed[1] <=1000 ) loiter_mode.motor_speed[1] = 1000;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001baa:	d803      	bhi.n	8001bb4 <loiter_drone_mode+0x158>
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001bae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bb2:	605a      	str	r2, [r3, #4]
	if(loiter_mode.motor_speed[2] <=1000 ) loiter_mode.motor_speed[2] = 1000;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bbc:	d803      	bhi.n	8001bc6 <loiter_drone_mode+0x16a>
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001bc0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bc4:	609a      	str	r2, [r3, #8]
	if(loiter_mode.motor_speed[3] <=1000 ) loiter_mode.motor_speed[3] = 1000;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bce:	d803      	bhi.n	8001bd8 <loiter_drone_mode+0x17c>
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <loiter_drone_mode+0x1a4>)
 8001bd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bd6:	60da      	str	r2, [r3, #12]


};
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000454 	.word	0x20000454
 8001be0:	20000458 	.word	0x20000458
 8001be4:	2000048c 	.word	0x2000048c
 8001be8:	2000047c 	.word	0x2000047c
 8001bec:	2000047e 	.word	0x2000047e
 8001bf0:	20000482 	.word	0x20000482
 8001bf4:	20000480 	.word	0x20000480
 8001bf8:	20000484 	.word	0x20000484
 8001bfc:	20000486 	.word	0x20000486
 8001c00:	2000021c 	.word	0x2000021c

08001c04 <degree_change_percentage>:

uint16_t degree_change_percentage(uint16_t In, uint16_t Inmin, uint16_t Inmax, uint16_t Outmin, uint16_t Outmax)
{
 8001c04:	b490      	push	{r4, r7}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4623      	mov	r3, r4
 8001c14:	80fb      	strh	r3, [r7, #6]
 8001c16:	4603      	mov	r3, r0
 8001c18:	80bb      	strh	r3, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	807b      	strh	r3, [r7, #2]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	803b      	strh	r3, [r7, #0]
	return (In- Inmin) * (Outmax- Outmin) / (Inmax -Inmin) + Outmin;
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	88bb      	ldrh	r3, [r7, #4]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	8a39      	ldrh	r1, [r7, #16]
 8001c2a:	883a      	ldrh	r2, [r7, #0]
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	fb03 f202 	mul.w	r2, r3, r2
 8001c32:	8879      	ldrh	r1, [r7, #2]
 8001c34:	88bb      	ldrh	r3, [r7, #4]
 8001c36:	1acb      	subs	r3, r1, r3
 8001c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	883b      	ldrh	r3, [r7, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	b29b      	uxth	r3, r3
	//End
};
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc90      	pop	{r4, r7}
 8001c4c:	4770      	bx	lr
	...

08001c50 <tim_start>:

void tim_start(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001c54:	2100      	movs	r1, #0
 8001c56:	4808      	ldr	r0, [pc, #32]	@ (8001c78 <tim_start+0x28>)
 8001c58:	f002 fe54 	bl	8004904 <HAL_TIM_IC_Start_IT>
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	4806      	ldr	r0, [pc, #24]	@ (8001c78 <tim_start+0x28>)
 8001c60:	f002 fe50 	bl	8004904 <HAL_TIM_IC_Start_IT>
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001c64:	2108      	movs	r1, #8
 8001c66:	4804      	ldr	r0, [pc, #16]	@ (8001c78 <tim_start+0x28>)
 8001c68:	f002 fe4c 	bl	8004904 <HAL_TIM_IC_Start_IT>
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8001c6c:	210c      	movs	r1, #12
 8001c6e:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <tim_start+0x28>)
 8001c70:	f002 fe48 	bl	8004904 <HAL_TIM_IC_Start_IT>
	   // End
};
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000294 	.word	0x20000294

08001c7c <stabilize_motor_output>:

void stabilize_motor_output(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,stabilize_mode.motor_speed[0]);
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <stabilize_motor_output+0x38>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <stabilize_motor_output+0x3c>)
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,stabilize_mode.motor_speed[1]);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <stabilize_motor_output+0x38>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <stabilize_motor_output+0x3c>)
 8001c90:	6852      	ldr	r2, [r2, #4]
 8001c92:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,stabilize_mode.motor_speed[2]);
 8001c94:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <stabilize_motor_output+0x38>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	@ (8001cb8 <stabilize_motor_output+0x3c>)
 8001c9a:	6892      	ldr	r2, [r2, #8]
 8001c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,stabilize_mode.motor_speed[3]);
 8001c9e:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <stabilize_motor_output+0x38>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <stabilize_motor_output+0x3c>)
 8001ca4:	68d2      	ldr	r2, [r2, #12]
 8001ca6:	641a      	str	r2, [r3, #64]	@ 0x40
	// End
};
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	200002dc 	.word	0x200002dc
 8001cb8:	2000022c 	.word	0x2000022c
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <acces_measure>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,loiter_mode.motor_speed[3]);
	// End
};

void acces_measure(void)
{
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	af00      	add	r7, sp, #0
	if(drdyFlag == 1)
 8001cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e38 <acces_measure+0x178>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d173      	bne.n	8001db6 <acces_measure+0xf6>
	{

		drdyFlag = 0;
 8001cce:	4b5a      	ldr	r3, [pc, #360]	@ (8001e38 <acces_measure+0x178>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
		X = LIS3DSH_GetDataScaled();
 8001cd4:	f004 fb92 	bl	80063fc <LIS3DSH_GetDataScaled>
 8001cd8:	eeb0 7a40 	vmov.f32	s14, s0
 8001cdc:	eef0 7a60 	vmov.f32	s15, s1
 8001ce0:	4b56      	ldr	r3, [pc, #344]	@ (8001e3c <acces_measure+0x17c>)
 8001ce2:	ed83 7b00 	vstr	d7, [r3]
		Y = LIS3DSH_GetDataScaledY();
 8001ce6:	f004 fbc5 	bl	8006474 <LIS3DSH_GetDataScaledY>
 8001cea:	eeb0 7a40 	vmov.f32	s14, s0
 8001cee:	eef0 7a60 	vmov.f32	s15, s1
 8001cf2:	4b53      	ldr	r3, [pc, #332]	@ (8001e40 <acces_measure+0x180>)
 8001cf4:	ed83 7b00 	vstr	d7, [r3]
		Z = LIS3DSH_GetDataScaledZ();
 8001cf8:	f004 fbf8 	bl	80064ec <LIS3DSH_GetDataScaledZ>
 8001cfc:	eeb0 7a40 	vmov.f32	s14, s0
 8001d00:	eef0 7a60 	vmov.f32	s15, s1
 8001d04:	4b4f      	ldr	r3, [pc, #316]	@ (8001e44 <acces_measure+0x184>)
 8001d06:	ed83 7b00 	vstr	d7, [r3]

		measured_roll = (int)((((atan2((double)(-X.x) , sqrt((double)Y.y *(double) Y.y +(double) Z.z *(double) Z.z)) * 57.3)+1.5))* -1);
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e3c <acces_measure+0x17c>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	4692      	mov	sl, r2
 8001d12:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001d16:	4b4a      	ldr	r3, [pc, #296]	@ (8001e40 <acces_measure+0x180>)
 8001d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d1c:	4b48      	ldr	r3, [pc, #288]	@ (8001e40 <acces_measure+0x180>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc69 	bl	80005f8 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	4b45      	ldr	r3, [pc, #276]	@ (8001e44 <acces_measure+0x184>)
 8001d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d34:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <acces_measure+0x184>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc5d 	bl	80005f8 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4640      	mov	r0, r8
 8001d44:	4649      	mov	r1, r9
 8001d46:	f7fe faa1 	bl	800028c <__adddf3>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	ec43 2b17 	vmov	d7, r2, r3
 8001d52:	eeb0 0a47 	vmov.f32	s0, s14
 8001d56:	eef0 0a67 	vmov.f32	s1, s15
 8001d5a:	f008 fff9 	bl	800ad50 <sqrt>
 8001d5e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d62:	eef0 7a60 	vmov.f32	s15, s1
 8001d66:	eeb0 1a47 	vmov.f32	s2, s14
 8001d6a:	eef0 1a67 	vmov.f32	s3, s15
 8001d6e:	ec4b ab10 	vmov	d0, sl, fp
 8001d72:	f008 ffeb 	bl	800ad4c <atan2>
 8001d76:	ec51 0b10 	vmov	r0, r1, d0
 8001d7a:	a32b      	add	r3, pc, #172	@ (adr r3, 8001e28 <acces_measure+0x168>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc3a 	bl	80005f8 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <acces_measure+0x188>)
 8001d92:	f7fe fa7b 	bl	800028c <__adddf3>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7fe fed8 	bl	8000b58 <__aeabi_d2iz>
 8001da8:	ee07 0a90 	vmov	s15, r0
 8001dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db0:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <acces_measure+0x18c>)
 8001db2:	edc3 7a00 	vstr	s15, [r3]
	}
		measured_pitch =(int)((atan2(Y.y, Z.z) * 180 / 3.14)+1.2);
 8001db6:	4b22      	ldr	r3, [pc, #136]	@ (8001e40 <acces_measure+0x180>)
 8001db8:	ed93 7b00 	vldr	d7, [r3]
 8001dbc:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <acces_measure+0x184>)
 8001dbe:	ed93 6b00 	vldr	d6, [r3]
 8001dc2:	eeb0 1a46 	vmov.f32	s2, s12
 8001dc6:	eef0 1a66 	vmov.f32	s3, s13
 8001dca:	eeb0 0a47 	vmov.f32	s0, s14
 8001dce:	eef0 0a67 	vmov.f32	s1, s15
 8001dd2:	f008 ffbb 	bl	800ad4c <atan2>
 8001dd6:	ec51 0b10 	vmov	r0, r1, d0
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <acces_measure+0x190>)
 8001de0:	f7fe fc0a 	bl	80005f8 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	a310      	add	r3, pc, #64	@ (adr r3, 8001e30 <acces_measure+0x170>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fd2b 	bl	800084c <__aeabi_ddiv>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <acces_measure+0x194>)
 8001e04:	f7fe fa42 	bl	800028c <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fea2 	bl	8000b58 <__aeabi_d2iz>
 8001e14:	ee07 0a90 	vmov	s15, r0
 8001e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <acces_measure+0x198>)
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
}
 8001e22:	bf00      	nop
 8001e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e28:	66666666 	.word	0x66666666
 8001e2c:	404ca666 	.word	0x404ca666
 8001e30:	51eb851f 	.word	0x51eb851f
 8001e34:	40091eb8 	.word	0x40091eb8
 8001e38:	20000478 	.word	0x20000478
 8001e3c:	20000460 	.word	0x20000460
 8001e40:	20000468 	.word	0x20000468
 8001e44:	20000470 	.word	0x20000470
 8001e48:	3ff80000 	.word	0x3ff80000
 8001e4c:	20000454 	.word	0x20000454
 8001e50:	40668000 	.word	0x40668000
 8001e54:	3ff33333 	.word	0x3ff33333
 8001e58:	20000458 	.word	0x20000458

08001e5c <receiver_motor_value>:



void receiver_motor_value(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af02      	add	r7, sp, #8
	roll_right = degree_change_percentage(rec_roll, 500, 1000, 0, 500);
 8001e62:	4b4b      	ldr	r3, [pc, #300]	@ (8001f90 <receiver_motor_value+0x134>)
 8001e64:	8818      	ldrh	r0, [r3, #0]
 8001e66:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e72:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e76:	f7ff fec5 	bl	8001c04 <degree_change_percentage>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b45      	ldr	r3, [pc, #276]	@ (8001f94 <receiver_motor_value+0x138>)
 8001e80:	801a      	strh	r2, [r3, #0]
	if(roll_right >=1050) roll_right = 0;
 8001e82:	4b44      	ldr	r3, [pc, #272]	@ (8001f94 <receiver_motor_value+0x138>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	f240 4219 	movw	r2, #1049	@ 0x419
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d902      	bls.n	8001e94 <receiver_motor_value+0x38>
 8001e8e:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <receiver_motor_value+0x138>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	801a      	strh	r2, [r3, #0]
	roll_left = degree_change_percentage(rec_roll, 0, 500, 500, 0);
 8001e94:	4b3e      	ldr	r3, [pc, #248]	@ (8001f90 <receiver_motor_value+0x134>)
 8001e96:	8818      	ldrh	r0, [r3, #0]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ea0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f7ff fead 	bl	8001c04 <degree_change_percentage>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b3a      	ldr	r3, [pc, #232]	@ (8001f98 <receiver_motor_value+0x13c>)
 8001eb0:	801a      	strh	r2, [r3, #0]
	if(roll_left >=1050) roll_left = 0;
 8001eb2:	4b39      	ldr	r3, [pc, #228]	@ (8001f98 <receiver_motor_value+0x13c>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f240 4219 	movw	r2, #1049	@ 0x419
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d902      	bls.n	8001ec4 <receiver_motor_value+0x68>
 8001ebe:	4b36      	ldr	r3, [pc, #216]	@ (8001f98 <receiver_motor_value+0x13c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	801a      	strh	r2, [r3, #0]
	yaw_right = degree_change_percentage(rec_yaw, 500, 1000, 0, 500);
 8001ec4:	4b35      	ldr	r3, [pc, #212]	@ (8001f9c <receiver_motor_value+0x140>)
 8001ec6:	8818      	ldrh	r0, [r3, #0]
 8001ec8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ed4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001ed8:	f7ff fe94 	bl	8001c04 <degree_change_percentage>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <receiver_motor_value+0x144>)
 8001ee2:	801a      	strh	r2, [r3, #0]
	if(yaw_right >= 1050) yaw_right = 0;
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <receiver_motor_value+0x144>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	f240 4219 	movw	r2, #1049	@ 0x419
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d902      	bls.n	8001ef6 <receiver_motor_value+0x9a>
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa0 <receiver_motor_value+0x144>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	801a      	strh	r2, [r3, #0]
	yaw_left = degree_change_percentage(rec_yaw, 0, 500, 500, 0);
 8001ef6:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <receiver_motor_value+0x140>)
 8001ef8:	8818      	ldrh	r0, [r3, #0]
 8001efa:	2300      	movs	r3, #0
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f06:	2100      	movs	r1, #0
 8001f08:	f7ff fe7c 	bl	8001c04 <degree_change_percentage>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <receiver_motor_value+0x148>)
 8001f12:	801a      	strh	r2, [r3, #0]
	if(yaw_left >= 1050) yaw_left = 0;
 8001f14:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <receiver_motor_value+0x148>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	f240 4219 	movw	r2, #1049	@ 0x419
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d902      	bls.n	8001f26 <receiver_motor_value+0xca>
 8001f20:	4b20      	ldr	r3, [pc, #128]	@ (8001fa4 <receiver_motor_value+0x148>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	801a      	strh	r2, [r3, #0]
	pitch_forward = degree_change_percentage(rec_pitch,0 , 500, 500, 0);
 8001f26:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <receiver_motor_value+0x14c>)
 8001f28:	8818      	ldrh	r0, [r3, #0]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f32:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f36:	2100      	movs	r1, #0
 8001f38:	f7ff fe64 	bl	8001c04 <degree_change_percentage>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <receiver_motor_value+0x150>)
 8001f42:	801a      	strh	r2, [r3, #0]
	if(pitch_forward >= 1050) pitch_forward = 0;
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <receiver_motor_value+0x150>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	f240 4219 	movw	r2, #1049	@ 0x419
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d902      	bls.n	8001f56 <receiver_motor_value+0xfa>
 8001f50:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <receiver_motor_value+0x150>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	801a      	strh	r2, [r3, #0]
	pitch_back = degree_change_percentage(rec_pitch,500 , 1000, 0, 500);
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <receiver_motor_value+0x14c>)
 8001f58:	8818      	ldrh	r0, [r3, #0]
 8001f5a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2300      	movs	r3, #0
 8001f62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f66:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001f6a:	f7ff fe4b 	bl	8001c04 <degree_change_percentage>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <receiver_motor_value+0x154>)
 8001f74:	801a      	strh	r2, [r3, #0]
	if(pitch_back >= 1050) pitch_back = 0;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <receiver_motor_value+0x154>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	f240 4219 	movw	r2, #1049	@ 0x419
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d902      	bls.n	8001f88 <receiver_motor_value+0x12c>
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <receiver_motor_value+0x154>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	801a      	strh	r2, [r3, #0]
	// End
};
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000047a 	.word	0x2000047a
 8001f94:	2000047c 	.word	0x2000047c
 8001f98:	2000047e 	.word	0x2000047e
 8001f9c:	2000048a 	.word	0x2000048a
 8001fa0:	20000484 	.word	0x20000484
 8001fa4:	20000486 	.word	0x20000486
 8001fa8:	20000488 	.word	0x20000488
 8001fac:	20000480 	.word	0x20000480
 8001fb0:	20000482 	.word	0x20000482

08001fb4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a94      	ldr	r2, [pc, #592]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	f040 8121 	bne.w	800220a <HAL_TIM_IC_CaptureCallback+0x256>
	{
		switch(htim->Channel)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7f1b      	ldrb	r3, [r3, #28]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	2b07      	cmp	r3, #7
 8001fd0:	f200 811a 	bhi.w	8002208 <HAL_TIM_IC_CaptureCallback+0x254>
 8001fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <HAL_TIM_IC_CaptureCallback+0x28>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001ffd 	.word	0x08001ffd
 8001fe0:	0800207d 	.word	0x0800207d
 8001fe4:	08002209 	.word	0x08002209
 8001fe8:	08002101 	.word	0x08002101
 8001fec:	08002209 	.word	0x08002209
 8001ff0:	08002209 	.word	0x08002209
 8001ff4:	08002209 	.word	0x08002209
 8001ff8:	08002185 	.word	0x08002185
		{
		case HAL_TIM_ACTIVE_CHANNEL_1:
			if((TIM1->CCER & TIM_CCER_CC1P)==0)
 8001ffc:	4b85      	ldr	r3, [pc, #532]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <HAL_TIM_IC_CaptureCallback+0x6a>
			{
				ch1_rising = TIM1->CCR1;
 8002008:	4b82      	ldr	r3, [pc, #520]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 800200a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200c:	4a82      	ldr	r2, [pc, #520]	@ (8002218 <HAL_TIM_IC_CaptureCallback+0x264>)
 800200e:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC1P;
 8002010:	4b80      	ldr	r3, [pc, #512]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a7f      	ldr	r2, [pc, #508]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	6213      	str	r3, [r2, #32]
				 * ch1 falling 570
				 * pre_ch1 = pre_ch1 falling - pre_ch1_rising = 570 - 65000 = -64430
				 * pre_ch1 +=0xFFFF(65536) --> 1106
				 */
			}
			break;
 800201c:	e0f5      	b.n	800220a <HAL_TIM_IC_CaptureCallback+0x256>
				ch1_falling = TIM1->CCR1;
 800201e:	4b7d      	ldr	r3, [pc, #500]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002022:	4a7e      	ldr	r2, [pc, #504]	@ (800221c <HAL_TIM_IC_CaptureCallback+0x268>)
 8002024:	6013      	str	r3, [r2, #0]
				pre_ch1 = ch1_falling - ch1_rising;
 8002026:	4b7d      	ldr	r3, [pc, #500]	@ (800221c <HAL_TIM_IC_CaptureCallback+0x268>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b7b      	ldr	r3, [pc, #492]	@ (8002218 <HAL_TIM_IC_CaptureCallback+0x264>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	4a7b      	ldr	r2, [pc, #492]	@ (8002220 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002032:	6013      	str	r3, [r2, #0]
				pre_ch1 = degree_change_percentage(pre_ch1, 2140, 3862, 0,1000);
 8002034:	4b7a      	ldr	r3, [pc, #488]	@ (8002220 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	b298      	uxth	r0, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2300      	movs	r3, #0
 8002042:	f640 7216 	movw	r2, #3862	@ 0xf16
 8002046:	f640 015c 	movw	r1, #2140	@ 0x85c
 800204a:	f7ff fddb 	bl	8001c04 <degree_change_percentage>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b73      	ldr	r3, [pc, #460]	@ (8002220 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002054:	601a      	str	r2, [r3, #0]
				if(pre_ch1 <= 1000 && pre_ch1 >= 0)rec_roll=pre_ch1;
 8002056:	4b72      	ldr	r3, [pc, #456]	@ (8002220 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800205e:	d806      	bhi.n	800206e <HAL_TIM_IC_CaptureCallback+0xba>
 8002060:	4b6f      	ldr	r3, [pc, #444]	@ (8002220 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4b6e      	ldr	r3, [pc, #440]	@ (8002220 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29a      	uxth	r2, r3
 800206a:	4b6e      	ldr	r3, [pc, #440]	@ (8002224 <HAL_TIM_IC_CaptureCallback+0x270>)
 800206c:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC1P;
 800206e:	4b69      	ldr	r3, [pc, #420]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a68      	ldr	r2, [pc, #416]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002074:	f023 0302 	bic.w	r3, r3, #2
 8002078:	6213      	str	r3, [r2, #32]
			break;
 800207a:	e0c6      	b.n	800220a <HAL_TIM_IC_CaptureCallback+0x256>
		case HAL_TIM_ACTIVE_CHANNEL_2:
			if((TIM1->CCER & TIM_CCER_CC2P)==0)
 800207c:	4b65      	ldr	r3, [pc, #404]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <HAL_TIM_IC_CaptureCallback+0xea>
			{
				ch2_rising = TIM1->CCR2;
 8002088:	4b62      	ldr	r3, [pc, #392]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 800208a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208c:	4a66      	ldr	r2, [pc, #408]	@ (8002228 <HAL_TIM_IC_CaptureCallback+0x274>)
 800208e:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC2P;
 8002090:	4b60      	ldr	r3, [pc, #384]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a5f      	ldr	r2, [pc, #380]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002096:	f043 0320 	orr.w	r3, r3, #32
 800209a:	6213      	str	r3, [r2, #32]
				if(pre_ch2 < 0)pre_ch2 += 0xFFFF;
				pre_ch2 = degree_change_percentage(pre_ch2, 2140, 3862, 0, 1000);
				if(pre_ch2 <= 1000 && pre_ch2 >= 0)rec_pitch=pre_ch2;
				TIM1->CCER &= ~TIM_CCER_CC2P;
			}
			break;
 800209c:	e0b5      	b.n	800220a <HAL_TIM_IC_CaptureCallback+0x256>
				ch2_falling = TIM1->CCR2;
 800209e:	4b5d      	ldr	r3, [pc, #372]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 80020a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a2:	4a62      	ldr	r2, [pc, #392]	@ (800222c <HAL_TIM_IC_CaptureCallback+0x278>)
 80020a4:	6013      	str	r3, [r2, #0]
				pre_ch2 = ch2_falling - ch2_rising;
 80020a6:	4b61      	ldr	r3, [pc, #388]	@ (800222c <HAL_TIM_IC_CaptureCallback+0x278>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <HAL_TIM_IC_CaptureCallback+0x274>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002230 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80020b2:	6013      	str	r3, [r2, #0]
				if(pre_ch2 < 0)pre_ch2 += 0xFFFF;
 80020b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002230 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
				pre_ch2 = degree_change_percentage(pre_ch2, 2140, 3862, 0, 1000);
 80020b8:	4b5d      	ldr	r3, [pc, #372]	@ (8002230 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b298      	uxth	r0, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2300      	movs	r3, #0
 80020c6:	f640 7216 	movw	r2, #3862	@ 0xf16
 80020ca:	f640 015c 	movw	r1, #2140	@ 0x85c
 80020ce:	f7ff fd99 	bl	8001c04 <degree_change_percentage>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b56      	ldr	r3, [pc, #344]	@ (8002230 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80020d8:	601a      	str	r2, [r3, #0]
				if(pre_ch2 <= 1000 && pre_ch2 >= 0)rec_pitch=pre_ch2;
 80020da:	4b55      	ldr	r3, [pc, #340]	@ (8002230 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020e2:	d806      	bhi.n	80020f2 <HAL_TIM_IC_CaptureCallback+0x13e>
 80020e4:	4b52      	ldr	r3, [pc, #328]	@ (8002230 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4b51      	ldr	r3, [pc, #324]	@ (8002230 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4b51      	ldr	r3, [pc, #324]	@ (8002234 <HAL_TIM_IC_CaptureCallback+0x280>)
 80020f0:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC2P;
 80020f2:	4b48      	ldr	r3, [pc, #288]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a47      	ldr	r2, [pc, #284]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 80020f8:	f023 0320 	bic.w	r3, r3, #32
 80020fc:	6213      	str	r3, [r2, #32]
			break;
 80020fe:	e084      	b.n	800220a <HAL_TIM_IC_CaptureCallback+0x256>
		case HAL_TIM_ACTIVE_CHANNEL_3:
			if((TIM1->CCER & TIM_CCER_CC3P)==0)
 8002100:	4b44      	ldr	r3, [pc, #272]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <HAL_TIM_IC_CaptureCallback+0x16e>
			{
				ch3_rising = TIM1->CCR3;
 800210c:	4b41      	ldr	r3, [pc, #260]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 800210e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002110:	4a49      	ldr	r2, [pc, #292]	@ (8002238 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002112:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC3P;
 8002114:	4b3f      	ldr	r3, [pc, #252]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a3e      	ldr	r2, [pc, #248]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211e:	6213      	str	r3, [r2, #32]
				if(pre_ch3 < 0)pre_ch3 += 0xFFFF;
				pre_ch3 = degree_change_percentage(pre_ch3, 2140, 3862, 0, 1000);
				if(pre_ch3 <= 1000 && pre_ch3 >= 0)rec_throttle=pre_ch3;
				TIM1->CCER &= ~TIM_CCER_CC3P;
			}
			break;
 8002120:	e073      	b.n	800220a <HAL_TIM_IC_CaptureCallback+0x256>
				ch3_falling = TIM1->CCR3;
 8002122:	4b3c      	ldr	r3, [pc, #240]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002126:	4a45      	ldr	r2, [pc, #276]	@ (800223c <HAL_TIM_IC_CaptureCallback+0x288>)
 8002128:	6013      	str	r3, [r2, #0]
				pre_ch3 = ch3_falling - ch3_rising;
 800212a:	4b44      	ldr	r3, [pc, #272]	@ (800223c <HAL_TIM_IC_CaptureCallback+0x288>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b42      	ldr	r3, [pc, #264]	@ (8002238 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	4a42      	ldr	r2, [pc, #264]	@ (8002240 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002136:	6013      	str	r3, [r2, #0]
				if(pre_ch3 < 0)pre_ch3 += 0xFFFF;
 8002138:	4b41      	ldr	r3, [pc, #260]	@ (8002240 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800213a:	681b      	ldr	r3, [r3, #0]
				pre_ch3 = degree_change_percentage(pre_ch3, 2140, 3862, 0, 1000);
 800213c:	4b40      	ldr	r3, [pc, #256]	@ (8002240 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b298      	uxth	r0, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2300      	movs	r3, #0
 800214a:	f640 7216 	movw	r2, #3862	@ 0xf16
 800214e:	f640 015c 	movw	r1, #2140	@ 0x85c
 8002152:	f7ff fd57 	bl	8001c04 <degree_change_percentage>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	4b39      	ldr	r3, [pc, #228]	@ (8002240 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800215c:	601a      	str	r2, [r3, #0]
				if(pre_ch3 <= 1000 && pre_ch3 >= 0)rec_throttle=pre_ch3;
 800215e:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002166:	d806      	bhi.n	8002176 <HAL_TIM_IC_CaptureCallback+0x1c2>
 8002168:	4b35      	ldr	r3, [pc, #212]	@ (8002240 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4b34      	ldr	r3, [pc, #208]	@ (8002240 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b34      	ldr	r3, [pc, #208]	@ (8002244 <HAL_TIM_IC_CaptureCallback+0x290>)
 8002174:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC3P;
 8002176:	4b27      	ldr	r3, [pc, #156]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a26      	ldr	r2, [pc, #152]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 800217c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002180:	6213      	str	r3, [r2, #32]
			break;
 8002182:	e042      	b.n	800220a <HAL_TIM_IC_CaptureCallback+0x256>
		case HAL_TIM_ACTIVE_CHANNEL_4:
			if((TIM1->CCER & TIM_CCER_CC4P)==0)
 8002184:	4b23      	ldr	r3, [pc, #140]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <HAL_TIM_IC_CaptureCallback+0x1f2>
			{
				ch4_rising = TIM1->CCR4;
 8002190:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	4a2c      	ldr	r2, [pc, #176]	@ (8002248 <HAL_TIM_IC_CaptureCallback+0x294>)
 8002196:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC4P;
 8002198:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 800219e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021a2:	6213      	str	r3, [r2, #32]
				if(pre_ch4 < 0)pre_ch4 += 0xFFFF;
				pre_ch4 = degree_change_percentage(pre_ch4, 2140, 3862, 0, 1000);
				if(pre_ch4 <= 1000 && pre_ch4 >= 0)rec_yaw=pre_ch4;
				TIM1->CCER &= ~TIM_CCER_CC4P;
			}
			break;
 80021a4:	e031      	b.n	800220a <HAL_TIM_IC_CaptureCallback+0x256>
				ch4_falling = TIM1->CCR4;
 80021a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	4a28      	ldr	r2, [pc, #160]	@ (800224c <HAL_TIM_IC_CaptureCallback+0x298>)
 80021ac:	6013      	str	r3, [r2, #0]
				pre_ch4 = ch4_falling - ch4_rising;
 80021ae:	4b27      	ldr	r3, [pc, #156]	@ (800224c <HAL_TIM_IC_CaptureCallback+0x298>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <HAL_TIM_IC_CaptureCallback+0x294>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	4a25      	ldr	r2, [pc, #148]	@ (8002250 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80021ba:	6013      	str	r3, [r2, #0]
				if(pre_ch4 < 0)pre_ch4 += 0xFFFF;
 80021bc:	4b24      	ldr	r3, [pc, #144]	@ (8002250 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80021be:	681b      	ldr	r3, [r3, #0]
				pre_ch4 = degree_change_percentage(pre_ch4, 2140, 3862, 0, 1000);
 80021c0:	4b23      	ldr	r3, [pc, #140]	@ (8002250 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b298      	uxth	r0, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2300      	movs	r3, #0
 80021ce:	f640 7216 	movw	r2, #3862	@ 0xf16
 80021d2:	f640 015c 	movw	r1, #2140	@ 0x85c
 80021d6:	f7ff fd15 	bl	8001c04 <degree_change_percentage>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80021e0:	601a      	str	r2, [r3, #0]
				if(pre_ch4 <= 1000 && pre_ch4 >= 0)rec_yaw=pre_ch4;
 80021e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021ea:	d806      	bhi.n	80021fa <HAL_TIM_IC_CaptureCallback+0x246>
 80021ec:	4b18      	ldr	r3, [pc, #96]	@ (8002250 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 80021f8:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC4P;
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002200:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002204:	6213      	str	r3, [r2, #32]
			break;
 8002206:	e000      	b.n	800220a <HAL_TIM_IC_CaptureCallback+0x256>
		default:
			break;
 8002208:	bf00      	nop
	}

	if(htim->Instance == TIM1) {

	}
};
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000
 8002218:	20000404 	.word	0x20000404
 800221c:	20000414 	.word	0x20000414
 8002220:	20000424 	.word	0x20000424
 8002224:	2000047a 	.word	0x2000047a
 8002228:	20000408 	.word	0x20000408
 800222c:	20000418 	.word	0x20000418
 8002230:	20000428 	.word	0x20000428
 8002234:	20000488 	.word	0x20000488
 8002238:	2000040c 	.word	0x2000040c
 800223c:	2000041c 	.word	0x2000041c
 8002240:	2000042c 	.word	0x2000042c
 8002244:	2000048c 	.word	0x2000048c
 8002248:	20000410 	.word	0x20000410
 800224c:	20000420 	.word	0x20000420
 8002250:	20000430 	.word	0x20000430
 8002254:	2000048a 	.word	0x2000048a

08002258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <Error_Handler+0x4>

08002260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <HAL_MspInit+0x4c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	4a0f      	ldr	r2, [pc, #60]	@ (80022ac <HAL_MspInit+0x4c>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002274:	6453      	str	r3, [r2, #68]	@ 0x44
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <HAL_MspInit+0x4c>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_MspInit+0x4c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <HAL_MspInit+0x4c>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	@ 0x40
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_MspInit+0x4c>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800229e:	2007      	movs	r0, #7
 80022a0:	f000 fc6e 	bl	8002b80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800

080022b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	@ (8002334 <HAL_SPI_MspInit+0x84>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12b      	bne.n	800232a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	4a17      	ldr	r2, [pc, #92]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <HAL_SPI_MspInit+0x88>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800230a:	23e0      	movs	r3, #224	@ 0xe0
 800230c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800231a:	2305      	movs	r3, #5
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	4805      	ldr	r0, [pc, #20]	@ (800233c <HAL_SPI_MspInit+0x8c>)
 8002326:	f000 fc6d 	bl	8002c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	@ 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40013000 	.word	0x40013000
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000

08002340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	@ 0x30
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a3a      	ldr	r2, [pc, #232]	@ (8002448 <HAL_TIM_Base_MspInit+0x108>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d135      	bne.n	80023ce <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	4b39      	ldr	r3, [pc, #228]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	4a38      	ldr	r2, [pc, #224]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6453      	str	r3, [r2, #68]	@ 0x44
 8002372:	4b36      	ldr	r3, [pc, #216]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	4b32      	ldr	r3, [pc, #200]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	4a31      	ldr	r2, [pc, #196]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 8002388:	f043 0310 	orr.w	r3, r3, #16
 800238c:	6313      	str	r3, [r2, #48]	@ 0x30
 800238e:	4b2f      	ldr	r3, [pc, #188]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = AILERON_Pin|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800239a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	4619      	mov	r1, r3
 80023b6:	4826      	ldr	r0, [pc, #152]	@ (8002450 <HAL_TIM_Base_MspInit+0x110>)
 80023b8:	f000 fc24 	bl	8002c04 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	201b      	movs	r0, #27
 80023c2:	f000 fbe8 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023c6:	201b      	movs	r0, #27
 80023c8:	f000 fc01 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023cc:	e038      	b.n	8002440 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a20      	ldr	r2, [pc, #128]	@ (8002454 <HAL_TIM_Base_MspInit+0x114>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d133      	bne.n	8002440 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	4a1a      	ldr	r2, [pc, #104]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e8:	4b18      	ldr	r3, [pc, #96]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	4b14      	ldr	r3, [pc, #80]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	4a13      	ldr	r2, [pc, #76]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6313      	str	r3, [r2, #48]	@ 0x30
 8002404:	4b11      	ldr	r3, [pc, #68]	@ (800244c <HAL_TIM_Base_MspInit+0x10c>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002410:	2340      	movs	r3, #64	@ 0x40
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002420:	2302      	movs	r3, #2
 8002422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4619      	mov	r1, r3
 800242a:	480b      	ldr	r0, [pc, #44]	@ (8002458 <HAL_TIM_Base_MspInit+0x118>)
 800242c:	f000 fbea 	bl	8002c04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2100      	movs	r1, #0
 8002434:	201d      	movs	r0, #29
 8002436:	f000 fbae 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800243a:	201d      	movs	r0, #29
 800243c:	f000 fbc7 	bl	8002bce <HAL_NVIC_EnableIRQ>
}
 8002440:	bf00      	nop
 8002442:	3730      	adds	r7, #48	@ 0x30
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40010000 	.word	0x40010000
 800244c:	40023800 	.word	0x40023800
 8002450:	40021000 	.word	0x40021000
 8002454:	40000400 	.word	0x40000400
 8002458:	40020800 	.word	0x40020800

0800245c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246c:	d10d      	bne.n	800248a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <HAL_TIM_PWM_MspInit+0x3c>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_TIM_PWM_MspInit+0x3c>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6413      	str	r3, [r2, #64]	@ 0x40
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_TIM_PWM_MspInit+0x3c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024bc:	d11d      	bne.n	80024fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <HAL_TIM_MspPostInit+0x68>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002504 <HAL_TIM_MspPostInit+0x68>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <HAL_TIM_MspPostInit+0x68>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin|MOTOR_3_Pin|MOTOR_4_Pin;
 80024da:	230f      	movs	r3, #15
 80024dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	4804      	ldr	r0, [pc, #16]	@ (8002508 <HAL_TIM_MspPostInit+0x6c>)
 80024f6:	f000 fb85 	bl	8002c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40020000 	.word	0x40020000

0800250c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	@ 0x30
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a33      	ldr	r2, [pc, #204]	@ (80025f8 <HAL_UART_MspInit+0xec>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d12d      	bne.n	800258a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	4b32      	ldr	r3, [pc, #200]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	4a31      	ldr	r2, [pc, #196]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 8002538:	f043 0310 	orr.w	r3, r3, #16
 800253c:	6453      	str	r3, [r2, #68]	@ 0x44
 800253e:	4b2f      	ldr	r3, [pc, #188]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	4b2b      	ldr	r3, [pc, #172]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a2a      	ldr	r2, [pc, #168]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002566:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002578:	2307      	movs	r3, #7
 800257a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4619      	mov	r1, r3
 8002582:	481f      	ldr	r0, [pc, #124]	@ (8002600 <HAL_UART_MspInit+0xf4>)
 8002584:	f000 fb3e 	bl	8002c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002588:	e031      	b.n	80025ee <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	@ (8002604 <HAL_UART_MspInit+0xf8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d12c      	bne.n	80025ee <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	4a17      	ldr	r2, [pc, #92]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 800259e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a4:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	4a10      	ldr	r2, [pc, #64]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c0:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <HAL_UART_MspInit+0xf0>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025de:	2307      	movs	r3, #7
 80025e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	4619      	mov	r1, r3
 80025e8:	4807      	ldr	r0, [pc, #28]	@ (8002608 <HAL_UART_MspInit+0xfc>)
 80025ea:	f000 fb0b 	bl	8002c04 <HAL_GPIO_Init>
}
 80025ee:	bf00      	nop
 80025f0:	3730      	adds	r7, #48	@ 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40011000 	.word	0x40011000
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020000 	.word	0x40020000
 8002604:	40004800 	.word	0x40004800
 8002608:	40020400 	.word	0x40020400

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <NMI_Handler+0x4>

08002614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <MemManage_Handler+0x4>

08002624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <BusFault_Handler+0x4>

0800262c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <UsageFault_Handler+0x4>

08002634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002662:	f000 f979 	bl	8002958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}

0800266a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800266e:	2001      	movs	r0, #1
 8002670:	f000 fc98 	bl	8002fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}

08002678 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800267c:	4802      	ldr	r0, [pc, #8]	@ (8002688 <TIM1_CC_IRQHandler+0x10>)
 800267e:	f002 fa69 	bl	8004b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000294 	.word	0x20000294

0800268c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002690:	4802      	ldr	r0, [pc, #8]	@ (800269c <TIM3_IRQHandler+0x10>)
 8002692:	f002 fa5f 	bl	8004b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000324 	.word	0x20000324

080026a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80026a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026a8:	f000 fc7c 	bl	8002fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return 1;
 80026b4:	2301      	movs	r3, #1
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_kill>:

int _kill(int pid, int sig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ca:	f004 ffb9 	bl	8007640 <__errno>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2216      	movs	r2, #22
 80026d2:	601a      	str	r2, [r3, #0]
  return -1;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_exit>:

void _exit (int status)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ffe7 	bl	80026c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026f2:	bf00      	nop
 80026f4:	e7fd      	b.n	80026f2 <_exit+0x12>

080026f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e00a      	b.n	800271e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002708:	f3af 8000 	nop.w
 800270c:	4601      	mov	r1, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	b2ca      	uxtb	r2, r1
 8002716:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	dbf0      	blt.n	8002708 <_read+0x12>
  }

  return len;
 8002726:	687b      	ldr	r3, [r7, #4]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	e009      	b.n	8002756 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	60ba      	str	r2, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	429a      	cmp	r2, r3
 800275c:	dbf1      	blt.n	8002742 <_write+0x12>
  }
  return len;
 800275e:	687b      	ldr	r3, [r7, #4]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_close>:

int _close(int file)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002790:	605a      	str	r2, [r3, #4]
  return 0;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_isatty>:

int _isatty(int file)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027a8:	2301      	movs	r3, #1
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d8:	4a14      	ldr	r2, [pc, #80]	@ (800282c <_sbrk+0x5c>)
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <_sbrk+0x60>)
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027ec:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <_sbrk+0x64>)
 80027ee:	4a12      	ldr	r2, [pc, #72]	@ (8002838 <_sbrk+0x68>)
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d207      	bcs.n	8002810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002800:	f004 ff1e 	bl	8007640 <__errno>
 8002804:	4603      	mov	r3, r0
 8002806:	220c      	movs	r2, #12
 8002808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	e009      	b.n	8002824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002810:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002816:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <_sbrk+0x64>)
 8002820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20020000 	.word	0x20020000
 8002830:	00000400 	.word	0x00000400
 8002834:	20000490 	.word	0x20000490
 8002838:	20000648 	.word	0x20000648

0800283c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <SystemInit+0x20>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002846:	4a05      	ldr	r2, [pc, #20]	@ (800285c <SystemInit+0x20>)
 8002848:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800284c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002860:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002898 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002864:	f7ff ffea 	bl	800283c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002868:	480c      	ldr	r0, [pc, #48]	@ (800289c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800286a:	490d      	ldr	r1, [pc, #52]	@ (80028a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800286c:	4a0d      	ldr	r2, [pc, #52]	@ (80028a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002870:	e002      	b.n	8002878 <LoopCopyDataInit>

08002872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002876:	3304      	adds	r3, #4

08002878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800287c:	d3f9      	bcc.n	8002872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287e:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002880:	4c0a      	ldr	r4, [pc, #40]	@ (80028ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002884:	e001      	b.n	800288a <LoopFillZerobss>

08002886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002888:	3204      	adds	r2, #4

0800288a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800288c:	d3fb      	bcc.n	8002886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800288e:	f004 fedd 	bl	800764c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002892:	f7fe fba7 	bl	8000fe4 <main>
  bx  lr    
 8002896:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002898:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800289c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80028a4:	0800b910 	.word	0x0800b910
  ldr r2, =_sbss
 80028a8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80028ac:	20000648 	.word	0x20000648

080028b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b0:	e7fe      	b.n	80028b0 <ADC_IRQHandler>
	...

080028b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028b8:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <HAL_Init+0x40>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	@ (80028f4 <HAL_Init+0x40>)
 80028be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c4:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <HAL_Init+0x40>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <HAL_Init+0x40>)
 80028ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <HAL_Init+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a07      	ldr	r2, [pc, #28]	@ (80028f4 <HAL_Init+0x40>)
 80028d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f000 f94f 	bl	8002b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f000 f808 	bl	80028f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e8:	f7ff fcba 	bl	8002260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023c00 	.word	0x40023c00

080028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002900:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_InitTick+0x54>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <HAL_InitTick+0x58>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800290e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f967 	bl	8002bea <HAL_SYSTICK_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00e      	b.n	8002944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d80a      	bhi.n	8002942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 f92f 	bl	8002b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002938:	4a06      	ldr	r2, [pc, #24]	@ (8002954 <HAL_InitTick+0x5c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	2000000c 	.word	0x2000000c
 8002950:	20000014 	.word	0x20000014
 8002954:	20000010 	.word	0x20000010

08002958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_IncTick+0x20>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_IncTick+0x24>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a04      	ldr	r2, [pc, #16]	@ (800297c <HAL_IncTick+0x24>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000014 	.word	0x20000014
 800297c:	20000494 	.word	0x20000494

08002980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return uwTick;
 8002984:	4b03      	ldr	r3, [pc, #12]	@ (8002994 <HAL_GetTick+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000494 	.word	0x20000494

08002998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a0:	f7ff ffee 	bl	8002980 <HAL_GetTick>
 80029a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d005      	beq.n	80029be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b2:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <HAL_Delay+0x44>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029be:	bf00      	nop
 80029c0:	f7ff ffde 	bl	8002980 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d8f7      	bhi.n	80029c0 <HAL_Delay+0x28>
  {
  }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000014 	.word	0x20000014

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4907      	ldr	r1, [pc, #28]	@ (8002a7c <__NVIC_EnableIRQ+0x38>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db0a      	blt.n	8002aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	490c      	ldr	r1, [pc, #48]	@ (8002acc <__NVIC_SetPriority+0x4c>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa8:	e00a      	b.n	8002ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4908      	ldr	r1, [pc, #32]	@ (8002ad0 <__NVIC_SetPriority+0x50>)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	761a      	strb	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf28      	it	cs
 8002af2:	2304      	movcs	r3, #4
 8002af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d902      	bls.n	8002b04 <NVIC_EncodePriority+0x30>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	e000      	b.n	8002b06 <NVIC_EncodePriority+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	4313      	orrs	r3, r2
         );
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	@ 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b4c:	d301      	bcc.n	8002b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00f      	b.n	8002b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b52:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <SysTick_Config+0x40>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	f7ff ff8e 	bl	8002a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <SysTick_Config+0x40>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6a:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <SysTick_Config+0x40>)
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	e000e010 	.word	0xe000e010

08002b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff29 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba8:	f7ff ff3e 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff8e 	bl	8002ad4 <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff5d 	bl	8002a80 <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff31 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffa2 	bl	8002b3c <SysTick_Config>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e16b      	b.n	8002ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c20:	2201      	movs	r2, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	f040 815a 	bne.w	8002ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d005      	beq.n	8002c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d130      	bne.n	8002cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 0201 	and.w	r2, r3, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d017      	beq.n	8002cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d123      	bne.n	8002d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	08da      	lsrs	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3208      	adds	r2, #8
 8002d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	220f      	movs	r2, #15
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	69b9      	ldr	r1, [r7, #24]
 8002d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80b4 	beq.w	8002ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b60      	ldr	r3, [pc, #384]	@ (8002f10 <HAL_GPIO_Init+0x30c>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	4a5f      	ldr	r2, [pc, #380]	@ (8002f10 <HAL_GPIO_Init+0x30c>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f10 <HAL_GPIO_Init+0x30c>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002da6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f14 <HAL_GPIO_Init+0x310>)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	3302      	adds	r3, #2
 8002dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a52      	ldr	r2, [pc, #328]	@ (8002f18 <HAL_GPIO_Init+0x314>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02b      	beq.n	8002e2a <HAL_GPIO_Init+0x226>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a51      	ldr	r2, [pc, #324]	@ (8002f1c <HAL_GPIO_Init+0x318>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d025      	beq.n	8002e26 <HAL_GPIO_Init+0x222>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a50      	ldr	r2, [pc, #320]	@ (8002f20 <HAL_GPIO_Init+0x31c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01f      	beq.n	8002e22 <HAL_GPIO_Init+0x21e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4f      	ldr	r2, [pc, #316]	@ (8002f24 <HAL_GPIO_Init+0x320>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d019      	beq.n	8002e1e <HAL_GPIO_Init+0x21a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4e      	ldr	r2, [pc, #312]	@ (8002f28 <HAL_GPIO_Init+0x324>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_GPIO_Init+0x216>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4d      	ldr	r2, [pc, #308]	@ (8002f2c <HAL_GPIO_Init+0x328>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00d      	beq.n	8002e16 <HAL_GPIO_Init+0x212>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f30 <HAL_GPIO_Init+0x32c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x20e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4b      	ldr	r2, [pc, #300]	@ (8002f34 <HAL_GPIO_Init+0x330>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_GPIO_Init+0x20a>
 8002e0a:	2307      	movs	r3, #7
 8002e0c:	e00e      	b.n	8002e2c <HAL_GPIO_Init+0x228>
 8002e0e:	2308      	movs	r3, #8
 8002e10:	e00c      	b.n	8002e2c <HAL_GPIO_Init+0x228>
 8002e12:	2306      	movs	r3, #6
 8002e14:	e00a      	b.n	8002e2c <HAL_GPIO_Init+0x228>
 8002e16:	2305      	movs	r3, #5
 8002e18:	e008      	b.n	8002e2c <HAL_GPIO_Init+0x228>
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	e006      	b.n	8002e2c <HAL_GPIO_Init+0x228>
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e004      	b.n	8002e2c <HAL_GPIO_Init+0x228>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e002      	b.n	8002e2c <HAL_GPIO_Init+0x228>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_GPIO_Init+0x228>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	f002 0203 	and.w	r2, r2, #3
 8002e32:	0092      	lsls	r2, r2, #2
 8002e34:	4093      	lsls	r3, r2
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e3c:	4935      	ldr	r1, [pc, #212]	@ (8002f14 <HAL_GPIO_Init+0x310>)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f38 <HAL_GPIO_Init+0x334>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6e:	4a32      	ldr	r2, [pc, #200]	@ (8002f38 <HAL_GPIO_Init+0x334>)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e74:	4b30      	ldr	r3, [pc, #192]	@ (8002f38 <HAL_GPIO_Init+0x334>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e98:	4a27      	ldr	r2, [pc, #156]	@ (8002f38 <HAL_GPIO_Init+0x334>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e9e:	4b26      	ldr	r3, [pc, #152]	@ (8002f38 <HAL_GPIO_Init+0x334>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f38 <HAL_GPIO_Init+0x334>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <HAL_GPIO_Init+0x334>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eec:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <HAL_GPIO_Init+0x334>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	f67f ae90 	bls.w	8002c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3724      	adds	r7, #36	@ 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40013800 	.word	0x40013800
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020c00 	.word	0x40020c00
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40021400 	.word	0x40021400
 8002f30:	40021800 	.word	0x40021800
 8002f34:	40021c00 	.word	0x40021c00
 8002f38:	40013c00 	.word	0x40013c00

08002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f58:	e003      	b.n	8002f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	041a      	lsls	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	619a      	str	r2, [r3, #24]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f80:	887a      	ldrh	r2, [r7, #2]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	041a      	lsls	r2, r3, #16
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	43d9      	mvns	r1, r3
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	400b      	ands	r3, r1
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	619a      	str	r2, [r3, #24]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d006      	beq.n	8002fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fba:	4a05      	ldr	r2, [pc, #20]	@ (8002fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fbb8 	bl	8001738 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40013c00 	.word	0x40013c00

08002fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e267      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d075      	beq.n	80030de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ff2:	4b88      	ldr	r3, [pc, #544]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d00c      	beq.n	8003018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffe:	4b85      	ldr	r3, [pc, #532]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003006:	2b08      	cmp	r3, #8
 8003008:	d112      	bne.n	8003030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4b82      	ldr	r3, [pc, #520]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003016:	d10b      	bne.n	8003030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	4b7e      	ldr	r3, [pc, #504]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d05b      	beq.n	80030dc <HAL_RCC_OscConfig+0x108>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d157      	bne.n	80030dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e242      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003038:	d106      	bne.n	8003048 <HAL_RCC_OscConfig+0x74>
 800303a:	4b76      	ldr	r3, [pc, #472]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a75      	ldr	r2, [pc, #468]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e01d      	b.n	8003084 <HAL_RCC_OscConfig+0xb0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x98>
 8003052:	4b70      	ldr	r3, [pc, #448]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6f      	ldr	r2, [pc, #444]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b6d      	ldr	r3, [pc, #436]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a6c      	ldr	r2, [pc, #432]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0xb0>
 800306c:	4b69      	ldr	r3, [pc, #420]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a68      	ldr	r2, [pc, #416]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4b66      	ldr	r3, [pc, #408]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a65      	ldr	r2, [pc, #404]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800307e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d013      	beq.n	80030b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7ff fc78 	bl	8002980 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7ff fc74 	bl	8002980 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	@ 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e207      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0xc0>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7ff fc64 	bl	8002980 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030bc:	f7ff fc60 	bl	8002980 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	@ 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e1f3      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	4b51      	ldr	r3, [pc, #324]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0xe8>
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d063      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b47      	ldr	r3, [pc, #284]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d11c      	bne.n	800313c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b44      	ldr	r3, [pc, #272]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d116      	bne.n	800313c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	4b41      	ldr	r3, [pc, #260]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_RCC_OscConfig+0x152>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e1c7      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003126:	4b3b      	ldr	r3, [pc, #236]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4937      	ldr	r1, [pc, #220]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	e03a      	b.n	80031b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003144:	4b34      	ldr	r3, [pc, #208]	@ (8003218 <HAL_RCC_OscConfig+0x244>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7ff fc19 	bl	8002980 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003152:	f7ff fc15 	bl	8002980 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e1a8      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	4b2b      	ldr	r3, [pc, #172]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	4b28      	ldr	r3, [pc, #160]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4925      	ldr	r1, [pc, #148]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
 8003184:	e015      	b.n	80031b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003186:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <HAL_RCC_OscConfig+0x244>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7ff fbf8 	bl	8002980 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003194:	f7ff fbf4 	bl	8002980 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e187      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d036      	beq.n	800322c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d016      	beq.n	80031f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c6:	4b15      	ldr	r3, [pc, #84]	@ (800321c <HAL_RCC_OscConfig+0x248>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7ff fbd8 	bl	8002980 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d4:	f7ff fbd4 	bl	8002980 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e167      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80031e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x200>
 80031f2:	e01b      	b.n	800322c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f4:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_OscConfig+0x248>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fa:	f7ff fbc1 	bl	8002980 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	e00e      	b.n	8003220 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003202:	f7ff fbbd 	bl	8002980 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d907      	bls.n	8003220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e150      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
 8003214:	40023800 	.word	0x40023800
 8003218:	42470000 	.word	0x42470000
 800321c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b88      	ldr	r3, [pc, #544]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ea      	bne.n	8003202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8097 	beq.w	8003368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b81      	ldr	r3, [pc, #516]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	4b7d      	ldr	r3, [pc, #500]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	4a7c      	ldr	r2, [pc, #496]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003258:	6413      	str	r3, [r2, #64]	@ 0x40
 800325a:	4b7a      	ldr	r3, [pc, #488]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b77      	ldr	r3, [pc, #476]	@ (8003448 <HAL_RCC_OscConfig+0x474>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d118      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b74      	ldr	r3, [pc, #464]	@ (8003448 <HAL_RCC_OscConfig+0x474>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a73      	ldr	r2, [pc, #460]	@ (8003448 <HAL_RCC_OscConfig+0x474>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7ff fb7d 	bl	8002980 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7ff fb79 	bl	8002980 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e10c      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b6a      	ldr	r3, [pc, #424]	@ (8003448 <HAL_RCC_OscConfig+0x474>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x2ea>
 80032b0:	4b64      	ldr	r3, [pc, #400]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b4:	4a63      	ldr	r2, [pc, #396]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x324>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x30c>
 80032c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0x324>
 80032e0:	4b58      	ldr	r3, [pc, #352]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	4a57      	ldr	r2, [pc, #348]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ec:	4b55      	ldr	r3, [pc, #340]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4a54      	ldr	r2, [pc, #336]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032f2:	f023 0304 	bic.w	r3, r3, #4
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d015      	beq.n	800332c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7ff fb3e 	bl	8002980 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	e00a      	b.n	800331e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7ff fb3a 	bl	8002980 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0cb      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	4b49      	ldr	r3, [pc, #292]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ee      	beq.n	8003308 <HAL_RCC_OscConfig+0x334>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7ff fb28 	bl	8002980 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7ff fb24 	bl	8002980 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0b5      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334a:	4b3e      	ldr	r3, [pc, #248]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ee      	bne.n	8003334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003356:	7dfb      	ldrb	r3, [r7, #23]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b39      	ldr	r3, [pc, #228]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	4a38      	ldr	r2, [pc, #224]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003366:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80a1 	beq.w	80034b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003372:	4b34      	ldr	r3, [pc, #208]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	d05c      	beq.n	8003438 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d141      	bne.n	800340a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b31      	ldr	r3, [pc, #196]	@ (800344c <HAL_RCC_OscConfig+0x478>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7ff faf8 	bl	8002980 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003394:	f7ff faf4 	bl	8002980 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e087      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	4b27      	ldr	r3, [pc, #156]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	019b      	lsls	r3, r3, #6
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	3b01      	subs	r3, #1
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	491b      	ldr	r1, [pc, #108]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033dc:	4b1b      	ldr	r3, [pc, #108]	@ (800344c <HAL_RCC_OscConfig+0x478>)
 80033de:	2201      	movs	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e2:	f7ff facd 	bl	8002980 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ea:	f7ff fac9 	bl	8002980 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e05c      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fc:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x416>
 8003408:	e054      	b.n	80034b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <HAL_RCC_OscConfig+0x478>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7ff fab6 	bl	8002980 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003418:	f7ff fab2 	bl	8002980 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e045      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x444>
 8003436:	e03d      	b.n	80034b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d107      	bne.n	8003450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e038      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
 8003444:	40023800 	.word	0x40023800
 8003448:	40007000 	.word	0x40007000
 800344c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_RCC_OscConfig+0x4ec>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d028      	beq.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d121      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d11a      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003480:	4013      	ands	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800

080034c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0cc      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b68      	ldr	r3, [pc, #416]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d90c      	bls.n	8003500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b65      	ldr	r3, [pc, #404]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b63      	ldr	r3, [pc, #396]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b59      	ldr	r3, [pc, #356]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a58      	ldr	r2, [pc, #352]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003530:	4b53      	ldr	r3, [pc, #332]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800353a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b50      	ldr	r3, [pc, #320]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	494d      	ldr	r1, [pc, #308]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d044      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b47      	ldr	r3, [pc, #284]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d119      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d003      	beq.n	8003582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	2b03      	cmp	r3, #3
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b3f      	ldr	r3, [pc, #252]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e06f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b3b      	ldr	r3, [pc, #236]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e067      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b37      	ldr	r3, [pc, #220]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4934      	ldr	r1, [pc, #208]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7ff f9e4 	bl	8002980 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7ff f9e0 	bl	8002980 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b25      	ldr	r3, [pc, #148]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d20c      	bcs.n	800360c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b22      	ldr	r3, [pc, #136]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b20      	ldr	r3, [pc, #128]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e032      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b19      	ldr	r3, [pc, #100]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4916      	ldr	r1, [pc, #88]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490e      	ldr	r1, [pc, #56]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f821 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800364e:	4602      	mov	r2, r0
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	490a      	ldr	r1, [pc, #40]	@ (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	5ccb      	ldrb	r3, [r1, r3]
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a09      	ldr	r2, [pc, #36]	@ (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003666:	4b09      	ldr	r3, [pc, #36]	@ (800368c <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f944 	bl	80028f8 <HAL_InitTick>

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023c00 	.word	0x40023c00
 8003680:	40023800 	.word	0x40023800
 8003684:	0800b448 	.word	0x0800b448
 8003688:	2000000c 	.word	0x2000000c
 800368c:	20000010 	.word	0x20000010

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003694:	b094      	sub	sp, #80	@ 0x50
 8003696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	647b      	str	r3, [r7, #68]	@ 0x44
 800369c:	2300      	movs	r3, #0
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a0:	2300      	movs	r3, #0
 80036a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a8:	4b79      	ldr	r3, [pc, #484]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d00d      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x40>
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	f200 80e1 	bhi.w	800387c <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x34>
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x3a>
 80036c2:	e0db      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b73      	ldr	r3, [pc, #460]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x204>)
 80036c6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80036c8:	e0db      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ca:	4b73      	ldr	r3, [pc, #460]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x208>)
 80036cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036ce:	e0d8      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036da:	4b6d      	ldr	r3, [pc, #436]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	099b      	lsrs	r3, r3, #6
 80036ec:	2200      	movs	r2, #0
 80036ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fa:	2300      	movs	r3, #0
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003702:	4622      	mov	r2, r4
 8003704:	462b      	mov	r3, r5
 8003706:	f04f 0000 	mov.w	r0, #0
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	0159      	lsls	r1, r3, #5
 8003710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003714:	0150      	lsls	r0, r2, #5
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4621      	mov	r1, r4
 800371c:	1a51      	subs	r1, r2, r1
 800371e:	6139      	str	r1, [r7, #16]
 8003720:	4629      	mov	r1, r5
 8003722:	eb63 0301 	sbc.w	r3, r3, r1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003734:	4659      	mov	r1, fp
 8003736:	018b      	lsls	r3, r1, #6
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800373e:	4651      	mov	r1, sl
 8003740:	018a      	lsls	r2, r1, #6
 8003742:	4651      	mov	r1, sl
 8003744:	ebb2 0801 	subs.w	r8, r2, r1
 8003748:	4659      	mov	r1, fp
 800374a:	eb63 0901 	sbc.w	r9, r3, r1
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003762:	4690      	mov	r8, r2
 8003764:	4699      	mov	r9, r3
 8003766:	4623      	mov	r3, r4
 8003768:	eb18 0303 	adds.w	r3, r8, r3
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	462b      	mov	r3, r5
 8003770:	eb49 0303 	adc.w	r3, r9, r3
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003782:	4629      	mov	r1, r5
 8003784:	024b      	lsls	r3, r1, #9
 8003786:	4621      	mov	r1, r4
 8003788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800378c:	4621      	mov	r1, r4
 800378e:	024a      	lsls	r2, r1, #9
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003796:	2200      	movs	r2, #0
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800379a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800379c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037a0:	f7fd fa72 	bl	8000c88 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ac:	e058      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b38      	ldr	r3, [pc, #224]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	4611      	mov	r1, r2
 80037ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	0159      	lsls	r1, r3, #5
 80037d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037da:	0150      	lsls	r0, r2, #5
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4641      	mov	r1, r8
 80037e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037e6:	4649      	mov	r1, r9
 80037e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003800:	ebb2 040a 	subs.w	r4, r2, sl
 8003804:	eb63 050b 	sbc.w	r5, r3, fp
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	00eb      	lsls	r3, r5, #3
 8003812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003816:	00e2      	lsls	r2, r4, #3
 8003818:	4614      	mov	r4, r2
 800381a:	461d      	mov	r5, r3
 800381c:	4643      	mov	r3, r8
 800381e:	18e3      	adds	r3, r4, r3
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	464b      	mov	r3, r9
 8003824:	eb45 0303 	adc.w	r3, r5, r3
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003836:	4629      	mov	r1, r5
 8003838:	028b      	lsls	r3, r1, #10
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003840:	4621      	mov	r1, r4
 8003842:	028a      	lsls	r2, r1, #10
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800384a:	2200      	movs	r2, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	61fa      	str	r2, [r7, #28]
 8003850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003854:	f7fd fa18 	bl	8000c88 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4613      	mov	r3, r2
 800385e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800387a:	e002      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x204>)
 800387e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003884:	4618      	mov	r0, r3
 8003886:	3750      	adds	r7, #80	@ 0x50
 8003888:	46bd      	mov	sp, r7
 800388a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	00f42400 	.word	0x00f42400
 8003898:	007a1200 	.word	0x007a1200

0800389c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a9b      	lsrs	r3, r3, #10
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	@ (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	0800b458 	.word	0x0800b458

080038dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038e0:	f7ff ffdc 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	0b5b      	lsrs	r3, r3, #13
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	@ (8003900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	0800b458 	.word	0x0800b458

08003904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07b      	b.n	8003a0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d108      	bne.n	8003930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003926:	d009      	beq.n	800393c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	e005      	b.n	800393c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe fcaa 	bl	80022b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003972:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c0:	ea42 0103 	orr.w	r1, r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0104 	and.w	r1, r3, #4
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	f003 0210 	and.w	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b088      	sub	sp, #32
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_SPI_Transmit+0x22>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e12d      	b.n	8003c94 <HAL_SPI_Transmit+0x27e>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a40:	f7fe ff9e 	bl	8002980 <HAL_GetTick>
 8003a44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d002      	beq.n	8003a5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
 8003a58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a5a:	e116      	b.n	8003c8a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_Transmit+0x52>
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a6c:	e10d      	b.n	8003c8a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2203      	movs	r2, #3
 8003a72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	88fa      	ldrh	r2, [r7, #6]
 8003a86:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ad4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae0:	2b40      	cmp	r3, #64	@ 0x40
 8003ae2:	d007      	beq.n	8003af4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003afc:	d14f      	bne.n	8003b9e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_Transmit+0xf6>
 8003b06:	8afb      	ldrh	r3, [r7, #22]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d142      	bne.n	8003b92 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b10:	881a      	ldrh	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	1c9a      	adds	r2, r3, #2
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b30:	e02f      	b.n	8003b92 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d112      	bne.n	8003b66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	881a      	ldrh	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	1c9a      	adds	r2, r3, #2
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b64:	e015      	b.n	8003b92 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b66:	f7fe ff0b 	bl	8002980 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d803      	bhi.n	8003b7e <HAL_SPI_Transmit+0x168>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d102      	bne.n	8003b84 <HAL_SPI_Transmit+0x16e>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b90:	e07b      	b.n	8003c8a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ca      	bne.n	8003b32 <HAL_SPI_Transmit+0x11c>
 8003b9c:	e050      	b.n	8003c40 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_SPI_Transmit+0x196>
 8003ba6:	8afb      	ldrh	r3, [r7, #22]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d144      	bne.n	8003c36 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	7812      	ldrb	r2, [r2, #0]
 8003bb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bd2:	e030      	b.n	8003c36 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d113      	bne.n	8003c0a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	7812      	ldrb	r2, [r2, #0]
 8003bee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c08:	e015      	b.n	8003c36 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c0a:	f7fe feb9 	bl	8002980 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d803      	bhi.n	8003c22 <HAL_SPI_Transmit+0x20c>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d102      	bne.n	8003c28 <HAL_SPI_Transmit+0x212>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003c34:	e029      	b.n	8003c8a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1c9      	bne.n	8003bd4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fbdf 	bl	8004408 <SPI_EndRxTxTransaction>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e003      	b.n	8003c8a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d002      	beq.n	8003cc2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cc0:	e0fb      	b.n	8003eba <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cca:	d112      	bne.n	8003cf2 <HAL_SPI_Receive+0x56>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10e      	bne.n	8003cf2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003cdc:	88fa      	ldrh	r2, [r7, #6]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f8ef 	bl	8003ecc <HAL_SPI_TransmitReceive>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	e0e8      	b.n	8003ec4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_SPI_Receive+0x64>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e0e1      	b.n	8003ec4 <HAL_SPI_Receive+0x228>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d08:	f7fe fe3a 	bl	8002980 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_Receive+0x7e>
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d1e:	e0cc      	b.n	8003eba <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2204      	movs	r2, #4
 8003d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d66:	d10f      	bne.n	8003d88 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d007      	beq.n	8003da6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003da4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d16a      	bne.n	8003e84 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003dae:	e032      	b.n	8003e16 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d115      	bne.n	8003dea <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f103 020c 	add.w	r2, r3, #12
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003de8:	e015      	b.n	8003e16 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dea:	f7fe fdc9 	bl	8002980 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d803      	bhi.n	8003e02 <HAL_SPI_Receive+0x166>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d102      	bne.n	8003e08 <HAL_SPI_Receive+0x16c>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e14:	e051      	b.n	8003eba <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1c7      	bne.n	8003db0 <HAL_SPI_Receive+0x114>
 8003e20:	e035      	b.n	8003e8e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d113      	bne.n	8003e58 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3a:	b292      	uxth	r2, r2
 8003e3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	1c9a      	adds	r2, r3, #2
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e56:	e015      	b.n	8003e84 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e58:	f7fe fd92 	bl	8002980 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d803      	bhi.n	8003e70 <HAL_SPI_Receive+0x1d4>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d102      	bne.n	8003e76 <HAL_SPI_Receive+0x1da>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e82:	e01a      	b.n	8003eba <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1c9      	bne.n	8003e22 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa52 	bl	800433c <SPI_EndRxTransaction>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
 8003eb0:	e003      	b.n	8003eba <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	@ 0x30
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eda:	2301      	movs	r3, #1
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x26>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e198      	b.n	8004224 <HAL_SPI_TransmitReceive+0x358>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003efa:	f7fe fd41 	bl	8002980 <HAL_GetTick>
 8003efe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d00f      	beq.n	8003f3c <HAL_SPI_TransmitReceive+0x70>
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f22:	d107      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x68>
 8003f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d003      	beq.n	8003f3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003f3a:	e16d      	b.n	8004218 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x82>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x82>
 8003f48:	887b      	ldrh	r3, [r7, #2]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003f54:	e160      	b.n	8004218 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d003      	beq.n	8003f6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2205      	movs	r2, #5
 8003f66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	887a      	ldrh	r2, [r7, #2]
 8003f7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	887a      	ldrh	r2, [r7, #2]
 8003f92:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b40      	cmp	r3, #64	@ 0x40
 8003fac:	d007      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc6:	d17c      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_SPI_TransmitReceive+0x10a>
 8003fd0:	8b7b      	ldrh	r3, [r7, #26]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d16a      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	881a      	ldrh	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	1c9a      	adds	r2, r3, #2
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ffa:	e057      	b.n	80040ac <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	d11b      	bne.n	8004042 <HAL_SPI_TransmitReceive+0x176>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d016      	beq.n	8004042 <HAL_SPI_TransmitReceive+0x176>
 8004014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004016:	2b01      	cmp	r3, #1
 8004018:	d113      	bne.n	8004042 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	881a      	ldrh	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d119      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x1b8>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d014      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	b292      	uxth	r2, r2
 8004066:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	1c9a      	adds	r2, r3, #2
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004080:	2301      	movs	r3, #1
 8004082:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004084:	f7fe fc7c 	bl	8002980 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004090:	429a      	cmp	r2, r3
 8004092:	d80b      	bhi.n	80040ac <HAL_SPI_TransmitReceive+0x1e0>
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d007      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80040aa:	e0b5      	b.n	8004218 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1a2      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x130>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d19d      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x130>
 80040c0:	e080      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x204>
 80040ca:	8b7b      	ldrh	r3, [r7, #26]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d16f      	bne.n	80041b0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	7812      	ldrb	r2, [r2, #0]
 80040dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f6:	e05b      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b02      	cmp	r3, #2
 8004104:	d11c      	bne.n	8004140 <HAL_SPI_TransmitReceive+0x274>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x274>
 8004110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004112:	2b01      	cmp	r3, #1
 8004114:	d114      	bne.n	8004140 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	7812      	ldrb	r2, [r2, #0]
 8004122:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d119      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x2b6>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d014      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800417e:	2301      	movs	r3, #1
 8004180:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004182:	f7fe fbfd 	bl	8002980 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800418e:	429a      	cmp	r2, r3
 8004190:	d803      	bhi.n	800419a <HAL_SPI_TransmitReceive+0x2ce>
 8004192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d102      	bne.n	80041a0 <HAL_SPI_TransmitReceive+0x2d4>
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80041ae:	e033      	b.n	8004218 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d19e      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x22c>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d199      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f91d 	bl	8004408 <SPI_EndRxTxTransaction>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80041e0:	e01a      	b.n	8004218 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800420e:	e003      	b.n	8004218 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004220:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004224:	4618      	mov	r0, r3
 8004226:	3730      	adds	r7, #48	@ 0x30
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800423c:	f7fe fba0 	bl	8002980 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	4413      	add	r3, r2
 800424a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800424c:	f7fe fb98 	bl	8002980 <HAL_GetTick>
 8004250:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004252:	4b39      	ldr	r3, [pc, #228]	@ (8004338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	015b      	lsls	r3, r3, #5
 8004258:	0d1b      	lsrs	r3, r3, #20
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	fb02 f303 	mul.w	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004262:	e054      	b.n	800430e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d050      	beq.n	800430e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800426c:	f7fe fb88 	bl	8002980 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	429a      	cmp	r2, r3
 800427a:	d902      	bls.n	8004282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d13d      	bne.n	80042fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800429a:	d111      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a4:	d004      	beq.n	80042b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ae:	d107      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c8:	d10f      	bne.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e017      	b.n	800432e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3b01      	subs	r3, #1
 800430c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4013      	ands	r3, r2
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	429a      	cmp	r2, r3
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	429a      	cmp	r2, r3
 800432a:	d19b      	bne.n	8004264 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	2000000c 	.word	0x2000000c

0800433c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004350:	d111      	bne.n	8004376 <SPI_EndRxTransaction+0x3a>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800435a:	d004      	beq.n	8004366 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004364:	d107      	bne.n	8004376 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800437e:	d12a      	bne.n	80043d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004388:	d012      	beq.n	80043b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	2180      	movs	r1, #128	@ 0x80
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff ff49 	bl	800422c <SPI_WaitFlagStateUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d02d      	beq.n	80043fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e026      	b.n	80043fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2101      	movs	r1, #1
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ff36 	bl	800422c <SPI_WaitFlagStateUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01a      	beq.n	80043fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e013      	b.n	80043fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2200      	movs	r2, #0
 80043de:	2101      	movs	r1, #1
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7ff ff23 	bl	800422c <SPI_WaitFlagStateUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e000      	b.n	80043fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2201      	movs	r2, #1
 800441c:	2102      	movs	r1, #2
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff ff04 	bl	800422c <SPI_WaitFlagStateUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e032      	b.n	80044a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800443a:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <SPI_EndRxTxTransaction+0xa0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1b      	ldr	r2, [pc, #108]	@ (80044ac <SPI_EndRxTxTransaction+0xa4>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	0d5b      	lsrs	r3, r3, #21
 8004446:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004458:	d112      	bne.n	8004480 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2200      	movs	r2, #0
 8004462:	2180      	movs	r1, #128	@ 0x80
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff fee1 	bl	800422c <SPI_WaitFlagStateUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d016      	beq.n	800449e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	f043 0220 	orr.w	r2, r3, #32
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e00f      	b.n	80044a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	3b01      	subs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004496:	2b80      	cmp	r3, #128	@ 0x80
 8004498:	d0f2      	beq.n	8004480 <SPI_EndRxTxTransaction+0x78>
 800449a:	e000      	b.n	800449e <SPI_EndRxTxTransaction+0x96>
        break;
 800449c:	bf00      	nop
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	165e9f81 	.word	0x165e9f81

080044b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e041      	b.n	8004546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd ff32 	bl	8002340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f000 fe6e 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d001      	beq.n	8004568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e046      	b.n	80045f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a23      	ldr	r2, [pc, #140]	@ (8004604 <HAL_TIM_Base_Start+0xb4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d022      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004582:	d01d      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1f      	ldr	r2, [pc, #124]	@ (8004608 <HAL_TIM_Base_Start+0xb8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d018      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1e      	ldr	r2, [pc, #120]	@ (800460c <HAL_TIM_Base_Start+0xbc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1c      	ldr	r2, [pc, #112]	@ (8004610 <HAL_TIM_Base_Start+0xc0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00e      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004614 <HAL_TIM_Base_Start+0xc4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a19      	ldr	r2, [pc, #100]	@ (8004618 <HAL_TIM_Base_Start+0xc8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_TIM_Base_Start+0x70>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a18      	ldr	r2, [pc, #96]	@ (800461c <HAL_TIM_Base_Start+0xcc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d111      	bne.n	80045e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d010      	beq.n	80045f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	e007      	b.n	80045f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40010000 	.word	0x40010000
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40000c00 	.word	0x40000c00
 8004614:	40010400 	.word	0x40010400
 8004618:	40014000 	.word	0x40014000
 800461c:	40001800 	.word	0x40001800

08004620 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e041      	b.n	80046b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd ff08 	bl	800245c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 fdb6 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d109      	bne.n	80046e4 <HAL_TIM_PWM_Start+0x24>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e022      	b.n	800472a <HAL_TIM_PWM_Start+0x6a>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d109      	bne.n	80046fe <HAL_TIM_PWM_Start+0x3e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	bf14      	ite	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	2300      	moveq	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	e015      	b.n	800472a <HAL_TIM_PWM_Start+0x6a>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d109      	bne.n	8004718 <HAL_TIM_PWM_Start+0x58>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e008      	b.n	800472a <HAL_TIM_PWM_Start+0x6a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e07c      	b.n	800482c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d104      	bne.n	8004742 <HAL_TIM_PWM_Start+0x82>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004740:	e013      	b.n	800476a <HAL_TIM_PWM_Start+0xaa>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d104      	bne.n	8004752 <HAL_TIM_PWM_Start+0x92>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004750:	e00b      	b.n	800476a <HAL_TIM_PWM_Start+0xaa>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d104      	bne.n	8004762 <HAL_TIM_PWM_Start+0xa2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004760:	e003      	b.n	800476a <HAL_TIM_PWM_Start+0xaa>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2201      	movs	r2, #1
 8004770:	6839      	ldr	r1, [r7, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f001 f94c 	bl	8005a10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a2d      	ldr	r2, [pc, #180]	@ (8004834 <HAL_TIM_PWM_Start+0x174>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_TIM_PWM_Start+0xcc>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2c      	ldr	r2, [pc, #176]	@ (8004838 <HAL_TIM_PWM_Start+0x178>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <HAL_TIM_PWM_Start+0xd0>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <HAL_TIM_PWM_Start+0xd2>
 8004790:	2300      	movs	r3, #0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a22      	ldr	r2, [pc, #136]	@ (8004834 <HAL_TIM_PWM_Start+0x174>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x136>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b8:	d01d      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x136>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <HAL_TIM_PWM_Start+0x17c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x136>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004840 <HAL_TIM_PWM_Start+0x180>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x136>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004844 <HAL_TIM_PWM_Start+0x184>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x136>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a16      	ldr	r2, [pc, #88]	@ (8004838 <HAL_TIM_PWM_Start+0x178>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x136>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a18      	ldr	r2, [pc, #96]	@ (8004848 <HAL_TIM_PWM_Start+0x188>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x136>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a16      	ldr	r2, [pc, #88]	@ (800484c <HAL_TIM_PWM_Start+0x18c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d111      	bne.n	800481a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b06      	cmp	r3, #6
 8004806:	d010      	beq.n	800482a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004818:	e007      	b.n	800482a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40010000 	.word	0x40010000
 8004838:	40010400 	.word	0x40010400
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40014000 	.word	0x40014000
 800484c:	40001800 	.word	0x40001800

08004850 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e041      	b.n	80048e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f839 	bl	80048ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f000 fc9e 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_TIM_IC_Start_IT+0x1e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e013      	b.n	800494a <HAL_TIM_IC_Start_IT+0x46>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d104      	bne.n	8004932 <HAL_TIM_IC_Start_IT+0x2e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800492e:	b2db      	uxtb	r3, r3
 8004930:	e00b      	b.n	800494a <HAL_TIM_IC_Start_IT+0x46>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d104      	bne.n	8004942 <HAL_TIM_IC_Start_IT+0x3e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800493e:	b2db      	uxtb	r3, r3
 8004940:	e003      	b.n	800494a <HAL_TIM_IC_Start_IT+0x46>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004948:	b2db      	uxtb	r3, r3
 800494a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <HAL_TIM_IC_Start_IT+0x58>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e013      	b.n	8004984 <HAL_TIM_IC_Start_IT+0x80>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b04      	cmp	r3, #4
 8004960:	d104      	bne.n	800496c <HAL_TIM_IC_Start_IT+0x68>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e00b      	b.n	8004984 <HAL_TIM_IC_Start_IT+0x80>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b08      	cmp	r3, #8
 8004970:	d104      	bne.n	800497c <HAL_TIM_IC_Start_IT+0x78>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e003      	b.n	8004984 <HAL_TIM_IC_Start_IT+0x80>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004982:	b2db      	uxtb	r3, r3
 8004984:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004986:	7bbb      	ldrb	r3, [r7, #14]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d102      	bne.n	8004992 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800498c:	7b7b      	ldrb	r3, [r7, #13]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d001      	beq.n	8004996 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0cc      	b.n	8004b30 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_IC_Start_IT+0xa2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049a4:	e013      	b.n	80049ce <HAL_TIM_IC_Start_IT+0xca>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_IC_Start_IT+0xb2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b4:	e00b      	b.n	80049ce <HAL_TIM_IC_Start_IT+0xca>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_IC_Start_IT+0xc2>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c4:	e003      	b.n	80049ce <HAL_TIM_IC_Start_IT+0xca>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <HAL_TIM_IC_Start_IT+0xda>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049dc:	e013      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0x102>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_IC_Start_IT+0xea>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049ec:	e00b      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0x102>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_IC_Start_IT+0xfa>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049fc:	e003      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0x102>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d841      	bhi.n	8004a90 <HAL_TIM_IC_Start_IT+0x18c>
 8004a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <HAL_TIM_IC_Start_IT+0x110>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a49 	.word	0x08004a49
 8004a18:	08004a91 	.word	0x08004a91
 8004a1c:	08004a91 	.word	0x08004a91
 8004a20:	08004a91 	.word	0x08004a91
 8004a24:	08004a5b 	.word	0x08004a5b
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004a91 	.word	0x08004a91
 8004a30:	08004a91 	.word	0x08004a91
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004a91 	.word	0x08004a91
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a91 	.word	0x08004a91
 8004a44:	08004a7f 	.word	0x08004a7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0202 	orr.w	r2, r2, #2
 8004a56:	60da      	str	r2, [r3, #12]
      break;
 8004a58:	e01d      	b.n	8004a96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0204 	orr.w	r2, r2, #4
 8004a68:	60da      	str	r2, [r3, #12]
      break;
 8004a6a:	e014      	b.n	8004a96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0208 	orr.w	r2, r2, #8
 8004a7a:	60da      	str	r2, [r3, #12]
      break;
 8004a7c:	e00b      	b.n	8004a96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0210 	orr.w	r2, r2, #16
 8004a8c:	60da      	str	r2, [r3, #12]
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d148      	bne.n	8004b2e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 ffb3 	bl	8005a10 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a22      	ldr	r2, [pc, #136]	@ (8004b38 <HAL_TIM_IC_Start_IT+0x234>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d022      	beq.n	8004afa <HAL_TIM_IC_Start_IT+0x1f6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004abc:	d01d      	beq.n	8004afa <HAL_TIM_IC_Start_IT+0x1f6>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b3c <HAL_TIM_IC_Start_IT+0x238>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d018      	beq.n	8004afa <HAL_TIM_IC_Start_IT+0x1f6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1c      	ldr	r2, [pc, #112]	@ (8004b40 <HAL_TIM_IC_Start_IT+0x23c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d013      	beq.n	8004afa <HAL_TIM_IC_Start_IT+0x1f6>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <HAL_TIM_IC_Start_IT+0x240>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00e      	beq.n	8004afa <HAL_TIM_IC_Start_IT+0x1f6>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a19      	ldr	r2, [pc, #100]	@ (8004b48 <HAL_TIM_IC_Start_IT+0x244>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_TIM_IC_Start_IT+0x1f6>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a18      	ldr	r2, [pc, #96]	@ (8004b4c <HAL_TIM_IC_Start_IT+0x248>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_TIM_IC_Start_IT+0x1f6>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a16      	ldr	r2, [pc, #88]	@ (8004b50 <HAL_TIM_IC_Start_IT+0x24c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d111      	bne.n	8004b1e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b06      	cmp	r3, #6
 8004b0a:	d010      	beq.n	8004b2e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1c:	e007      	b.n	8004b2e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40010400 	.word	0x40010400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40001800 	.word	0x40001800

08004b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d020      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0202 	mvn.w	r2, #2
 8004b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fd fa08 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 faf3 	bl	8005192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fafa 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d020      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0204 	mvn.w	r2, #4
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fd f9e2 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 facd 	bl	8005192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fad4 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0208 	mvn.w	r2, #8
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2204      	movs	r2, #4
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fd f9bc 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 faa7 	bl	8005192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 faae 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d020      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0210 	mvn.w	r2, #16
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2208      	movs	r2, #8
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd f996 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa81 	bl	8005192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fa88 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00c      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d007      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0201 	mvn.w	r2, #1
 8004cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa5f 	bl	800517e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00c      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 ff42 	bl	8005b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fa59 	bl	80051ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00c      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0220 	mvn.w	r2, #32
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 ff14 	bl	8005b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e088      	b.n	8004e64 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d11b      	bne.n	8004d98 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004d70:	f000 fc8a 	bl	8005688 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 020c 	bic.w	r2, r2, #12
 8004d82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6999      	ldr	r1, [r3, #24]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	619a      	str	r2, [r3, #24]
 8004d96:	e060      	b.n	8004e5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d11c      	bne.n	8004dd8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004dae:	f000 fd0e 	bl	80057ce <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004dc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6999      	ldr	r1, [r3, #24]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	021a      	lsls	r2, r3, #8
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	619a      	str	r2, [r3, #24]
 8004dd6:	e040      	b.n	8004e5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d11b      	bne.n	8004e16 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004dee:	f000 fd5b 	bl	80058a8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 020c 	bic.w	r2, r2, #12
 8004e00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69d9      	ldr	r1, [r3, #28]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	61da      	str	r2, [r3, #28]
 8004e14:	e021      	b.n	8004e5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d11c      	bne.n	8004e56 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004e2c:	f000 fd78 	bl	8005920 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004e3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69d9      	ldr	r1, [r3, #28]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	61da      	str	r2, [r3, #28]
 8004e54:	e001      	b.n	8004e5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0ae      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	f200 809f 	bhi.w	8004fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004fd9 	.word	0x08004fd9
 8004ea8:	08004fd9 	.word	0x08004fd9
 8004eac:	08004fd9 	.word	0x08004fd9
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004fd9 	.word	0x08004fd9
 8004eb8:	08004fd9 	.word	0x08004fd9
 8004ebc:	08004fd9 	.word	0x08004fd9
 8004ec0:	08004f57 	.word	0x08004f57
 8004ec4:	08004fd9 	.word	0x08004fd9
 8004ec8:	08004fd9 	.word	0x08004fd9
 8004ecc:	08004fd9 	.word	0x08004fd9
 8004ed0:	08004f97 	.word	0x08004f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fa24 	bl	8005328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0208 	orr.w	r2, r2, #8
 8004eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0204 	bic.w	r2, r2, #4
 8004efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6999      	ldr	r1, [r3, #24]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	619a      	str	r2, [r3, #24]
      break;
 8004f12:	e064      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fa74 	bl	8005408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6999      	ldr	r1, [r3, #24]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	021a      	lsls	r2, r3, #8
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	619a      	str	r2, [r3, #24]
      break;
 8004f54:	e043      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fac9 	bl	80054f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0208 	orr.w	r2, r2, #8
 8004f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0204 	bic.w	r2, r2, #4
 8004f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69d9      	ldr	r1, [r3, #28]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	61da      	str	r2, [r3, #28]
      break;
 8004f94:	e023      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fb1d 	bl	80055dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69d9      	ldr	r1, [r3, #28]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	021a      	lsls	r2, r3, #8
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	61da      	str	r2, [r3, #28]
      break;
 8004fd6:	e002      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_TIM_ConfigClockSource+0x1c>
 8005008:	2302      	movs	r3, #2
 800500a:	e0b4      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x186>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800502a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005044:	d03e      	beq.n	80050c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800504a:	f200 8087 	bhi.w	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005052:	f000 8086 	beq.w	8005162 <HAL_TIM_ConfigClockSource+0x172>
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505a:	d87f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b70      	cmp	r3, #112	@ 0x70
 800505e:	d01a      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xa6>
 8005060:	2b70      	cmp	r3, #112	@ 0x70
 8005062:	d87b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b60      	cmp	r3, #96	@ 0x60
 8005066:	d050      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x11a>
 8005068:	2b60      	cmp	r3, #96	@ 0x60
 800506a:	d877      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b50      	cmp	r3, #80	@ 0x50
 800506e:	d03c      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0xfa>
 8005070:	2b50      	cmp	r3, #80	@ 0x50
 8005072:	d873      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b40      	cmp	r3, #64	@ 0x40
 8005076:	d058      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x13a>
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d86f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b30      	cmp	r3, #48	@ 0x30
 800507e:	d064      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005080:	2b30      	cmp	r3, #48	@ 0x30
 8005082:	d86b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b20      	cmp	r3, #32
 8005086:	d060      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d867      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d05c      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005090:	2b10      	cmp	r3, #16
 8005092:	d05a      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005094:	e062      	b.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a6:	f000 fc93 	bl	80059d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	609a      	str	r2, [r3, #8]
      break;
 80050c2:	e04f      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	f000 fc7c 	bl	80059d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050e6:	609a      	str	r2, [r3, #8]
      break;
 80050e8:	e03c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	461a      	mov	r2, r3
 80050f8:	f000 fb3a 	bl	8005770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2150      	movs	r1, #80	@ 0x50
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fc49 	bl	800599a <TIM_ITRx_SetConfig>
      break;
 8005108:	e02c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005116:	461a      	mov	r2, r3
 8005118:	f000 fb96 	bl	8005848 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2160      	movs	r1, #96	@ 0x60
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fc39 	bl	800599a <TIM_ITRx_SetConfig>
      break;
 8005128:	e01c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005136:	461a      	mov	r2, r3
 8005138:	f000 fb1a 	bl	8005770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2140      	movs	r1, #64	@ 0x40
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fc29 	bl	800599a <TIM_ITRx_SetConfig>
      break;
 8005148:	e00c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 fc20 	bl	800599a <TIM_ITRx_SetConfig>
      break;
 800515a:	e003      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      break;
 8005160:	e000      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a46      	ldr	r2, [pc, #280]	@ (80052fc <TIM_Base_SetConfig+0x12c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ee:	d00f      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a43      	ldr	r2, [pc, #268]	@ (8005300 <TIM_Base_SetConfig+0x130>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a42      	ldr	r2, [pc, #264]	@ (8005304 <TIM_Base_SetConfig+0x134>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a41      	ldr	r2, [pc, #260]	@ (8005308 <TIM_Base_SetConfig+0x138>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a40      	ldr	r2, [pc, #256]	@ (800530c <TIM_Base_SetConfig+0x13c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a35      	ldr	r2, [pc, #212]	@ (80052fc <TIM_Base_SetConfig+0x12c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005230:	d027      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a32      	ldr	r2, [pc, #200]	@ (8005300 <TIM_Base_SetConfig+0x130>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d023      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a31      	ldr	r2, [pc, #196]	@ (8005304 <TIM_Base_SetConfig+0x134>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a30      	ldr	r2, [pc, #192]	@ (8005308 <TIM_Base_SetConfig+0x138>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2f      	ldr	r2, [pc, #188]	@ (800530c <TIM_Base_SetConfig+0x13c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d017      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2e      	ldr	r2, [pc, #184]	@ (8005310 <TIM_Base_SetConfig+0x140>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2d      	ldr	r2, [pc, #180]	@ (8005314 <TIM_Base_SetConfig+0x144>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2c      	ldr	r2, [pc, #176]	@ (8005318 <TIM_Base_SetConfig+0x148>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2b      	ldr	r2, [pc, #172]	@ (800531c <TIM_Base_SetConfig+0x14c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d007      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2a      	ldr	r2, [pc, #168]	@ (8005320 <TIM_Base_SetConfig+0x150>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a29      	ldr	r2, [pc, #164]	@ (8005324 <TIM_Base_SetConfig+0x154>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a10      	ldr	r2, [pc, #64]	@ (80052fc <TIM_Base_SetConfig+0x12c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_Base_SetConfig+0xf8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a12      	ldr	r2, [pc, #72]	@ (800530c <TIM_Base_SetConfig+0x13c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d103      	bne.n	80052d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d105      	bne.n	80052ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	611a      	str	r2, [r3, #16]
  }
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40010000 	.word	0x40010000
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800
 8005308:	40000c00 	.word	0x40000c00
 800530c:	40010400 	.word	0x40010400
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800
 800531c:	40001800 	.word	0x40001800
 8005320:	40001c00 	.word	0x40001c00
 8005324:	40002000 	.word	0x40002000

08005328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f023 0201 	bic.w	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 0302 	bic.w	r3, r3, #2
 8005370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a20      	ldr	r2, [pc, #128]	@ (8005400 <TIM_OC1_SetConfig+0xd8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_OC1_SetConfig+0x64>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1f      	ldr	r2, [pc, #124]	@ (8005404 <TIM_OC1_SetConfig+0xdc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10c      	bne.n	80053a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0308 	bic.w	r3, r3, #8
 8005392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a15      	ldr	r2, [pc, #84]	@ (8005400 <TIM_OC1_SetConfig+0xd8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d003      	beq.n	80053b6 <TIM_OC1_SetConfig+0x8e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a14      	ldr	r2, [pc, #80]	@ (8005404 <TIM_OC1_SetConfig+0xdc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d111      	bne.n	80053da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40010000 	.word	0x40010000
 8005404:	40010400 	.word	0x40010400

08005408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f023 0210 	bic.w	r2, r3, #16
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800543e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0320 	bic.w	r3, r3, #32
 8005452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a22      	ldr	r2, [pc, #136]	@ (80054ec <TIM_OC2_SetConfig+0xe4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_OC2_SetConfig+0x68>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a21      	ldr	r2, [pc, #132]	@ (80054f0 <TIM_OC2_SetConfig+0xe8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d10d      	bne.n	800548c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800548a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a17      	ldr	r2, [pc, #92]	@ (80054ec <TIM_OC2_SetConfig+0xe4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_OC2_SetConfig+0x94>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a16      	ldr	r2, [pc, #88]	@ (80054f0 <TIM_OC2_SetConfig+0xe8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d113      	bne.n	80054c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40010400 	.word	0x40010400

080054f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800553c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a21      	ldr	r2, [pc, #132]	@ (80055d4 <TIM_OC3_SetConfig+0xe0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_OC3_SetConfig+0x66>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a20      	ldr	r2, [pc, #128]	@ (80055d8 <TIM_OC3_SetConfig+0xe4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d10d      	bne.n	8005576 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <TIM_OC3_SetConfig+0xe0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_OC3_SetConfig+0x92>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a15      	ldr	r2, [pc, #84]	@ (80055d8 <TIM_OC3_SetConfig+0xe4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d113      	bne.n	80055ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800558c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	621a      	str	r2, [r3, #32]
}
 80055c8:	bf00      	nop
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400

080055dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	031b      	lsls	r3, r3, #12
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a12      	ldr	r2, [pc, #72]	@ (8005680 <TIM_OC4_SetConfig+0xa4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC4_SetConfig+0x68>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a11      	ldr	r2, [pc, #68]	@ (8005684 <TIM_OC4_SetConfig+0xa8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d109      	bne.n	8005658 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800564a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	019b      	lsls	r3, r3, #6
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40010400 	.word	0x40010400

08005688 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	f023 0201 	bic.w	r2, r3, #1
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a28      	ldr	r2, [pc, #160]	@ (8005754 <TIM_TI1_SetConfig+0xcc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01b      	beq.n	80056ee <TIM_TI1_SetConfig+0x66>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056bc:	d017      	beq.n	80056ee <TIM_TI1_SetConfig+0x66>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a25      	ldr	r2, [pc, #148]	@ (8005758 <TIM_TI1_SetConfig+0xd0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <TIM_TI1_SetConfig+0x66>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4a24      	ldr	r2, [pc, #144]	@ (800575c <TIM_TI1_SetConfig+0xd4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00f      	beq.n	80056ee <TIM_TI1_SetConfig+0x66>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a23      	ldr	r2, [pc, #140]	@ (8005760 <TIM_TI1_SetConfig+0xd8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_TI1_SetConfig+0x66>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a22      	ldr	r2, [pc, #136]	@ (8005764 <TIM_TI1_SetConfig+0xdc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <TIM_TI1_SetConfig+0x66>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4a21      	ldr	r2, [pc, #132]	@ (8005768 <TIM_TI1_SetConfig+0xe0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_TI1_SetConfig+0x66>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a20      	ldr	r2, [pc, #128]	@ (800576c <TIM_TI1_SetConfig+0xe4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d101      	bne.n	80056f2 <TIM_TI1_SetConfig+0x6a>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <TIM_TI1_SetConfig+0x6c>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	e003      	b.n	8005712 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	b2db      	uxtb	r3, r3
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f023 030a 	bic.w	r3, r3, #10
 800572c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f003 030a 	and.w	r3, r3, #10
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40010000 	.word	0x40010000
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40000c00 	.word	0x40000c00
 8005764:	40010400 	.word	0x40010400
 8005768:	40014000 	.word	0x40014000
 800576c:	40001800 	.word	0x40001800

08005770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800579a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f023 030a 	bic.w	r3, r3, #10
 80057ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b087      	sub	sp, #28
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f023 0210 	bic.w	r2, r3, #16
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800580c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	031b      	lsls	r3, r3, #12
 8005812:	b29b      	uxth	r3, r3
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005820:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	621a      	str	r2, [r3, #32]
}
 800583c:	bf00      	nop
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 0210 	bic.w	r2, r3, #16
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	031b      	lsls	r3, r3, #12
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005884:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f023 0303 	bic.w	r3, r3, #3
 80058d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80058f8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	621a      	str	r2, [r3, #32]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800594c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800595e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	031b      	lsls	r3, r3, #12
 8005964:	b29b      	uxth	r3, r3
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005972:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	031b      	lsls	r3, r3, #12
 8005978:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f043 0307 	orr.w	r3, r3, #7
 80059bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	609a      	str	r2, [r3, #8]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	021a      	lsls	r2, r3, #8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	609a      	str	r2, [r3, #8]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2201      	movs	r2, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1a      	ldr	r2, [r3, #32]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	401a      	ands	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	621a      	str	r2, [r3, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e05a      	b.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a21      	ldr	r2, [pc, #132]	@ (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d022      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac0:	d01d      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d018      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d013      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1a      	ldr	r2, [pc, #104]	@ (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00e      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a18      	ldr	r2, [pc, #96]	@ (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a17      	ldr	r2, [pc, #92]	@ (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a15      	ldr	r2, [pc, #84]	@ (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10c      	bne.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40010400 	.word	0x40010400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40001800 	.word	0x40001800

08005b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e042      	b.n	8005c14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fc fcb2 	bl	800250c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	@ 0x24
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f82b 	bl	8005c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005be4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c20:	b0c0      	sub	sp, #256	@ 0x100
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c38:	68d9      	ldr	r1, [r3, #12]
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	ea40 0301 	orr.w	r3, r0, r1
 8005c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c74:	f021 010c 	bic.w	r1, r1, #12
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c82:	430b      	orrs	r3, r1
 8005c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c96:	6999      	ldr	r1, [r3, #24]
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	ea40 0301 	orr.w	r3, r0, r1
 8005ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee8 <UART_SetConfig+0x2cc>)
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d005      	beq.n	8005cbc <UART_SetConfig+0xa0>
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b8d      	ldr	r3, [pc, #564]	@ (8005eec <UART_SetConfig+0x2d0>)
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d104      	bne.n	8005cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cbc:	f7fd fe0e 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8005cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cc4:	e003      	b.n	8005cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cc6:	f7fd fdf5 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8005cca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd8:	f040 810c 	bne.w	8005ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005cee:	4622      	mov	r2, r4
 8005cf0:	462b      	mov	r3, r5
 8005cf2:	1891      	adds	r1, r2, r2
 8005cf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005cf6:	415b      	adcs	r3, r3
 8005cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cfe:	4621      	mov	r1, r4
 8005d00:	eb12 0801 	adds.w	r8, r2, r1
 8005d04:	4629      	mov	r1, r5
 8005d06:	eb43 0901 	adc.w	r9, r3, r1
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d1e:	4690      	mov	r8, r2
 8005d20:	4699      	mov	r9, r3
 8005d22:	4623      	mov	r3, r4
 8005d24:	eb18 0303 	adds.w	r3, r8, r3
 8005d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	eb49 0303 	adc.w	r3, r9, r3
 8005d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	18db      	adds	r3, r3, r3
 8005d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d50:	4613      	mov	r3, r2
 8005d52:	eb42 0303 	adc.w	r3, r2, r3
 8005d56:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d60:	f7fa ff92 	bl	8000c88 <__aeabi_uldivmod>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4b61      	ldr	r3, [pc, #388]	@ (8005ef0 <UART_SetConfig+0x2d4>)
 8005d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	011c      	lsls	r4, r3, #4
 8005d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d84:	4642      	mov	r2, r8
 8005d86:	464b      	mov	r3, r9
 8005d88:	1891      	adds	r1, r2, r2
 8005d8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d8c:	415b      	adcs	r3, r3
 8005d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d94:	4641      	mov	r1, r8
 8005d96:	eb12 0a01 	adds.w	sl, r2, r1
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db4:	4692      	mov	sl, r2
 8005db6:	469b      	mov	fp, r3
 8005db8:	4643      	mov	r3, r8
 8005dba:	eb1a 0303 	adds.w	r3, sl, r3
 8005dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8005dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005de0:	460b      	mov	r3, r1
 8005de2:	18db      	adds	r3, r3, r3
 8005de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de6:	4613      	mov	r3, r2
 8005de8:	eb42 0303 	adc.w	r3, r2, r3
 8005dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005df6:	f7fa ff47 	bl	8000c88 <__aeabi_uldivmod>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef0 <UART_SetConfig+0x2d4>)
 8005e02:	fba3 2301 	umull	r2, r3, r3, r1
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	2264      	movs	r2, #100	@ 0x64
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	1acb      	subs	r3, r1, r3
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e16:	4b36      	ldr	r3, [pc, #216]	@ (8005ef0 <UART_SetConfig+0x2d4>)
 8005e18:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e24:	441c      	add	r4, r3
 8005e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e38:	4642      	mov	r2, r8
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	1891      	adds	r1, r2, r2
 8005e3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e40:	415b      	adcs	r3, r3
 8005e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e48:	4641      	mov	r1, r8
 8005e4a:	1851      	adds	r1, r2, r1
 8005e4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e4e:	4649      	mov	r1, r9
 8005e50:	414b      	adcs	r3, r1
 8005e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e60:	4659      	mov	r1, fp
 8005e62:	00cb      	lsls	r3, r1, #3
 8005e64:	4651      	mov	r1, sl
 8005e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	00ca      	lsls	r2, r1, #3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4619      	mov	r1, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	4642      	mov	r2, r8
 8005e76:	189b      	adds	r3, r3, r2
 8005e78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	460a      	mov	r2, r1
 8005e80:	eb42 0303 	adc.w	r3, r2, r3
 8005e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	18db      	adds	r3, r3, r3
 8005ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005eb2:	f7fa fee9 	bl	8000c88 <__aeabi_uldivmod>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <UART_SetConfig+0x2d4>)
 8005ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	2164      	movs	r1, #100	@ 0x64
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	3332      	adds	r3, #50	@ 0x32
 8005ece:	4a08      	ldr	r2, [pc, #32]	@ (8005ef0 <UART_SetConfig+0x2d4>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	f003 0207 	and.w	r2, r3, #7
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4422      	add	r2, r4
 8005ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ee4:	e106      	b.n	80060f4 <UART_SetConfig+0x4d8>
 8005ee6:	bf00      	nop
 8005ee8:	40011000 	.word	0x40011000
 8005eec:	40011400 	.word	0x40011400
 8005ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005efe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f06:	4642      	mov	r2, r8
 8005f08:	464b      	mov	r3, r9
 8005f0a:	1891      	adds	r1, r2, r2
 8005f0c:	6239      	str	r1, [r7, #32]
 8005f0e:	415b      	adcs	r3, r3
 8005f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f16:	4641      	mov	r1, r8
 8005f18:	1854      	adds	r4, r2, r1
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	eb43 0501 	adc.w	r5, r3, r1
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	00eb      	lsls	r3, r5, #3
 8005f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f2e:	00e2      	lsls	r2, r4, #3
 8005f30:	4614      	mov	r4, r2
 8005f32:	461d      	mov	r5, r3
 8005f34:	4643      	mov	r3, r8
 8005f36:	18e3      	adds	r3, r4, r3
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	eb45 0303 	adc.w	r3, r5, r3
 8005f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f62:	4629      	mov	r1, r5
 8005f64:	008b      	lsls	r3, r1, #2
 8005f66:	4621      	mov	r1, r4
 8005f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	008a      	lsls	r2, r1, #2
 8005f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f74:	f7fa fe88 	bl	8000c88 <__aeabi_uldivmod>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4b60      	ldr	r3, [pc, #384]	@ (8006100 <UART_SetConfig+0x4e4>)
 8005f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	011c      	lsls	r4, r3, #4
 8005f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f98:	4642      	mov	r2, r8
 8005f9a:	464b      	mov	r3, r9
 8005f9c:	1891      	adds	r1, r2, r2
 8005f9e:	61b9      	str	r1, [r7, #24]
 8005fa0:	415b      	adcs	r3, r3
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa8:	4641      	mov	r1, r8
 8005faa:	1851      	adds	r1, r2, r1
 8005fac:	6139      	str	r1, [r7, #16]
 8005fae:	4649      	mov	r1, r9
 8005fb0:	414b      	adcs	r3, r1
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fc0:	4659      	mov	r1, fp
 8005fc2:	00cb      	lsls	r3, r1, #3
 8005fc4:	4651      	mov	r1, sl
 8005fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fca:	4651      	mov	r1, sl
 8005fcc:	00ca      	lsls	r2, r1, #3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	189b      	adds	r3, r3, r2
 8005fd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fdc:	464b      	mov	r3, r9
 8005fde:	460a      	mov	r2, r1
 8005fe0:	eb42 0303 	adc.w	r3, r2, r3
 8005fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ff2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006000:	4649      	mov	r1, r9
 8006002:	008b      	lsls	r3, r1, #2
 8006004:	4641      	mov	r1, r8
 8006006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800600a:	4641      	mov	r1, r8
 800600c:	008a      	lsls	r2, r1, #2
 800600e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006012:	f7fa fe39 	bl	8000c88 <__aeabi_uldivmod>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4611      	mov	r1, r2
 800601c:	4b38      	ldr	r3, [pc, #224]	@ (8006100 <UART_SetConfig+0x4e4>)
 800601e:	fba3 2301 	umull	r2, r3, r3, r1
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	2264      	movs	r2, #100	@ 0x64
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	1acb      	subs	r3, r1, r3
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	3332      	adds	r3, #50	@ 0x32
 8006030:	4a33      	ldr	r2, [pc, #204]	@ (8006100 <UART_SetConfig+0x4e4>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800603c:	441c      	add	r4, r3
 800603e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006042:	2200      	movs	r2, #0
 8006044:	673b      	str	r3, [r7, #112]	@ 0x70
 8006046:	677a      	str	r2, [r7, #116]	@ 0x74
 8006048:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	1891      	adds	r1, r2, r2
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	415b      	adcs	r3, r3
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800605c:	4641      	mov	r1, r8
 800605e:	1851      	adds	r1, r2, r1
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	4649      	mov	r1, r9
 8006064:	414b      	adcs	r3, r1
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006074:	4659      	mov	r1, fp
 8006076:	00cb      	lsls	r3, r1, #3
 8006078:	4651      	mov	r1, sl
 800607a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800607e:	4651      	mov	r1, sl
 8006080:	00ca      	lsls	r2, r1, #3
 8006082:	4610      	mov	r0, r2
 8006084:	4619      	mov	r1, r3
 8006086:	4603      	mov	r3, r0
 8006088:	4642      	mov	r2, r8
 800608a:	189b      	adds	r3, r3, r2
 800608c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800608e:	464b      	mov	r3, r9
 8006090:	460a      	mov	r2, r1
 8006092:	eb42 0303 	adc.w	r3, r2, r3
 8006096:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80060a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060b0:	4649      	mov	r1, r9
 80060b2:	008b      	lsls	r3, r1, #2
 80060b4:	4641      	mov	r1, r8
 80060b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ba:	4641      	mov	r1, r8
 80060bc:	008a      	lsls	r2, r1, #2
 80060be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060c2:	f7fa fde1 	bl	8000c88 <__aeabi_uldivmod>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006100 <UART_SetConfig+0x4e4>)
 80060cc:	fba3 1302 	umull	r1, r3, r3, r2
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	2164      	movs	r1, #100	@ 0x64
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	3332      	adds	r3, #50	@ 0x32
 80060de:	4a08      	ldr	r2, [pc, #32]	@ (8006100 <UART_SetConfig+0x4e4>)
 80060e0:	fba2 2303 	umull	r2, r3, r2, r3
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	f003 020f 	and.w	r2, r3, #15
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4422      	add	r2, r4
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	bf00      	nop
 80060f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060fa:	46bd      	mov	sp, r7
 80060fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006100:	51eb851f 	.word	0x51eb851f

08006104 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	6039      	str	r1, [r7, #0]
 800610e:	71fb      	strb	r3, [r7, #7]
 8006110:	4613      	mov	r3, r2
 8006112:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8006118:	2200      	movs	r2, #0
 800611a:	2108      	movs	r1, #8
 800611c:	480c      	ldr	r0, [pc, #48]	@ (8006150 <LIS3DSH_WriteIO+0x4c>)
 800611e:	f7fc ff0d 	bl	8002f3c <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8006122:	f107 010f 	add.w	r1, r7, #15
 8006126:	230a      	movs	r3, #10
 8006128:	2201      	movs	r2, #1
 800612a:	480a      	ldr	r0, [pc, #40]	@ (8006154 <LIS3DSH_WriteIO+0x50>)
 800612c:	f7fd fc73 	bl	8003a16 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8006130:	79bb      	ldrb	r3, [r7, #6]
 8006132:	b29a      	uxth	r2, r3
 8006134:	230a      	movs	r3, #10
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	4806      	ldr	r0, [pc, #24]	@ (8006154 <LIS3DSH_WriteIO+0x50>)
 800613a:	f7fd fc6c 	bl	8003a16 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 800613e:	2201      	movs	r2, #1
 8006140:	2108      	movs	r1, #8
 8006142:	4803      	ldr	r0, [pc, #12]	@ (8006150 <LIS3DSH_WriteIO+0x4c>)
 8006144:	f7fc fefa 	bl	8002f3c <HAL_GPIO_WritePin>
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40021000 	.word	0x40021000
 8006154:	20000498 	.word	0x20000498

08006158 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	6039      	str	r1, [r7, #0]
 8006162:	71fb      	strb	r3, [r7, #7]
 8006164:	4613      	mov	r3, r2
 8006166:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800616e:	b2db      	uxtb	r3, r3
 8006170:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8006172:	2200      	movs	r2, #0
 8006174:	2108      	movs	r1, #8
 8006176:	4818      	ldr	r0, [pc, #96]	@ (80061d8 <LIS3DSH_ReadIO+0x80>)
 8006178:	f7fc fee0 	bl	8002f3c <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	230a      	movs	r3, #10
 8006182:	2201      	movs	r2, #1
 8006184:	4815      	ldr	r0, [pc, #84]	@ (80061dc <LIS3DSH_ReadIO+0x84>)
 8006186:	f7fd fc46 	bl	8003a16 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 800618a:	79bb      	ldrb	r3, [r7, #6]
 800618c:	b29a      	uxth	r2, r3
 800618e:	f107 0108 	add.w	r1, r7, #8
 8006192:	230a      	movs	r3, #10
 8006194:	4811      	ldr	r0, [pc, #68]	@ (80061dc <LIS3DSH_ReadIO+0x84>)
 8006196:	f7fd fd81 	bl	8003c9c <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 800619a:	2201      	movs	r2, #1
 800619c:	2108      	movs	r1, #8
 800619e:	480e      	ldr	r0, [pc, #56]	@ (80061d8 <LIS3DSH_ReadIO+0x80>)
 80061a0:	f7fc fecc 	bl	8002f3c <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e00b      	b.n	80061c2 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	440b      	add	r3, r1
 80061b2:	3210      	adds	r2, #16
 80061b4:	443a      	add	r2, r7
 80061b6:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80061ba:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	3301      	adds	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]
 80061c2:	7bfa      	ldrb	r2, [r7, #15]
 80061c4:	79bb      	ldrb	r3, [r7, #6]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	429a      	cmp	r2, r3
 80061cc:	dbed      	blt.n	80061aa <LIS3DSH_ReadIO+0x52>
	}
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40021000 	.word	0x40021000
 80061dc:	20000498 	.word	0x20000498

080061e0 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 80061ee:	2258      	movs	r2, #88	@ 0x58
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	485b      	ldr	r0, [pc, #364]	@ (8006360 <LIS3DSH_Init+0x180>)
 80061f4:	f001 fa51 	bl	800769a <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	78db      	ldrb	r3, [r3, #3]
 80061fc:	b25b      	sxtb	r3, r3
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	b25a      	sxtb	r2, r3
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	b25b      	sxtb	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	b25b      	sxtb	r3, r3
 800620c:	b2db      	uxtb	r3, r3
 800620e:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b25b      	sxtb	r3, r3
 8006216:	f023 030f 	bic.w	r3, r3, #15
 800621a:	b25a      	sxtb	r2, r3
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	b25b      	sxtb	r3, r3
 8006220:	4313      	orrs	r3, r2
 8006222:	b25b      	sxtb	r3, r3
 8006224:	b2db      	uxtb	r3, r3
 8006226:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8006228:	f107 030f 	add.w	r3, r7, #15
 800622c:	2201      	movs	r2, #1
 800622e:	4619      	mov	r1, r3
 8006230:	2020      	movs	r0, #32
 8006232:	f7ff ff67 	bl	8006104 <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	789b      	ldrb	r3, [r3, #2]
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006244:	b25a      	sxtb	r2, r3
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	b25b      	sxtb	r3, r3
 800624a:	4313      	orrs	r3, r2
 800624c:	b25b      	sxtb	r3, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	b25b      	sxtb	r3, r3
 8006258:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800625c:	b25a      	sxtb	r2, r3
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	b25b      	sxtb	r3, r3
 8006262:	4313      	orrs	r3, r2
 8006264:	b25b      	sxtb	r3, r3
 8006266:	b2db      	uxtb	r3, r3
 8006268:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 800626a:	f107 030f 	add.w	r3, r7, #15
 800626e:	2201      	movs	r2, #1
 8006270:	4619      	mov	r1, r3
 8006272:	2024      	movs	r0, #36	@ 0x24
 8006274:	f7ff ff46 	bl	8006104 <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	791b      	ldrb	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8006280:	2388      	movs	r3, #136	@ 0x88
 8006282:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8006284:	f107 030f 	add.w	r3, r7, #15
 8006288:	2201      	movs	r2, #1
 800628a:	4619      	mov	r1, r3
 800628c:	2023      	movs	r0, #35	@ 0x23
 800628e:	f7ff ff39 	bl	8006104 <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b20      	cmp	r3, #32
 8006298:	d858      	bhi.n	800634c <LIS3DSH_Init+0x16c>
 800629a:	a201      	add	r2, pc, #4	@ (adr r2, 80062a0 <LIS3DSH_Init+0xc0>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	08006325 	.word	0x08006325
 80062a4:	0800634d 	.word	0x0800634d
 80062a8:	0800634d 	.word	0x0800634d
 80062ac:	0800634d 	.word	0x0800634d
 80062b0:	0800634d 	.word	0x0800634d
 80062b4:	0800634d 	.word	0x0800634d
 80062b8:	0800634d 	.word	0x0800634d
 80062bc:	0800634d 	.word	0x0800634d
 80062c0:	0800632d 	.word	0x0800632d
 80062c4:	0800634d 	.word	0x0800634d
 80062c8:	0800634d 	.word	0x0800634d
 80062cc:	0800634d 	.word	0x0800634d
 80062d0:	0800634d 	.word	0x0800634d
 80062d4:	0800634d 	.word	0x0800634d
 80062d8:	0800634d 	.word	0x0800634d
 80062dc:	0800634d 	.word	0x0800634d
 80062e0:	08006335 	.word	0x08006335
 80062e4:	0800634d 	.word	0x0800634d
 80062e8:	0800634d 	.word	0x0800634d
 80062ec:	0800634d 	.word	0x0800634d
 80062f0:	0800634d 	.word	0x0800634d
 80062f4:	0800634d 	.word	0x0800634d
 80062f8:	0800634d 	.word	0x0800634d
 80062fc:	0800634d 	.word	0x0800634d
 8006300:	0800633d 	.word	0x0800633d
 8006304:	0800634d 	.word	0x0800634d
 8006308:	0800634d 	.word	0x0800634d
 800630c:	0800634d 	.word	0x0800634d
 8006310:	0800634d 	.word	0x0800634d
 8006314:	0800634d 	.word	0x0800634d
 8006318:	0800634d 	.word	0x0800634d
 800631c:	0800634d 	.word	0x0800634d
 8006320:	08006345 	.word	0x08006345
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8006324:	4b0f      	ldr	r3, [pc, #60]	@ (8006364 <LIS3DSH_Init+0x184>)
 8006326:	4a10      	ldr	r2, [pc, #64]	@ (8006368 <LIS3DSH_Init+0x188>)
 8006328:	601a      	str	r2, [r3, #0]
			break;
 800632a:	e00f      	b.n	800634c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 800632c:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <LIS3DSH_Init+0x184>)
 800632e:	4a0f      	ldr	r2, [pc, #60]	@ (800636c <LIS3DSH_Init+0x18c>)
 8006330:	601a      	str	r2, [r3, #0]
			break;
 8006332:	e00b      	b.n	800634c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8006334:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <LIS3DSH_Init+0x184>)
 8006336:	4a0e      	ldr	r2, [pc, #56]	@ (8006370 <LIS3DSH_Init+0x190>)
 8006338:	601a      	str	r2, [r3, #0]
			break;
 800633a:	e007      	b.n	800634c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 800633c:	4b09      	ldr	r3, [pc, #36]	@ (8006364 <LIS3DSH_Init+0x184>)
 800633e:	4a0d      	ldr	r2, [pc, #52]	@ (8006374 <LIS3DSH_Init+0x194>)
 8006340:	601a      	str	r2, [r3, #0]
			break;
 8006342:	e003      	b.n	800634c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8006344:	4b07      	ldr	r3, [pc, #28]	@ (8006364 <LIS3DSH_Init+0x184>)
 8006346:	4a0c      	ldr	r2, [pc, #48]	@ (8006378 <LIS3DSH_Init+0x198>)
 8006348:	601a      	str	r2, [r3, #0]
			break;
 800634a:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 800634c:	2201      	movs	r2, #1
 800634e:	2108      	movs	r1, #8
 8006350:	480a      	ldr	r0, [pc, #40]	@ (800637c <LIS3DSH_Init+0x19c>)
 8006352:	f7fc fdf3 	bl	8002f3c <HAL_GPIO_WritePin>
}
 8006356:	bf00      	nop
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000498 	.word	0x20000498
 8006364:	20000018 	.word	0x20000018
 8006368:	3d75c28f 	.word	0x3d75c28f
 800636c:	3df5c28f 	.word	0x3df5c28f
 8006370:	3e3851ec 	.word	0x3e3851ec
 8006374:	3e75c28f 	.word	0x3e75c28f
 8006378:	3f3ae148 	.word	0x3f3ae148
 800637c:	40021000 	.word	0x40021000

08006380 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8006388:	f107 0314 	add.w	r3, r7, #20
 800638c:	2202      	movs	r2, #2
 800638e:	4619      	mov	r1, r3
 8006390:	2028      	movs	r0, #40	@ 0x28
 8006392:	f7ff fee1 	bl	8006158 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8006396:	7d7b      	ldrb	r3, [r7, #21]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	b29b      	uxth	r3, r3
 800639c:	7d3a      	ldrb	r2, [r7, #20]
 800639e:	4413      	add	r3, r2
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 80063a6:	f107 0314 	add.w	r3, r7, #20
 80063aa:	2202      	movs	r2, #2
 80063ac:	4619      	mov	r1, r3
 80063ae:	202a      	movs	r0, #42	@ 0x2a
 80063b0:	f7ff fed2 	bl	8006158 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 80063b4:	7d7b      	ldrb	r3, [r7, #21]
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	7d3a      	ldrb	r2, [r7, #20]
 80063bc:	4413      	add	r3, r2
 80063be:	b29b      	uxth	r3, r3
 80063c0:	b21b      	sxth	r3, r3
 80063c2:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 80063c4:	f107 0314 	add.w	r3, r7, #20
 80063c8:	2202      	movs	r2, #2
 80063ca:	4619      	mov	r1, r3
 80063cc:	202c      	movs	r0, #44	@ 0x2c
 80063ce:	f7ff fec3 	bl	8006158 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 80063d2:	7d7b      	ldrb	r3, [r7, #21]
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	7d3a      	ldrb	r2, [r7, #20]
 80063da:	4413      	add	r3, r2
 80063dc:	b29b      	uxth	r3, r3
 80063de:	b21b      	sxth	r3, r3
 80063e0:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	461a      	mov	r2, r3
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	6010      	str	r0, [r2, #0]
 80063ee:	889b      	ldrh	r3, [r3, #4]
 80063f0:	8093      	strh	r3, [r2, #4]
	
}
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8006402:	f107 0308 	add.w	r3, r7, #8
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff ffba 	bl	8006380 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 800640c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006418:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <LIS3DSH_GetDataScaled+0x68>)
 800641a:	edd3 7a00 	vldr	s15, [r3]
 800641e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006422:	4b11      	ldr	r3, [pc, #68]	@ (8006468 <LIS3DSH_GetDataScaled+0x6c>)
 8006424:	edd3 7a00 	vldr	s15, [r3]
 8006428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800646c <LIS3DSH_GetDataScaled+0x70>
 8006430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006434:	4b0e      	ldr	r3, [pc, #56]	@ (8006470 <LIS3DSH_GetDataScaled+0x74>)
 8006436:	edd3 7a00 	vldr	s15, [r3]
 800643a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800643e:	ee17 0a90 	vmov	r0, s15
 8006442:	f7fa f881 	bl	8000548 <__aeabi_f2d>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	e9c7 2300 	strd	r2, r3, [r7]
	//tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
	//tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
	
	return tempScaledData;
 800644e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006452:	ec43 2b17 	vmov	d7, r2, r3
}
 8006456:	eeb0 0a47 	vmov.f32	s0, s14
 800645a:	eef0 0a67 	vmov.f32	s1, s15
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000018 	.word	0x20000018
 8006468:	2000001c 	.word	0x2000001c
 800646c:	00000000 	.word	0x00000000
 8006470:	200004f0 	.word	0x200004f0

08006474 <LIS3DSH_GetDataScaledY>:


LIS3DSH_DataScaledY LIS3DSH_GetDataScaledY(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 800647a:	f107 0308 	add.w	r3, r7, #8
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ff7e 	bl	8006380 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaledY tempScaledData;
	//tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8006484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006488:	ee07 3a90 	vmov	s15, r3
 800648c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006490:	4b12      	ldr	r3, [pc, #72]	@ (80064dc <LIS3DSH_GetDataScaledY+0x68>)
 8006492:	edd3 7a00 	vldr	s15, [r3]
 8006496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800649a:	4b11      	ldr	r3, [pc, #68]	@ (80064e0 <LIS3DSH_GetDataScaledY+0x6c>)
 800649c:	edd3 7a00 	vldr	s15, [r3]
 80064a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80064e4 <LIS3DSH_GetDataScaledY+0x70>
 80064a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ac:	4b0e      	ldr	r3, [pc, #56]	@ (80064e8 <LIS3DSH_GetDataScaledY+0x74>)
 80064ae:	edd3 7a00 	vldr	s15, [r3]
 80064b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b6:	ee17 0a90 	vmov	r0, s15
 80064ba:	f7fa f845 	bl	8000548 <__aeabi_f2d>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	e9c7 2300 	strd	r2, r3, [r7]
	//tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;

	return tempScaledData;
 80064c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80064ce:	eeb0 0a47 	vmov.f32	s0, s14
 80064d2:	eef0 0a67 	vmov.f32	s1, s15
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000018 	.word	0x20000018
 80064e0:	20000020 	.word	0x20000020
 80064e4:	00000000 	.word	0x00000000
 80064e8:	200004f4 	.word	0x200004f4

080064ec <LIS3DSH_GetDataScaledZ>:

LIS3DSH_DataScaledZ LIS3DSH_GetDataScaledZ(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80064f2:	f107 0308 	add.w	r3, r7, #8
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff ff42 	bl	8006380 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaledZ tempScaledData;
	//tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
	 //tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 80064fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006500:	ee07 3a90 	vmov	s15, r3
 8006504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006508:	4b12      	ldr	r3, [pc, #72]	@ (8006554 <LIS3DSH_GetDataScaledZ+0x68>)
 800650a:	edd3 7a00 	vldr	s15, [r3]
 800650e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006512:	4b11      	ldr	r3, [pc, #68]	@ (8006558 <LIS3DSH_GetDataScaledZ+0x6c>)
 8006514:	edd3 7a00 	vldr	s15, [r3]
 8006518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800655c <LIS3DSH_GetDataScaledZ+0x70>
 8006520:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006524:	4b0e      	ldr	r3, [pc, #56]	@ (8006560 <LIS3DSH_GetDataScaledZ+0x74>)
 8006526:	edd3 7a00 	vldr	s15, [r3]
 800652a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800652e:	ee17 0a90 	vmov	r0, s15
 8006532:	f7fa f809 	bl	8000548 <__aeabi_f2d>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	e9c7 2300 	strd	r2, r3, [r7]

	return tempScaledData;
 800653e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006542:	ec43 2b17 	vmov	d7, r2, r3
}
 8006546:	eeb0 0a47 	vmov.f32	s0, s14
 800654a:	eef0 0a67 	vmov.f32	s1, s15
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000018 	.word	0x20000018
 8006558:	20000024 	.word	0x20000024
 800655c:	00000000 	.word	0x00000000
 8006560:	200004f8 	.word	0x200004f8

08006564 <LIS3DSH_X_calibrate>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	ed87 0a01 	vstr	s0, [r7, #4]
 800656e:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 8006572:	ed97 7a00 	vldr	s14, [r7]
 8006576:	edd7 7a01 	vldr	s15, [r7, #4]
 800657a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800657e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006586:	4b0b      	ldr	r3, [pc, #44]	@ (80065b4 <LIS3DSH_X_calibrate+0x50>)
 8006588:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 800658c:	ed97 7a00 	vldr	s14, [r7]
 8006590:	edd7 7a01 	vldr	s15, [r7, #4]
 8006594:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006598:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80065b8 <LIS3DSH_X_calibrate+0x54>
 800659c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a0:	4b06      	ldr	r3, [pc, #24]	@ (80065bc <LIS3DSH_X_calibrate+0x58>)
 80065a2:	edc3 7a00 	vstr	s15, [r3]
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	200004f0 	.word	0x200004f0
 80065b8:	44fa0000 	.word	0x44fa0000
 80065bc:	2000001c 	.word	0x2000001c

080065c0 <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80065ca:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80065ce:	ed97 7a00 	vldr	s14, [r7]
 80065d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80065d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80065de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <LIS3DSH_Y_calibrate+0x50>)
 80065e4:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 80065e8:	ed97 7a00 	vldr	s14, [r7]
 80065ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80065f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065f4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8006614 <LIS3DSH_Y_calibrate+0x54>
 80065f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065fc:	4b06      	ldr	r3, [pc, #24]	@ (8006618 <LIS3DSH_Y_calibrate+0x58>)
 80065fe:	edc3 7a00 	vstr	s15, [r3]
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	200004f4 	.word	0x200004f4
 8006614:	44fa0000 	.word	0x44fa0000
 8006618:	20000020 	.word	0x20000020

0800661c <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	ed87 0a01 	vstr	s0, [r7, #4]
 8006626:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800662a:	ed97 7a00 	vldr	s14, [r7]
 800662e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006632:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006636:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800663a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800663e:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <LIS3DSH_Z_calibrate+0x50>)
 8006640:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8006644:	ed97 7a00 	vldr	s14, [r7]
 8006648:	edd7 7a01 	vldr	s15, [r7, #4]
 800664c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006650:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8006670 <LIS3DSH_Z_calibrate+0x54>
 8006654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <LIS3DSH_Z_calibrate+0x58>)
 800665a:	edc3 7a00 	vstr	s15, [r3]
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	200004f8 	.word	0x200004f8
 8006670:	44fa0000 	.word	0x44fa0000
 8006674:	20000024 	.word	0x20000024

08006678 <__cvt>:
 8006678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	ec57 6b10 	vmov	r6, r7, d0
 8006680:	2f00      	cmp	r7, #0
 8006682:	460c      	mov	r4, r1
 8006684:	4619      	mov	r1, r3
 8006686:	463b      	mov	r3, r7
 8006688:	bfbb      	ittet	lt
 800668a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800668e:	461f      	movlt	r7, r3
 8006690:	2300      	movge	r3, #0
 8006692:	232d      	movlt	r3, #45	@ 0x2d
 8006694:	700b      	strb	r3, [r1, #0]
 8006696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006698:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800669c:	4691      	mov	r9, r2
 800669e:	f023 0820 	bic.w	r8, r3, #32
 80066a2:	bfbc      	itt	lt
 80066a4:	4632      	movlt	r2, r6
 80066a6:	4616      	movlt	r6, r2
 80066a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066ac:	d005      	beq.n	80066ba <__cvt+0x42>
 80066ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066b2:	d100      	bne.n	80066b6 <__cvt+0x3e>
 80066b4:	3401      	adds	r4, #1
 80066b6:	2102      	movs	r1, #2
 80066b8:	e000      	b.n	80066bc <__cvt+0x44>
 80066ba:	2103      	movs	r1, #3
 80066bc:	ab03      	add	r3, sp, #12
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	ab02      	add	r3, sp, #8
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	ec47 6b10 	vmov	d0, r6, r7
 80066c8:	4653      	mov	r3, sl
 80066ca:	4622      	mov	r2, r4
 80066cc:	f001 f884 	bl	80077d8 <_dtoa_r>
 80066d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066d4:	4605      	mov	r5, r0
 80066d6:	d119      	bne.n	800670c <__cvt+0x94>
 80066d8:	f019 0f01 	tst.w	r9, #1
 80066dc:	d00e      	beq.n	80066fc <__cvt+0x84>
 80066de:	eb00 0904 	add.w	r9, r0, r4
 80066e2:	2200      	movs	r2, #0
 80066e4:	2300      	movs	r3, #0
 80066e6:	4630      	mov	r0, r6
 80066e8:	4639      	mov	r1, r7
 80066ea:	f7fa f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ee:	b108      	cbz	r0, 80066f4 <__cvt+0x7c>
 80066f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80066f4:	2230      	movs	r2, #48	@ 0x30
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	454b      	cmp	r3, r9
 80066fa:	d31e      	bcc.n	800673a <__cvt+0xc2>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006700:	1b5b      	subs	r3, r3, r5
 8006702:	4628      	mov	r0, r5
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	b004      	add	sp, #16
 8006708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006710:	eb00 0904 	add.w	r9, r0, r4
 8006714:	d1e5      	bne.n	80066e2 <__cvt+0x6a>
 8006716:	7803      	ldrb	r3, [r0, #0]
 8006718:	2b30      	cmp	r3, #48	@ 0x30
 800671a:	d10a      	bne.n	8006732 <__cvt+0xba>
 800671c:	2200      	movs	r2, #0
 800671e:	2300      	movs	r3, #0
 8006720:	4630      	mov	r0, r6
 8006722:	4639      	mov	r1, r7
 8006724:	f7fa f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006728:	b918      	cbnz	r0, 8006732 <__cvt+0xba>
 800672a:	f1c4 0401 	rsb	r4, r4, #1
 800672e:	f8ca 4000 	str.w	r4, [sl]
 8006732:	f8da 3000 	ldr.w	r3, [sl]
 8006736:	4499      	add	r9, r3
 8006738:	e7d3      	b.n	80066e2 <__cvt+0x6a>
 800673a:	1c59      	adds	r1, r3, #1
 800673c:	9103      	str	r1, [sp, #12]
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e7d9      	b.n	80066f6 <__cvt+0x7e>

08006742 <__exponent>:
 8006742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006744:	2900      	cmp	r1, #0
 8006746:	bfba      	itte	lt
 8006748:	4249      	neglt	r1, r1
 800674a:	232d      	movlt	r3, #45	@ 0x2d
 800674c:	232b      	movge	r3, #43	@ 0x2b
 800674e:	2909      	cmp	r1, #9
 8006750:	7002      	strb	r2, [r0, #0]
 8006752:	7043      	strb	r3, [r0, #1]
 8006754:	dd29      	ble.n	80067aa <__exponent+0x68>
 8006756:	f10d 0307 	add.w	r3, sp, #7
 800675a:	461d      	mov	r5, r3
 800675c:	270a      	movs	r7, #10
 800675e:	461a      	mov	r2, r3
 8006760:	fbb1 f6f7 	udiv	r6, r1, r7
 8006764:	fb07 1416 	mls	r4, r7, r6, r1
 8006768:	3430      	adds	r4, #48	@ 0x30
 800676a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800676e:	460c      	mov	r4, r1
 8006770:	2c63      	cmp	r4, #99	@ 0x63
 8006772:	f103 33ff 	add.w	r3, r3, #4294967295
 8006776:	4631      	mov	r1, r6
 8006778:	dcf1      	bgt.n	800675e <__exponent+0x1c>
 800677a:	3130      	adds	r1, #48	@ 0x30
 800677c:	1e94      	subs	r4, r2, #2
 800677e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006782:	1c41      	adds	r1, r0, #1
 8006784:	4623      	mov	r3, r4
 8006786:	42ab      	cmp	r3, r5
 8006788:	d30a      	bcc.n	80067a0 <__exponent+0x5e>
 800678a:	f10d 0309 	add.w	r3, sp, #9
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	42ac      	cmp	r4, r5
 8006792:	bf88      	it	hi
 8006794:	2300      	movhi	r3, #0
 8006796:	3302      	adds	r3, #2
 8006798:	4403      	add	r3, r0
 800679a:	1a18      	subs	r0, r3, r0
 800679c:	b003      	add	sp, #12
 800679e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067a8:	e7ed      	b.n	8006786 <__exponent+0x44>
 80067aa:	2330      	movs	r3, #48	@ 0x30
 80067ac:	3130      	adds	r1, #48	@ 0x30
 80067ae:	7083      	strb	r3, [r0, #2]
 80067b0:	70c1      	strb	r1, [r0, #3]
 80067b2:	1d03      	adds	r3, r0, #4
 80067b4:	e7f1      	b.n	800679a <__exponent+0x58>
	...

080067b8 <_printf_float>:
 80067b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067bc:	b08d      	sub	sp, #52	@ 0x34
 80067be:	460c      	mov	r4, r1
 80067c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067c4:	4616      	mov	r6, r2
 80067c6:	461f      	mov	r7, r3
 80067c8:	4605      	mov	r5, r0
 80067ca:	f000 feef 	bl	80075ac <_localeconv_r>
 80067ce:	6803      	ldr	r3, [r0, #0]
 80067d0:	9304      	str	r3, [sp, #16]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7f9 fd4c 	bl	8000270 <strlen>
 80067d8:	2300      	movs	r3, #0
 80067da:	930a      	str	r3, [sp, #40]	@ 0x28
 80067dc:	f8d8 3000 	ldr.w	r3, [r8]
 80067e0:	9005      	str	r0, [sp, #20]
 80067e2:	3307      	adds	r3, #7
 80067e4:	f023 0307 	bic.w	r3, r3, #7
 80067e8:	f103 0208 	add.w	r2, r3, #8
 80067ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80067f0:	f8d4 b000 	ldr.w	fp, [r4]
 80067f4:	f8c8 2000 	str.w	r2, [r8]
 80067f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006800:	9307      	str	r3, [sp, #28]
 8006802:	f8cd 8018 	str.w	r8, [sp, #24]
 8006806:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800680a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800680e:	4b9c      	ldr	r3, [pc, #624]	@ (8006a80 <_printf_float+0x2c8>)
 8006810:	f04f 32ff 	mov.w	r2, #4294967295
 8006814:	f7fa f98a 	bl	8000b2c <__aeabi_dcmpun>
 8006818:	bb70      	cbnz	r0, 8006878 <_printf_float+0xc0>
 800681a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800681e:	4b98      	ldr	r3, [pc, #608]	@ (8006a80 <_printf_float+0x2c8>)
 8006820:	f04f 32ff 	mov.w	r2, #4294967295
 8006824:	f7fa f964 	bl	8000af0 <__aeabi_dcmple>
 8006828:	bb30      	cbnz	r0, 8006878 <_printf_float+0xc0>
 800682a:	2200      	movs	r2, #0
 800682c:	2300      	movs	r3, #0
 800682e:	4640      	mov	r0, r8
 8006830:	4649      	mov	r1, r9
 8006832:	f7fa f953 	bl	8000adc <__aeabi_dcmplt>
 8006836:	b110      	cbz	r0, 800683e <_printf_float+0x86>
 8006838:	232d      	movs	r3, #45	@ 0x2d
 800683a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800683e:	4a91      	ldr	r2, [pc, #580]	@ (8006a84 <_printf_float+0x2cc>)
 8006840:	4b91      	ldr	r3, [pc, #580]	@ (8006a88 <_printf_float+0x2d0>)
 8006842:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006846:	bf94      	ite	ls
 8006848:	4690      	movls	r8, r2
 800684a:	4698      	movhi	r8, r3
 800684c:	2303      	movs	r3, #3
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	f02b 0304 	bic.w	r3, fp, #4
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	f04f 0900 	mov.w	r9, #0
 800685a:	9700      	str	r7, [sp, #0]
 800685c:	4633      	mov	r3, r6
 800685e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006860:	4621      	mov	r1, r4
 8006862:	4628      	mov	r0, r5
 8006864:	f000 f9d2 	bl	8006c0c <_printf_common>
 8006868:	3001      	adds	r0, #1
 800686a:	f040 808d 	bne.w	8006988 <_printf_float+0x1d0>
 800686e:	f04f 30ff 	mov.w	r0, #4294967295
 8006872:	b00d      	add	sp, #52	@ 0x34
 8006874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	4640      	mov	r0, r8
 800687e:	4649      	mov	r1, r9
 8006880:	f7fa f954 	bl	8000b2c <__aeabi_dcmpun>
 8006884:	b140      	cbz	r0, 8006898 <_printf_float+0xe0>
 8006886:	464b      	mov	r3, r9
 8006888:	2b00      	cmp	r3, #0
 800688a:	bfbc      	itt	lt
 800688c:	232d      	movlt	r3, #45	@ 0x2d
 800688e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006892:	4a7e      	ldr	r2, [pc, #504]	@ (8006a8c <_printf_float+0x2d4>)
 8006894:	4b7e      	ldr	r3, [pc, #504]	@ (8006a90 <_printf_float+0x2d8>)
 8006896:	e7d4      	b.n	8006842 <_printf_float+0x8a>
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800689e:	9206      	str	r2, [sp, #24]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	d13b      	bne.n	800691c <_printf_float+0x164>
 80068a4:	2306      	movs	r3, #6
 80068a6:	6063      	str	r3, [r4, #4]
 80068a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068ac:	2300      	movs	r3, #0
 80068ae:	6022      	str	r2, [r4, #0]
 80068b0:	9303      	str	r3, [sp, #12]
 80068b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80068b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068b8:	ab09      	add	r3, sp, #36	@ 0x24
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	6861      	ldr	r1, [r4, #4]
 80068be:	ec49 8b10 	vmov	d0, r8, r9
 80068c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7ff fed6 	bl	8006678 <__cvt>
 80068cc:	9b06      	ldr	r3, [sp, #24]
 80068ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068d0:	2b47      	cmp	r3, #71	@ 0x47
 80068d2:	4680      	mov	r8, r0
 80068d4:	d129      	bne.n	800692a <_printf_float+0x172>
 80068d6:	1cc8      	adds	r0, r1, #3
 80068d8:	db02      	blt.n	80068e0 <_printf_float+0x128>
 80068da:	6863      	ldr	r3, [r4, #4]
 80068dc:	4299      	cmp	r1, r3
 80068de:	dd41      	ble.n	8006964 <_printf_float+0x1ac>
 80068e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80068e4:	fa5f fa8a 	uxtb.w	sl, sl
 80068e8:	3901      	subs	r1, #1
 80068ea:	4652      	mov	r2, sl
 80068ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80068f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80068f2:	f7ff ff26 	bl	8006742 <__exponent>
 80068f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068f8:	1813      	adds	r3, r2, r0
 80068fa:	2a01      	cmp	r2, #1
 80068fc:	4681      	mov	r9, r0
 80068fe:	6123      	str	r3, [r4, #16]
 8006900:	dc02      	bgt.n	8006908 <_printf_float+0x150>
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	07d2      	lsls	r2, r2, #31
 8006906:	d501      	bpl.n	800690c <_printf_float+0x154>
 8006908:	3301      	adds	r3, #1
 800690a:	6123      	str	r3, [r4, #16]
 800690c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0a2      	beq.n	800685a <_printf_float+0xa2>
 8006914:	232d      	movs	r3, #45	@ 0x2d
 8006916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800691a:	e79e      	b.n	800685a <_printf_float+0xa2>
 800691c:	9a06      	ldr	r2, [sp, #24]
 800691e:	2a47      	cmp	r2, #71	@ 0x47
 8006920:	d1c2      	bne.n	80068a8 <_printf_float+0xf0>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1c0      	bne.n	80068a8 <_printf_float+0xf0>
 8006926:	2301      	movs	r3, #1
 8006928:	e7bd      	b.n	80068a6 <_printf_float+0xee>
 800692a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800692e:	d9db      	bls.n	80068e8 <_printf_float+0x130>
 8006930:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006934:	d118      	bne.n	8006968 <_printf_float+0x1b0>
 8006936:	2900      	cmp	r1, #0
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	dd0b      	ble.n	8006954 <_printf_float+0x19c>
 800693c:	6121      	str	r1, [r4, #16]
 800693e:	b913      	cbnz	r3, 8006946 <_printf_float+0x18e>
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	07d0      	lsls	r0, r2, #31
 8006944:	d502      	bpl.n	800694c <_printf_float+0x194>
 8006946:	3301      	adds	r3, #1
 8006948:	440b      	add	r3, r1
 800694a:	6123      	str	r3, [r4, #16]
 800694c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800694e:	f04f 0900 	mov.w	r9, #0
 8006952:	e7db      	b.n	800690c <_printf_float+0x154>
 8006954:	b913      	cbnz	r3, 800695c <_printf_float+0x1a4>
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	07d2      	lsls	r2, r2, #31
 800695a:	d501      	bpl.n	8006960 <_printf_float+0x1a8>
 800695c:	3302      	adds	r3, #2
 800695e:	e7f4      	b.n	800694a <_printf_float+0x192>
 8006960:	2301      	movs	r3, #1
 8006962:	e7f2      	b.n	800694a <_printf_float+0x192>
 8006964:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800696a:	4299      	cmp	r1, r3
 800696c:	db05      	blt.n	800697a <_printf_float+0x1c2>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	6121      	str	r1, [r4, #16]
 8006972:	07d8      	lsls	r0, r3, #31
 8006974:	d5ea      	bpl.n	800694c <_printf_float+0x194>
 8006976:	1c4b      	adds	r3, r1, #1
 8006978:	e7e7      	b.n	800694a <_printf_float+0x192>
 800697a:	2900      	cmp	r1, #0
 800697c:	bfd4      	ite	le
 800697e:	f1c1 0202 	rsble	r2, r1, #2
 8006982:	2201      	movgt	r2, #1
 8006984:	4413      	add	r3, r2
 8006986:	e7e0      	b.n	800694a <_printf_float+0x192>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	055a      	lsls	r2, r3, #21
 800698c:	d407      	bmi.n	800699e <_printf_float+0x1e6>
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	4642      	mov	r2, r8
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d12b      	bne.n	80069f4 <_printf_float+0x23c>
 800699c:	e767      	b.n	800686e <_printf_float+0xb6>
 800699e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069a2:	f240 80dd 	bls.w	8006b60 <_printf_float+0x3a8>
 80069a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069aa:	2200      	movs	r2, #0
 80069ac:	2300      	movs	r3, #0
 80069ae:	f7fa f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d033      	beq.n	8006a1e <_printf_float+0x266>
 80069b6:	4a37      	ldr	r2, [pc, #220]	@ (8006a94 <_printf_float+0x2dc>)
 80069b8:	2301      	movs	r3, #1
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	f43f af54 	beq.w	800686e <_printf_float+0xb6>
 80069c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80069ca:	4543      	cmp	r3, r8
 80069cc:	db02      	blt.n	80069d4 <_printf_float+0x21c>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	07d8      	lsls	r0, r3, #31
 80069d2:	d50f      	bpl.n	80069f4 <_printf_float+0x23c>
 80069d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f af45 	beq.w	800686e <_printf_float+0xb6>
 80069e4:	f04f 0900 	mov.w	r9, #0
 80069e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80069ec:	f104 0a1a 	add.w	sl, r4, #26
 80069f0:	45c8      	cmp	r8, r9
 80069f2:	dc09      	bgt.n	8006a08 <_printf_float+0x250>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	079b      	lsls	r3, r3, #30
 80069f8:	f100 8103 	bmi.w	8006c02 <_printf_float+0x44a>
 80069fc:	68e0      	ldr	r0, [r4, #12]
 80069fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a00:	4298      	cmp	r0, r3
 8006a02:	bfb8      	it	lt
 8006a04:	4618      	movlt	r0, r3
 8006a06:	e734      	b.n	8006872 <_printf_float+0xba>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4652      	mov	r2, sl
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	4628      	mov	r0, r5
 8006a10:	47b8      	blx	r7
 8006a12:	3001      	adds	r0, #1
 8006a14:	f43f af2b 	beq.w	800686e <_printf_float+0xb6>
 8006a18:	f109 0901 	add.w	r9, r9, #1
 8006a1c:	e7e8      	b.n	80069f0 <_printf_float+0x238>
 8006a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc39      	bgt.n	8006a98 <_printf_float+0x2e0>
 8006a24:	4a1b      	ldr	r2, [pc, #108]	@ (8006a94 <_printf_float+0x2dc>)
 8006a26:	2301      	movs	r3, #1
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f af1d 	beq.w	800686e <_printf_float+0xb6>
 8006a34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a38:	ea59 0303 	orrs.w	r3, r9, r3
 8006a3c:	d102      	bne.n	8006a44 <_printf_float+0x28c>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	07d9      	lsls	r1, r3, #31
 8006a42:	d5d7      	bpl.n	80069f4 <_printf_float+0x23c>
 8006a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f43f af0d 	beq.w	800686e <_printf_float+0xb6>
 8006a54:	f04f 0a00 	mov.w	sl, #0
 8006a58:	f104 0b1a 	add.w	fp, r4, #26
 8006a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5e:	425b      	negs	r3, r3
 8006a60:	4553      	cmp	r3, sl
 8006a62:	dc01      	bgt.n	8006a68 <_printf_float+0x2b0>
 8006a64:	464b      	mov	r3, r9
 8006a66:	e793      	b.n	8006990 <_printf_float+0x1d8>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	465a      	mov	r2, fp
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4628      	mov	r0, r5
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	f43f aefb 	beq.w	800686e <_printf_float+0xb6>
 8006a78:	f10a 0a01 	add.w	sl, sl, #1
 8006a7c:	e7ee      	b.n	8006a5c <_printf_float+0x2a4>
 8006a7e:	bf00      	nop
 8006a80:	7fefffff 	.word	0x7fefffff
 8006a84:	0800b460 	.word	0x0800b460
 8006a88:	0800b464 	.word	0x0800b464
 8006a8c:	0800b468 	.word	0x0800b468
 8006a90:	0800b46c 	.word	0x0800b46c
 8006a94:	0800b470 	.word	0x0800b470
 8006a98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a9e:	4553      	cmp	r3, sl
 8006aa0:	bfa8      	it	ge
 8006aa2:	4653      	movge	r3, sl
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	4699      	mov	r9, r3
 8006aa8:	dc36      	bgt.n	8006b18 <_printf_float+0x360>
 8006aaa:	f04f 0b00 	mov.w	fp, #0
 8006aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ab2:	f104 021a 	add.w	r2, r4, #26
 8006ab6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ab8:	9306      	str	r3, [sp, #24]
 8006aba:	eba3 0309 	sub.w	r3, r3, r9
 8006abe:	455b      	cmp	r3, fp
 8006ac0:	dc31      	bgt.n	8006b26 <_printf_float+0x36e>
 8006ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ac4:	459a      	cmp	sl, r3
 8006ac6:	dc3a      	bgt.n	8006b3e <_printf_float+0x386>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	07da      	lsls	r2, r3, #31
 8006acc:	d437      	bmi.n	8006b3e <_printf_float+0x386>
 8006ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad0:	ebaa 0903 	sub.w	r9, sl, r3
 8006ad4:	9b06      	ldr	r3, [sp, #24]
 8006ad6:	ebaa 0303 	sub.w	r3, sl, r3
 8006ada:	4599      	cmp	r9, r3
 8006adc:	bfa8      	it	ge
 8006ade:	4699      	movge	r9, r3
 8006ae0:	f1b9 0f00 	cmp.w	r9, #0
 8006ae4:	dc33      	bgt.n	8006b4e <_printf_float+0x396>
 8006ae6:	f04f 0800 	mov.w	r8, #0
 8006aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006aee:	f104 0b1a 	add.w	fp, r4, #26
 8006af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af4:	ebaa 0303 	sub.w	r3, sl, r3
 8006af8:	eba3 0309 	sub.w	r3, r3, r9
 8006afc:	4543      	cmp	r3, r8
 8006afe:	f77f af79 	ble.w	80069f4 <_printf_float+0x23c>
 8006b02:	2301      	movs	r3, #1
 8006b04:	465a      	mov	r2, fp
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f aeae 	beq.w	800686e <_printf_float+0xb6>
 8006b12:	f108 0801 	add.w	r8, r8, #1
 8006b16:	e7ec      	b.n	8006af2 <_printf_float+0x33a>
 8006b18:	4642      	mov	r2, r8
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	d1c2      	bne.n	8006aaa <_printf_float+0x2f2>
 8006b24:	e6a3      	b.n	800686e <_printf_float+0xb6>
 8006b26:	2301      	movs	r3, #1
 8006b28:	4631      	mov	r1, r6
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	9206      	str	r2, [sp, #24]
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	f43f ae9c 	beq.w	800686e <_printf_float+0xb6>
 8006b36:	9a06      	ldr	r2, [sp, #24]
 8006b38:	f10b 0b01 	add.w	fp, fp, #1
 8006b3c:	e7bb      	b.n	8006ab6 <_printf_float+0x2fe>
 8006b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d1c0      	bne.n	8006ace <_printf_float+0x316>
 8006b4c:	e68f      	b.n	800686e <_printf_float+0xb6>
 8006b4e:	9a06      	ldr	r2, [sp, #24]
 8006b50:	464b      	mov	r3, r9
 8006b52:	4442      	add	r2, r8
 8006b54:	4631      	mov	r1, r6
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b8      	blx	r7
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d1c3      	bne.n	8006ae6 <_printf_float+0x32e>
 8006b5e:	e686      	b.n	800686e <_printf_float+0xb6>
 8006b60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b64:	f1ba 0f01 	cmp.w	sl, #1
 8006b68:	dc01      	bgt.n	8006b6e <_printf_float+0x3b6>
 8006b6a:	07db      	lsls	r3, r3, #31
 8006b6c:	d536      	bpl.n	8006bdc <_printf_float+0x424>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4642      	mov	r2, r8
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f43f ae78 	beq.w	800686e <_printf_float+0xb6>
 8006b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b82:	4631      	mov	r1, r6
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b8      	blx	r7
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f43f ae70 	beq.w	800686e <_printf_float+0xb6>
 8006b8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b92:	2200      	movs	r2, #0
 8006b94:	2300      	movs	r3, #0
 8006b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b9a:	f7f9 ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b9e:	b9c0      	cbnz	r0, 8006bd2 <_printf_float+0x41a>
 8006ba0:	4653      	mov	r3, sl
 8006ba2:	f108 0201 	add.w	r2, r8, #1
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	d10c      	bne.n	8006bca <_printf_float+0x412>
 8006bb0:	e65d      	b.n	800686e <_printf_float+0xb6>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	465a      	mov	r2, fp
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f43f ae56 	beq.w	800686e <_printf_float+0xb6>
 8006bc2:	f108 0801 	add.w	r8, r8, #1
 8006bc6:	45d0      	cmp	r8, sl
 8006bc8:	dbf3      	blt.n	8006bb2 <_printf_float+0x3fa>
 8006bca:	464b      	mov	r3, r9
 8006bcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006bd0:	e6df      	b.n	8006992 <_printf_float+0x1da>
 8006bd2:	f04f 0800 	mov.w	r8, #0
 8006bd6:	f104 0b1a 	add.w	fp, r4, #26
 8006bda:	e7f4      	b.n	8006bc6 <_printf_float+0x40e>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4642      	mov	r2, r8
 8006be0:	e7e1      	b.n	8006ba6 <_printf_float+0x3ee>
 8006be2:	2301      	movs	r3, #1
 8006be4:	464a      	mov	r2, r9
 8006be6:	4631      	mov	r1, r6
 8006be8:	4628      	mov	r0, r5
 8006bea:	47b8      	blx	r7
 8006bec:	3001      	adds	r0, #1
 8006bee:	f43f ae3e 	beq.w	800686e <_printf_float+0xb6>
 8006bf2:	f108 0801 	add.w	r8, r8, #1
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bfa:	1a5b      	subs	r3, r3, r1
 8006bfc:	4543      	cmp	r3, r8
 8006bfe:	dcf0      	bgt.n	8006be2 <_printf_float+0x42a>
 8006c00:	e6fc      	b.n	80069fc <_printf_float+0x244>
 8006c02:	f04f 0800 	mov.w	r8, #0
 8006c06:	f104 0919 	add.w	r9, r4, #25
 8006c0a:	e7f4      	b.n	8006bf6 <_printf_float+0x43e>

08006c0c <_printf_common>:
 8006c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	4616      	mov	r6, r2
 8006c12:	4698      	mov	r8, r3
 8006c14:	688a      	ldr	r2, [r1, #8]
 8006c16:	690b      	ldr	r3, [r1, #16]
 8006c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	bfb8      	it	lt
 8006c20:	4613      	movlt	r3, r2
 8006c22:	6033      	str	r3, [r6, #0]
 8006c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c28:	4607      	mov	r7, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	b10a      	cbz	r2, 8006c32 <_printf_common+0x26>
 8006c2e:	3301      	adds	r3, #1
 8006c30:	6033      	str	r3, [r6, #0]
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	0699      	lsls	r1, r3, #26
 8006c36:	bf42      	ittt	mi
 8006c38:	6833      	ldrmi	r3, [r6, #0]
 8006c3a:	3302      	addmi	r3, #2
 8006c3c:	6033      	strmi	r3, [r6, #0]
 8006c3e:	6825      	ldr	r5, [r4, #0]
 8006c40:	f015 0506 	ands.w	r5, r5, #6
 8006c44:	d106      	bne.n	8006c54 <_printf_common+0x48>
 8006c46:	f104 0a19 	add.w	sl, r4, #25
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	6832      	ldr	r2, [r6, #0]
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	dc26      	bgt.n	8006ca2 <_printf_common+0x96>
 8006c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c58:	6822      	ldr	r2, [r4, #0]
 8006c5a:	3b00      	subs	r3, #0
 8006c5c:	bf18      	it	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	0692      	lsls	r2, r2, #26
 8006c62:	d42b      	bmi.n	8006cbc <_printf_common+0xb0>
 8006c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c68:	4641      	mov	r1, r8
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	47c8      	blx	r9
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d01e      	beq.n	8006cb0 <_printf_common+0xa4>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	6922      	ldr	r2, [r4, #16]
 8006c76:	f003 0306 	and.w	r3, r3, #6
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	bf02      	ittt	eq
 8006c7e:	68e5      	ldreq	r5, [r4, #12]
 8006c80:	6833      	ldreq	r3, [r6, #0]
 8006c82:	1aed      	subeq	r5, r5, r3
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	bf0c      	ite	eq
 8006c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c8c:	2500      	movne	r5, #0
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	bfc4      	itt	gt
 8006c92:	1a9b      	subgt	r3, r3, r2
 8006c94:	18ed      	addgt	r5, r5, r3
 8006c96:	2600      	movs	r6, #0
 8006c98:	341a      	adds	r4, #26
 8006c9a:	42b5      	cmp	r5, r6
 8006c9c:	d11a      	bne.n	8006cd4 <_printf_common+0xc8>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e008      	b.n	8006cb4 <_printf_common+0xa8>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	4638      	mov	r0, r7
 8006caa:	47c8      	blx	r9
 8006cac:	3001      	adds	r0, #1
 8006cae:	d103      	bne.n	8006cb8 <_printf_common+0xac>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb8:	3501      	adds	r5, #1
 8006cba:	e7c6      	b.n	8006c4a <_printf_common+0x3e>
 8006cbc:	18e1      	adds	r1, r4, r3
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	2030      	movs	r0, #48	@ 0x30
 8006cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cc6:	4422      	add	r2, r4
 8006cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	e7c7      	b.n	8006c64 <_printf_common+0x58>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4641      	mov	r1, r8
 8006cda:	4638      	mov	r0, r7
 8006cdc:	47c8      	blx	r9
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d0e6      	beq.n	8006cb0 <_printf_common+0xa4>
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7d9      	b.n	8006c9a <_printf_common+0x8e>
	...

08006ce8 <_printf_i>:
 8006ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	7e0f      	ldrb	r7, [r1, #24]
 8006cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cf0:	2f78      	cmp	r7, #120	@ 0x78
 8006cf2:	4691      	mov	r9, r2
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	469a      	mov	sl, r3
 8006cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cfe:	d807      	bhi.n	8006d10 <_printf_i+0x28>
 8006d00:	2f62      	cmp	r7, #98	@ 0x62
 8006d02:	d80a      	bhi.n	8006d1a <_printf_i+0x32>
 8006d04:	2f00      	cmp	r7, #0
 8006d06:	f000 80d2 	beq.w	8006eae <_printf_i+0x1c6>
 8006d0a:	2f58      	cmp	r7, #88	@ 0x58
 8006d0c:	f000 80b9 	beq.w	8006e82 <_printf_i+0x19a>
 8006d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d18:	e03a      	b.n	8006d90 <_printf_i+0xa8>
 8006d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d1e:	2b15      	cmp	r3, #21
 8006d20:	d8f6      	bhi.n	8006d10 <_printf_i+0x28>
 8006d22:	a101      	add	r1, pc, #4	@ (adr r1, 8006d28 <_printf_i+0x40>)
 8006d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d28:	08006d81 	.word	0x08006d81
 8006d2c:	08006d95 	.word	0x08006d95
 8006d30:	08006d11 	.word	0x08006d11
 8006d34:	08006d11 	.word	0x08006d11
 8006d38:	08006d11 	.word	0x08006d11
 8006d3c:	08006d11 	.word	0x08006d11
 8006d40:	08006d95 	.word	0x08006d95
 8006d44:	08006d11 	.word	0x08006d11
 8006d48:	08006d11 	.word	0x08006d11
 8006d4c:	08006d11 	.word	0x08006d11
 8006d50:	08006d11 	.word	0x08006d11
 8006d54:	08006e95 	.word	0x08006e95
 8006d58:	08006dbf 	.word	0x08006dbf
 8006d5c:	08006e4f 	.word	0x08006e4f
 8006d60:	08006d11 	.word	0x08006d11
 8006d64:	08006d11 	.word	0x08006d11
 8006d68:	08006eb7 	.word	0x08006eb7
 8006d6c:	08006d11 	.word	0x08006d11
 8006d70:	08006dbf 	.word	0x08006dbf
 8006d74:	08006d11 	.word	0x08006d11
 8006d78:	08006d11 	.word	0x08006d11
 8006d7c:	08006e57 	.word	0x08006e57
 8006d80:	6833      	ldr	r3, [r6, #0]
 8006d82:	1d1a      	adds	r2, r3, #4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6032      	str	r2, [r6, #0]
 8006d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d90:	2301      	movs	r3, #1
 8006d92:	e09d      	b.n	8006ed0 <_printf_i+0x1e8>
 8006d94:	6833      	ldr	r3, [r6, #0]
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	1d19      	adds	r1, r3, #4
 8006d9a:	6031      	str	r1, [r6, #0]
 8006d9c:	0606      	lsls	r6, r0, #24
 8006d9e:	d501      	bpl.n	8006da4 <_printf_i+0xbc>
 8006da0:	681d      	ldr	r5, [r3, #0]
 8006da2:	e003      	b.n	8006dac <_printf_i+0xc4>
 8006da4:	0645      	lsls	r5, r0, #25
 8006da6:	d5fb      	bpl.n	8006da0 <_printf_i+0xb8>
 8006da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	da03      	bge.n	8006db8 <_printf_i+0xd0>
 8006db0:	232d      	movs	r3, #45	@ 0x2d
 8006db2:	426d      	negs	r5, r5
 8006db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006db8:	4859      	ldr	r0, [pc, #356]	@ (8006f20 <_printf_i+0x238>)
 8006dba:	230a      	movs	r3, #10
 8006dbc:	e011      	b.n	8006de2 <_printf_i+0xfa>
 8006dbe:	6821      	ldr	r1, [r4, #0]
 8006dc0:	6833      	ldr	r3, [r6, #0]
 8006dc2:	0608      	lsls	r0, r1, #24
 8006dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006dc8:	d402      	bmi.n	8006dd0 <_printf_i+0xe8>
 8006dca:	0649      	lsls	r1, r1, #25
 8006dcc:	bf48      	it	mi
 8006dce:	b2ad      	uxthmi	r5, r5
 8006dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dd2:	4853      	ldr	r0, [pc, #332]	@ (8006f20 <_printf_i+0x238>)
 8006dd4:	6033      	str	r3, [r6, #0]
 8006dd6:	bf14      	ite	ne
 8006dd8:	230a      	movne	r3, #10
 8006dda:	2308      	moveq	r3, #8
 8006ddc:	2100      	movs	r1, #0
 8006dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006de2:	6866      	ldr	r6, [r4, #4]
 8006de4:	60a6      	str	r6, [r4, #8]
 8006de6:	2e00      	cmp	r6, #0
 8006de8:	bfa2      	ittt	ge
 8006dea:	6821      	ldrge	r1, [r4, #0]
 8006dec:	f021 0104 	bicge.w	r1, r1, #4
 8006df0:	6021      	strge	r1, [r4, #0]
 8006df2:	b90d      	cbnz	r5, 8006df8 <_printf_i+0x110>
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	d04b      	beq.n	8006e90 <_printf_i+0x1a8>
 8006df8:	4616      	mov	r6, r2
 8006dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8006e02:	5dc7      	ldrb	r7, [r0, r7]
 8006e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e08:	462f      	mov	r7, r5
 8006e0a:	42bb      	cmp	r3, r7
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	d9f4      	bls.n	8006dfa <_printf_i+0x112>
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d10b      	bne.n	8006e2c <_printf_i+0x144>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	07df      	lsls	r7, r3, #31
 8006e18:	d508      	bpl.n	8006e2c <_printf_i+0x144>
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	6861      	ldr	r1, [r4, #4]
 8006e1e:	4299      	cmp	r1, r3
 8006e20:	bfde      	ittt	le
 8006e22:	2330      	movle	r3, #48	@ 0x30
 8006e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e2c:	1b92      	subs	r2, r2, r6
 8006e2e:	6122      	str	r2, [r4, #16]
 8006e30:	f8cd a000 	str.w	sl, [sp]
 8006e34:	464b      	mov	r3, r9
 8006e36:	aa03      	add	r2, sp, #12
 8006e38:	4621      	mov	r1, r4
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	f7ff fee6 	bl	8006c0c <_printf_common>
 8006e40:	3001      	adds	r0, #1
 8006e42:	d14a      	bne.n	8006eda <_printf_i+0x1f2>
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	b004      	add	sp, #16
 8006e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	f043 0320 	orr.w	r3, r3, #32
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	4833      	ldr	r0, [pc, #204]	@ (8006f24 <_printf_i+0x23c>)
 8006e58:	2778      	movs	r7, #120	@ 0x78
 8006e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	6831      	ldr	r1, [r6, #0]
 8006e62:	061f      	lsls	r7, r3, #24
 8006e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e68:	d402      	bmi.n	8006e70 <_printf_i+0x188>
 8006e6a:	065f      	lsls	r7, r3, #25
 8006e6c:	bf48      	it	mi
 8006e6e:	b2ad      	uxthmi	r5, r5
 8006e70:	6031      	str	r1, [r6, #0]
 8006e72:	07d9      	lsls	r1, r3, #31
 8006e74:	bf44      	itt	mi
 8006e76:	f043 0320 	orrmi.w	r3, r3, #32
 8006e7a:	6023      	strmi	r3, [r4, #0]
 8006e7c:	b11d      	cbz	r5, 8006e86 <_printf_i+0x19e>
 8006e7e:	2310      	movs	r3, #16
 8006e80:	e7ac      	b.n	8006ddc <_printf_i+0xf4>
 8006e82:	4827      	ldr	r0, [pc, #156]	@ (8006f20 <_printf_i+0x238>)
 8006e84:	e7e9      	b.n	8006e5a <_printf_i+0x172>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	f023 0320 	bic.w	r3, r3, #32
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	e7f6      	b.n	8006e7e <_printf_i+0x196>
 8006e90:	4616      	mov	r6, r2
 8006e92:	e7bd      	b.n	8006e10 <_printf_i+0x128>
 8006e94:	6833      	ldr	r3, [r6, #0]
 8006e96:	6825      	ldr	r5, [r4, #0]
 8006e98:	6961      	ldr	r1, [r4, #20]
 8006e9a:	1d18      	adds	r0, r3, #4
 8006e9c:	6030      	str	r0, [r6, #0]
 8006e9e:	062e      	lsls	r6, r5, #24
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	d501      	bpl.n	8006ea8 <_printf_i+0x1c0>
 8006ea4:	6019      	str	r1, [r3, #0]
 8006ea6:	e002      	b.n	8006eae <_printf_i+0x1c6>
 8006ea8:	0668      	lsls	r0, r5, #25
 8006eaa:	d5fb      	bpl.n	8006ea4 <_printf_i+0x1bc>
 8006eac:	8019      	strh	r1, [r3, #0]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	6123      	str	r3, [r4, #16]
 8006eb2:	4616      	mov	r6, r2
 8006eb4:	e7bc      	b.n	8006e30 <_printf_i+0x148>
 8006eb6:	6833      	ldr	r3, [r6, #0]
 8006eb8:	1d1a      	adds	r2, r3, #4
 8006eba:	6032      	str	r2, [r6, #0]
 8006ebc:	681e      	ldr	r6, [r3, #0]
 8006ebe:	6862      	ldr	r2, [r4, #4]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7f9 f984 	bl	80001d0 <memchr>
 8006ec8:	b108      	cbz	r0, 8006ece <_printf_i+0x1e6>
 8006eca:	1b80      	subs	r0, r0, r6
 8006ecc:	6060      	str	r0, [r4, #4]
 8006ece:	6863      	ldr	r3, [r4, #4]
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ed8:	e7aa      	b.n	8006e30 <_printf_i+0x148>
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	4632      	mov	r2, r6
 8006ede:	4649      	mov	r1, r9
 8006ee0:	4640      	mov	r0, r8
 8006ee2:	47d0      	blx	sl
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d0ad      	beq.n	8006e44 <_printf_i+0x15c>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	079b      	lsls	r3, r3, #30
 8006eec:	d413      	bmi.n	8006f16 <_printf_i+0x22e>
 8006eee:	68e0      	ldr	r0, [r4, #12]
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	4298      	cmp	r0, r3
 8006ef4:	bfb8      	it	lt
 8006ef6:	4618      	movlt	r0, r3
 8006ef8:	e7a6      	b.n	8006e48 <_printf_i+0x160>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4632      	mov	r2, r6
 8006efe:	4649      	mov	r1, r9
 8006f00:	4640      	mov	r0, r8
 8006f02:	47d0      	blx	sl
 8006f04:	3001      	adds	r0, #1
 8006f06:	d09d      	beq.n	8006e44 <_printf_i+0x15c>
 8006f08:	3501      	adds	r5, #1
 8006f0a:	68e3      	ldr	r3, [r4, #12]
 8006f0c:	9903      	ldr	r1, [sp, #12]
 8006f0e:	1a5b      	subs	r3, r3, r1
 8006f10:	42ab      	cmp	r3, r5
 8006f12:	dcf2      	bgt.n	8006efa <_printf_i+0x212>
 8006f14:	e7eb      	b.n	8006eee <_printf_i+0x206>
 8006f16:	2500      	movs	r5, #0
 8006f18:	f104 0619 	add.w	r6, r4, #25
 8006f1c:	e7f5      	b.n	8006f0a <_printf_i+0x222>
 8006f1e:	bf00      	nop
 8006f20:	0800b472 	.word	0x0800b472
 8006f24:	0800b483 	.word	0x0800b483

08006f28 <_scanf_float>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	b087      	sub	sp, #28
 8006f2e:	4617      	mov	r7, r2
 8006f30:	9303      	str	r3, [sp, #12]
 8006f32:	688b      	ldr	r3, [r1, #8]
 8006f34:	1e5a      	subs	r2, r3, #1
 8006f36:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006f3a:	bf81      	itttt	hi
 8006f3c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006f40:	eb03 0b05 	addhi.w	fp, r3, r5
 8006f44:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006f48:	608b      	strhi	r3, [r1, #8]
 8006f4a:	680b      	ldr	r3, [r1, #0]
 8006f4c:	460a      	mov	r2, r1
 8006f4e:	f04f 0500 	mov.w	r5, #0
 8006f52:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006f56:	f842 3b1c 	str.w	r3, [r2], #28
 8006f5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f5e:	4680      	mov	r8, r0
 8006f60:	460c      	mov	r4, r1
 8006f62:	bf98      	it	ls
 8006f64:	f04f 0b00 	movls.w	fp, #0
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	4616      	mov	r6, r2
 8006f6c:	46aa      	mov	sl, r5
 8006f6e:	46a9      	mov	r9, r5
 8006f70:	9502      	str	r5, [sp, #8]
 8006f72:	68a2      	ldr	r2, [r4, #8]
 8006f74:	b152      	cbz	r2, 8006f8c <_scanf_float+0x64>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f7c:	d864      	bhi.n	8007048 <_scanf_float+0x120>
 8006f7e:	2b40      	cmp	r3, #64	@ 0x40
 8006f80:	d83c      	bhi.n	8006ffc <_scanf_float+0xd4>
 8006f82:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006f86:	b2c8      	uxtb	r0, r1
 8006f88:	280e      	cmp	r0, #14
 8006f8a:	d93a      	bls.n	8007002 <_scanf_float+0xda>
 8006f8c:	f1b9 0f00 	cmp.w	r9, #0
 8006f90:	d003      	beq.n	8006f9a <_scanf_float+0x72>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f9e:	f1ba 0f01 	cmp.w	sl, #1
 8006fa2:	f200 8117 	bhi.w	80071d4 <_scanf_float+0x2ac>
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	429e      	cmp	r6, r3
 8006faa:	f200 8108 	bhi.w	80071be <_scanf_float+0x296>
 8006fae:	2001      	movs	r0, #1
 8006fb0:	b007      	add	sp, #28
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006fba:	2a0d      	cmp	r2, #13
 8006fbc:	d8e6      	bhi.n	8006f8c <_scanf_float+0x64>
 8006fbe:	a101      	add	r1, pc, #4	@ (adr r1, 8006fc4 <_scanf_float+0x9c>)
 8006fc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006fc4:	0800710b 	.word	0x0800710b
 8006fc8:	08006f8d 	.word	0x08006f8d
 8006fcc:	08006f8d 	.word	0x08006f8d
 8006fd0:	08006f8d 	.word	0x08006f8d
 8006fd4:	0800716b 	.word	0x0800716b
 8006fd8:	08007143 	.word	0x08007143
 8006fdc:	08006f8d 	.word	0x08006f8d
 8006fe0:	08006f8d 	.word	0x08006f8d
 8006fe4:	08007119 	.word	0x08007119
 8006fe8:	08006f8d 	.word	0x08006f8d
 8006fec:	08006f8d 	.word	0x08006f8d
 8006ff0:	08006f8d 	.word	0x08006f8d
 8006ff4:	08006f8d 	.word	0x08006f8d
 8006ff8:	080070d1 	.word	0x080070d1
 8006ffc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007000:	e7db      	b.n	8006fba <_scanf_float+0x92>
 8007002:	290e      	cmp	r1, #14
 8007004:	d8c2      	bhi.n	8006f8c <_scanf_float+0x64>
 8007006:	a001      	add	r0, pc, #4	@ (adr r0, 800700c <_scanf_float+0xe4>)
 8007008:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800700c:	080070c1 	.word	0x080070c1
 8007010:	08006f8d 	.word	0x08006f8d
 8007014:	080070c1 	.word	0x080070c1
 8007018:	08007157 	.word	0x08007157
 800701c:	08006f8d 	.word	0x08006f8d
 8007020:	08007069 	.word	0x08007069
 8007024:	080070a7 	.word	0x080070a7
 8007028:	080070a7 	.word	0x080070a7
 800702c:	080070a7 	.word	0x080070a7
 8007030:	080070a7 	.word	0x080070a7
 8007034:	080070a7 	.word	0x080070a7
 8007038:	080070a7 	.word	0x080070a7
 800703c:	080070a7 	.word	0x080070a7
 8007040:	080070a7 	.word	0x080070a7
 8007044:	080070a7 	.word	0x080070a7
 8007048:	2b6e      	cmp	r3, #110	@ 0x6e
 800704a:	d809      	bhi.n	8007060 <_scanf_float+0x138>
 800704c:	2b60      	cmp	r3, #96	@ 0x60
 800704e:	d8b2      	bhi.n	8006fb6 <_scanf_float+0x8e>
 8007050:	2b54      	cmp	r3, #84	@ 0x54
 8007052:	d07b      	beq.n	800714c <_scanf_float+0x224>
 8007054:	2b59      	cmp	r3, #89	@ 0x59
 8007056:	d199      	bne.n	8006f8c <_scanf_float+0x64>
 8007058:	2d07      	cmp	r5, #7
 800705a:	d197      	bne.n	8006f8c <_scanf_float+0x64>
 800705c:	2508      	movs	r5, #8
 800705e:	e02c      	b.n	80070ba <_scanf_float+0x192>
 8007060:	2b74      	cmp	r3, #116	@ 0x74
 8007062:	d073      	beq.n	800714c <_scanf_float+0x224>
 8007064:	2b79      	cmp	r3, #121	@ 0x79
 8007066:	e7f6      	b.n	8007056 <_scanf_float+0x12e>
 8007068:	6821      	ldr	r1, [r4, #0]
 800706a:	05c8      	lsls	r0, r1, #23
 800706c:	d51b      	bpl.n	80070a6 <_scanf_float+0x17e>
 800706e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007072:	6021      	str	r1, [r4, #0]
 8007074:	f109 0901 	add.w	r9, r9, #1
 8007078:	f1bb 0f00 	cmp.w	fp, #0
 800707c:	d003      	beq.n	8007086 <_scanf_float+0x15e>
 800707e:	3201      	adds	r2, #1
 8007080:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007084:	60a2      	str	r2, [r4, #8]
 8007086:	68a3      	ldr	r3, [r4, #8]
 8007088:	3b01      	subs	r3, #1
 800708a:	60a3      	str	r3, [r4, #8]
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	3301      	adds	r3, #1
 8007090:	6123      	str	r3, [r4, #16]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3b01      	subs	r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	f340 8087 	ble.w	80071ac <_scanf_float+0x284>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	3301      	adds	r3, #1
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	e765      	b.n	8006f72 <_scanf_float+0x4a>
 80070a6:	eb1a 0105 	adds.w	r1, sl, r5
 80070aa:	f47f af6f 	bne.w	8006f8c <_scanf_float+0x64>
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80070b4:	6022      	str	r2, [r4, #0]
 80070b6:	460d      	mov	r5, r1
 80070b8:	468a      	mov	sl, r1
 80070ba:	f806 3b01 	strb.w	r3, [r6], #1
 80070be:	e7e2      	b.n	8007086 <_scanf_float+0x15e>
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	0610      	lsls	r0, r2, #24
 80070c4:	f57f af62 	bpl.w	8006f8c <_scanf_float+0x64>
 80070c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070cc:	6022      	str	r2, [r4, #0]
 80070ce:	e7f4      	b.n	80070ba <_scanf_float+0x192>
 80070d0:	f1ba 0f00 	cmp.w	sl, #0
 80070d4:	d10e      	bne.n	80070f4 <_scanf_float+0x1cc>
 80070d6:	f1b9 0f00 	cmp.w	r9, #0
 80070da:	d10e      	bne.n	80070fa <_scanf_float+0x1d2>
 80070dc:	6822      	ldr	r2, [r4, #0]
 80070de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80070e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80070e6:	d108      	bne.n	80070fa <_scanf_float+0x1d2>
 80070e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	f04f 0a01 	mov.w	sl, #1
 80070f2:	e7e2      	b.n	80070ba <_scanf_float+0x192>
 80070f4:	f1ba 0f02 	cmp.w	sl, #2
 80070f8:	d055      	beq.n	80071a6 <_scanf_float+0x27e>
 80070fa:	2d01      	cmp	r5, #1
 80070fc:	d002      	beq.n	8007104 <_scanf_float+0x1dc>
 80070fe:	2d04      	cmp	r5, #4
 8007100:	f47f af44 	bne.w	8006f8c <_scanf_float+0x64>
 8007104:	3501      	adds	r5, #1
 8007106:	b2ed      	uxtb	r5, r5
 8007108:	e7d7      	b.n	80070ba <_scanf_float+0x192>
 800710a:	f1ba 0f01 	cmp.w	sl, #1
 800710e:	f47f af3d 	bne.w	8006f8c <_scanf_float+0x64>
 8007112:	f04f 0a02 	mov.w	sl, #2
 8007116:	e7d0      	b.n	80070ba <_scanf_float+0x192>
 8007118:	b97d      	cbnz	r5, 800713a <_scanf_float+0x212>
 800711a:	f1b9 0f00 	cmp.w	r9, #0
 800711e:	f47f af38 	bne.w	8006f92 <_scanf_float+0x6a>
 8007122:	6822      	ldr	r2, [r4, #0]
 8007124:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007128:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800712c:	f040 8108 	bne.w	8007340 <_scanf_float+0x418>
 8007130:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007134:	6022      	str	r2, [r4, #0]
 8007136:	2501      	movs	r5, #1
 8007138:	e7bf      	b.n	80070ba <_scanf_float+0x192>
 800713a:	2d03      	cmp	r5, #3
 800713c:	d0e2      	beq.n	8007104 <_scanf_float+0x1dc>
 800713e:	2d05      	cmp	r5, #5
 8007140:	e7de      	b.n	8007100 <_scanf_float+0x1d8>
 8007142:	2d02      	cmp	r5, #2
 8007144:	f47f af22 	bne.w	8006f8c <_scanf_float+0x64>
 8007148:	2503      	movs	r5, #3
 800714a:	e7b6      	b.n	80070ba <_scanf_float+0x192>
 800714c:	2d06      	cmp	r5, #6
 800714e:	f47f af1d 	bne.w	8006f8c <_scanf_float+0x64>
 8007152:	2507      	movs	r5, #7
 8007154:	e7b1      	b.n	80070ba <_scanf_float+0x192>
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	0591      	lsls	r1, r2, #22
 800715a:	f57f af17 	bpl.w	8006f8c <_scanf_float+0x64>
 800715e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007162:	6022      	str	r2, [r4, #0]
 8007164:	f8cd 9008 	str.w	r9, [sp, #8]
 8007168:	e7a7      	b.n	80070ba <_scanf_float+0x192>
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007170:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007174:	d006      	beq.n	8007184 <_scanf_float+0x25c>
 8007176:	0550      	lsls	r0, r2, #21
 8007178:	f57f af08 	bpl.w	8006f8c <_scanf_float+0x64>
 800717c:	f1b9 0f00 	cmp.w	r9, #0
 8007180:	f000 80de 	beq.w	8007340 <_scanf_float+0x418>
 8007184:	0591      	lsls	r1, r2, #22
 8007186:	bf58      	it	pl
 8007188:	9902      	ldrpl	r1, [sp, #8]
 800718a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800718e:	bf58      	it	pl
 8007190:	eba9 0101 	subpl.w	r1, r9, r1
 8007194:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007198:	bf58      	it	pl
 800719a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800719e:	6022      	str	r2, [r4, #0]
 80071a0:	f04f 0900 	mov.w	r9, #0
 80071a4:	e789      	b.n	80070ba <_scanf_float+0x192>
 80071a6:	f04f 0a03 	mov.w	sl, #3
 80071aa:	e786      	b.n	80070ba <_scanf_float+0x192>
 80071ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80071b0:	4639      	mov	r1, r7
 80071b2:	4640      	mov	r0, r8
 80071b4:	4798      	blx	r3
 80071b6:	2800      	cmp	r0, #0
 80071b8:	f43f aedb 	beq.w	8006f72 <_scanf_float+0x4a>
 80071bc:	e6e6      	b.n	8006f8c <_scanf_float+0x64>
 80071be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071c6:	463a      	mov	r2, r7
 80071c8:	4640      	mov	r0, r8
 80071ca:	4798      	blx	r3
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	e6e8      	b.n	8006fa6 <_scanf_float+0x7e>
 80071d4:	1e6b      	subs	r3, r5, #1
 80071d6:	2b06      	cmp	r3, #6
 80071d8:	d824      	bhi.n	8007224 <_scanf_float+0x2fc>
 80071da:	2d02      	cmp	r5, #2
 80071dc:	d836      	bhi.n	800724c <_scanf_float+0x324>
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	429e      	cmp	r6, r3
 80071e2:	f67f aee4 	bls.w	8006fae <_scanf_float+0x86>
 80071e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071ee:	463a      	mov	r2, r7
 80071f0:	4640      	mov	r0, r8
 80071f2:	4798      	blx	r3
 80071f4:	6923      	ldr	r3, [r4, #16]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	6123      	str	r3, [r4, #16]
 80071fa:	e7f0      	b.n	80071de <_scanf_float+0x2b6>
 80071fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007200:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007204:	463a      	mov	r2, r7
 8007206:	4640      	mov	r0, r8
 8007208:	4798      	blx	r3
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	3b01      	subs	r3, #1
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007214:	fa5f fa8a 	uxtb.w	sl, sl
 8007218:	f1ba 0f02 	cmp.w	sl, #2
 800721c:	d1ee      	bne.n	80071fc <_scanf_float+0x2d4>
 800721e:	3d03      	subs	r5, #3
 8007220:	b2ed      	uxtb	r5, r5
 8007222:	1b76      	subs	r6, r6, r5
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	05da      	lsls	r2, r3, #23
 8007228:	d530      	bpl.n	800728c <_scanf_float+0x364>
 800722a:	055b      	lsls	r3, r3, #21
 800722c:	d511      	bpl.n	8007252 <_scanf_float+0x32a>
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	429e      	cmp	r6, r3
 8007232:	f67f aebc 	bls.w	8006fae <_scanf_float+0x86>
 8007236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800723a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800723e:	463a      	mov	r2, r7
 8007240:	4640      	mov	r0, r8
 8007242:	4798      	blx	r3
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	3b01      	subs	r3, #1
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	e7f0      	b.n	800722e <_scanf_float+0x306>
 800724c:	46aa      	mov	sl, r5
 800724e:	46b3      	mov	fp, r6
 8007250:	e7de      	b.n	8007210 <_scanf_float+0x2e8>
 8007252:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	2965      	cmp	r1, #101	@ 0x65
 800725a:	f103 33ff 	add.w	r3, r3, #4294967295
 800725e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007262:	6123      	str	r3, [r4, #16]
 8007264:	d00c      	beq.n	8007280 <_scanf_float+0x358>
 8007266:	2945      	cmp	r1, #69	@ 0x45
 8007268:	d00a      	beq.n	8007280 <_scanf_float+0x358>
 800726a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800726e:	463a      	mov	r2, r7
 8007270:	4640      	mov	r0, r8
 8007272:	4798      	blx	r3
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800727a:	3b01      	subs	r3, #1
 800727c:	1eb5      	subs	r5, r6, #2
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007284:	463a      	mov	r2, r7
 8007286:	4640      	mov	r0, r8
 8007288:	4798      	blx	r3
 800728a:	462e      	mov	r6, r5
 800728c:	6822      	ldr	r2, [r4, #0]
 800728e:	f012 0210 	ands.w	r2, r2, #16
 8007292:	d001      	beq.n	8007298 <_scanf_float+0x370>
 8007294:	2000      	movs	r0, #0
 8007296:	e68b      	b.n	8006fb0 <_scanf_float+0x88>
 8007298:	7032      	strb	r2, [r6, #0]
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072a4:	d11c      	bne.n	80072e0 <_scanf_float+0x3b8>
 80072a6:	9b02      	ldr	r3, [sp, #8]
 80072a8:	454b      	cmp	r3, r9
 80072aa:	eba3 0209 	sub.w	r2, r3, r9
 80072ae:	d123      	bne.n	80072f8 <_scanf_float+0x3d0>
 80072b0:	9901      	ldr	r1, [sp, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	4640      	mov	r0, r8
 80072b6:	f002 fc07 	bl	8009ac8 <_strtod_r>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	6821      	ldr	r1, [r4, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f011 0f02 	tst.w	r1, #2
 80072c4:	ec57 6b10 	vmov	r6, r7, d0
 80072c8:	f103 0204 	add.w	r2, r3, #4
 80072cc:	d01f      	beq.n	800730e <_scanf_float+0x3e6>
 80072ce:	9903      	ldr	r1, [sp, #12]
 80072d0:	600a      	str	r2, [r1, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	e9c3 6700 	strd	r6, r7, [r3]
 80072d8:	68e3      	ldr	r3, [r4, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60e3      	str	r3, [r4, #12]
 80072de:	e7d9      	b.n	8007294 <_scanf_float+0x36c>
 80072e0:	9b04      	ldr	r3, [sp, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0e4      	beq.n	80072b0 <_scanf_float+0x388>
 80072e6:	9905      	ldr	r1, [sp, #20]
 80072e8:	230a      	movs	r3, #10
 80072ea:	3101      	adds	r1, #1
 80072ec:	4640      	mov	r0, r8
 80072ee:	f002 fc6b 	bl	8009bc8 <_strtol_r>
 80072f2:	9b04      	ldr	r3, [sp, #16]
 80072f4:	9e05      	ldr	r6, [sp, #20]
 80072f6:	1ac2      	subs	r2, r0, r3
 80072f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80072fc:	429e      	cmp	r6, r3
 80072fe:	bf28      	it	cs
 8007300:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007304:	4910      	ldr	r1, [pc, #64]	@ (8007348 <_scanf_float+0x420>)
 8007306:	4630      	mov	r0, r6
 8007308:	f000 f8e4 	bl	80074d4 <siprintf>
 800730c:	e7d0      	b.n	80072b0 <_scanf_float+0x388>
 800730e:	f011 0f04 	tst.w	r1, #4
 8007312:	9903      	ldr	r1, [sp, #12]
 8007314:	600a      	str	r2, [r1, #0]
 8007316:	d1dc      	bne.n	80072d2 <_scanf_float+0x3aa>
 8007318:	681d      	ldr	r5, [r3, #0]
 800731a:	4632      	mov	r2, r6
 800731c:	463b      	mov	r3, r7
 800731e:	4630      	mov	r0, r6
 8007320:	4639      	mov	r1, r7
 8007322:	f7f9 fc03 	bl	8000b2c <__aeabi_dcmpun>
 8007326:	b128      	cbz	r0, 8007334 <_scanf_float+0x40c>
 8007328:	4808      	ldr	r0, [pc, #32]	@ (800734c <_scanf_float+0x424>)
 800732a:	f000 f9c5 	bl	80076b8 <nanf>
 800732e:	ed85 0a00 	vstr	s0, [r5]
 8007332:	e7d1      	b.n	80072d8 <_scanf_float+0x3b0>
 8007334:	4630      	mov	r0, r6
 8007336:	4639      	mov	r1, r7
 8007338:	f7f9 fc56 	bl	8000be8 <__aeabi_d2f>
 800733c:	6028      	str	r0, [r5, #0]
 800733e:	e7cb      	b.n	80072d8 <_scanf_float+0x3b0>
 8007340:	f04f 0900 	mov.w	r9, #0
 8007344:	e629      	b.n	8006f9a <_scanf_float+0x72>
 8007346:	bf00      	nop
 8007348:	0800b494 	.word	0x0800b494
 800734c:	0800b82d 	.word	0x0800b82d

08007350 <std>:
 8007350:	2300      	movs	r3, #0
 8007352:	b510      	push	{r4, lr}
 8007354:	4604      	mov	r4, r0
 8007356:	e9c0 3300 	strd	r3, r3, [r0]
 800735a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800735e:	6083      	str	r3, [r0, #8]
 8007360:	8181      	strh	r1, [r0, #12]
 8007362:	6643      	str	r3, [r0, #100]	@ 0x64
 8007364:	81c2      	strh	r2, [r0, #14]
 8007366:	6183      	str	r3, [r0, #24]
 8007368:	4619      	mov	r1, r3
 800736a:	2208      	movs	r2, #8
 800736c:	305c      	adds	r0, #92	@ 0x5c
 800736e:	f000 f914 	bl	800759a <memset>
 8007372:	4b0d      	ldr	r3, [pc, #52]	@ (80073a8 <std+0x58>)
 8007374:	6263      	str	r3, [r4, #36]	@ 0x24
 8007376:	4b0d      	ldr	r3, [pc, #52]	@ (80073ac <std+0x5c>)
 8007378:	62a3      	str	r3, [r4, #40]	@ 0x28
 800737a:	4b0d      	ldr	r3, [pc, #52]	@ (80073b0 <std+0x60>)
 800737c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <std+0x64>)
 8007380:	6323      	str	r3, [r4, #48]	@ 0x30
 8007382:	4b0d      	ldr	r3, [pc, #52]	@ (80073b8 <std+0x68>)
 8007384:	6224      	str	r4, [r4, #32]
 8007386:	429c      	cmp	r4, r3
 8007388:	d006      	beq.n	8007398 <std+0x48>
 800738a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800738e:	4294      	cmp	r4, r2
 8007390:	d002      	beq.n	8007398 <std+0x48>
 8007392:	33d0      	adds	r3, #208	@ 0xd0
 8007394:	429c      	cmp	r4, r3
 8007396:	d105      	bne.n	80073a4 <std+0x54>
 8007398:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800739c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a0:	f000 b978 	b.w	8007694 <__retarget_lock_init_recursive>
 80073a4:	bd10      	pop	{r4, pc}
 80073a6:	bf00      	nop
 80073a8:	08007515 	.word	0x08007515
 80073ac:	08007537 	.word	0x08007537
 80073b0:	0800756f 	.word	0x0800756f
 80073b4:	08007593 	.word	0x08007593
 80073b8:	200004fc 	.word	0x200004fc

080073bc <stdio_exit_handler>:
 80073bc:	4a02      	ldr	r2, [pc, #8]	@ (80073c8 <stdio_exit_handler+0xc>)
 80073be:	4903      	ldr	r1, [pc, #12]	@ (80073cc <stdio_exit_handler+0x10>)
 80073c0:	4803      	ldr	r0, [pc, #12]	@ (80073d0 <stdio_exit_handler+0x14>)
 80073c2:	f000 b869 	b.w	8007498 <_fwalk_sglue>
 80073c6:	bf00      	nop
 80073c8:	20000028 	.word	0x20000028
 80073cc:	08009f85 	.word	0x08009f85
 80073d0:	20000038 	.word	0x20000038

080073d4 <cleanup_stdio>:
 80073d4:	6841      	ldr	r1, [r0, #4]
 80073d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007408 <cleanup_stdio+0x34>)
 80073d8:	4299      	cmp	r1, r3
 80073da:	b510      	push	{r4, lr}
 80073dc:	4604      	mov	r4, r0
 80073de:	d001      	beq.n	80073e4 <cleanup_stdio+0x10>
 80073e0:	f002 fdd0 	bl	8009f84 <_fflush_r>
 80073e4:	68a1      	ldr	r1, [r4, #8]
 80073e6:	4b09      	ldr	r3, [pc, #36]	@ (800740c <cleanup_stdio+0x38>)
 80073e8:	4299      	cmp	r1, r3
 80073ea:	d002      	beq.n	80073f2 <cleanup_stdio+0x1e>
 80073ec:	4620      	mov	r0, r4
 80073ee:	f002 fdc9 	bl	8009f84 <_fflush_r>
 80073f2:	68e1      	ldr	r1, [r4, #12]
 80073f4:	4b06      	ldr	r3, [pc, #24]	@ (8007410 <cleanup_stdio+0x3c>)
 80073f6:	4299      	cmp	r1, r3
 80073f8:	d004      	beq.n	8007404 <cleanup_stdio+0x30>
 80073fa:	4620      	mov	r0, r4
 80073fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007400:	f002 bdc0 	b.w	8009f84 <_fflush_r>
 8007404:	bd10      	pop	{r4, pc}
 8007406:	bf00      	nop
 8007408:	200004fc 	.word	0x200004fc
 800740c:	20000564 	.word	0x20000564
 8007410:	200005cc 	.word	0x200005cc

08007414 <global_stdio_init.part.0>:
 8007414:	b510      	push	{r4, lr}
 8007416:	4b0b      	ldr	r3, [pc, #44]	@ (8007444 <global_stdio_init.part.0+0x30>)
 8007418:	4c0b      	ldr	r4, [pc, #44]	@ (8007448 <global_stdio_init.part.0+0x34>)
 800741a:	4a0c      	ldr	r2, [pc, #48]	@ (800744c <global_stdio_init.part.0+0x38>)
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	4620      	mov	r0, r4
 8007420:	2200      	movs	r2, #0
 8007422:	2104      	movs	r1, #4
 8007424:	f7ff ff94 	bl	8007350 <std>
 8007428:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800742c:	2201      	movs	r2, #1
 800742e:	2109      	movs	r1, #9
 8007430:	f7ff ff8e 	bl	8007350 <std>
 8007434:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007438:	2202      	movs	r2, #2
 800743a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800743e:	2112      	movs	r1, #18
 8007440:	f7ff bf86 	b.w	8007350 <std>
 8007444:	20000634 	.word	0x20000634
 8007448:	200004fc 	.word	0x200004fc
 800744c:	080073bd 	.word	0x080073bd

08007450 <__sfp_lock_acquire>:
 8007450:	4801      	ldr	r0, [pc, #4]	@ (8007458 <__sfp_lock_acquire+0x8>)
 8007452:	f000 b920 	b.w	8007696 <__retarget_lock_acquire_recursive>
 8007456:	bf00      	nop
 8007458:	2000063d 	.word	0x2000063d

0800745c <__sfp_lock_release>:
 800745c:	4801      	ldr	r0, [pc, #4]	@ (8007464 <__sfp_lock_release+0x8>)
 800745e:	f000 b91b 	b.w	8007698 <__retarget_lock_release_recursive>
 8007462:	bf00      	nop
 8007464:	2000063d 	.word	0x2000063d

08007468 <__sinit>:
 8007468:	b510      	push	{r4, lr}
 800746a:	4604      	mov	r4, r0
 800746c:	f7ff fff0 	bl	8007450 <__sfp_lock_acquire>
 8007470:	6a23      	ldr	r3, [r4, #32]
 8007472:	b11b      	cbz	r3, 800747c <__sinit+0x14>
 8007474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007478:	f7ff bff0 	b.w	800745c <__sfp_lock_release>
 800747c:	4b04      	ldr	r3, [pc, #16]	@ (8007490 <__sinit+0x28>)
 800747e:	6223      	str	r3, [r4, #32]
 8007480:	4b04      	ldr	r3, [pc, #16]	@ (8007494 <__sinit+0x2c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1f5      	bne.n	8007474 <__sinit+0xc>
 8007488:	f7ff ffc4 	bl	8007414 <global_stdio_init.part.0>
 800748c:	e7f2      	b.n	8007474 <__sinit+0xc>
 800748e:	bf00      	nop
 8007490:	080073d5 	.word	0x080073d5
 8007494:	20000634 	.word	0x20000634

08007498 <_fwalk_sglue>:
 8007498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800749c:	4607      	mov	r7, r0
 800749e:	4688      	mov	r8, r1
 80074a0:	4614      	mov	r4, r2
 80074a2:	2600      	movs	r6, #0
 80074a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074a8:	f1b9 0901 	subs.w	r9, r9, #1
 80074ac:	d505      	bpl.n	80074ba <_fwalk_sglue+0x22>
 80074ae:	6824      	ldr	r4, [r4, #0]
 80074b0:	2c00      	cmp	r4, #0
 80074b2:	d1f7      	bne.n	80074a4 <_fwalk_sglue+0xc>
 80074b4:	4630      	mov	r0, r6
 80074b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d907      	bls.n	80074d0 <_fwalk_sglue+0x38>
 80074c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074c4:	3301      	adds	r3, #1
 80074c6:	d003      	beq.n	80074d0 <_fwalk_sglue+0x38>
 80074c8:	4629      	mov	r1, r5
 80074ca:	4638      	mov	r0, r7
 80074cc:	47c0      	blx	r8
 80074ce:	4306      	orrs	r6, r0
 80074d0:	3568      	adds	r5, #104	@ 0x68
 80074d2:	e7e9      	b.n	80074a8 <_fwalk_sglue+0x10>

080074d4 <siprintf>:
 80074d4:	b40e      	push	{r1, r2, r3}
 80074d6:	b500      	push	{lr}
 80074d8:	b09c      	sub	sp, #112	@ 0x70
 80074da:	ab1d      	add	r3, sp, #116	@ 0x74
 80074dc:	9002      	str	r0, [sp, #8]
 80074de:	9006      	str	r0, [sp, #24]
 80074e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074e4:	4809      	ldr	r0, [pc, #36]	@ (800750c <siprintf+0x38>)
 80074e6:	9107      	str	r1, [sp, #28]
 80074e8:	9104      	str	r1, [sp, #16]
 80074ea:	4909      	ldr	r1, [pc, #36]	@ (8007510 <siprintf+0x3c>)
 80074ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80074f0:	9105      	str	r1, [sp, #20]
 80074f2:	6800      	ldr	r0, [r0, #0]
 80074f4:	9301      	str	r3, [sp, #4]
 80074f6:	a902      	add	r1, sp, #8
 80074f8:	f002 fbc4 	bl	8009c84 <_svfiprintf_r>
 80074fc:	9b02      	ldr	r3, [sp, #8]
 80074fe:	2200      	movs	r2, #0
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	b01c      	add	sp, #112	@ 0x70
 8007504:	f85d eb04 	ldr.w	lr, [sp], #4
 8007508:	b003      	add	sp, #12
 800750a:	4770      	bx	lr
 800750c:	20000034 	.word	0x20000034
 8007510:	ffff0208 	.word	0xffff0208

08007514 <__sread>:
 8007514:	b510      	push	{r4, lr}
 8007516:	460c      	mov	r4, r1
 8007518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800751c:	f000 f86c 	bl	80075f8 <_read_r>
 8007520:	2800      	cmp	r0, #0
 8007522:	bfab      	itete	ge
 8007524:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007526:	89a3      	ldrhlt	r3, [r4, #12]
 8007528:	181b      	addge	r3, r3, r0
 800752a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800752e:	bfac      	ite	ge
 8007530:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007532:	81a3      	strhlt	r3, [r4, #12]
 8007534:	bd10      	pop	{r4, pc}

08007536 <__swrite>:
 8007536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753a:	461f      	mov	r7, r3
 800753c:	898b      	ldrh	r3, [r1, #12]
 800753e:	05db      	lsls	r3, r3, #23
 8007540:	4605      	mov	r5, r0
 8007542:	460c      	mov	r4, r1
 8007544:	4616      	mov	r6, r2
 8007546:	d505      	bpl.n	8007554 <__swrite+0x1e>
 8007548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754c:	2302      	movs	r3, #2
 800754e:	2200      	movs	r2, #0
 8007550:	f000 f840 	bl	80075d4 <_lseek_r>
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800755a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	4632      	mov	r2, r6
 8007562:	463b      	mov	r3, r7
 8007564:	4628      	mov	r0, r5
 8007566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800756a:	f000 b857 	b.w	800761c <_write_r>

0800756e <__sseek>:
 800756e:	b510      	push	{r4, lr}
 8007570:	460c      	mov	r4, r1
 8007572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007576:	f000 f82d 	bl	80075d4 <_lseek_r>
 800757a:	1c43      	adds	r3, r0, #1
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	bf15      	itete	ne
 8007580:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007582:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007586:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800758a:	81a3      	strheq	r3, [r4, #12]
 800758c:	bf18      	it	ne
 800758e:	81a3      	strhne	r3, [r4, #12]
 8007590:	bd10      	pop	{r4, pc}

08007592 <__sclose>:
 8007592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007596:	f000 b80d 	b.w	80075b4 <_close_r>

0800759a <memset>:
 800759a:	4402      	add	r2, r0
 800759c:	4603      	mov	r3, r0
 800759e:	4293      	cmp	r3, r2
 80075a0:	d100      	bne.n	80075a4 <memset+0xa>
 80075a2:	4770      	bx	lr
 80075a4:	f803 1b01 	strb.w	r1, [r3], #1
 80075a8:	e7f9      	b.n	800759e <memset+0x4>
	...

080075ac <_localeconv_r>:
 80075ac:	4800      	ldr	r0, [pc, #0]	@ (80075b0 <_localeconv_r+0x4>)
 80075ae:	4770      	bx	lr
 80075b0:	20000174 	.word	0x20000174

080075b4 <_close_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4d06      	ldr	r5, [pc, #24]	@ (80075d0 <_close_r+0x1c>)
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7fb f8d2 	bl	8002768 <_close>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_close_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_close_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000638 	.word	0x20000638

080075d4 <_lseek_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d07      	ldr	r5, [pc, #28]	@ (80075f4 <_lseek_r+0x20>)
 80075d8:	4604      	mov	r4, r0
 80075da:	4608      	mov	r0, r1
 80075dc:	4611      	mov	r1, r2
 80075de:	2200      	movs	r2, #0
 80075e0:	602a      	str	r2, [r5, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	f7fb f8e7 	bl	80027b6 <_lseek>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_lseek_r+0x1e>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_lseek_r+0x1e>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	20000638 	.word	0x20000638

080075f8 <_read_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d07      	ldr	r5, [pc, #28]	@ (8007618 <_read_r+0x20>)
 80075fc:	4604      	mov	r4, r0
 80075fe:	4608      	mov	r0, r1
 8007600:	4611      	mov	r1, r2
 8007602:	2200      	movs	r2, #0
 8007604:	602a      	str	r2, [r5, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	f7fb f875 	bl	80026f6 <_read>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_read_r+0x1e>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	b103      	cbz	r3, 8007616 <_read_r+0x1e>
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	20000638 	.word	0x20000638

0800761c <_write_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	4d07      	ldr	r5, [pc, #28]	@ (800763c <_write_r+0x20>)
 8007620:	4604      	mov	r4, r0
 8007622:	4608      	mov	r0, r1
 8007624:	4611      	mov	r1, r2
 8007626:	2200      	movs	r2, #0
 8007628:	602a      	str	r2, [r5, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	f7fb f880 	bl	8002730 <_write>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_write_r+0x1e>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	b103      	cbz	r3, 800763a <_write_r+0x1e>
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	20000638 	.word	0x20000638

08007640 <__errno>:
 8007640:	4b01      	ldr	r3, [pc, #4]	@ (8007648 <__errno+0x8>)
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000034 	.word	0x20000034

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4d0d      	ldr	r5, [pc, #52]	@ (8007684 <__libc_init_array+0x38>)
 8007650:	4c0d      	ldr	r4, [pc, #52]	@ (8007688 <__libc_init_array+0x3c>)
 8007652:	1b64      	subs	r4, r4, r5
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	2600      	movs	r6, #0
 8007658:	42a6      	cmp	r6, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	4d0b      	ldr	r5, [pc, #44]	@ (800768c <__libc_init_array+0x40>)
 800765e:	4c0c      	ldr	r4, [pc, #48]	@ (8007690 <__libc_init_array+0x44>)
 8007660:	f003 fee6 	bl	800b430 <_init>
 8007664:	1b64      	subs	r4, r4, r5
 8007666:	10a4      	asrs	r4, r4, #2
 8007668:	2600      	movs	r6, #0
 800766a:	42a6      	cmp	r6, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	f855 3b04 	ldr.w	r3, [r5], #4
 8007674:	4798      	blx	r3
 8007676:	3601      	adds	r6, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	f855 3b04 	ldr.w	r3, [r5], #4
 800767e:	4798      	blx	r3
 8007680:	3601      	adds	r6, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	0800b908 	.word	0x0800b908
 8007688:	0800b908 	.word	0x0800b908
 800768c:	0800b908 	.word	0x0800b908
 8007690:	0800b90c 	.word	0x0800b90c

08007694 <__retarget_lock_init_recursive>:
 8007694:	4770      	bx	lr

08007696 <__retarget_lock_acquire_recursive>:
 8007696:	4770      	bx	lr

08007698 <__retarget_lock_release_recursive>:
 8007698:	4770      	bx	lr

0800769a <memcpy>:
 800769a:	440a      	add	r2, r1
 800769c:	4291      	cmp	r1, r2
 800769e:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a2:	d100      	bne.n	80076a6 <memcpy+0xc>
 80076a4:	4770      	bx	lr
 80076a6:	b510      	push	{r4, lr}
 80076a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b0:	4291      	cmp	r1, r2
 80076b2:	d1f9      	bne.n	80076a8 <memcpy+0xe>
 80076b4:	bd10      	pop	{r4, pc}
	...

080076b8 <nanf>:
 80076b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80076c0 <nanf+0x8>
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	7fc00000 	.word	0x7fc00000

080076c4 <quorem>:
 80076c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c8:	6903      	ldr	r3, [r0, #16]
 80076ca:	690c      	ldr	r4, [r1, #16]
 80076cc:	42a3      	cmp	r3, r4
 80076ce:	4607      	mov	r7, r0
 80076d0:	db7e      	blt.n	80077d0 <quorem+0x10c>
 80076d2:	3c01      	subs	r4, #1
 80076d4:	f101 0814 	add.w	r8, r1, #20
 80076d8:	00a3      	lsls	r3, r4, #2
 80076da:	f100 0514 	add.w	r5, r0, #20
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076ee:	3301      	adds	r3, #1
 80076f0:	429a      	cmp	r2, r3
 80076f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80076fa:	d32e      	bcc.n	800775a <quorem+0x96>
 80076fc:	f04f 0a00 	mov.w	sl, #0
 8007700:	46c4      	mov	ip, r8
 8007702:	46ae      	mov	lr, r5
 8007704:	46d3      	mov	fp, sl
 8007706:	f85c 3b04 	ldr.w	r3, [ip], #4
 800770a:	b298      	uxth	r0, r3
 800770c:	fb06 a000 	mla	r0, r6, r0, sl
 8007710:	0c02      	lsrs	r2, r0, #16
 8007712:	0c1b      	lsrs	r3, r3, #16
 8007714:	fb06 2303 	mla	r3, r6, r3, r2
 8007718:	f8de 2000 	ldr.w	r2, [lr]
 800771c:	b280      	uxth	r0, r0
 800771e:	b292      	uxth	r2, r2
 8007720:	1a12      	subs	r2, r2, r0
 8007722:	445a      	add	r2, fp
 8007724:	f8de 0000 	ldr.w	r0, [lr]
 8007728:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800772c:	b29b      	uxth	r3, r3
 800772e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007732:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007736:	b292      	uxth	r2, r2
 8007738:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800773c:	45e1      	cmp	r9, ip
 800773e:	f84e 2b04 	str.w	r2, [lr], #4
 8007742:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007746:	d2de      	bcs.n	8007706 <quorem+0x42>
 8007748:	9b00      	ldr	r3, [sp, #0]
 800774a:	58eb      	ldr	r3, [r5, r3]
 800774c:	b92b      	cbnz	r3, 800775a <quorem+0x96>
 800774e:	9b01      	ldr	r3, [sp, #4]
 8007750:	3b04      	subs	r3, #4
 8007752:	429d      	cmp	r5, r3
 8007754:	461a      	mov	r2, r3
 8007756:	d32f      	bcc.n	80077b8 <quorem+0xf4>
 8007758:	613c      	str	r4, [r7, #16]
 800775a:	4638      	mov	r0, r7
 800775c:	f001 f9c4 	bl	8008ae8 <__mcmp>
 8007760:	2800      	cmp	r0, #0
 8007762:	db25      	blt.n	80077b0 <quorem+0xec>
 8007764:	4629      	mov	r1, r5
 8007766:	2000      	movs	r0, #0
 8007768:	f858 2b04 	ldr.w	r2, [r8], #4
 800776c:	f8d1 c000 	ldr.w	ip, [r1]
 8007770:	fa1f fe82 	uxth.w	lr, r2
 8007774:	fa1f f38c 	uxth.w	r3, ip
 8007778:	eba3 030e 	sub.w	r3, r3, lr
 800777c:	4403      	add	r3, r0
 800777e:	0c12      	lsrs	r2, r2, #16
 8007780:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007784:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007788:	b29b      	uxth	r3, r3
 800778a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800778e:	45c1      	cmp	r9, r8
 8007790:	f841 3b04 	str.w	r3, [r1], #4
 8007794:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007798:	d2e6      	bcs.n	8007768 <quorem+0xa4>
 800779a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800779e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077a2:	b922      	cbnz	r2, 80077ae <quorem+0xea>
 80077a4:	3b04      	subs	r3, #4
 80077a6:	429d      	cmp	r5, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	d30b      	bcc.n	80077c4 <quorem+0x100>
 80077ac:	613c      	str	r4, [r7, #16]
 80077ae:	3601      	adds	r6, #1
 80077b0:	4630      	mov	r0, r6
 80077b2:	b003      	add	sp, #12
 80077b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b8:	6812      	ldr	r2, [r2, #0]
 80077ba:	3b04      	subs	r3, #4
 80077bc:	2a00      	cmp	r2, #0
 80077be:	d1cb      	bne.n	8007758 <quorem+0x94>
 80077c0:	3c01      	subs	r4, #1
 80077c2:	e7c6      	b.n	8007752 <quorem+0x8e>
 80077c4:	6812      	ldr	r2, [r2, #0]
 80077c6:	3b04      	subs	r3, #4
 80077c8:	2a00      	cmp	r2, #0
 80077ca:	d1ef      	bne.n	80077ac <quorem+0xe8>
 80077cc:	3c01      	subs	r4, #1
 80077ce:	e7ea      	b.n	80077a6 <quorem+0xe2>
 80077d0:	2000      	movs	r0, #0
 80077d2:	e7ee      	b.n	80077b2 <quorem+0xee>
 80077d4:	0000      	movs	r0, r0
	...

080077d8 <_dtoa_r>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	69c7      	ldr	r7, [r0, #28]
 80077de:	b099      	sub	sp, #100	@ 0x64
 80077e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80077e4:	ec55 4b10 	vmov	r4, r5, d0
 80077e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80077ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80077ec:	4683      	mov	fp, r0
 80077ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80077f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077f2:	b97f      	cbnz	r7, 8007814 <_dtoa_r+0x3c>
 80077f4:	2010      	movs	r0, #16
 80077f6:	f000 fdfd 	bl	80083f4 <malloc>
 80077fa:	4602      	mov	r2, r0
 80077fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007800:	b920      	cbnz	r0, 800780c <_dtoa_r+0x34>
 8007802:	4ba7      	ldr	r3, [pc, #668]	@ (8007aa0 <_dtoa_r+0x2c8>)
 8007804:	21ef      	movs	r1, #239	@ 0xef
 8007806:	48a7      	ldr	r0, [pc, #668]	@ (8007aa4 <_dtoa_r+0x2cc>)
 8007808:	f002 fc2a 	bl	800a060 <__assert_func>
 800780c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007810:	6007      	str	r7, [r0, #0]
 8007812:	60c7      	str	r7, [r0, #12]
 8007814:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007818:	6819      	ldr	r1, [r3, #0]
 800781a:	b159      	cbz	r1, 8007834 <_dtoa_r+0x5c>
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	604a      	str	r2, [r1, #4]
 8007820:	2301      	movs	r3, #1
 8007822:	4093      	lsls	r3, r2
 8007824:	608b      	str	r3, [r1, #8]
 8007826:	4658      	mov	r0, fp
 8007828:	f000 feda 	bl	80085e0 <_Bfree>
 800782c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	1e2b      	subs	r3, r5, #0
 8007836:	bfb9      	ittee	lt
 8007838:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800783c:	9303      	strlt	r3, [sp, #12]
 800783e:	2300      	movge	r3, #0
 8007840:	6033      	strge	r3, [r6, #0]
 8007842:	9f03      	ldr	r7, [sp, #12]
 8007844:	4b98      	ldr	r3, [pc, #608]	@ (8007aa8 <_dtoa_r+0x2d0>)
 8007846:	bfbc      	itt	lt
 8007848:	2201      	movlt	r2, #1
 800784a:	6032      	strlt	r2, [r6, #0]
 800784c:	43bb      	bics	r3, r7
 800784e:	d112      	bne.n	8007876 <_dtoa_r+0x9e>
 8007850:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007852:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800785c:	4323      	orrs	r3, r4
 800785e:	f000 854d 	beq.w	80082fc <_dtoa_r+0xb24>
 8007862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007864:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007abc <_dtoa_r+0x2e4>
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 854f 	beq.w	800830c <_dtoa_r+0xb34>
 800786e:	f10a 0303 	add.w	r3, sl, #3
 8007872:	f000 bd49 	b.w	8008308 <_dtoa_r+0xb30>
 8007876:	ed9d 7b02 	vldr	d7, [sp, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	ec51 0b17 	vmov	r0, r1, d7
 8007880:	2300      	movs	r3, #0
 8007882:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007886:	f7f9 f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800788a:	4680      	mov	r8, r0
 800788c:	b158      	cbz	r0, 80078a6 <_dtoa_r+0xce>
 800788e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007890:	2301      	movs	r3, #1
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007896:	b113      	cbz	r3, 800789e <_dtoa_r+0xc6>
 8007898:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800789a:	4b84      	ldr	r3, [pc, #528]	@ (8007aac <_dtoa_r+0x2d4>)
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ac0 <_dtoa_r+0x2e8>
 80078a2:	f000 bd33 	b.w	800830c <_dtoa_r+0xb34>
 80078a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80078aa:	aa16      	add	r2, sp, #88	@ 0x58
 80078ac:	a917      	add	r1, sp, #92	@ 0x5c
 80078ae:	4658      	mov	r0, fp
 80078b0:	f001 fa3a 	bl	8008d28 <__d2b>
 80078b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078b8:	4681      	mov	r9, r0
 80078ba:	2e00      	cmp	r6, #0
 80078bc:	d077      	beq.n	80079ae <_dtoa_r+0x1d6>
 80078be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80078c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078d8:	4619      	mov	r1, r3
 80078da:	2200      	movs	r2, #0
 80078dc:	4b74      	ldr	r3, [pc, #464]	@ (8007ab0 <_dtoa_r+0x2d8>)
 80078de:	f7f8 fcd3 	bl	8000288 <__aeabi_dsub>
 80078e2:	a369      	add	r3, pc, #420	@ (adr r3, 8007a88 <_dtoa_r+0x2b0>)
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	f7f8 fe86 	bl	80005f8 <__aeabi_dmul>
 80078ec:	a368      	add	r3, pc, #416	@ (adr r3, 8007a90 <_dtoa_r+0x2b8>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f7f8 fccb 	bl	800028c <__adddf3>
 80078f6:	4604      	mov	r4, r0
 80078f8:	4630      	mov	r0, r6
 80078fa:	460d      	mov	r5, r1
 80078fc:	f7f8 fe12 	bl	8000524 <__aeabi_i2d>
 8007900:	a365      	add	r3, pc, #404	@ (adr r3, 8007a98 <_dtoa_r+0x2c0>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f8 fe77 	bl	80005f8 <__aeabi_dmul>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4620      	mov	r0, r4
 8007910:	4629      	mov	r1, r5
 8007912:	f7f8 fcbb 	bl	800028c <__adddf3>
 8007916:	4604      	mov	r4, r0
 8007918:	460d      	mov	r5, r1
 800791a:	f7f9 f91d 	bl	8000b58 <__aeabi_d2iz>
 800791e:	2200      	movs	r2, #0
 8007920:	4607      	mov	r7, r0
 8007922:	2300      	movs	r3, #0
 8007924:	4620      	mov	r0, r4
 8007926:	4629      	mov	r1, r5
 8007928:	f7f9 f8d8 	bl	8000adc <__aeabi_dcmplt>
 800792c:	b140      	cbz	r0, 8007940 <_dtoa_r+0x168>
 800792e:	4638      	mov	r0, r7
 8007930:	f7f8 fdf8 	bl	8000524 <__aeabi_i2d>
 8007934:	4622      	mov	r2, r4
 8007936:	462b      	mov	r3, r5
 8007938:	f7f9 f8c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800793c:	b900      	cbnz	r0, 8007940 <_dtoa_r+0x168>
 800793e:	3f01      	subs	r7, #1
 8007940:	2f16      	cmp	r7, #22
 8007942:	d851      	bhi.n	80079e8 <_dtoa_r+0x210>
 8007944:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab4 <_dtoa_r+0x2dc>)
 8007946:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007952:	f7f9 f8c3 	bl	8000adc <__aeabi_dcmplt>
 8007956:	2800      	cmp	r0, #0
 8007958:	d048      	beq.n	80079ec <_dtoa_r+0x214>
 800795a:	3f01      	subs	r7, #1
 800795c:	2300      	movs	r3, #0
 800795e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007960:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007962:	1b9b      	subs	r3, r3, r6
 8007964:	1e5a      	subs	r2, r3, #1
 8007966:	bf44      	itt	mi
 8007968:	f1c3 0801 	rsbmi	r8, r3, #1
 800796c:	2300      	movmi	r3, #0
 800796e:	9208      	str	r2, [sp, #32]
 8007970:	bf54      	ite	pl
 8007972:	f04f 0800 	movpl.w	r8, #0
 8007976:	9308      	strmi	r3, [sp, #32]
 8007978:	2f00      	cmp	r7, #0
 800797a:	db39      	blt.n	80079f0 <_dtoa_r+0x218>
 800797c:	9b08      	ldr	r3, [sp, #32]
 800797e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007980:	443b      	add	r3, r7
 8007982:	9308      	str	r3, [sp, #32]
 8007984:	2300      	movs	r3, #0
 8007986:	930a      	str	r3, [sp, #40]	@ 0x28
 8007988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800798a:	2b09      	cmp	r3, #9
 800798c:	d864      	bhi.n	8007a58 <_dtoa_r+0x280>
 800798e:	2b05      	cmp	r3, #5
 8007990:	bfc4      	itt	gt
 8007992:	3b04      	subgt	r3, #4
 8007994:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007998:	f1a3 0302 	sub.w	r3, r3, #2
 800799c:	bfcc      	ite	gt
 800799e:	2400      	movgt	r4, #0
 80079a0:	2401      	movle	r4, #1
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d863      	bhi.n	8007a6e <_dtoa_r+0x296>
 80079a6:	e8df f003 	tbb	[pc, r3]
 80079aa:	372a      	.short	0x372a
 80079ac:	5535      	.short	0x5535
 80079ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80079b2:	441e      	add	r6, r3
 80079b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	bfc1      	itttt	gt
 80079bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079c0:	409f      	lslgt	r7, r3
 80079c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079ca:	bfd6      	itet	le
 80079cc:	f1c3 0320 	rsble	r3, r3, #32
 80079d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80079d4:	fa04 f003 	lslle.w	r0, r4, r3
 80079d8:	f7f8 fd94 	bl	8000504 <__aeabi_ui2d>
 80079dc:	2201      	movs	r2, #1
 80079de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079e2:	3e01      	subs	r6, #1
 80079e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80079e6:	e777      	b.n	80078d8 <_dtoa_r+0x100>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e7b8      	b.n	800795e <_dtoa_r+0x186>
 80079ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80079ee:	e7b7      	b.n	8007960 <_dtoa_r+0x188>
 80079f0:	427b      	negs	r3, r7
 80079f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80079f4:	2300      	movs	r3, #0
 80079f6:	eba8 0807 	sub.w	r8, r8, r7
 80079fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079fc:	e7c4      	b.n	8007988 <_dtoa_r+0x1b0>
 80079fe:	2300      	movs	r3, #0
 8007a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc35      	bgt.n	8007a74 <_dtoa_r+0x29c>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	9307      	str	r3, [sp, #28]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a12:	e00b      	b.n	8007a2c <_dtoa_r+0x254>
 8007a14:	2301      	movs	r3, #1
 8007a16:	e7f3      	b.n	8007a00 <_dtoa_r+0x228>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a1e:	18fb      	adds	r3, r7, r3
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	3301      	adds	r3, #1
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	9307      	str	r3, [sp, #28]
 8007a28:	bfb8      	it	lt
 8007a2a:	2301      	movlt	r3, #1
 8007a2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007a30:	2100      	movs	r1, #0
 8007a32:	2204      	movs	r2, #4
 8007a34:	f102 0514 	add.w	r5, r2, #20
 8007a38:	429d      	cmp	r5, r3
 8007a3a:	d91f      	bls.n	8007a7c <_dtoa_r+0x2a4>
 8007a3c:	6041      	str	r1, [r0, #4]
 8007a3e:	4658      	mov	r0, fp
 8007a40:	f000 fd8e 	bl	8008560 <_Balloc>
 8007a44:	4682      	mov	sl, r0
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d13c      	bne.n	8007ac4 <_dtoa_r+0x2ec>
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab8 <_dtoa_r+0x2e0>)
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a52:	e6d8      	b.n	8007806 <_dtoa_r+0x2e>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e7e0      	b.n	8007a1a <_dtoa_r+0x242>
 8007a58:	2401      	movs	r4, #1
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a60:	f04f 33ff 	mov.w	r3, #4294967295
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	9307      	str	r3, [sp, #28]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2312      	movs	r3, #18
 8007a6c:	e7d0      	b.n	8007a10 <_dtoa_r+0x238>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a72:	e7f5      	b.n	8007a60 <_dtoa_r+0x288>
 8007a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	9307      	str	r3, [sp, #28]
 8007a7a:	e7d7      	b.n	8007a2c <_dtoa_r+0x254>
 8007a7c:	3101      	adds	r1, #1
 8007a7e:	0052      	lsls	r2, r2, #1
 8007a80:	e7d8      	b.n	8007a34 <_dtoa_r+0x25c>
 8007a82:	bf00      	nop
 8007a84:	f3af 8000 	nop.w
 8007a88:	636f4361 	.word	0x636f4361
 8007a8c:	3fd287a7 	.word	0x3fd287a7
 8007a90:	8b60c8b3 	.word	0x8b60c8b3
 8007a94:	3fc68a28 	.word	0x3fc68a28
 8007a98:	509f79fb 	.word	0x509f79fb
 8007a9c:	3fd34413 	.word	0x3fd34413
 8007aa0:	0800b4a6 	.word	0x0800b4a6
 8007aa4:	0800b4bd 	.word	0x0800b4bd
 8007aa8:	7ff00000 	.word	0x7ff00000
 8007aac:	0800b471 	.word	0x0800b471
 8007ab0:	3ff80000 	.word	0x3ff80000
 8007ab4:	0800b5b8 	.word	0x0800b5b8
 8007ab8:	0800b515 	.word	0x0800b515
 8007abc:	0800b4a2 	.word	0x0800b4a2
 8007ac0:	0800b470 	.word	0x0800b470
 8007ac4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ac8:	6018      	str	r0, [r3, #0]
 8007aca:	9b07      	ldr	r3, [sp, #28]
 8007acc:	2b0e      	cmp	r3, #14
 8007ace:	f200 80a4 	bhi.w	8007c1a <_dtoa_r+0x442>
 8007ad2:	2c00      	cmp	r4, #0
 8007ad4:	f000 80a1 	beq.w	8007c1a <_dtoa_r+0x442>
 8007ad8:	2f00      	cmp	r7, #0
 8007ada:	dd33      	ble.n	8007b44 <_dtoa_r+0x36c>
 8007adc:	4bad      	ldr	r3, [pc, #692]	@ (8007d94 <_dtoa_r+0x5bc>)
 8007ade:	f007 020f 	and.w	r2, r7, #15
 8007ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ae6:	ed93 7b00 	vldr	d7, [r3]
 8007aea:	05f8      	lsls	r0, r7, #23
 8007aec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007af0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007af4:	d516      	bpl.n	8007b24 <_dtoa_r+0x34c>
 8007af6:	4ba8      	ldr	r3, [pc, #672]	@ (8007d98 <_dtoa_r+0x5c0>)
 8007af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007afc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b00:	f7f8 fea4 	bl	800084c <__aeabi_ddiv>
 8007b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b08:	f004 040f 	and.w	r4, r4, #15
 8007b0c:	2603      	movs	r6, #3
 8007b0e:	4da2      	ldr	r5, [pc, #648]	@ (8007d98 <_dtoa_r+0x5c0>)
 8007b10:	b954      	cbnz	r4, 8007b28 <_dtoa_r+0x350>
 8007b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b1a:	f7f8 fe97 	bl	800084c <__aeabi_ddiv>
 8007b1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b22:	e028      	b.n	8007b76 <_dtoa_r+0x39e>
 8007b24:	2602      	movs	r6, #2
 8007b26:	e7f2      	b.n	8007b0e <_dtoa_r+0x336>
 8007b28:	07e1      	lsls	r1, r4, #31
 8007b2a:	d508      	bpl.n	8007b3e <_dtoa_r+0x366>
 8007b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b34:	f7f8 fd60 	bl	80005f8 <__aeabi_dmul>
 8007b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	1064      	asrs	r4, r4, #1
 8007b40:	3508      	adds	r5, #8
 8007b42:	e7e5      	b.n	8007b10 <_dtoa_r+0x338>
 8007b44:	f000 80d2 	beq.w	8007cec <_dtoa_r+0x514>
 8007b48:	427c      	negs	r4, r7
 8007b4a:	4b92      	ldr	r3, [pc, #584]	@ (8007d94 <_dtoa_r+0x5bc>)
 8007b4c:	4d92      	ldr	r5, [pc, #584]	@ (8007d98 <_dtoa_r+0x5c0>)
 8007b4e:	f004 020f 	and.w	r2, r4, #15
 8007b52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b5e:	f7f8 fd4b 	bl	80005f8 <__aeabi_dmul>
 8007b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b66:	1124      	asrs	r4, r4, #4
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2602      	movs	r6, #2
 8007b6c:	2c00      	cmp	r4, #0
 8007b6e:	f040 80b2 	bne.w	8007cd6 <_dtoa_r+0x4fe>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1d3      	bne.n	8007b1e <_dtoa_r+0x346>
 8007b76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80b7 	beq.w	8007cf0 <_dtoa_r+0x518>
 8007b82:	4b86      	ldr	r3, [pc, #536]	@ (8007d9c <_dtoa_r+0x5c4>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7f8 ffa7 	bl	8000adc <__aeabi_dcmplt>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	f000 80ae 	beq.w	8007cf0 <_dtoa_r+0x518>
 8007b94:	9b07      	ldr	r3, [sp, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80aa 	beq.w	8007cf0 <_dtoa_r+0x518>
 8007b9c:	9b00      	ldr	r3, [sp, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dd37      	ble.n	8007c12 <_dtoa_r+0x43a>
 8007ba2:	1e7b      	subs	r3, r7, #1
 8007ba4:	9304      	str	r3, [sp, #16]
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	4b7d      	ldr	r3, [pc, #500]	@ (8007da0 <_dtoa_r+0x5c8>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	4629      	mov	r1, r5
 8007bae:	f7f8 fd23 	bl	80005f8 <__aeabi_dmul>
 8007bb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb6:	9c00      	ldr	r4, [sp, #0]
 8007bb8:	3601      	adds	r6, #1
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7f8 fcb2 	bl	8000524 <__aeabi_i2d>
 8007bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bc4:	f7f8 fd18 	bl	80005f8 <__aeabi_dmul>
 8007bc8:	4b76      	ldr	r3, [pc, #472]	@ (8007da4 <_dtoa_r+0x5cc>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f7f8 fb5e 	bl	800028c <__adddf3>
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007bd6:	2c00      	cmp	r4, #0
 8007bd8:	f040 808d 	bne.w	8007cf6 <_dtoa_r+0x51e>
 8007bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007be0:	4b71      	ldr	r3, [pc, #452]	@ (8007da8 <_dtoa_r+0x5d0>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	f7f8 fb50 	bl	8000288 <__aeabi_dsub>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4633      	mov	r3, r6
 8007bf4:	f7f8 ff90 	bl	8000b18 <__aeabi_dcmpgt>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f040 828b 	bne.w	8008114 <_dtoa_r+0x93c>
 8007bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c02:	462a      	mov	r2, r5
 8007c04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c08:	f7f8 ff68 	bl	8000adc <__aeabi_dcmplt>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f040 8128 	bne.w	8007e62 <_dtoa_r+0x68a>
 8007c12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007c16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007c1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f2c0 815a 	blt.w	8007ed6 <_dtoa_r+0x6fe>
 8007c22:	2f0e      	cmp	r7, #14
 8007c24:	f300 8157 	bgt.w	8007ed6 <_dtoa_r+0x6fe>
 8007c28:	4b5a      	ldr	r3, [pc, #360]	@ (8007d94 <_dtoa_r+0x5bc>)
 8007c2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c2e:	ed93 7b00 	vldr	d7, [r3]
 8007c32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	ed8d 7b00 	vstr	d7, [sp]
 8007c3a:	da03      	bge.n	8007c44 <_dtoa_r+0x46c>
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f340 8101 	ble.w	8007e46 <_dtoa_r+0x66e>
 8007c44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c48:	4656      	mov	r6, sl
 8007c4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	4629      	mov	r1, r5
 8007c52:	f7f8 fdfb 	bl	800084c <__aeabi_ddiv>
 8007c56:	f7f8 ff7f 	bl	8000b58 <__aeabi_d2iz>
 8007c5a:	4680      	mov	r8, r0
 8007c5c:	f7f8 fc62 	bl	8000524 <__aeabi_i2d>
 8007c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c64:	f7f8 fcc8 	bl	80005f8 <__aeabi_dmul>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c74:	f7f8 fb08 	bl	8000288 <__aeabi_dsub>
 8007c78:	f806 4b01 	strb.w	r4, [r6], #1
 8007c7c:	9d07      	ldr	r5, [sp, #28]
 8007c7e:	eba6 040a 	sub.w	r4, r6, sl
 8007c82:	42a5      	cmp	r5, r4
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	f040 8117 	bne.w	8007eba <_dtoa_r+0x6e2>
 8007c8c:	f7f8 fafe 	bl	800028c <__adddf3>
 8007c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c94:	4604      	mov	r4, r0
 8007c96:	460d      	mov	r5, r1
 8007c98:	f7f8 ff3e 	bl	8000b18 <__aeabi_dcmpgt>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f040 80f9 	bne.w	8007e94 <_dtoa_r+0x6bc>
 8007ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cae:	b118      	cbz	r0, 8007cb8 <_dtoa_r+0x4e0>
 8007cb0:	f018 0f01 	tst.w	r8, #1
 8007cb4:	f040 80ee 	bne.w	8007e94 <_dtoa_r+0x6bc>
 8007cb8:	4649      	mov	r1, r9
 8007cba:	4658      	mov	r0, fp
 8007cbc:	f000 fc90 	bl	80085e0 <_Bfree>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	7033      	strb	r3, [r6, #0]
 8007cc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007cc6:	3701      	adds	r7, #1
 8007cc8:	601f      	str	r7, [r3, #0]
 8007cca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 831d 	beq.w	800830c <_dtoa_r+0xb34>
 8007cd2:	601e      	str	r6, [r3, #0]
 8007cd4:	e31a      	b.n	800830c <_dtoa_r+0xb34>
 8007cd6:	07e2      	lsls	r2, r4, #31
 8007cd8:	d505      	bpl.n	8007ce6 <_dtoa_r+0x50e>
 8007cda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cde:	f7f8 fc8b 	bl	80005f8 <__aeabi_dmul>
 8007ce2:	3601      	adds	r6, #1
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	1064      	asrs	r4, r4, #1
 8007ce8:	3508      	adds	r5, #8
 8007cea:	e73f      	b.n	8007b6c <_dtoa_r+0x394>
 8007cec:	2602      	movs	r6, #2
 8007cee:	e742      	b.n	8007b76 <_dtoa_r+0x39e>
 8007cf0:	9c07      	ldr	r4, [sp, #28]
 8007cf2:	9704      	str	r7, [sp, #16]
 8007cf4:	e761      	b.n	8007bba <_dtoa_r+0x3e2>
 8007cf6:	4b27      	ldr	r3, [pc, #156]	@ (8007d94 <_dtoa_r+0x5bc>)
 8007cf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d02:	4454      	add	r4, sl
 8007d04:	2900      	cmp	r1, #0
 8007d06:	d053      	beq.n	8007db0 <_dtoa_r+0x5d8>
 8007d08:	4928      	ldr	r1, [pc, #160]	@ (8007dac <_dtoa_r+0x5d4>)
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f7f8 fd9e 	bl	800084c <__aeabi_ddiv>
 8007d10:	4633      	mov	r3, r6
 8007d12:	462a      	mov	r2, r5
 8007d14:	f7f8 fab8 	bl	8000288 <__aeabi_dsub>
 8007d18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d1c:	4656      	mov	r6, sl
 8007d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d22:	f7f8 ff19 	bl	8000b58 <__aeabi_d2iz>
 8007d26:	4605      	mov	r5, r0
 8007d28:	f7f8 fbfc 	bl	8000524 <__aeabi_i2d>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d34:	f7f8 faa8 	bl	8000288 <__aeabi_dsub>
 8007d38:	3530      	adds	r5, #48	@ 0x30
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d42:	f806 5b01 	strb.w	r5, [r6], #1
 8007d46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d4a:	f7f8 fec7 	bl	8000adc <__aeabi_dcmplt>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d171      	bne.n	8007e36 <_dtoa_r+0x65e>
 8007d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d56:	4911      	ldr	r1, [pc, #68]	@ (8007d9c <_dtoa_r+0x5c4>)
 8007d58:	2000      	movs	r0, #0
 8007d5a:	f7f8 fa95 	bl	8000288 <__aeabi_dsub>
 8007d5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d62:	f7f8 febb 	bl	8000adc <__aeabi_dcmplt>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f040 8095 	bne.w	8007e96 <_dtoa_r+0x6be>
 8007d6c:	42a6      	cmp	r6, r4
 8007d6e:	f43f af50 	beq.w	8007c12 <_dtoa_r+0x43a>
 8007d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d76:	4b0a      	ldr	r3, [pc, #40]	@ (8007da0 <_dtoa_r+0x5c8>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f7f8 fc3d 	bl	80005f8 <__aeabi_dmul>
 8007d7e:	4b08      	ldr	r3, [pc, #32]	@ (8007da0 <_dtoa_r+0x5c8>)
 8007d80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d84:	2200      	movs	r2, #0
 8007d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8a:	f7f8 fc35 	bl	80005f8 <__aeabi_dmul>
 8007d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d92:	e7c4      	b.n	8007d1e <_dtoa_r+0x546>
 8007d94:	0800b5b8 	.word	0x0800b5b8
 8007d98:	0800b590 	.word	0x0800b590
 8007d9c:	3ff00000 	.word	0x3ff00000
 8007da0:	40240000 	.word	0x40240000
 8007da4:	401c0000 	.word	0x401c0000
 8007da8:	40140000 	.word	0x40140000
 8007dac:	3fe00000 	.word	0x3fe00000
 8007db0:	4631      	mov	r1, r6
 8007db2:	4628      	mov	r0, r5
 8007db4:	f7f8 fc20 	bl	80005f8 <__aeabi_dmul>
 8007db8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dbc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007dbe:	4656      	mov	r6, sl
 8007dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc4:	f7f8 fec8 	bl	8000b58 <__aeabi_d2iz>
 8007dc8:	4605      	mov	r5, r0
 8007dca:	f7f8 fbab 	bl	8000524 <__aeabi_i2d>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd6:	f7f8 fa57 	bl	8000288 <__aeabi_dsub>
 8007dda:	3530      	adds	r5, #48	@ 0x30
 8007ddc:	f806 5b01 	strb.w	r5, [r6], #1
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	42a6      	cmp	r6, r4
 8007de6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	d124      	bne.n	8007e3a <_dtoa_r+0x662>
 8007df0:	4bac      	ldr	r3, [pc, #688]	@ (80080a4 <_dtoa_r+0x8cc>)
 8007df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007df6:	f7f8 fa49 	bl	800028c <__adddf3>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e02:	f7f8 fe89 	bl	8000b18 <__aeabi_dcmpgt>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d145      	bne.n	8007e96 <_dtoa_r+0x6be>
 8007e0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e0e:	49a5      	ldr	r1, [pc, #660]	@ (80080a4 <_dtoa_r+0x8cc>)
 8007e10:	2000      	movs	r0, #0
 8007e12:	f7f8 fa39 	bl	8000288 <__aeabi_dsub>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1e:	f7f8 fe5d 	bl	8000adc <__aeabi_dcmplt>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	f43f aef5 	beq.w	8007c12 <_dtoa_r+0x43a>
 8007e28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007e2a:	1e73      	subs	r3, r6, #1
 8007e2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e32:	2b30      	cmp	r3, #48	@ 0x30
 8007e34:	d0f8      	beq.n	8007e28 <_dtoa_r+0x650>
 8007e36:	9f04      	ldr	r7, [sp, #16]
 8007e38:	e73e      	b.n	8007cb8 <_dtoa_r+0x4e0>
 8007e3a:	4b9b      	ldr	r3, [pc, #620]	@ (80080a8 <_dtoa_r+0x8d0>)
 8007e3c:	f7f8 fbdc 	bl	80005f8 <__aeabi_dmul>
 8007e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e44:	e7bc      	b.n	8007dc0 <_dtoa_r+0x5e8>
 8007e46:	d10c      	bne.n	8007e62 <_dtoa_r+0x68a>
 8007e48:	4b98      	ldr	r3, [pc, #608]	@ (80080ac <_dtoa_r+0x8d4>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e50:	f7f8 fbd2 	bl	80005f8 <__aeabi_dmul>
 8007e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e58:	f7f8 fe54 	bl	8000b04 <__aeabi_dcmpge>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f000 8157 	beq.w	8008110 <_dtoa_r+0x938>
 8007e62:	2400      	movs	r4, #0
 8007e64:	4625      	mov	r5, r4
 8007e66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e68:	43db      	mvns	r3, r3
 8007e6a:	9304      	str	r3, [sp, #16]
 8007e6c:	4656      	mov	r6, sl
 8007e6e:	2700      	movs	r7, #0
 8007e70:	4621      	mov	r1, r4
 8007e72:	4658      	mov	r0, fp
 8007e74:	f000 fbb4 	bl	80085e0 <_Bfree>
 8007e78:	2d00      	cmp	r5, #0
 8007e7a:	d0dc      	beq.n	8007e36 <_dtoa_r+0x65e>
 8007e7c:	b12f      	cbz	r7, 8007e8a <_dtoa_r+0x6b2>
 8007e7e:	42af      	cmp	r7, r5
 8007e80:	d003      	beq.n	8007e8a <_dtoa_r+0x6b2>
 8007e82:	4639      	mov	r1, r7
 8007e84:	4658      	mov	r0, fp
 8007e86:	f000 fbab 	bl	80085e0 <_Bfree>
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	4658      	mov	r0, fp
 8007e8e:	f000 fba7 	bl	80085e0 <_Bfree>
 8007e92:	e7d0      	b.n	8007e36 <_dtoa_r+0x65e>
 8007e94:	9704      	str	r7, [sp, #16]
 8007e96:	4633      	mov	r3, r6
 8007e98:	461e      	mov	r6, r3
 8007e9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e9e:	2a39      	cmp	r2, #57	@ 0x39
 8007ea0:	d107      	bne.n	8007eb2 <_dtoa_r+0x6da>
 8007ea2:	459a      	cmp	sl, r3
 8007ea4:	d1f8      	bne.n	8007e98 <_dtoa_r+0x6c0>
 8007ea6:	9a04      	ldr	r2, [sp, #16]
 8007ea8:	3201      	adds	r2, #1
 8007eaa:	9204      	str	r2, [sp, #16]
 8007eac:	2230      	movs	r2, #48	@ 0x30
 8007eae:	f88a 2000 	strb.w	r2, [sl]
 8007eb2:	781a      	ldrb	r2, [r3, #0]
 8007eb4:	3201      	adds	r2, #1
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e7bd      	b.n	8007e36 <_dtoa_r+0x65e>
 8007eba:	4b7b      	ldr	r3, [pc, #492]	@ (80080a8 <_dtoa_r+0x8d0>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f7f8 fb9b 	bl	80005f8 <__aeabi_dmul>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	f7f8 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f43f aebb 	beq.w	8007c4a <_dtoa_r+0x472>
 8007ed4:	e6f0      	b.n	8007cb8 <_dtoa_r+0x4e0>
 8007ed6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	f000 80db 	beq.w	8008094 <_dtoa_r+0x8bc>
 8007ede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ee0:	2a01      	cmp	r2, #1
 8007ee2:	f300 80bf 	bgt.w	8008064 <_dtoa_r+0x88c>
 8007ee6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ee8:	2a00      	cmp	r2, #0
 8007eea:	f000 80b7 	beq.w	800805c <_dtoa_r+0x884>
 8007eee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ef2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ef4:	4646      	mov	r6, r8
 8007ef6:	9a08      	ldr	r2, [sp, #32]
 8007ef8:	2101      	movs	r1, #1
 8007efa:	441a      	add	r2, r3
 8007efc:	4658      	mov	r0, fp
 8007efe:	4498      	add	r8, r3
 8007f00:	9208      	str	r2, [sp, #32]
 8007f02:	f000 fc6b 	bl	80087dc <__i2b>
 8007f06:	4605      	mov	r5, r0
 8007f08:	b15e      	cbz	r6, 8007f22 <_dtoa_r+0x74a>
 8007f0a:	9b08      	ldr	r3, [sp, #32]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	dd08      	ble.n	8007f22 <_dtoa_r+0x74a>
 8007f10:	42b3      	cmp	r3, r6
 8007f12:	9a08      	ldr	r2, [sp, #32]
 8007f14:	bfa8      	it	ge
 8007f16:	4633      	movge	r3, r6
 8007f18:	eba8 0803 	sub.w	r8, r8, r3
 8007f1c:	1af6      	subs	r6, r6, r3
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	9308      	str	r3, [sp, #32]
 8007f22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f24:	b1f3      	cbz	r3, 8007f64 <_dtoa_r+0x78c>
 8007f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80b7 	beq.w	800809c <_dtoa_r+0x8c4>
 8007f2e:	b18c      	cbz	r4, 8007f54 <_dtoa_r+0x77c>
 8007f30:	4629      	mov	r1, r5
 8007f32:	4622      	mov	r2, r4
 8007f34:	4658      	mov	r0, fp
 8007f36:	f000 fd11 	bl	800895c <__pow5mult>
 8007f3a:	464a      	mov	r2, r9
 8007f3c:	4601      	mov	r1, r0
 8007f3e:	4605      	mov	r5, r0
 8007f40:	4658      	mov	r0, fp
 8007f42:	f000 fc61 	bl	8008808 <__multiply>
 8007f46:	4649      	mov	r1, r9
 8007f48:	9004      	str	r0, [sp, #16]
 8007f4a:	4658      	mov	r0, fp
 8007f4c:	f000 fb48 	bl	80085e0 <_Bfree>
 8007f50:	9b04      	ldr	r3, [sp, #16]
 8007f52:	4699      	mov	r9, r3
 8007f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f56:	1b1a      	subs	r2, r3, r4
 8007f58:	d004      	beq.n	8007f64 <_dtoa_r+0x78c>
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	4658      	mov	r0, fp
 8007f5e:	f000 fcfd 	bl	800895c <__pow5mult>
 8007f62:	4681      	mov	r9, r0
 8007f64:	2101      	movs	r1, #1
 8007f66:	4658      	mov	r0, fp
 8007f68:	f000 fc38 	bl	80087dc <__i2b>
 8007f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f6e:	4604      	mov	r4, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 81cf 	beq.w	8008314 <_dtoa_r+0xb3c>
 8007f76:	461a      	mov	r2, r3
 8007f78:	4601      	mov	r1, r0
 8007f7a:	4658      	mov	r0, fp
 8007f7c:	f000 fcee 	bl	800895c <__pow5mult>
 8007f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	4604      	mov	r4, r0
 8007f86:	f300 8095 	bgt.w	80080b4 <_dtoa_r+0x8dc>
 8007f8a:	9b02      	ldr	r3, [sp, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f040 8087 	bne.w	80080a0 <_dtoa_r+0x8c8>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f040 8089 	bne.w	80080b0 <_dtoa_r+0x8d8>
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fa4:	0d1b      	lsrs	r3, r3, #20
 8007fa6:	051b      	lsls	r3, r3, #20
 8007fa8:	b12b      	cbz	r3, 8007fb6 <_dtoa_r+0x7de>
 8007faa:	9b08      	ldr	r3, [sp, #32]
 8007fac:	3301      	adds	r3, #1
 8007fae:	9308      	str	r3, [sp, #32]
 8007fb0:	f108 0801 	add.w	r8, r8, #1
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 81b0 	beq.w	8008320 <_dtoa_r+0xb48>
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fc6:	6918      	ldr	r0, [r3, #16]
 8007fc8:	f000 fbbc 	bl	8008744 <__hi0bits>
 8007fcc:	f1c0 0020 	rsb	r0, r0, #32
 8007fd0:	9b08      	ldr	r3, [sp, #32]
 8007fd2:	4418      	add	r0, r3
 8007fd4:	f010 001f 	ands.w	r0, r0, #31
 8007fd8:	d077      	beq.n	80080ca <_dtoa_r+0x8f2>
 8007fda:	f1c0 0320 	rsb	r3, r0, #32
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	dd6b      	ble.n	80080ba <_dtoa_r+0x8e2>
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	f1c0 001c 	rsb	r0, r0, #28
 8007fe8:	4403      	add	r3, r0
 8007fea:	4480      	add	r8, r0
 8007fec:	4406      	add	r6, r0
 8007fee:	9308      	str	r3, [sp, #32]
 8007ff0:	f1b8 0f00 	cmp.w	r8, #0
 8007ff4:	dd05      	ble.n	8008002 <_dtoa_r+0x82a>
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	4658      	mov	r0, fp
 8007ffc:	f000 fd08 	bl	8008a10 <__lshift>
 8008000:	4681      	mov	r9, r0
 8008002:	9b08      	ldr	r3, [sp, #32]
 8008004:	2b00      	cmp	r3, #0
 8008006:	dd05      	ble.n	8008014 <_dtoa_r+0x83c>
 8008008:	4621      	mov	r1, r4
 800800a:	461a      	mov	r2, r3
 800800c:	4658      	mov	r0, fp
 800800e:	f000 fcff 	bl	8008a10 <__lshift>
 8008012:	4604      	mov	r4, r0
 8008014:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008016:	2b00      	cmp	r3, #0
 8008018:	d059      	beq.n	80080ce <_dtoa_r+0x8f6>
 800801a:	4621      	mov	r1, r4
 800801c:	4648      	mov	r0, r9
 800801e:	f000 fd63 	bl	8008ae8 <__mcmp>
 8008022:	2800      	cmp	r0, #0
 8008024:	da53      	bge.n	80080ce <_dtoa_r+0x8f6>
 8008026:	1e7b      	subs	r3, r7, #1
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	4649      	mov	r1, r9
 800802c:	2300      	movs	r3, #0
 800802e:	220a      	movs	r2, #10
 8008030:	4658      	mov	r0, fp
 8008032:	f000 faf7 	bl	8008624 <__multadd>
 8008036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008038:	4681      	mov	r9, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 8172 	beq.w	8008324 <_dtoa_r+0xb4c>
 8008040:	2300      	movs	r3, #0
 8008042:	4629      	mov	r1, r5
 8008044:	220a      	movs	r2, #10
 8008046:	4658      	mov	r0, fp
 8008048:	f000 faec 	bl	8008624 <__multadd>
 800804c:	9b00      	ldr	r3, [sp, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	4605      	mov	r5, r0
 8008052:	dc67      	bgt.n	8008124 <_dtoa_r+0x94c>
 8008054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008056:	2b02      	cmp	r3, #2
 8008058:	dc41      	bgt.n	80080de <_dtoa_r+0x906>
 800805a:	e063      	b.n	8008124 <_dtoa_r+0x94c>
 800805c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800805e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008062:	e746      	b.n	8007ef2 <_dtoa_r+0x71a>
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	1e5c      	subs	r4, r3, #1
 8008068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800806a:	42a3      	cmp	r3, r4
 800806c:	bfbf      	itttt	lt
 800806e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008070:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008072:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008074:	1ae3      	sublt	r3, r4, r3
 8008076:	bfb4      	ite	lt
 8008078:	18d2      	addlt	r2, r2, r3
 800807a:	1b1c      	subge	r4, r3, r4
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	bfbc      	itt	lt
 8008080:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008082:	2400      	movlt	r4, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	bfb5      	itete	lt
 8008088:	eba8 0603 	sublt.w	r6, r8, r3
 800808c:	9b07      	ldrge	r3, [sp, #28]
 800808e:	2300      	movlt	r3, #0
 8008090:	4646      	movge	r6, r8
 8008092:	e730      	b.n	8007ef6 <_dtoa_r+0x71e>
 8008094:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008096:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008098:	4646      	mov	r6, r8
 800809a:	e735      	b.n	8007f08 <_dtoa_r+0x730>
 800809c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800809e:	e75c      	b.n	8007f5a <_dtoa_r+0x782>
 80080a0:	2300      	movs	r3, #0
 80080a2:	e788      	b.n	8007fb6 <_dtoa_r+0x7de>
 80080a4:	3fe00000 	.word	0x3fe00000
 80080a8:	40240000 	.word	0x40240000
 80080ac:	40140000 	.word	0x40140000
 80080b0:	9b02      	ldr	r3, [sp, #8]
 80080b2:	e780      	b.n	8007fb6 <_dtoa_r+0x7de>
 80080b4:	2300      	movs	r3, #0
 80080b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80080b8:	e782      	b.n	8007fc0 <_dtoa_r+0x7e8>
 80080ba:	d099      	beq.n	8007ff0 <_dtoa_r+0x818>
 80080bc:	9a08      	ldr	r2, [sp, #32]
 80080be:	331c      	adds	r3, #28
 80080c0:	441a      	add	r2, r3
 80080c2:	4498      	add	r8, r3
 80080c4:	441e      	add	r6, r3
 80080c6:	9208      	str	r2, [sp, #32]
 80080c8:	e792      	b.n	8007ff0 <_dtoa_r+0x818>
 80080ca:	4603      	mov	r3, r0
 80080cc:	e7f6      	b.n	80080bc <_dtoa_r+0x8e4>
 80080ce:	9b07      	ldr	r3, [sp, #28]
 80080d0:	9704      	str	r7, [sp, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dc20      	bgt.n	8008118 <_dtoa_r+0x940>
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080da:	2b02      	cmp	r3, #2
 80080dc:	dd1e      	ble.n	800811c <_dtoa_r+0x944>
 80080de:	9b00      	ldr	r3, [sp, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f47f aec0 	bne.w	8007e66 <_dtoa_r+0x68e>
 80080e6:	4621      	mov	r1, r4
 80080e8:	2205      	movs	r2, #5
 80080ea:	4658      	mov	r0, fp
 80080ec:	f000 fa9a 	bl	8008624 <__multadd>
 80080f0:	4601      	mov	r1, r0
 80080f2:	4604      	mov	r4, r0
 80080f4:	4648      	mov	r0, r9
 80080f6:	f000 fcf7 	bl	8008ae8 <__mcmp>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f77f aeb3 	ble.w	8007e66 <_dtoa_r+0x68e>
 8008100:	4656      	mov	r6, sl
 8008102:	2331      	movs	r3, #49	@ 0x31
 8008104:	f806 3b01 	strb.w	r3, [r6], #1
 8008108:	9b04      	ldr	r3, [sp, #16]
 800810a:	3301      	adds	r3, #1
 800810c:	9304      	str	r3, [sp, #16]
 800810e:	e6ae      	b.n	8007e6e <_dtoa_r+0x696>
 8008110:	9c07      	ldr	r4, [sp, #28]
 8008112:	9704      	str	r7, [sp, #16]
 8008114:	4625      	mov	r5, r4
 8008116:	e7f3      	b.n	8008100 <_dtoa_r+0x928>
 8008118:	9b07      	ldr	r3, [sp, #28]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 8104 	beq.w	800832c <_dtoa_r+0xb54>
 8008124:	2e00      	cmp	r6, #0
 8008126:	dd05      	ble.n	8008134 <_dtoa_r+0x95c>
 8008128:	4629      	mov	r1, r5
 800812a:	4632      	mov	r2, r6
 800812c:	4658      	mov	r0, fp
 800812e:	f000 fc6f 	bl	8008a10 <__lshift>
 8008132:	4605      	mov	r5, r0
 8008134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d05a      	beq.n	80081f0 <_dtoa_r+0xa18>
 800813a:	6869      	ldr	r1, [r5, #4]
 800813c:	4658      	mov	r0, fp
 800813e:	f000 fa0f 	bl	8008560 <_Balloc>
 8008142:	4606      	mov	r6, r0
 8008144:	b928      	cbnz	r0, 8008152 <_dtoa_r+0x97a>
 8008146:	4b84      	ldr	r3, [pc, #528]	@ (8008358 <_dtoa_r+0xb80>)
 8008148:	4602      	mov	r2, r0
 800814a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800814e:	f7ff bb5a 	b.w	8007806 <_dtoa_r+0x2e>
 8008152:	692a      	ldr	r2, [r5, #16]
 8008154:	3202      	adds	r2, #2
 8008156:	0092      	lsls	r2, r2, #2
 8008158:	f105 010c 	add.w	r1, r5, #12
 800815c:	300c      	adds	r0, #12
 800815e:	f7ff fa9c 	bl	800769a <memcpy>
 8008162:	2201      	movs	r2, #1
 8008164:	4631      	mov	r1, r6
 8008166:	4658      	mov	r0, fp
 8008168:	f000 fc52 	bl	8008a10 <__lshift>
 800816c:	f10a 0301 	add.w	r3, sl, #1
 8008170:	9307      	str	r3, [sp, #28]
 8008172:	9b00      	ldr	r3, [sp, #0]
 8008174:	4453      	add	r3, sl
 8008176:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	462f      	mov	r7, r5
 8008180:	930a      	str	r3, [sp, #40]	@ 0x28
 8008182:	4605      	mov	r5, r0
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	4621      	mov	r1, r4
 8008188:	3b01      	subs	r3, #1
 800818a:	4648      	mov	r0, r9
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	f7ff fa99 	bl	80076c4 <quorem>
 8008192:	4639      	mov	r1, r7
 8008194:	9002      	str	r0, [sp, #8]
 8008196:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800819a:	4648      	mov	r0, r9
 800819c:	f000 fca4 	bl	8008ae8 <__mcmp>
 80081a0:	462a      	mov	r2, r5
 80081a2:	9008      	str	r0, [sp, #32]
 80081a4:	4621      	mov	r1, r4
 80081a6:	4658      	mov	r0, fp
 80081a8:	f000 fcba 	bl	8008b20 <__mdiff>
 80081ac:	68c2      	ldr	r2, [r0, #12]
 80081ae:	4606      	mov	r6, r0
 80081b0:	bb02      	cbnz	r2, 80081f4 <_dtoa_r+0xa1c>
 80081b2:	4601      	mov	r1, r0
 80081b4:	4648      	mov	r0, r9
 80081b6:	f000 fc97 	bl	8008ae8 <__mcmp>
 80081ba:	4602      	mov	r2, r0
 80081bc:	4631      	mov	r1, r6
 80081be:	4658      	mov	r0, fp
 80081c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80081c2:	f000 fa0d 	bl	80085e0 <_Bfree>
 80081c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081ca:	9e07      	ldr	r6, [sp, #28]
 80081cc:	ea43 0102 	orr.w	r1, r3, r2
 80081d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d2:	4319      	orrs	r1, r3
 80081d4:	d110      	bne.n	80081f8 <_dtoa_r+0xa20>
 80081d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081da:	d029      	beq.n	8008230 <_dtoa_r+0xa58>
 80081dc:	9b08      	ldr	r3, [sp, #32]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	dd02      	ble.n	80081e8 <_dtoa_r+0xa10>
 80081e2:	9b02      	ldr	r3, [sp, #8]
 80081e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80081e8:	9b00      	ldr	r3, [sp, #0]
 80081ea:	f883 8000 	strb.w	r8, [r3]
 80081ee:	e63f      	b.n	8007e70 <_dtoa_r+0x698>
 80081f0:	4628      	mov	r0, r5
 80081f2:	e7bb      	b.n	800816c <_dtoa_r+0x994>
 80081f4:	2201      	movs	r2, #1
 80081f6:	e7e1      	b.n	80081bc <_dtoa_r+0x9e4>
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	db04      	blt.n	8008208 <_dtoa_r+0xa30>
 80081fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008200:	430b      	orrs	r3, r1
 8008202:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008204:	430b      	orrs	r3, r1
 8008206:	d120      	bne.n	800824a <_dtoa_r+0xa72>
 8008208:	2a00      	cmp	r2, #0
 800820a:	dded      	ble.n	80081e8 <_dtoa_r+0xa10>
 800820c:	4649      	mov	r1, r9
 800820e:	2201      	movs	r2, #1
 8008210:	4658      	mov	r0, fp
 8008212:	f000 fbfd 	bl	8008a10 <__lshift>
 8008216:	4621      	mov	r1, r4
 8008218:	4681      	mov	r9, r0
 800821a:	f000 fc65 	bl	8008ae8 <__mcmp>
 800821e:	2800      	cmp	r0, #0
 8008220:	dc03      	bgt.n	800822a <_dtoa_r+0xa52>
 8008222:	d1e1      	bne.n	80081e8 <_dtoa_r+0xa10>
 8008224:	f018 0f01 	tst.w	r8, #1
 8008228:	d0de      	beq.n	80081e8 <_dtoa_r+0xa10>
 800822a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800822e:	d1d8      	bne.n	80081e2 <_dtoa_r+0xa0a>
 8008230:	9a00      	ldr	r2, [sp, #0]
 8008232:	2339      	movs	r3, #57	@ 0x39
 8008234:	7013      	strb	r3, [r2, #0]
 8008236:	4633      	mov	r3, r6
 8008238:	461e      	mov	r6, r3
 800823a:	3b01      	subs	r3, #1
 800823c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008240:	2a39      	cmp	r2, #57	@ 0x39
 8008242:	d052      	beq.n	80082ea <_dtoa_r+0xb12>
 8008244:	3201      	adds	r2, #1
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	e612      	b.n	8007e70 <_dtoa_r+0x698>
 800824a:	2a00      	cmp	r2, #0
 800824c:	dd07      	ble.n	800825e <_dtoa_r+0xa86>
 800824e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008252:	d0ed      	beq.n	8008230 <_dtoa_r+0xa58>
 8008254:	9a00      	ldr	r2, [sp, #0]
 8008256:	f108 0301 	add.w	r3, r8, #1
 800825a:	7013      	strb	r3, [r2, #0]
 800825c:	e608      	b.n	8007e70 <_dtoa_r+0x698>
 800825e:	9b07      	ldr	r3, [sp, #28]
 8008260:	9a07      	ldr	r2, [sp, #28]
 8008262:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008268:	4293      	cmp	r3, r2
 800826a:	d028      	beq.n	80082be <_dtoa_r+0xae6>
 800826c:	4649      	mov	r1, r9
 800826e:	2300      	movs	r3, #0
 8008270:	220a      	movs	r2, #10
 8008272:	4658      	mov	r0, fp
 8008274:	f000 f9d6 	bl	8008624 <__multadd>
 8008278:	42af      	cmp	r7, r5
 800827a:	4681      	mov	r9, r0
 800827c:	f04f 0300 	mov.w	r3, #0
 8008280:	f04f 020a 	mov.w	r2, #10
 8008284:	4639      	mov	r1, r7
 8008286:	4658      	mov	r0, fp
 8008288:	d107      	bne.n	800829a <_dtoa_r+0xac2>
 800828a:	f000 f9cb 	bl	8008624 <__multadd>
 800828e:	4607      	mov	r7, r0
 8008290:	4605      	mov	r5, r0
 8008292:	9b07      	ldr	r3, [sp, #28]
 8008294:	3301      	adds	r3, #1
 8008296:	9307      	str	r3, [sp, #28]
 8008298:	e774      	b.n	8008184 <_dtoa_r+0x9ac>
 800829a:	f000 f9c3 	bl	8008624 <__multadd>
 800829e:	4629      	mov	r1, r5
 80082a0:	4607      	mov	r7, r0
 80082a2:	2300      	movs	r3, #0
 80082a4:	220a      	movs	r2, #10
 80082a6:	4658      	mov	r0, fp
 80082a8:	f000 f9bc 	bl	8008624 <__multadd>
 80082ac:	4605      	mov	r5, r0
 80082ae:	e7f0      	b.n	8008292 <_dtoa_r+0xaba>
 80082b0:	9b00      	ldr	r3, [sp, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	bfcc      	ite	gt
 80082b6:	461e      	movgt	r6, r3
 80082b8:	2601      	movle	r6, #1
 80082ba:	4456      	add	r6, sl
 80082bc:	2700      	movs	r7, #0
 80082be:	4649      	mov	r1, r9
 80082c0:	2201      	movs	r2, #1
 80082c2:	4658      	mov	r0, fp
 80082c4:	f000 fba4 	bl	8008a10 <__lshift>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4681      	mov	r9, r0
 80082cc:	f000 fc0c 	bl	8008ae8 <__mcmp>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	dcb0      	bgt.n	8008236 <_dtoa_r+0xa5e>
 80082d4:	d102      	bne.n	80082dc <_dtoa_r+0xb04>
 80082d6:	f018 0f01 	tst.w	r8, #1
 80082da:	d1ac      	bne.n	8008236 <_dtoa_r+0xa5e>
 80082dc:	4633      	mov	r3, r6
 80082de:	461e      	mov	r6, r3
 80082e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082e4:	2a30      	cmp	r2, #48	@ 0x30
 80082e6:	d0fa      	beq.n	80082de <_dtoa_r+0xb06>
 80082e8:	e5c2      	b.n	8007e70 <_dtoa_r+0x698>
 80082ea:	459a      	cmp	sl, r3
 80082ec:	d1a4      	bne.n	8008238 <_dtoa_r+0xa60>
 80082ee:	9b04      	ldr	r3, [sp, #16]
 80082f0:	3301      	adds	r3, #1
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	2331      	movs	r3, #49	@ 0x31
 80082f6:	f88a 3000 	strb.w	r3, [sl]
 80082fa:	e5b9      	b.n	8007e70 <_dtoa_r+0x698>
 80082fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800835c <_dtoa_r+0xb84>
 8008302:	b11b      	cbz	r3, 800830c <_dtoa_r+0xb34>
 8008304:	f10a 0308 	add.w	r3, sl, #8
 8008308:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	4650      	mov	r0, sl
 800830e:	b019      	add	sp, #100	@ 0x64
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008316:	2b01      	cmp	r3, #1
 8008318:	f77f ae37 	ble.w	8007f8a <_dtoa_r+0x7b2>
 800831c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800831e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008320:	2001      	movs	r0, #1
 8008322:	e655      	b.n	8007fd0 <_dtoa_r+0x7f8>
 8008324:	9b00      	ldr	r3, [sp, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	f77f aed6 	ble.w	80080d8 <_dtoa_r+0x900>
 800832c:	4656      	mov	r6, sl
 800832e:	4621      	mov	r1, r4
 8008330:	4648      	mov	r0, r9
 8008332:	f7ff f9c7 	bl	80076c4 <quorem>
 8008336:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800833a:	f806 8b01 	strb.w	r8, [r6], #1
 800833e:	9b00      	ldr	r3, [sp, #0]
 8008340:	eba6 020a 	sub.w	r2, r6, sl
 8008344:	4293      	cmp	r3, r2
 8008346:	ddb3      	ble.n	80082b0 <_dtoa_r+0xad8>
 8008348:	4649      	mov	r1, r9
 800834a:	2300      	movs	r3, #0
 800834c:	220a      	movs	r2, #10
 800834e:	4658      	mov	r0, fp
 8008350:	f000 f968 	bl	8008624 <__multadd>
 8008354:	4681      	mov	r9, r0
 8008356:	e7ea      	b.n	800832e <_dtoa_r+0xb56>
 8008358:	0800b515 	.word	0x0800b515
 800835c:	0800b499 	.word	0x0800b499

08008360 <_free_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4605      	mov	r5, r0
 8008364:	2900      	cmp	r1, #0
 8008366:	d041      	beq.n	80083ec <_free_r+0x8c>
 8008368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836c:	1f0c      	subs	r4, r1, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	bfb8      	it	lt
 8008372:	18e4      	addlt	r4, r4, r3
 8008374:	f000 f8e8 	bl	8008548 <__malloc_lock>
 8008378:	4a1d      	ldr	r2, [pc, #116]	@ (80083f0 <_free_r+0x90>)
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	b933      	cbnz	r3, 800838c <_free_r+0x2c>
 800837e:	6063      	str	r3, [r4, #4]
 8008380:	6014      	str	r4, [r2, #0]
 8008382:	4628      	mov	r0, r5
 8008384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008388:	f000 b8e4 	b.w	8008554 <__malloc_unlock>
 800838c:	42a3      	cmp	r3, r4
 800838e:	d908      	bls.n	80083a2 <_free_r+0x42>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	1821      	adds	r1, r4, r0
 8008394:	428b      	cmp	r3, r1
 8008396:	bf01      	itttt	eq
 8008398:	6819      	ldreq	r1, [r3, #0]
 800839a:	685b      	ldreq	r3, [r3, #4]
 800839c:	1809      	addeq	r1, r1, r0
 800839e:	6021      	streq	r1, [r4, #0]
 80083a0:	e7ed      	b.n	800837e <_free_r+0x1e>
 80083a2:	461a      	mov	r2, r3
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	b10b      	cbz	r3, 80083ac <_free_r+0x4c>
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	d9fa      	bls.n	80083a2 <_free_r+0x42>
 80083ac:	6811      	ldr	r1, [r2, #0]
 80083ae:	1850      	adds	r0, r2, r1
 80083b0:	42a0      	cmp	r0, r4
 80083b2:	d10b      	bne.n	80083cc <_free_r+0x6c>
 80083b4:	6820      	ldr	r0, [r4, #0]
 80083b6:	4401      	add	r1, r0
 80083b8:	1850      	adds	r0, r2, r1
 80083ba:	4283      	cmp	r3, r0
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	d1e0      	bne.n	8008382 <_free_r+0x22>
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	6053      	str	r3, [r2, #4]
 80083c6:	4408      	add	r0, r1
 80083c8:	6010      	str	r0, [r2, #0]
 80083ca:	e7da      	b.n	8008382 <_free_r+0x22>
 80083cc:	d902      	bls.n	80083d4 <_free_r+0x74>
 80083ce:	230c      	movs	r3, #12
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	e7d6      	b.n	8008382 <_free_r+0x22>
 80083d4:	6820      	ldr	r0, [r4, #0]
 80083d6:	1821      	adds	r1, r4, r0
 80083d8:	428b      	cmp	r3, r1
 80083da:	bf04      	itt	eq
 80083dc:	6819      	ldreq	r1, [r3, #0]
 80083de:	685b      	ldreq	r3, [r3, #4]
 80083e0:	6063      	str	r3, [r4, #4]
 80083e2:	bf04      	itt	eq
 80083e4:	1809      	addeq	r1, r1, r0
 80083e6:	6021      	streq	r1, [r4, #0]
 80083e8:	6054      	str	r4, [r2, #4]
 80083ea:	e7ca      	b.n	8008382 <_free_r+0x22>
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	bf00      	nop
 80083f0:	20000644 	.word	0x20000644

080083f4 <malloc>:
 80083f4:	4b02      	ldr	r3, [pc, #8]	@ (8008400 <malloc+0xc>)
 80083f6:	4601      	mov	r1, r0
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	f000 b825 	b.w	8008448 <_malloc_r>
 80083fe:	bf00      	nop
 8008400:	20000034 	.word	0x20000034

08008404 <sbrk_aligned>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	4e0f      	ldr	r6, [pc, #60]	@ (8008444 <sbrk_aligned+0x40>)
 8008408:	460c      	mov	r4, r1
 800840a:	6831      	ldr	r1, [r6, #0]
 800840c:	4605      	mov	r5, r0
 800840e:	b911      	cbnz	r1, 8008416 <sbrk_aligned+0x12>
 8008410:	f001 fe0c 	bl	800a02c <_sbrk_r>
 8008414:	6030      	str	r0, [r6, #0]
 8008416:	4621      	mov	r1, r4
 8008418:	4628      	mov	r0, r5
 800841a:	f001 fe07 	bl	800a02c <_sbrk_r>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d103      	bne.n	800842a <sbrk_aligned+0x26>
 8008422:	f04f 34ff 	mov.w	r4, #4294967295
 8008426:	4620      	mov	r0, r4
 8008428:	bd70      	pop	{r4, r5, r6, pc}
 800842a:	1cc4      	adds	r4, r0, #3
 800842c:	f024 0403 	bic.w	r4, r4, #3
 8008430:	42a0      	cmp	r0, r4
 8008432:	d0f8      	beq.n	8008426 <sbrk_aligned+0x22>
 8008434:	1a21      	subs	r1, r4, r0
 8008436:	4628      	mov	r0, r5
 8008438:	f001 fdf8 	bl	800a02c <_sbrk_r>
 800843c:	3001      	adds	r0, #1
 800843e:	d1f2      	bne.n	8008426 <sbrk_aligned+0x22>
 8008440:	e7ef      	b.n	8008422 <sbrk_aligned+0x1e>
 8008442:	bf00      	nop
 8008444:	20000640 	.word	0x20000640

08008448 <_malloc_r>:
 8008448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800844c:	1ccd      	adds	r5, r1, #3
 800844e:	f025 0503 	bic.w	r5, r5, #3
 8008452:	3508      	adds	r5, #8
 8008454:	2d0c      	cmp	r5, #12
 8008456:	bf38      	it	cc
 8008458:	250c      	movcc	r5, #12
 800845a:	2d00      	cmp	r5, #0
 800845c:	4606      	mov	r6, r0
 800845e:	db01      	blt.n	8008464 <_malloc_r+0x1c>
 8008460:	42a9      	cmp	r1, r5
 8008462:	d904      	bls.n	800846e <_malloc_r+0x26>
 8008464:	230c      	movs	r3, #12
 8008466:	6033      	str	r3, [r6, #0]
 8008468:	2000      	movs	r0, #0
 800846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008544 <_malloc_r+0xfc>
 8008472:	f000 f869 	bl	8008548 <__malloc_lock>
 8008476:	f8d8 3000 	ldr.w	r3, [r8]
 800847a:	461c      	mov	r4, r3
 800847c:	bb44      	cbnz	r4, 80084d0 <_malloc_r+0x88>
 800847e:	4629      	mov	r1, r5
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff ffbf 	bl	8008404 <sbrk_aligned>
 8008486:	1c43      	adds	r3, r0, #1
 8008488:	4604      	mov	r4, r0
 800848a:	d158      	bne.n	800853e <_malloc_r+0xf6>
 800848c:	f8d8 4000 	ldr.w	r4, [r8]
 8008490:	4627      	mov	r7, r4
 8008492:	2f00      	cmp	r7, #0
 8008494:	d143      	bne.n	800851e <_malloc_r+0xd6>
 8008496:	2c00      	cmp	r4, #0
 8008498:	d04b      	beq.n	8008532 <_malloc_r+0xea>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	4639      	mov	r1, r7
 800849e:	4630      	mov	r0, r6
 80084a0:	eb04 0903 	add.w	r9, r4, r3
 80084a4:	f001 fdc2 	bl	800a02c <_sbrk_r>
 80084a8:	4581      	cmp	r9, r0
 80084aa:	d142      	bne.n	8008532 <_malloc_r+0xea>
 80084ac:	6821      	ldr	r1, [r4, #0]
 80084ae:	1a6d      	subs	r5, r5, r1
 80084b0:	4629      	mov	r1, r5
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7ff ffa6 	bl	8008404 <sbrk_aligned>
 80084b8:	3001      	adds	r0, #1
 80084ba:	d03a      	beq.n	8008532 <_malloc_r+0xea>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	442b      	add	r3, r5
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	f8d8 3000 	ldr.w	r3, [r8]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	bb62      	cbnz	r2, 8008524 <_malloc_r+0xdc>
 80084ca:	f8c8 7000 	str.w	r7, [r8]
 80084ce:	e00f      	b.n	80084f0 <_malloc_r+0xa8>
 80084d0:	6822      	ldr	r2, [r4, #0]
 80084d2:	1b52      	subs	r2, r2, r5
 80084d4:	d420      	bmi.n	8008518 <_malloc_r+0xd0>
 80084d6:	2a0b      	cmp	r2, #11
 80084d8:	d917      	bls.n	800850a <_malloc_r+0xc2>
 80084da:	1961      	adds	r1, r4, r5
 80084dc:	42a3      	cmp	r3, r4
 80084de:	6025      	str	r5, [r4, #0]
 80084e0:	bf18      	it	ne
 80084e2:	6059      	strne	r1, [r3, #4]
 80084e4:	6863      	ldr	r3, [r4, #4]
 80084e6:	bf08      	it	eq
 80084e8:	f8c8 1000 	streq.w	r1, [r8]
 80084ec:	5162      	str	r2, [r4, r5]
 80084ee:	604b      	str	r3, [r1, #4]
 80084f0:	4630      	mov	r0, r6
 80084f2:	f000 f82f 	bl	8008554 <__malloc_unlock>
 80084f6:	f104 000b 	add.w	r0, r4, #11
 80084fa:	1d23      	adds	r3, r4, #4
 80084fc:	f020 0007 	bic.w	r0, r0, #7
 8008500:	1ac2      	subs	r2, r0, r3
 8008502:	bf1c      	itt	ne
 8008504:	1a1b      	subne	r3, r3, r0
 8008506:	50a3      	strne	r3, [r4, r2]
 8008508:	e7af      	b.n	800846a <_malloc_r+0x22>
 800850a:	6862      	ldr	r2, [r4, #4]
 800850c:	42a3      	cmp	r3, r4
 800850e:	bf0c      	ite	eq
 8008510:	f8c8 2000 	streq.w	r2, [r8]
 8008514:	605a      	strne	r2, [r3, #4]
 8008516:	e7eb      	b.n	80084f0 <_malloc_r+0xa8>
 8008518:	4623      	mov	r3, r4
 800851a:	6864      	ldr	r4, [r4, #4]
 800851c:	e7ae      	b.n	800847c <_malloc_r+0x34>
 800851e:	463c      	mov	r4, r7
 8008520:	687f      	ldr	r7, [r7, #4]
 8008522:	e7b6      	b.n	8008492 <_malloc_r+0x4a>
 8008524:	461a      	mov	r2, r3
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	42a3      	cmp	r3, r4
 800852a:	d1fb      	bne.n	8008524 <_malloc_r+0xdc>
 800852c:	2300      	movs	r3, #0
 800852e:	6053      	str	r3, [r2, #4]
 8008530:	e7de      	b.n	80084f0 <_malloc_r+0xa8>
 8008532:	230c      	movs	r3, #12
 8008534:	6033      	str	r3, [r6, #0]
 8008536:	4630      	mov	r0, r6
 8008538:	f000 f80c 	bl	8008554 <__malloc_unlock>
 800853c:	e794      	b.n	8008468 <_malloc_r+0x20>
 800853e:	6005      	str	r5, [r0, #0]
 8008540:	e7d6      	b.n	80084f0 <_malloc_r+0xa8>
 8008542:	bf00      	nop
 8008544:	20000644 	.word	0x20000644

08008548 <__malloc_lock>:
 8008548:	4801      	ldr	r0, [pc, #4]	@ (8008550 <__malloc_lock+0x8>)
 800854a:	f7ff b8a4 	b.w	8007696 <__retarget_lock_acquire_recursive>
 800854e:	bf00      	nop
 8008550:	2000063c 	.word	0x2000063c

08008554 <__malloc_unlock>:
 8008554:	4801      	ldr	r0, [pc, #4]	@ (800855c <__malloc_unlock+0x8>)
 8008556:	f7ff b89f 	b.w	8007698 <__retarget_lock_release_recursive>
 800855a:	bf00      	nop
 800855c:	2000063c 	.word	0x2000063c

08008560 <_Balloc>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	69c6      	ldr	r6, [r0, #28]
 8008564:	4604      	mov	r4, r0
 8008566:	460d      	mov	r5, r1
 8008568:	b976      	cbnz	r6, 8008588 <_Balloc+0x28>
 800856a:	2010      	movs	r0, #16
 800856c:	f7ff ff42 	bl	80083f4 <malloc>
 8008570:	4602      	mov	r2, r0
 8008572:	61e0      	str	r0, [r4, #28]
 8008574:	b920      	cbnz	r0, 8008580 <_Balloc+0x20>
 8008576:	4b18      	ldr	r3, [pc, #96]	@ (80085d8 <_Balloc+0x78>)
 8008578:	4818      	ldr	r0, [pc, #96]	@ (80085dc <_Balloc+0x7c>)
 800857a:	216b      	movs	r1, #107	@ 0x6b
 800857c:	f001 fd70 	bl	800a060 <__assert_func>
 8008580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008584:	6006      	str	r6, [r0, #0]
 8008586:	60c6      	str	r6, [r0, #12]
 8008588:	69e6      	ldr	r6, [r4, #28]
 800858a:	68f3      	ldr	r3, [r6, #12]
 800858c:	b183      	cbz	r3, 80085b0 <_Balloc+0x50>
 800858e:	69e3      	ldr	r3, [r4, #28]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008596:	b9b8      	cbnz	r0, 80085c8 <_Balloc+0x68>
 8008598:	2101      	movs	r1, #1
 800859a:	fa01 f605 	lsl.w	r6, r1, r5
 800859e:	1d72      	adds	r2, r6, #5
 80085a0:	0092      	lsls	r2, r2, #2
 80085a2:	4620      	mov	r0, r4
 80085a4:	f001 fd7a 	bl	800a09c <_calloc_r>
 80085a8:	b160      	cbz	r0, 80085c4 <_Balloc+0x64>
 80085aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085ae:	e00e      	b.n	80085ce <_Balloc+0x6e>
 80085b0:	2221      	movs	r2, #33	@ 0x21
 80085b2:	2104      	movs	r1, #4
 80085b4:	4620      	mov	r0, r4
 80085b6:	f001 fd71 	bl	800a09c <_calloc_r>
 80085ba:	69e3      	ldr	r3, [r4, #28]
 80085bc:	60f0      	str	r0, [r6, #12]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e4      	bne.n	800858e <_Balloc+0x2e>
 80085c4:	2000      	movs	r0, #0
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	6802      	ldr	r2, [r0, #0]
 80085ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ce:	2300      	movs	r3, #0
 80085d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085d4:	e7f7      	b.n	80085c6 <_Balloc+0x66>
 80085d6:	bf00      	nop
 80085d8:	0800b4a6 	.word	0x0800b4a6
 80085dc:	0800b526 	.word	0x0800b526

080085e0 <_Bfree>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	69c6      	ldr	r6, [r0, #28]
 80085e4:	4605      	mov	r5, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b976      	cbnz	r6, 8008608 <_Bfree+0x28>
 80085ea:	2010      	movs	r0, #16
 80085ec:	f7ff ff02 	bl	80083f4 <malloc>
 80085f0:	4602      	mov	r2, r0
 80085f2:	61e8      	str	r0, [r5, #28]
 80085f4:	b920      	cbnz	r0, 8008600 <_Bfree+0x20>
 80085f6:	4b09      	ldr	r3, [pc, #36]	@ (800861c <_Bfree+0x3c>)
 80085f8:	4809      	ldr	r0, [pc, #36]	@ (8008620 <_Bfree+0x40>)
 80085fa:	218f      	movs	r1, #143	@ 0x8f
 80085fc:	f001 fd30 	bl	800a060 <__assert_func>
 8008600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008604:	6006      	str	r6, [r0, #0]
 8008606:	60c6      	str	r6, [r0, #12]
 8008608:	b13c      	cbz	r4, 800861a <_Bfree+0x3a>
 800860a:	69eb      	ldr	r3, [r5, #28]
 800860c:	6862      	ldr	r2, [r4, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008614:	6021      	str	r1, [r4, #0]
 8008616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	0800b4a6 	.word	0x0800b4a6
 8008620:	0800b526 	.word	0x0800b526

08008624 <__multadd>:
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	690d      	ldr	r5, [r1, #16]
 800862a:	4607      	mov	r7, r0
 800862c:	460c      	mov	r4, r1
 800862e:	461e      	mov	r6, r3
 8008630:	f101 0c14 	add.w	ip, r1, #20
 8008634:	2000      	movs	r0, #0
 8008636:	f8dc 3000 	ldr.w	r3, [ip]
 800863a:	b299      	uxth	r1, r3
 800863c:	fb02 6101 	mla	r1, r2, r1, r6
 8008640:	0c1e      	lsrs	r6, r3, #16
 8008642:	0c0b      	lsrs	r3, r1, #16
 8008644:	fb02 3306 	mla	r3, r2, r6, r3
 8008648:	b289      	uxth	r1, r1
 800864a:	3001      	adds	r0, #1
 800864c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008650:	4285      	cmp	r5, r0
 8008652:	f84c 1b04 	str.w	r1, [ip], #4
 8008656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800865a:	dcec      	bgt.n	8008636 <__multadd+0x12>
 800865c:	b30e      	cbz	r6, 80086a2 <__multadd+0x7e>
 800865e:	68a3      	ldr	r3, [r4, #8]
 8008660:	42ab      	cmp	r3, r5
 8008662:	dc19      	bgt.n	8008698 <__multadd+0x74>
 8008664:	6861      	ldr	r1, [r4, #4]
 8008666:	4638      	mov	r0, r7
 8008668:	3101      	adds	r1, #1
 800866a:	f7ff ff79 	bl	8008560 <_Balloc>
 800866e:	4680      	mov	r8, r0
 8008670:	b928      	cbnz	r0, 800867e <__multadd+0x5a>
 8008672:	4602      	mov	r2, r0
 8008674:	4b0c      	ldr	r3, [pc, #48]	@ (80086a8 <__multadd+0x84>)
 8008676:	480d      	ldr	r0, [pc, #52]	@ (80086ac <__multadd+0x88>)
 8008678:	21ba      	movs	r1, #186	@ 0xba
 800867a:	f001 fcf1 	bl	800a060 <__assert_func>
 800867e:	6922      	ldr	r2, [r4, #16]
 8008680:	3202      	adds	r2, #2
 8008682:	f104 010c 	add.w	r1, r4, #12
 8008686:	0092      	lsls	r2, r2, #2
 8008688:	300c      	adds	r0, #12
 800868a:	f7ff f806 	bl	800769a <memcpy>
 800868e:	4621      	mov	r1, r4
 8008690:	4638      	mov	r0, r7
 8008692:	f7ff ffa5 	bl	80085e0 <_Bfree>
 8008696:	4644      	mov	r4, r8
 8008698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800869c:	3501      	adds	r5, #1
 800869e:	615e      	str	r6, [r3, #20]
 80086a0:	6125      	str	r5, [r4, #16]
 80086a2:	4620      	mov	r0, r4
 80086a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a8:	0800b515 	.word	0x0800b515
 80086ac:	0800b526 	.word	0x0800b526

080086b0 <__s2b>:
 80086b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b4:	460c      	mov	r4, r1
 80086b6:	4615      	mov	r5, r2
 80086b8:	461f      	mov	r7, r3
 80086ba:	2209      	movs	r2, #9
 80086bc:	3308      	adds	r3, #8
 80086be:	4606      	mov	r6, r0
 80086c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80086c4:	2100      	movs	r1, #0
 80086c6:	2201      	movs	r2, #1
 80086c8:	429a      	cmp	r2, r3
 80086ca:	db09      	blt.n	80086e0 <__s2b+0x30>
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7ff ff47 	bl	8008560 <_Balloc>
 80086d2:	b940      	cbnz	r0, 80086e6 <__s2b+0x36>
 80086d4:	4602      	mov	r2, r0
 80086d6:	4b19      	ldr	r3, [pc, #100]	@ (800873c <__s2b+0x8c>)
 80086d8:	4819      	ldr	r0, [pc, #100]	@ (8008740 <__s2b+0x90>)
 80086da:	21d3      	movs	r1, #211	@ 0xd3
 80086dc:	f001 fcc0 	bl	800a060 <__assert_func>
 80086e0:	0052      	lsls	r2, r2, #1
 80086e2:	3101      	adds	r1, #1
 80086e4:	e7f0      	b.n	80086c8 <__s2b+0x18>
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	6143      	str	r3, [r0, #20]
 80086ea:	2d09      	cmp	r5, #9
 80086ec:	f04f 0301 	mov.w	r3, #1
 80086f0:	6103      	str	r3, [r0, #16]
 80086f2:	dd16      	ble.n	8008722 <__s2b+0x72>
 80086f4:	f104 0909 	add.w	r9, r4, #9
 80086f8:	46c8      	mov	r8, r9
 80086fa:	442c      	add	r4, r5
 80086fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008700:	4601      	mov	r1, r0
 8008702:	3b30      	subs	r3, #48	@ 0x30
 8008704:	220a      	movs	r2, #10
 8008706:	4630      	mov	r0, r6
 8008708:	f7ff ff8c 	bl	8008624 <__multadd>
 800870c:	45a0      	cmp	r8, r4
 800870e:	d1f5      	bne.n	80086fc <__s2b+0x4c>
 8008710:	f1a5 0408 	sub.w	r4, r5, #8
 8008714:	444c      	add	r4, r9
 8008716:	1b2d      	subs	r5, r5, r4
 8008718:	1963      	adds	r3, r4, r5
 800871a:	42bb      	cmp	r3, r7
 800871c:	db04      	blt.n	8008728 <__s2b+0x78>
 800871e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008722:	340a      	adds	r4, #10
 8008724:	2509      	movs	r5, #9
 8008726:	e7f6      	b.n	8008716 <__s2b+0x66>
 8008728:	f814 3b01 	ldrb.w	r3, [r4], #1
 800872c:	4601      	mov	r1, r0
 800872e:	3b30      	subs	r3, #48	@ 0x30
 8008730:	220a      	movs	r2, #10
 8008732:	4630      	mov	r0, r6
 8008734:	f7ff ff76 	bl	8008624 <__multadd>
 8008738:	e7ee      	b.n	8008718 <__s2b+0x68>
 800873a:	bf00      	nop
 800873c:	0800b515 	.word	0x0800b515
 8008740:	0800b526 	.word	0x0800b526

08008744 <__hi0bits>:
 8008744:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008748:	4603      	mov	r3, r0
 800874a:	bf36      	itet	cc
 800874c:	0403      	lslcc	r3, r0, #16
 800874e:	2000      	movcs	r0, #0
 8008750:	2010      	movcc	r0, #16
 8008752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008756:	bf3c      	itt	cc
 8008758:	021b      	lslcc	r3, r3, #8
 800875a:	3008      	addcc	r0, #8
 800875c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008760:	bf3c      	itt	cc
 8008762:	011b      	lslcc	r3, r3, #4
 8008764:	3004      	addcc	r0, #4
 8008766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876a:	bf3c      	itt	cc
 800876c:	009b      	lslcc	r3, r3, #2
 800876e:	3002      	addcc	r0, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	db05      	blt.n	8008780 <__hi0bits+0x3c>
 8008774:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008778:	f100 0001 	add.w	r0, r0, #1
 800877c:	bf08      	it	eq
 800877e:	2020      	moveq	r0, #32
 8008780:	4770      	bx	lr

08008782 <__lo0bits>:
 8008782:	6803      	ldr	r3, [r0, #0]
 8008784:	4602      	mov	r2, r0
 8008786:	f013 0007 	ands.w	r0, r3, #7
 800878a:	d00b      	beq.n	80087a4 <__lo0bits+0x22>
 800878c:	07d9      	lsls	r1, r3, #31
 800878e:	d421      	bmi.n	80087d4 <__lo0bits+0x52>
 8008790:	0798      	lsls	r0, r3, #30
 8008792:	bf49      	itett	mi
 8008794:	085b      	lsrmi	r3, r3, #1
 8008796:	089b      	lsrpl	r3, r3, #2
 8008798:	2001      	movmi	r0, #1
 800879a:	6013      	strmi	r3, [r2, #0]
 800879c:	bf5c      	itt	pl
 800879e:	6013      	strpl	r3, [r2, #0]
 80087a0:	2002      	movpl	r0, #2
 80087a2:	4770      	bx	lr
 80087a4:	b299      	uxth	r1, r3
 80087a6:	b909      	cbnz	r1, 80087ac <__lo0bits+0x2a>
 80087a8:	0c1b      	lsrs	r3, r3, #16
 80087aa:	2010      	movs	r0, #16
 80087ac:	b2d9      	uxtb	r1, r3
 80087ae:	b909      	cbnz	r1, 80087b4 <__lo0bits+0x32>
 80087b0:	3008      	adds	r0, #8
 80087b2:	0a1b      	lsrs	r3, r3, #8
 80087b4:	0719      	lsls	r1, r3, #28
 80087b6:	bf04      	itt	eq
 80087b8:	091b      	lsreq	r3, r3, #4
 80087ba:	3004      	addeq	r0, #4
 80087bc:	0799      	lsls	r1, r3, #30
 80087be:	bf04      	itt	eq
 80087c0:	089b      	lsreq	r3, r3, #2
 80087c2:	3002      	addeq	r0, #2
 80087c4:	07d9      	lsls	r1, r3, #31
 80087c6:	d403      	bmi.n	80087d0 <__lo0bits+0x4e>
 80087c8:	085b      	lsrs	r3, r3, #1
 80087ca:	f100 0001 	add.w	r0, r0, #1
 80087ce:	d003      	beq.n	80087d8 <__lo0bits+0x56>
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4770      	bx	lr
 80087d4:	2000      	movs	r0, #0
 80087d6:	4770      	bx	lr
 80087d8:	2020      	movs	r0, #32
 80087da:	4770      	bx	lr

080087dc <__i2b>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	460c      	mov	r4, r1
 80087e0:	2101      	movs	r1, #1
 80087e2:	f7ff febd 	bl	8008560 <_Balloc>
 80087e6:	4602      	mov	r2, r0
 80087e8:	b928      	cbnz	r0, 80087f6 <__i2b+0x1a>
 80087ea:	4b05      	ldr	r3, [pc, #20]	@ (8008800 <__i2b+0x24>)
 80087ec:	4805      	ldr	r0, [pc, #20]	@ (8008804 <__i2b+0x28>)
 80087ee:	f240 1145 	movw	r1, #325	@ 0x145
 80087f2:	f001 fc35 	bl	800a060 <__assert_func>
 80087f6:	2301      	movs	r3, #1
 80087f8:	6144      	str	r4, [r0, #20]
 80087fa:	6103      	str	r3, [r0, #16]
 80087fc:	bd10      	pop	{r4, pc}
 80087fe:	bf00      	nop
 8008800:	0800b515 	.word	0x0800b515
 8008804:	0800b526 	.word	0x0800b526

08008808 <__multiply>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	4614      	mov	r4, r2
 800880e:	690a      	ldr	r2, [r1, #16]
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	429a      	cmp	r2, r3
 8008814:	bfa8      	it	ge
 8008816:	4623      	movge	r3, r4
 8008818:	460f      	mov	r7, r1
 800881a:	bfa4      	itt	ge
 800881c:	460c      	movge	r4, r1
 800881e:	461f      	movge	r7, r3
 8008820:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008824:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008828:	68a3      	ldr	r3, [r4, #8]
 800882a:	6861      	ldr	r1, [r4, #4]
 800882c:	eb0a 0609 	add.w	r6, sl, r9
 8008830:	42b3      	cmp	r3, r6
 8008832:	b085      	sub	sp, #20
 8008834:	bfb8      	it	lt
 8008836:	3101      	addlt	r1, #1
 8008838:	f7ff fe92 	bl	8008560 <_Balloc>
 800883c:	b930      	cbnz	r0, 800884c <__multiply+0x44>
 800883e:	4602      	mov	r2, r0
 8008840:	4b44      	ldr	r3, [pc, #272]	@ (8008954 <__multiply+0x14c>)
 8008842:	4845      	ldr	r0, [pc, #276]	@ (8008958 <__multiply+0x150>)
 8008844:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008848:	f001 fc0a 	bl	800a060 <__assert_func>
 800884c:	f100 0514 	add.w	r5, r0, #20
 8008850:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008854:	462b      	mov	r3, r5
 8008856:	2200      	movs	r2, #0
 8008858:	4543      	cmp	r3, r8
 800885a:	d321      	bcc.n	80088a0 <__multiply+0x98>
 800885c:	f107 0114 	add.w	r1, r7, #20
 8008860:	f104 0214 	add.w	r2, r4, #20
 8008864:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008868:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800886c:	9302      	str	r3, [sp, #8]
 800886e:	1b13      	subs	r3, r2, r4
 8008870:	3b15      	subs	r3, #21
 8008872:	f023 0303 	bic.w	r3, r3, #3
 8008876:	3304      	adds	r3, #4
 8008878:	f104 0715 	add.w	r7, r4, #21
 800887c:	42ba      	cmp	r2, r7
 800887e:	bf38      	it	cc
 8008880:	2304      	movcc	r3, #4
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	9b02      	ldr	r3, [sp, #8]
 8008886:	9103      	str	r1, [sp, #12]
 8008888:	428b      	cmp	r3, r1
 800888a:	d80c      	bhi.n	80088a6 <__multiply+0x9e>
 800888c:	2e00      	cmp	r6, #0
 800888e:	dd03      	ble.n	8008898 <__multiply+0x90>
 8008890:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008894:	2b00      	cmp	r3, #0
 8008896:	d05b      	beq.n	8008950 <__multiply+0x148>
 8008898:	6106      	str	r6, [r0, #16]
 800889a:	b005      	add	sp, #20
 800889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a0:	f843 2b04 	str.w	r2, [r3], #4
 80088a4:	e7d8      	b.n	8008858 <__multiply+0x50>
 80088a6:	f8b1 a000 	ldrh.w	sl, [r1]
 80088aa:	f1ba 0f00 	cmp.w	sl, #0
 80088ae:	d024      	beq.n	80088fa <__multiply+0xf2>
 80088b0:	f104 0e14 	add.w	lr, r4, #20
 80088b4:	46a9      	mov	r9, r5
 80088b6:	f04f 0c00 	mov.w	ip, #0
 80088ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088be:	f8d9 3000 	ldr.w	r3, [r9]
 80088c2:	fa1f fb87 	uxth.w	fp, r7
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80088cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80088d0:	f8d9 7000 	ldr.w	r7, [r9]
 80088d4:	4463      	add	r3, ip
 80088d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088da:	fb0a c70b 	mla	r7, sl, fp, ip
 80088de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088e8:	4572      	cmp	r2, lr
 80088ea:	f849 3b04 	str.w	r3, [r9], #4
 80088ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088f2:	d8e2      	bhi.n	80088ba <__multiply+0xb2>
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	f845 c003 	str.w	ip, [r5, r3]
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008900:	3104      	adds	r1, #4
 8008902:	f1b9 0f00 	cmp.w	r9, #0
 8008906:	d021      	beq.n	800894c <__multiply+0x144>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	f104 0c14 	add.w	ip, r4, #20
 800890e:	46ae      	mov	lr, r5
 8008910:	f04f 0a00 	mov.w	sl, #0
 8008914:	f8bc b000 	ldrh.w	fp, [ip]
 8008918:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800891c:	fb09 770b 	mla	r7, r9, fp, r7
 8008920:	4457      	add	r7, sl
 8008922:	b29b      	uxth	r3, r3
 8008924:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008928:	f84e 3b04 	str.w	r3, [lr], #4
 800892c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008930:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008934:	f8be 3000 	ldrh.w	r3, [lr]
 8008938:	fb09 330a 	mla	r3, r9, sl, r3
 800893c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008940:	4562      	cmp	r2, ip
 8008942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008946:	d8e5      	bhi.n	8008914 <__multiply+0x10c>
 8008948:	9f01      	ldr	r7, [sp, #4]
 800894a:	51eb      	str	r3, [r5, r7]
 800894c:	3504      	adds	r5, #4
 800894e:	e799      	b.n	8008884 <__multiply+0x7c>
 8008950:	3e01      	subs	r6, #1
 8008952:	e79b      	b.n	800888c <__multiply+0x84>
 8008954:	0800b515 	.word	0x0800b515
 8008958:	0800b526 	.word	0x0800b526

0800895c <__pow5mult>:
 800895c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008960:	4615      	mov	r5, r2
 8008962:	f012 0203 	ands.w	r2, r2, #3
 8008966:	4607      	mov	r7, r0
 8008968:	460e      	mov	r6, r1
 800896a:	d007      	beq.n	800897c <__pow5mult+0x20>
 800896c:	4c25      	ldr	r4, [pc, #148]	@ (8008a04 <__pow5mult+0xa8>)
 800896e:	3a01      	subs	r2, #1
 8008970:	2300      	movs	r3, #0
 8008972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008976:	f7ff fe55 	bl	8008624 <__multadd>
 800897a:	4606      	mov	r6, r0
 800897c:	10ad      	asrs	r5, r5, #2
 800897e:	d03d      	beq.n	80089fc <__pow5mult+0xa0>
 8008980:	69fc      	ldr	r4, [r7, #28]
 8008982:	b97c      	cbnz	r4, 80089a4 <__pow5mult+0x48>
 8008984:	2010      	movs	r0, #16
 8008986:	f7ff fd35 	bl	80083f4 <malloc>
 800898a:	4602      	mov	r2, r0
 800898c:	61f8      	str	r0, [r7, #28]
 800898e:	b928      	cbnz	r0, 800899c <__pow5mult+0x40>
 8008990:	4b1d      	ldr	r3, [pc, #116]	@ (8008a08 <__pow5mult+0xac>)
 8008992:	481e      	ldr	r0, [pc, #120]	@ (8008a0c <__pow5mult+0xb0>)
 8008994:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008998:	f001 fb62 	bl	800a060 <__assert_func>
 800899c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089a0:	6004      	str	r4, [r0, #0]
 80089a2:	60c4      	str	r4, [r0, #12]
 80089a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089ac:	b94c      	cbnz	r4, 80089c2 <__pow5mult+0x66>
 80089ae:	f240 2171 	movw	r1, #625	@ 0x271
 80089b2:	4638      	mov	r0, r7
 80089b4:	f7ff ff12 	bl	80087dc <__i2b>
 80089b8:	2300      	movs	r3, #0
 80089ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80089be:	4604      	mov	r4, r0
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	f04f 0900 	mov.w	r9, #0
 80089c6:	07eb      	lsls	r3, r5, #31
 80089c8:	d50a      	bpl.n	80089e0 <__pow5mult+0x84>
 80089ca:	4631      	mov	r1, r6
 80089cc:	4622      	mov	r2, r4
 80089ce:	4638      	mov	r0, r7
 80089d0:	f7ff ff1a 	bl	8008808 <__multiply>
 80089d4:	4631      	mov	r1, r6
 80089d6:	4680      	mov	r8, r0
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff fe01 	bl	80085e0 <_Bfree>
 80089de:	4646      	mov	r6, r8
 80089e0:	106d      	asrs	r5, r5, #1
 80089e2:	d00b      	beq.n	80089fc <__pow5mult+0xa0>
 80089e4:	6820      	ldr	r0, [r4, #0]
 80089e6:	b938      	cbnz	r0, 80089f8 <__pow5mult+0x9c>
 80089e8:	4622      	mov	r2, r4
 80089ea:	4621      	mov	r1, r4
 80089ec:	4638      	mov	r0, r7
 80089ee:	f7ff ff0b 	bl	8008808 <__multiply>
 80089f2:	6020      	str	r0, [r4, #0]
 80089f4:	f8c0 9000 	str.w	r9, [r0]
 80089f8:	4604      	mov	r4, r0
 80089fa:	e7e4      	b.n	80089c6 <__pow5mult+0x6a>
 80089fc:	4630      	mov	r0, r6
 80089fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a02:	bf00      	nop
 8008a04:	0800b580 	.word	0x0800b580
 8008a08:	0800b4a6 	.word	0x0800b4a6
 8008a0c:	0800b526 	.word	0x0800b526

08008a10 <__lshift>:
 8008a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	460c      	mov	r4, r1
 8008a16:	6849      	ldr	r1, [r1, #4]
 8008a18:	6923      	ldr	r3, [r4, #16]
 8008a1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	4607      	mov	r7, r0
 8008a22:	4691      	mov	r9, r2
 8008a24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a28:	f108 0601 	add.w	r6, r8, #1
 8008a2c:	42b3      	cmp	r3, r6
 8008a2e:	db0b      	blt.n	8008a48 <__lshift+0x38>
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff fd95 	bl	8008560 <_Balloc>
 8008a36:	4605      	mov	r5, r0
 8008a38:	b948      	cbnz	r0, 8008a4e <__lshift+0x3e>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4b28      	ldr	r3, [pc, #160]	@ (8008ae0 <__lshift+0xd0>)
 8008a3e:	4829      	ldr	r0, [pc, #164]	@ (8008ae4 <__lshift+0xd4>)
 8008a40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a44:	f001 fb0c 	bl	800a060 <__assert_func>
 8008a48:	3101      	adds	r1, #1
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	e7ee      	b.n	8008a2c <__lshift+0x1c>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f100 0114 	add.w	r1, r0, #20
 8008a54:	f100 0210 	add.w	r2, r0, #16
 8008a58:	4618      	mov	r0, r3
 8008a5a:	4553      	cmp	r3, sl
 8008a5c:	db33      	blt.n	8008ac6 <__lshift+0xb6>
 8008a5e:	6920      	ldr	r0, [r4, #16]
 8008a60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a64:	f104 0314 	add.w	r3, r4, #20
 8008a68:	f019 091f 	ands.w	r9, r9, #31
 8008a6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a74:	d02b      	beq.n	8008ace <__lshift+0xbe>
 8008a76:	f1c9 0e20 	rsb	lr, r9, #32
 8008a7a:	468a      	mov	sl, r1
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	fa00 f009 	lsl.w	r0, r0, r9
 8008a84:	4310      	orrs	r0, r2
 8008a86:	f84a 0b04 	str.w	r0, [sl], #4
 8008a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8e:	459c      	cmp	ip, r3
 8008a90:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a94:	d8f3      	bhi.n	8008a7e <__lshift+0x6e>
 8008a96:	ebac 0304 	sub.w	r3, ip, r4
 8008a9a:	3b15      	subs	r3, #21
 8008a9c:	f023 0303 	bic.w	r3, r3, #3
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	f104 0015 	add.w	r0, r4, #21
 8008aa6:	4584      	cmp	ip, r0
 8008aa8:	bf38      	it	cc
 8008aaa:	2304      	movcc	r3, #4
 8008aac:	50ca      	str	r2, [r1, r3]
 8008aae:	b10a      	cbz	r2, 8008ab4 <__lshift+0xa4>
 8008ab0:	f108 0602 	add.w	r6, r8, #2
 8008ab4:	3e01      	subs	r6, #1
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	612e      	str	r6, [r5, #16]
 8008aba:	4621      	mov	r1, r4
 8008abc:	f7ff fd90 	bl	80085e0 <_Bfree>
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aca:	3301      	adds	r3, #1
 8008acc:	e7c5      	b.n	8008a5a <__lshift+0x4a>
 8008ace:	3904      	subs	r1, #4
 8008ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ad8:	459c      	cmp	ip, r3
 8008ada:	d8f9      	bhi.n	8008ad0 <__lshift+0xc0>
 8008adc:	e7ea      	b.n	8008ab4 <__lshift+0xa4>
 8008ade:	bf00      	nop
 8008ae0:	0800b515 	.word	0x0800b515
 8008ae4:	0800b526 	.word	0x0800b526

08008ae8 <__mcmp>:
 8008ae8:	690a      	ldr	r2, [r1, #16]
 8008aea:	4603      	mov	r3, r0
 8008aec:	6900      	ldr	r0, [r0, #16]
 8008aee:	1a80      	subs	r0, r0, r2
 8008af0:	b530      	push	{r4, r5, lr}
 8008af2:	d10e      	bne.n	8008b12 <__mcmp+0x2a>
 8008af4:	3314      	adds	r3, #20
 8008af6:	3114      	adds	r1, #20
 8008af8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008afc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b08:	4295      	cmp	r5, r2
 8008b0a:	d003      	beq.n	8008b14 <__mcmp+0x2c>
 8008b0c:	d205      	bcs.n	8008b1a <__mcmp+0x32>
 8008b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b12:	bd30      	pop	{r4, r5, pc}
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	d3f3      	bcc.n	8008b00 <__mcmp+0x18>
 8008b18:	e7fb      	b.n	8008b12 <__mcmp+0x2a>
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	e7f9      	b.n	8008b12 <__mcmp+0x2a>
	...

08008b20 <__mdiff>:
 8008b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	4689      	mov	r9, r1
 8008b26:	4606      	mov	r6, r0
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4648      	mov	r0, r9
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	f7ff ffdb 	bl	8008ae8 <__mcmp>
 8008b32:	1e05      	subs	r5, r0, #0
 8008b34:	d112      	bne.n	8008b5c <__mdiff+0x3c>
 8008b36:	4629      	mov	r1, r5
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f7ff fd11 	bl	8008560 <_Balloc>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	b928      	cbnz	r0, 8008b4e <__mdiff+0x2e>
 8008b42:	4b3f      	ldr	r3, [pc, #252]	@ (8008c40 <__mdiff+0x120>)
 8008b44:	f240 2137 	movw	r1, #567	@ 0x237
 8008b48:	483e      	ldr	r0, [pc, #248]	@ (8008c44 <__mdiff+0x124>)
 8008b4a:	f001 fa89 	bl	800a060 <__assert_func>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b54:	4610      	mov	r0, r2
 8008b56:	b003      	add	sp, #12
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	bfbc      	itt	lt
 8008b5e:	464b      	movlt	r3, r9
 8008b60:	46a1      	movlt	r9, r4
 8008b62:	4630      	mov	r0, r6
 8008b64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b68:	bfba      	itte	lt
 8008b6a:	461c      	movlt	r4, r3
 8008b6c:	2501      	movlt	r5, #1
 8008b6e:	2500      	movge	r5, #0
 8008b70:	f7ff fcf6 	bl	8008560 <_Balloc>
 8008b74:	4602      	mov	r2, r0
 8008b76:	b918      	cbnz	r0, 8008b80 <__mdiff+0x60>
 8008b78:	4b31      	ldr	r3, [pc, #196]	@ (8008c40 <__mdiff+0x120>)
 8008b7a:	f240 2145 	movw	r1, #581	@ 0x245
 8008b7e:	e7e3      	b.n	8008b48 <__mdiff+0x28>
 8008b80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b84:	6926      	ldr	r6, [r4, #16]
 8008b86:	60c5      	str	r5, [r0, #12]
 8008b88:	f109 0310 	add.w	r3, r9, #16
 8008b8c:	f109 0514 	add.w	r5, r9, #20
 8008b90:	f104 0e14 	add.w	lr, r4, #20
 8008b94:	f100 0b14 	add.w	fp, r0, #20
 8008b98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	46d9      	mov	r9, fp
 8008ba4:	f04f 0c00 	mov.w	ip, #0
 8008ba8:	9b01      	ldr	r3, [sp, #4]
 8008baa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008bae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	fa1f f38a 	uxth.w	r3, sl
 8008bb8:	4619      	mov	r1, r3
 8008bba:	b283      	uxth	r3, r0
 8008bbc:	1acb      	subs	r3, r1, r3
 8008bbe:	0c00      	lsrs	r0, r0, #16
 8008bc0:	4463      	add	r3, ip
 8008bc2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bc6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bd0:	4576      	cmp	r6, lr
 8008bd2:	f849 3b04 	str.w	r3, [r9], #4
 8008bd6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bda:	d8e5      	bhi.n	8008ba8 <__mdiff+0x88>
 8008bdc:	1b33      	subs	r3, r6, r4
 8008bde:	3b15      	subs	r3, #21
 8008be0:	f023 0303 	bic.w	r3, r3, #3
 8008be4:	3415      	adds	r4, #21
 8008be6:	3304      	adds	r3, #4
 8008be8:	42a6      	cmp	r6, r4
 8008bea:	bf38      	it	cc
 8008bec:	2304      	movcc	r3, #4
 8008bee:	441d      	add	r5, r3
 8008bf0:	445b      	add	r3, fp
 8008bf2:	461e      	mov	r6, r3
 8008bf4:	462c      	mov	r4, r5
 8008bf6:	4544      	cmp	r4, r8
 8008bf8:	d30e      	bcc.n	8008c18 <__mdiff+0xf8>
 8008bfa:	f108 0103 	add.w	r1, r8, #3
 8008bfe:	1b49      	subs	r1, r1, r5
 8008c00:	f021 0103 	bic.w	r1, r1, #3
 8008c04:	3d03      	subs	r5, #3
 8008c06:	45a8      	cmp	r8, r5
 8008c08:	bf38      	it	cc
 8008c0a:	2100      	movcc	r1, #0
 8008c0c:	440b      	add	r3, r1
 8008c0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c12:	b191      	cbz	r1, 8008c3a <__mdiff+0x11a>
 8008c14:	6117      	str	r7, [r2, #16]
 8008c16:	e79d      	b.n	8008b54 <__mdiff+0x34>
 8008c18:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c1c:	46e6      	mov	lr, ip
 8008c1e:	0c08      	lsrs	r0, r1, #16
 8008c20:	fa1c fc81 	uxtah	ip, ip, r1
 8008c24:	4471      	add	r1, lr
 8008c26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c2a:	b289      	uxth	r1, r1
 8008c2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c30:	f846 1b04 	str.w	r1, [r6], #4
 8008c34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c38:	e7dd      	b.n	8008bf6 <__mdiff+0xd6>
 8008c3a:	3f01      	subs	r7, #1
 8008c3c:	e7e7      	b.n	8008c0e <__mdiff+0xee>
 8008c3e:	bf00      	nop
 8008c40:	0800b515 	.word	0x0800b515
 8008c44:	0800b526 	.word	0x0800b526

08008c48 <__ulp>:
 8008c48:	b082      	sub	sp, #8
 8008c4a:	ed8d 0b00 	vstr	d0, [sp]
 8008c4e:	9a01      	ldr	r2, [sp, #4]
 8008c50:	4b0f      	ldr	r3, [pc, #60]	@ (8008c90 <__ulp+0x48>)
 8008c52:	4013      	ands	r3, r2
 8008c54:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	dc08      	bgt.n	8008c6e <__ulp+0x26>
 8008c5c:	425b      	negs	r3, r3
 8008c5e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008c62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c66:	da04      	bge.n	8008c72 <__ulp+0x2a>
 8008c68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008c6c:	4113      	asrs	r3, r2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	e008      	b.n	8008c84 <__ulp+0x3c>
 8008c72:	f1a2 0314 	sub.w	r3, r2, #20
 8008c76:	2b1e      	cmp	r3, #30
 8008c78:	bfda      	itte	le
 8008c7a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008c7e:	40da      	lsrle	r2, r3
 8008c80:	2201      	movgt	r2, #1
 8008c82:	2300      	movs	r3, #0
 8008c84:	4619      	mov	r1, r3
 8008c86:	4610      	mov	r0, r2
 8008c88:	ec41 0b10 	vmov	d0, r0, r1
 8008c8c:	b002      	add	sp, #8
 8008c8e:	4770      	bx	lr
 8008c90:	7ff00000 	.word	0x7ff00000

08008c94 <__b2d>:
 8008c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c98:	6906      	ldr	r6, [r0, #16]
 8008c9a:	f100 0814 	add.w	r8, r0, #20
 8008c9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008ca2:	1f37      	subs	r7, r6, #4
 8008ca4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f7ff fd4b 	bl	8008744 <__hi0bits>
 8008cae:	f1c0 0320 	rsb	r3, r0, #32
 8008cb2:	280a      	cmp	r0, #10
 8008cb4:	600b      	str	r3, [r1, #0]
 8008cb6:	491b      	ldr	r1, [pc, #108]	@ (8008d24 <__b2d+0x90>)
 8008cb8:	dc15      	bgt.n	8008ce6 <__b2d+0x52>
 8008cba:	f1c0 0c0b 	rsb	ip, r0, #11
 8008cbe:	fa22 f30c 	lsr.w	r3, r2, ip
 8008cc2:	45b8      	cmp	r8, r7
 8008cc4:	ea43 0501 	orr.w	r5, r3, r1
 8008cc8:	bf34      	ite	cc
 8008cca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cce:	2300      	movcs	r3, #0
 8008cd0:	3015      	adds	r0, #21
 8008cd2:	fa02 f000 	lsl.w	r0, r2, r0
 8008cd6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008cda:	4303      	orrs	r3, r0
 8008cdc:	461c      	mov	r4, r3
 8008cde:	ec45 4b10 	vmov	d0, r4, r5
 8008ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce6:	45b8      	cmp	r8, r7
 8008ce8:	bf3a      	itte	cc
 8008cea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cee:	f1a6 0708 	subcc.w	r7, r6, #8
 8008cf2:	2300      	movcs	r3, #0
 8008cf4:	380b      	subs	r0, #11
 8008cf6:	d012      	beq.n	8008d1e <__b2d+0x8a>
 8008cf8:	f1c0 0120 	rsb	r1, r0, #32
 8008cfc:	fa23 f401 	lsr.w	r4, r3, r1
 8008d00:	4082      	lsls	r2, r0
 8008d02:	4322      	orrs	r2, r4
 8008d04:	4547      	cmp	r7, r8
 8008d06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008d0a:	bf8c      	ite	hi
 8008d0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008d10:	2200      	movls	r2, #0
 8008d12:	4083      	lsls	r3, r0
 8008d14:	40ca      	lsrs	r2, r1
 8008d16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	e7de      	b.n	8008cdc <__b2d+0x48>
 8008d1e:	ea42 0501 	orr.w	r5, r2, r1
 8008d22:	e7db      	b.n	8008cdc <__b2d+0x48>
 8008d24:	3ff00000 	.word	0x3ff00000

08008d28 <__d2b>:
 8008d28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	2101      	movs	r1, #1
 8008d30:	ec59 8b10 	vmov	r8, r9, d0
 8008d34:	4616      	mov	r6, r2
 8008d36:	f7ff fc13 	bl	8008560 <_Balloc>
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	b930      	cbnz	r0, 8008d4c <__d2b+0x24>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	4b23      	ldr	r3, [pc, #140]	@ (8008dd0 <__d2b+0xa8>)
 8008d42:	4824      	ldr	r0, [pc, #144]	@ (8008dd4 <__d2b+0xac>)
 8008d44:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d48:	f001 f98a 	bl	800a060 <__assert_func>
 8008d4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d54:	b10d      	cbz	r5, 8008d5a <__d2b+0x32>
 8008d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	f1b8 0300 	subs.w	r3, r8, #0
 8008d60:	d023      	beq.n	8008daa <__d2b+0x82>
 8008d62:	4668      	mov	r0, sp
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	f7ff fd0c 	bl	8008782 <__lo0bits>
 8008d6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d6e:	b1d0      	cbz	r0, 8008da6 <__d2b+0x7e>
 8008d70:	f1c0 0320 	rsb	r3, r0, #32
 8008d74:	fa02 f303 	lsl.w	r3, r2, r3
 8008d78:	430b      	orrs	r3, r1
 8008d7a:	40c2      	lsrs	r2, r0
 8008d7c:	6163      	str	r3, [r4, #20]
 8008d7e:	9201      	str	r2, [sp, #4]
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	61a3      	str	r3, [r4, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bf0c      	ite	eq
 8008d88:	2201      	moveq	r2, #1
 8008d8a:	2202      	movne	r2, #2
 8008d8c:	6122      	str	r2, [r4, #16]
 8008d8e:	b1a5      	cbz	r5, 8008dba <__d2b+0x92>
 8008d90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d94:	4405      	add	r5, r0
 8008d96:	603d      	str	r5, [r7, #0]
 8008d98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d9c:	6030      	str	r0, [r6, #0]
 8008d9e:	4620      	mov	r0, r4
 8008da0:	b003      	add	sp, #12
 8008da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008da6:	6161      	str	r1, [r4, #20]
 8008da8:	e7ea      	b.n	8008d80 <__d2b+0x58>
 8008daa:	a801      	add	r0, sp, #4
 8008dac:	f7ff fce9 	bl	8008782 <__lo0bits>
 8008db0:	9b01      	ldr	r3, [sp, #4]
 8008db2:	6163      	str	r3, [r4, #20]
 8008db4:	3020      	adds	r0, #32
 8008db6:	2201      	movs	r2, #1
 8008db8:	e7e8      	b.n	8008d8c <__d2b+0x64>
 8008dba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008dc2:	6038      	str	r0, [r7, #0]
 8008dc4:	6918      	ldr	r0, [r3, #16]
 8008dc6:	f7ff fcbd 	bl	8008744 <__hi0bits>
 8008dca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dce:	e7e5      	b.n	8008d9c <__d2b+0x74>
 8008dd0:	0800b515 	.word	0x0800b515
 8008dd4:	0800b526 	.word	0x0800b526

08008dd8 <__ratio>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	b085      	sub	sp, #20
 8008dde:	e9cd 1000 	strd	r1, r0, [sp]
 8008de2:	a902      	add	r1, sp, #8
 8008de4:	f7ff ff56 	bl	8008c94 <__b2d>
 8008de8:	9800      	ldr	r0, [sp, #0]
 8008dea:	a903      	add	r1, sp, #12
 8008dec:	ec55 4b10 	vmov	r4, r5, d0
 8008df0:	f7ff ff50 	bl	8008c94 <__b2d>
 8008df4:	9b01      	ldr	r3, [sp, #4]
 8008df6:	6919      	ldr	r1, [r3, #16]
 8008df8:	9b00      	ldr	r3, [sp, #0]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	1ac9      	subs	r1, r1, r3
 8008dfe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	ec5b ab10 	vmov	sl, fp, d0
 8008e08:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bfce      	itee	gt
 8008e10:	462a      	movgt	r2, r5
 8008e12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e16:	465a      	movle	r2, fp
 8008e18:	462f      	mov	r7, r5
 8008e1a:	46d9      	mov	r9, fp
 8008e1c:	bfcc      	ite	gt
 8008e1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e22:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008e26:	464b      	mov	r3, r9
 8008e28:	4652      	mov	r2, sl
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	f7f7 fd0d 	bl	800084c <__aeabi_ddiv>
 8008e32:	ec41 0b10 	vmov	d0, r0, r1
 8008e36:	b005      	add	sp, #20
 8008e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e3c <__copybits>:
 8008e3c:	3901      	subs	r1, #1
 8008e3e:	b570      	push	{r4, r5, r6, lr}
 8008e40:	1149      	asrs	r1, r1, #5
 8008e42:	6914      	ldr	r4, [r2, #16]
 8008e44:	3101      	adds	r1, #1
 8008e46:	f102 0314 	add.w	r3, r2, #20
 8008e4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e52:	1f05      	subs	r5, r0, #4
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	d30c      	bcc.n	8008e72 <__copybits+0x36>
 8008e58:	1aa3      	subs	r3, r4, r2
 8008e5a:	3b11      	subs	r3, #17
 8008e5c:	f023 0303 	bic.w	r3, r3, #3
 8008e60:	3211      	adds	r2, #17
 8008e62:	42a2      	cmp	r2, r4
 8008e64:	bf88      	it	hi
 8008e66:	2300      	movhi	r3, #0
 8008e68:	4418      	add	r0, r3
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4288      	cmp	r0, r1
 8008e6e:	d305      	bcc.n	8008e7c <__copybits+0x40>
 8008e70:	bd70      	pop	{r4, r5, r6, pc}
 8008e72:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e76:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e7a:	e7eb      	b.n	8008e54 <__copybits+0x18>
 8008e7c:	f840 3b04 	str.w	r3, [r0], #4
 8008e80:	e7f4      	b.n	8008e6c <__copybits+0x30>

08008e82 <__any_on>:
 8008e82:	f100 0214 	add.w	r2, r0, #20
 8008e86:	6900      	ldr	r0, [r0, #16]
 8008e88:	114b      	asrs	r3, r1, #5
 8008e8a:	4298      	cmp	r0, r3
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	db11      	blt.n	8008eb4 <__any_on+0x32>
 8008e90:	dd0a      	ble.n	8008ea8 <__any_on+0x26>
 8008e92:	f011 011f 	ands.w	r1, r1, #31
 8008e96:	d007      	beq.n	8008ea8 <__any_on+0x26>
 8008e98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e9c:	fa24 f001 	lsr.w	r0, r4, r1
 8008ea0:	fa00 f101 	lsl.w	r1, r0, r1
 8008ea4:	428c      	cmp	r4, r1
 8008ea6:	d10b      	bne.n	8008ec0 <__any_on+0x3e>
 8008ea8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d803      	bhi.n	8008eb8 <__any_on+0x36>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	bd10      	pop	{r4, pc}
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	e7f7      	b.n	8008ea8 <__any_on+0x26>
 8008eb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d0f5      	beq.n	8008eac <__any_on+0x2a>
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	e7f6      	b.n	8008eb2 <__any_on+0x30>

08008ec4 <sulp>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	460d      	mov	r5, r1
 8008eca:	ec45 4b10 	vmov	d0, r4, r5
 8008ece:	4616      	mov	r6, r2
 8008ed0:	f7ff feba 	bl	8008c48 <__ulp>
 8008ed4:	ec51 0b10 	vmov	r0, r1, d0
 8008ed8:	b17e      	cbz	r6, 8008efa <sulp+0x36>
 8008eda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ede:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dd09      	ble.n	8008efa <sulp+0x36>
 8008ee6:	051b      	lsls	r3, r3, #20
 8008ee8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008eec:	2400      	movs	r4, #0
 8008eee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	462b      	mov	r3, r5
 8008ef6:	f7f7 fb7f 	bl	80005f8 <__aeabi_dmul>
 8008efa:	ec41 0b10 	vmov	d0, r0, r1
 8008efe:	bd70      	pop	{r4, r5, r6, pc}

08008f00 <_strtod_l>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	b09f      	sub	sp, #124	@ 0x7c
 8008f06:	460c      	mov	r4, r1
 8008f08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008f0e:	9005      	str	r0, [sp, #20]
 8008f10:	f04f 0a00 	mov.w	sl, #0
 8008f14:	f04f 0b00 	mov.w	fp, #0
 8008f18:	460a      	mov	r2, r1
 8008f1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f1c:	7811      	ldrb	r1, [r2, #0]
 8008f1e:	292b      	cmp	r1, #43	@ 0x2b
 8008f20:	d04a      	beq.n	8008fb8 <_strtod_l+0xb8>
 8008f22:	d838      	bhi.n	8008f96 <_strtod_l+0x96>
 8008f24:	290d      	cmp	r1, #13
 8008f26:	d832      	bhi.n	8008f8e <_strtod_l+0x8e>
 8008f28:	2908      	cmp	r1, #8
 8008f2a:	d832      	bhi.n	8008f92 <_strtod_l+0x92>
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d03b      	beq.n	8008fa8 <_strtod_l+0xa8>
 8008f30:	2200      	movs	r2, #0
 8008f32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008f34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008f36:	782a      	ldrb	r2, [r5, #0]
 8008f38:	2a30      	cmp	r2, #48	@ 0x30
 8008f3a:	f040 80b3 	bne.w	80090a4 <_strtod_l+0x1a4>
 8008f3e:	786a      	ldrb	r2, [r5, #1]
 8008f40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008f44:	2a58      	cmp	r2, #88	@ 0x58
 8008f46:	d16e      	bne.n	8009026 <_strtod_l+0x126>
 8008f48:	9302      	str	r3, [sp, #8]
 8008f4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	4a8e      	ldr	r2, [pc, #568]	@ (800918c <_strtod_l+0x28c>)
 8008f54:	9805      	ldr	r0, [sp, #20]
 8008f56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f58:	a919      	add	r1, sp, #100	@ 0x64
 8008f5a:	f001 f91b 	bl	800a194 <__gethex>
 8008f5e:	f010 060f 	ands.w	r6, r0, #15
 8008f62:	4604      	mov	r4, r0
 8008f64:	d005      	beq.n	8008f72 <_strtod_l+0x72>
 8008f66:	2e06      	cmp	r6, #6
 8008f68:	d128      	bne.n	8008fbc <_strtod_l+0xbc>
 8008f6a:	3501      	adds	r5, #1
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f040 858e 	bne.w	8009a96 <_strtod_l+0xb96>
 8008f7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f7c:	b1cb      	cbz	r3, 8008fb2 <_strtod_l+0xb2>
 8008f7e:	4652      	mov	r2, sl
 8008f80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008f84:	ec43 2b10 	vmov	d0, r2, r3
 8008f88:	b01f      	add	sp, #124	@ 0x7c
 8008f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8e:	2920      	cmp	r1, #32
 8008f90:	d1ce      	bne.n	8008f30 <_strtod_l+0x30>
 8008f92:	3201      	adds	r2, #1
 8008f94:	e7c1      	b.n	8008f1a <_strtod_l+0x1a>
 8008f96:	292d      	cmp	r1, #45	@ 0x2d
 8008f98:	d1ca      	bne.n	8008f30 <_strtod_l+0x30>
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f9e:	1c51      	adds	r1, r2, #1
 8008fa0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fa2:	7852      	ldrb	r2, [r2, #1]
 8008fa4:	2a00      	cmp	r2, #0
 8008fa6:	d1c5      	bne.n	8008f34 <_strtod_l+0x34>
 8008fa8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008faa:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f040 8570 	bne.w	8009a92 <_strtod_l+0xb92>
 8008fb2:	4652      	mov	r2, sl
 8008fb4:	465b      	mov	r3, fp
 8008fb6:	e7e5      	b.n	8008f84 <_strtod_l+0x84>
 8008fb8:	2100      	movs	r1, #0
 8008fba:	e7ef      	b.n	8008f9c <_strtod_l+0x9c>
 8008fbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008fbe:	b13a      	cbz	r2, 8008fd0 <_strtod_l+0xd0>
 8008fc0:	2135      	movs	r1, #53	@ 0x35
 8008fc2:	a81c      	add	r0, sp, #112	@ 0x70
 8008fc4:	f7ff ff3a 	bl	8008e3c <__copybits>
 8008fc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fca:	9805      	ldr	r0, [sp, #20]
 8008fcc:	f7ff fb08 	bl	80085e0 <_Bfree>
 8008fd0:	3e01      	subs	r6, #1
 8008fd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008fd4:	2e04      	cmp	r6, #4
 8008fd6:	d806      	bhi.n	8008fe6 <_strtod_l+0xe6>
 8008fd8:	e8df f006 	tbb	[pc, r6]
 8008fdc:	201d0314 	.word	0x201d0314
 8008fe0:	14          	.byte	0x14
 8008fe1:	00          	.byte	0x00
 8008fe2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008fe6:	05e1      	lsls	r1, r4, #23
 8008fe8:	bf48      	it	mi
 8008fea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008fee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ff2:	0d1b      	lsrs	r3, r3, #20
 8008ff4:	051b      	lsls	r3, r3, #20
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1bb      	bne.n	8008f72 <_strtod_l+0x72>
 8008ffa:	f7fe fb21 	bl	8007640 <__errno>
 8008ffe:	2322      	movs	r3, #34	@ 0x22
 8009000:	6003      	str	r3, [r0, #0]
 8009002:	e7b6      	b.n	8008f72 <_strtod_l+0x72>
 8009004:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009008:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800900c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009010:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009014:	e7e7      	b.n	8008fe6 <_strtod_l+0xe6>
 8009016:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009194 <_strtod_l+0x294>
 800901a:	e7e4      	b.n	8008fe6 <_strtod_l+0xe6>
 800901c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009020:	f04f 3aff 	mov.w	sl, #4294967295
 8009024:	e7df      	b.n	8008fe6 <_strtod_l+0xe6>
 8009026:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	9219      	str	r2, [sp, #100]	@ 0x64
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	2b30      	cmp	r3, #48	@ 0x30
 8009030:	d0f9      	beq.n	8009026 <_strtod_l+0x126>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d09d      	beq.n	8008f72 <_strtod_l+0x72>
 8009036:	2301      	movs	r3, #1
 8009038:	9309      	str	r3, [sp, #36]	@ 0x24
 800903a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800903c:	930c      	str	r3, [sp, #48]	@ 0x30
 800903e:	2300      	movs	r3, #0
 8009040:	9308      	str	r3, [sp, #32]
 8009042:	930a      	str	r3, [sp, #40]	@ 0x28
 8009044:	461f      	mov	r7, r3
 8009046:	220a      	movs	r2, #10
 8009048:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800904a:	7805      	ldrb	r5, [r0, #0]
 800904c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009050:	b2d9      	uxtb	r1, r3
 8009052:	2909      	cmp	r1, #9
 8009054:	d928      	bls.n	80090a8 <_strtod_l+0x1a8>
 8009056:	494e      	ldr	r1, [pc, #312]	@ (8009190 <_strtod_l+0x290>)
 8009058:	2201      	movs	r2, #1
 800905a:	f000 ffd5 	bl	800a008 <strncmp>
 800905e:	2800      	cmp	r0, #0
 8009060:	d032      	beq.n	80090c8 <_strtod_l+0x1c8>
 8009062:	2000      	movs	r0, #0
 8009064:	462a      	mov	r2, r5
 8009066:	4681      	mov	r9, r0
 8009068:	463d      	mov	r5, r7
 800906a:	4603      	mov	r3, r0
 800906c:	2a65      	cmp	r2, #101	@ 0x65
 800906e:	d001      	beq.n	8009074 <_strtod_l+0x174>
 8009070:	2a45      	cmp	r2, #69	@ 0x45
 8009072:	d114      	bne.n	800909e <_strtod_l+0x19e>
 8009074:	b91d      	cbnz	r5, 800907e <_strtod_l+0x17e>
 8009076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009078:	4302      	orrs	r2, r0
 800907a:	d095      	beq.n	8008fa8 <_strtod_l+0xa8>
 800907c:	2500      	movs	r5, #0
 800907e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009080:	1c62      	adds	r2, r4, #1
 8009082:	9219      	str	r2, [sp, #100]	@ 0x64
 8009084:	7862      	ldrb	r2, [r4, #1]
 8009086:	2a2b      	cmp	r2, #43	@ 0x2b
 8009088:	d077      	beq.n	800917a <_strtod_l+0x27a>
 800908a:	2a2d      	cmp	r2, #45	@ 0x2d
 800908c:	d07b      	beq.n	8009186 <_strtod_l+0x286>
 800908e:	f04f 0c00 	mov.w	ip, #0
 8009092:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009096:	2909      	cmp	r1, #9
 8009098:	f240 8082 	bls.w	80091a0 <_strtod_l+0x2a0>
 800909c:	9419      	str	r4, [sp, #100]	@ 0x64
 800909e:	f04f 0800 	mov.w	r8, #0
 80090a2:	e0a2      	b.n	80091ea <_strtod_l+0x2ea>
 80090a4:	2300      	movs	r3, #0
 80090a6:	e7c7      	b.n	8009038 <_strtod_l+0x138>
 80090a8:	2f08      	cmp	r7, #8
 80090aa:	bfd5      	itete	le
 80090ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80090ae:	9908      	ldrgt	r1, [sp, #32]
 80090b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80090b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80090b8:	f100 0001 	add.w	r0, r0, #1
 80090bc:	bfd4      	ite	le
 80090be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80090c0:	9308      	strgt	r3, [sp, #32]
 80090c2:	3701      	adds	r7, #1
 80090c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80090c6:	e7bf      	b.n	8009048 <_strtod_l+0x148>
 80090c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80090ce:	785a      	ldrb	r2, [r3, #1]
 80090d0:	b37f      	cbz	r7, 8009132 <_strtod_l+0x232>
 80090d2:	4681      	mov	r9, r0
 80090d4:	463d      	mov	r5, r7
 80090d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d912      	bls.n	8009104 <_strtod_l+0x204>
 80090de:	2301      	movs	r3, #1
 80090e0:	e7c4      	b.n	800906c <_strtod_l+0x16c>
 80090e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80090e8:	785a      	ldrb	r2, [r3, #1]
 80090ea:	3001      	adds	r0, #1
 80090ec:	2a30      	cmp	r2, #48	@ 0x30
 80090ee:	d0f8      	beq.n	80090e2 <_strtod_l+0x1e2>
 80090f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80090f4:	2b08      	cmp	r3, #8
 80090f6:	f200 84d3 	bhi.w	8009aa0 <_strtod_l+0xba0>
 80090fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80090fe:	4681      	mov	r9, r0
 8009100:	2000      	movs	r0, #0
 8009102:	4605      	mov	r5, r0
 8009104:	3a30      	subs	r2, #48	@ 0x30
 8009106:	f100 0301 	add.w	r3, r0, #1
 800910a:	d02a      	beq.n	8009162 <_strtod_l+0x262>
 800910c:	4499      	add	r9, r3
 800910e:	eb00 0c05 	add.w	ip, r0, r5
 8009112:	462b      	mov	r3, r5
 8009114:	210a      	movs	r1, #10
 8009116:	4563      	cmp	r3, ip
 8009118:	d10d      	bne.n	8009136 <_strtod_l+0x236>
 800911a:	1c69      	adds	r1, r5, #1
 800911c:	4401      	add	r1, r0
 800911e:	4428      	add	r0, r5
 8009120:	2808      	cmp	r0, #8
 8009122:	dc16      	bgt.n	8009152 <_strtod_l+0x252>
 8009124:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009126:	230a      	movs	r3, #10
 8009128:	fb03 2300 	mla	r3, r3, r0, r2
 800912c:	930a      	str	r3, [sp, #40]	@ 0x28
 800912e:	2300      	movs	r3, #0
 8009130:	e018      	b.n	8009164 <_strtod_l+0x264>
 8009132:	4638      	mov	r0, r7
 8009134:	e7da      	b.n	80090ec <_strtod_l+0x1ec>
 8009136:	2b08      	cmp	r3, #8
 8009138:	f103 0301 	add.w	r3, r3, #1
 800913c:	dc03      	bgt.n	8009146 <_strtod_l+0x246>
 800913e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009140:	434e      	muls	r6, r1
 8009142:	960a      	str	r6, [sp, #40]	@ 0x28
 8009144:	e7e7      	b.n	8009116 <_strtod_l+0x216>
 8009146:	2b10      	cmp	r3, #16
 8009148:	bfde      	ittt	le
 800914a:	9e08      	ldrle	r6, [sp, #32]
 800914c:	434e      	mulle	r6, r1
 800914e:	9608      	strle	r6, [sp, #32]
 8009150:	e7e1      	b.n	8009116 <_strtod_l+0x216>
 8009152:	280f      	cmp	r0, #15
 8009154:	dceb      	bgt.n	800912e <_strtod_l+0x22e>
 8009156:	9808      	ldr	r0, [sp, #32]
 8009158:	230a      	movs	r3, #10
 800915a:	fb03 2300 	mla	r3, r3, r0, r2
 800915e:	9308      	str	r3, [sp, #32]
 8009160:	e7e5      	b.n	800912e <_strtod_l+0x22e>
 8009162:	4629      	mov	r1, r5
 8009164:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009166:	1c50      	adds	r0, r2, #1
 8009168:	9019      	str	r0, [sp, #100]	@ 0x64
 800916a:	7852      	ldrb	r2, [r2, #1]
 800916c:	4618      	mov	r0, r3
 800916e:	460d      	mov	r5, r1
 8009170:	e7b1      	b.n	80090d6 <_strtod_l+0x1d6>
 8009172:	f04f 0900 	mov.w	r9, #0
 8009176:	2301      	movs	r3, #1
 8009178:	e77d      	b.n	8009076 <_strtod_l+0x176>
 800917a:	f04f 0c00 	mov.w	ip, #0
 800917e:	1ca2      	adds	r2, r4, #2
 8009180:	9219      	str	r2, [sp, #100]	@ 0x64
 8009182:	78a2      	ldrb	r2, [r4, #2]
 8009184:	e785      	b.n	8009092 <_strtod_l+0x192>
 8009186:	f04f 0c01 	mov.w	ip, #1
 800918a:	e7f8      	b.n	800917e <_strtod_l+0x27e>
 800918c:	0800b698 	.word	0x0800b698
 8009190:	0800b680 	.word	0x0800b680
 8009194:	7ff00000 	.word	0x7ff00000
 8009198:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800919a:	1c51      	adds	r1, r2, #1
 800919c:	9119      	str	r1, [sp, #100]	@ 0x64
 800919e:	7852      	ldrb	r2, [r2, #1]
 80091a0:	2a30      	cmp	r2, #48	@ 0x30
 80091a2:	d0f9      	beq.n	8009198 <_strtod_l+0x298>
 80091a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80091a8:	2908      	cmp	r1, #8
 80091aa:	f63f af78 	bhi.w	800909e <_strtod_l+0x19e>
 80091ae:	3a30      	subs	r2, #48	@ 0x30
 80091b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80091b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80091b6:	f04f 080a 	mov.w	r8, #10
 80091ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091bc:	1c56      	adds	r6, r2, #1
 80091be:	9619      	str	r6, [sp, #100]	@ 0x64
 80091c0:	7852      	ldrb	r2, [r2, #1]
 80091c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80091c6:	f1be 0f09 	cmp.w	lr, #9
 80091ca:	d939      	bls.n	8009240 <_strtod_l+0x340>
 80091cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80091ce:	1a76      	subs	r6, r6, r1
 80091d0:	2e08      	cmp	r6, #8
 80091d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80091d6:	dc03      	bgt.n	80091e0 <_strtod_l+0x2e0>
 80091d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80091da:	4588      	cmp	r8, r1
 80091dc:	bfa8      	it	ge
 80091de:	4688      	movge	r8, r1
 80091e0:	f1bc 0f00 	cmp.w	ip, #0
 80091e4:	d001      	beq.n	80091ea <_strtod_l+0x2ea>
 80091e6:	f1c8 0800 	rsb	r8, r8, #0
 80091ea:	2d00      	cmp	r5, #0
 80091ec:	d14e      	bne.n	800928c <_strtod_l+0x38c>
 80091ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091f0:	4308      	orrs	r0, r1
 80091f2:	f47f aebe 	bne.w	8008f72 <_strtod_l+0x72>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f47f aed6 	bne.w	8008fa8 <_strtod_l+0xa8>
 80091fc:	2a69      	cmp	r2, #105	@ 0x69
 80091fe:	d028      	beq.n	8009252 <_strtod_l+0x352>
 8009200:	dc25      	bgt.n	800924e <_strtod_l+0x34e>
 8009202:	2a49      	cmp	r2, #73	@ 0x49
 8009204:	d025      	beq.n	8009252 <_strtod_l+0x352>
 8009206:	2a4e      	cmp	r2, #78	@ 0x4e
 8009208:	f47f aece 	bne.w	8008fa8 <_strtod_l+0xa8>
 800920c:	499b      	ldr	r1, [pc, #620]	@ (800947c <_strtod_l+0x57c>)
 800920e:	a819      	add	r0, sp, #100	@ 0x64
 8009210:	f001 f9e2 	bl	800a5d8 <__match>
 8009214:	2800      	cmp	r0, #0
 8009216:	f43f aec7 	beq.w	8008fa8 <_strtod_l+0xa8>
 800921a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b28      	cmp	r3, #40	@ 0x28
 8009220:	d12e      	bne.n	8009280 <_strtod_l+0x380>
 8009222:	4997      	ldr	r1, [pc, #604]	@ (8009480 <_strtod_l+0x580>)
 8009224:	aa1c      	add	r2, sp, #112	@ 0x70
 8009226:	a819      	add	r0, sp, #100	@ 0x64
 8009228:	f001 f9ea 	bl	800a600 <__hexnan>
 800922c:	2805      	cmp	r0, #5
 800922e:	d127      	bne.n	8009280 <_strtod_l+0x380>
 8009230:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009232:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009236:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800923a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800923e:	e698      	b.n	8008f72 <_strtod_l+0x72>
 8009240:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009242:	fb08 2101 	mla	r1, r8, r1, r2
 8009246:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800924a:	920e      	str	r2, [sp, #56]	@ 0x38
 800924c:	e7b5      	b.n	80091ba <_strtod_l+0x2ba>
 800924e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009250:	e7da      	b.n	8009208 <_strtod_l+0x308>
 8009252:	498c      	ldr	r1, [pc, #560]	@ (8009484 <_strtod_l+0x584>)
 8009254:	a819      	add	r0, sp, #100	@ 0x64
 8009256:	f001 f9bf 	bl	800a5d8 <__match>
 800925a:	2800      	cmp	r0, #0
 800925c:	f43f aea4 	beq.w	8008fa8 <_strtod_l+0xa8>
 8009260:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009262:	4989      	ldr	r1, [pc, #548]	@ (8009488 <_strtod_l+0x588>)
 8009264:	3b01      	subs	r3, #1
 8009266:	a819      	add	r0, sp, #100	@ 0x64
 8009268:	9319      	str	r3, [sp, #100]	@ 0x64
 800926a:	f001 f9b5 	bl	800a5d8 <__match>
 800926e:	b910      	cbnz	r0, 8009276 <_strtod_l+0x376>
 8009270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009272:	3301      	adds	r3, #1
 8009274:	9319      	str	r3, [sp, #100]	@ 0x64
 8009276:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009498 <_strtod_l+0x598>
 800927a:	f04f 0a00 	mov.w	sl, #0
 800927e:	e678      	b.n	8008f72 <_strtod_l+0x72>
 8009280:	4882      	ldr	r0, [pc, #520]	@ (800948c <_strtod_l+0x58c>)
 8009282:	f000 fee5 	bl	800a050 <nan>
 8009286:	ec5b ab10 	vmov	sl, fp, d0
 800928a:	e672      	b.n	8008f72 <_strtod_l+0x72>
 800928c:	eba8 0309 	sub.w	r3, r8, r9
 8009290:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009292:	9309      	str	r3, [sp, #36]	@ 0x24
 8009294:	2f00      	cmp	r7, #0
 8009296:	bf08      	it	eq
 8009298:	462f      	moveq	r7, r5
 800929a:	2d10      	cmp	r5, #16
 800929c:	462c      	mov	r4, r5
 800929e:	bfa8      	it	ge
 80092a0:	2410      	movge	r4, #16
 80092a2:	f7f7 f92f 	bl	8000504 <__aeabi_ui2d>
 80092a6:	2d09      	cmp	r5, #9
 80092a8:	4682      	mov	sl, r0
 80092aa:	468b      	mov	fp, r1
 80092ac:	dc13      	bgt.n	80092d6 <_strtod_l+0x3d6>
 80092ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f43f ae5e 	beq.w	8008f72 <_strtod_l+0x72>
 80092b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b8:	dd78      	ble.n	80093ac <_strtod_l+0x4ac>
 80092ba:	2b16      	cmp	r3, #22
 80092bc:	dc5f      	bgt.n	800937e <_strtod_l+0x47e>
 80092be:	4974      	ldr	r1, [pc, #464]	@ (8009490 <_strtod_l+0x590>)
 80092c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c8:	4652      	mov	r2, sl
 80092ca:	465b      	mov	r3, fp
 80092cc:	f7f7 f994 	bl	80005f8 <__aeabi_dmul>
 80092d0:	4682      	mov	sl, r0
 80092d2:	468b      	mov	fp, r1
 80092d4:	e64d      	b.n	8008f72 <_strtod_l+0x72>
 80092d6:	4b6e      	ldr	r3, [pc, #440]	@ (8009490 <_strtod_l+0x590>)
 80092d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80092e0:	f7f7 f98a 	bl	80005f8 <__aeabi_dmul>
 80092e4:	4682      	mov	sl, r0
 80092e6:	9808      	ldr	r0, [sp, #32]
 80092e8:	468b      	mov	fp, r1
 80092ea:	f7f7 f90b 	bl	8000504 <__aeabi_ui2d>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4650      	mov	r0, sl
 80092f4:	4659      	mov	r1, fp
 80092f6:	f7f6 ffc9 	bl	800028c <__adddf3>
 80092fa:	2d0f      	cmp	r5, #15
 80092fc:	4682      	mov	sl, r0
 80092fe:	468b      	mov	fp, r1
 8009300:	ddd5      	ble.n	80092ae <_strtod_l+0x3ae>
 8009302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009304:	1b2c      	subs	r4, r5, r4
 8009306:	441c      	add	r4, r3
 8009308:	2c00      	cmp	r4, #0
 800930a:	f340 8096 	ble.w	800943a <_strtod_l+0x53a>
 800930e:	f014 030f 	ands.w	r3, r4, #15
 8009312:	d00a      	beq.n	800932a <_strtod_l+0x42a>
 8009314:	495e      	ldr	r1, [pc, #376]	@ (8009490 <_strtod_l+0x590>)
 8009316:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800931a:	4652      	mov	r2, sl
 800931c:	465b      	mov	r3, fp
 800931e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009322:	f7f7 f969 	bl	80005f8 <__aeabi_dmul>
 8009326:	4682      	mov	sl, r0
 8009328:	468b      	mov	fp, r1
 800932a:	f034 040f 	bics.w	r4, r4, #15
 800932e:	d073      	beq.n	8009418 <_strtod_l+0x518>
 8009330:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009334:	dd48      	ble.n	80093c8 <_strtod_l+0x4c8>
 8009336:	2400      	movs	r4, #0
 8009338:	46a0      	mov	r8, r4
 800933a:	940a      	str	r4, [sp, #40]	@ 0x28
 800933c:	46a1      	mov	r9, r4
 800933e:	9a05      	ldr	r2, [sp, #20]
 8009340:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009498 <_strtod_l+0x598>
 8009344:	2322      	movs	r3, #34	@ 0x22
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	f04f 0a00 	mov.w	sl, #0
 800934c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800934e:	2b00      	cmp	r3, #0
 8009350:	f43f ae0f 	beq.w	8008f72 <_strtod_l+0x72>
 8009354:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009356:	9805      	ldr	r0, [sp, #20]
 8009358:	f7ff f942 	bl	80085e0 <_Bfree>
 800935c:	9805      	ldr	r0, [sp, #20]
 800935e:	4649      	mov	r1, r9
 8009360:	f7ff f93e 	bl	80085e0 <_Bfree>
 8009364:	9805      	ldr	r0, [sp, #20]
 8009366:	4641      	mov	r1, r8
 8009368:	f7ff f93a 	bl	80085e0 <_Bfree>
 800936c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800936e:	9805      	ldr	r0, [sp, #20]
 8009370:	f7ff f936 	bl	80085e0 <_Bfree>
 8009374:	9805      	ldr	r0, [sp, #20]
 8009376:	4621      	mov	r1, r4
 8009378:	f7ff f932 	bl	80085e0 <_Bfree>
 800937c:	e5f9      	b.n	8008f72 <_strtod_l+0x72>
 800937e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009380:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009384:	4293      	cmp	r3, r2
 8009386:	dbbc      	blt.n	8009302 <_strtod_l+0x402>
 8009388:	4c41      	ldr	r4, [pc, #260]	@ (8009490 <_strtod_l+0x590>)
 800938a:	f1c5 050f 	rsb	r5, r5, #15
 800938e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009392:	4652      	mov	r2, sl
 8009394:	465b      	mov	r3, fp
 8009396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800939a:	f7f7 f92d 	bl	80005f8 <__aeabi_dmul>
 800939e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a0:	1b5d      	subs	r5, r3, r5
 80093a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80093a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80093aa:	e78f      	b.n	80092cc <_strtod_l+0x3cc>
 80093ac:	3316      	adds	r3, #22
 80093ae:	dba8      	blt.n	8009302 <_strtod_l+0x402>
 80093b0:	4b37      	ldr	r3, [pc, #220]	@ (8009490 <_strtod_l+0x590>)
 80093b2:	eba9 0808 	sub.w	r8, r9, r8
 80093b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80093ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80093be:	4650      	mov	r0, sl
 80093c0:	4659      	mov	r1, fp
 80093c2:	f7f7 fa43 	bl	800084c <__aeabi_ddiv>
 80093c6:	e783      	b.n	80092d0 <_strtod_l+0x3d0>
 80093c8:	4b32      	ldr	r3, [pc, #200]	@ (8009494 <_strtod_l+0x594>)
 80093ca:	9308      	str	r3, [sp, #32]
 80093cc:	2300      	movs	r3, #0
 80093ce:	1124      	asrs	r4, r4, #4
 80093d0:	4650      	mov	r0, sl
 80093d2:	4659      	mov	r1, fp
 80093d4:	461e      	mov	r6, r3
 80093d6:	2c01      	cmp	r4, #1
 80093d8:	dc21      	bgt.n	800941e <_strtod_l+0x51e>
 80093da:	b10b      	cbz	r3, 80093e0 <_strtod_l+0x4e0>
 80093dc:	4682      	mov	sl, r0
 80093de:	468b      	mov	fp, r1
 80093e0:	492c      	ldr	r1, [pc, #176]	@ (8009494 <_strtod_l+0x594>)
 80093e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80093e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80093ea:	4652      	mov	r2, sl
 80093ec:	465b      	mov	r3, fp
 80093ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093f2:	f7f7 f901 	bl	80005f8 <__aeabi_dmul>
 80093f6:	4b28      	ldr	r3, [pc, #160]	@ (8009498 <_strtod_l+0x598>)
 80093f8:	460a      	mov	r2, r1
 80093fa:	400b      	ands	r3, r1
 80093fc:	4927      	ldr	r1, [pc, #156]	@ (800949c <_strtod_l+0x59c>)
 80093fe:	428b      	cmp	r3, r1
 8009400:	4682      	mov	sl, r0
 8009402:	d898      	bhi.n	8009336 <_strtod_l+0x436>
 8009404:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009408:	428b      	cmp	r3, r1
 800940a:	bf86      	itte	hi
 800940c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80094a0 <_strtod_l+0x5a0>
 8009410:	f04f 3aff 	movhi.w	sl, #4294967295
 8009414:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009418:	2300      	movs	r3, #0
 800941a:	9308      	str	r3, [sp, #32]
 800941c:	e07a      	b.n	8009514 <_strtod_l+0x614>
 800941e:	07e2      	lsls	r2, r4, #31
 8009420:	d505      	bpl.n	800942e <_strtod_l+0x52e>
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f7 f8e6 	bl	80005f8 <__aeabi_dmul>
 800942c:	2301      	movs	r3, #1
 800942e:	9a08      	ldr	r2, [sp, #32]
 8009430:	3208      	adds	r2, #8
 8009432:	3601      	adds	r6, #1
 8009434:	1064      	asrs	r4, r4, #1
 8009436:	9208      	str	r2, [sp, #32]
 8009438:	e7cd      	b.n	80093d6 <_strtod_l+0x4d6>
 800943a:	d0ed      	beq.n	8009418 <_strtod_l+0x518>
 800943c:	4264      	negs	r4, r4
 800943e:	f014 020f 	ands.w	r2, r4, #15
 8009442:	d00a      	beq.n	800945a <_strtod_l+0x55a>
 8009444:	4b12      	ldr	r3, [pc, #72]	@ (8009490 <_strtod_l+0x590>)
 8009446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800944a:	4650      	mov	r0, sl
 800944c:	4659      	mov	r1, fp
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f7 f9fb 	bl	800084c <__aeabi_ddiv>
 8009456:	4682      	mov	sl, r0
 8009458:	468b      	mov	fp, r1
 800945a:	1124      	asrs	r4, r4, #4
 800945c:	d0dc      	beq.n	8009418 <_strtod_l+0x518>
 800945e:	2c1f      	cmp	r4, #31
 8009460:	dd20      	ble.n	80094a4 <_strtod_l+0x5a4>
 8009462:	2400      	movs	r4, #0
 8009464:	46a0      	mov	r8, r4
 8009466:	940a      	str	r4, [sp, #40]	@ 0x28
 8009468:	46a1      	mov	r9, r4
 800946a:	9a05      	ldr	r2, [sp, #20]
 800946c:	2322      	movs	r3, #34	@ 0x22
 800946e:	f04f 0a00 	mov.w	sl, #0
 8009472:	f04f 0b00 	mov.w	fp, #0
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	e768      	b.n	800934c <_strtod_l+0x44c>
 800947a:	bf00      	nop
 800947c:	0800b46d 	.word	0x0800b46d
 8009480:	0800b684 	.word	0x0800b684
 8009484:	0800b465 	.word	0x0800b465
 8009488:	0800b49c 	.word	0x0800b49c
 800948c:	0800b82d 	.word	0x0800b82d
 8009490:	0800b5b8 	.word	0x0800b5b8
 8009494:	0800b590 	.word	0x0800b590
 8009498:	7ff00000 	.word	0x7ff00000
 800949c:	7ca00000 	.word	0x7ca00000
 80094a0:	7fefffff 	.word	0x7fefffff
 80094a4:	f014 0310 	ands.w	r3, r4, #16
 80094a8:	bf18      	it	ne
 80094aa:	236a      	movne	r3, #106	@ 0x6a
 80094ac:	4ea9      	ldr	r6, [pc, #676]	@ (8009754 <_strtod_l+0x854>)
 80094ae:	9308      	str	r3, [sp, #32]
 80094b0:	4650      	mov	r0, sl
 80094b2:	4659      	mov	r1, fp
 80094b4:	2300      	movs	r3, #0
 80094b6:	07e2      	lsls	r2, r4, #31
 80094b8:	d504      	bpl.n	80094c4 <_strtod_l+0x5c4>
 80094ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094be:	f7f7 f89b 	bl	80005f8 <__aeabi_dmul>
 80094c2:	2301      	movs	r3, #1
 80094c4:	1064      	asrs	r4, r4, #1
 80094c6:	f106 0608 	add.w	r6, r6, #8
 80094ca:	d1f4      	bne.n	80094b6 <_strtod_l+0x5b6>
 80094cc:	b10b      	cbz	r3, 80094d2 <_strtod_l+0x5d2>
 80094ce:	4682      	mov	sl, r0
 80094d0:	468b      	mov	fp, r1
 80094d2:	9b08      	ldr	r3, [sp, #32]
 80094d4:	b1b3      	cbz	r3, 8009504 <_strtod_l+0x604>
 80094d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80094da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80094de:	2b00      	cmp	r3, #0
 80094e0:	4659      	mov	r1, fp
 80094e2:	dd0f      	ble.n	8009504 <_strtod_l+0x604>
 80094e4:	2b1f      	cmp	r3, #31
 80094e6:	dd55      	ble.n	8009594 <_strtod_l+0x694>
 80094e8:	2b34      	cmp	r3, #52	@ 0x34
 80094ea:	bfde      	ittt	le
 80094ec:	f04f 33ff 	movle.w	r3, #4294967295
 80094f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80094f4:	4093      	lslle	r3, r2
 80094f6:	f04f 0a00 	mov.w	sl, #0
 80094fa:	bfcc      	ite	gt
 80094fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009500:	ea03 0b01 	andle.w	fp, r3, r1
 8009504:	2200      	movs	r2, #0
 8009506:	2300      	movs	r3, #0
 8009508:	4650      	mov	r0, sl
 800950a:	4659      	mov	r1, fp
 800950c:	f7f7 fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009510:	2800      	cmp	r0, #0
 8009512:	d1a6      	bne.n	8009462 <_strtod_l+0x562>
 8009514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800951a:	9805      	ldr	r0, [sp, #20]
 800951c:	462b      	mov	r3, r5
 800951e:	463a      	mov	r2, r7
 8009520:	f7ff f8c6 	bl	80086b0 <__s2b>
 8009524:	900a      	str	r0, [sp, #40]	@ 0x28
 8009526:	2800      	cmp	r0, #0
 8009528:	f43f af05 	beq.w	8009336 <_strtod_l+0x436>
 800952c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800952e:	2a00      	cmp	r2, #0
 8009530:	eba9 0308 	sub.w	r3, r9, r8
 8009534:	bfa8      	it	ge
 8009536:	2300      	movge	r3, #0
 8009538:	9312      	str	r3, [sp, #72]	@ 0x48
 800953a:	2400      	movs	r4, #0
 800953c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009540:	9316      	str	r3, [sp, #88]	@ 0x58
 8009542:	46a0      	mov	r8, r4
 8009544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009546:	9805      	ldr	r0, [sp, #20]
 8009548:	6859      	ldr	r1, [r3, #4]
 800954a:	f7ff f809 	bl	8008560 <_Balloc>
 800954e:	4681      	mov	r9, r0
 8009550:	2800      	cmp	r0, #0
 8009552:	f43f aef4 	beq.w	800933e <_strtod_l+0x43e>
 8009556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009558:	691a      	ldr	r2, [r3, #16]
 800955a:	3202      	adds	r2, #2
 800955c:	f103 010c 	add.w	r1, r3, #12
 8009560:	0092      	lsls	r2, r2, #2
 8009562:	300c      	adds	r0, #12
 8009564:	f7fe f899 	bl	800769a <memcpy>
 8009568:	ec4b ab10 	vmov	d0, sl, fp
 800956c:	9805      	ldr	r0, [sp, #20]
 800956e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009570:	a91b      	add	r1, sp, #108	@ 0x6c
 8009572:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009576:	f7ff fbd7 	bl	8008d28 <__d2b>
 800957a:	901a      	str	r0, [sp, #104]	@ 0x68
 800957c:	2800      	cmp	r0, #0
 800957e:	f43f aede 	beq.w	800933e <_strtod_l+0x43e>
 8009582:	9805      	ldr	r0, [sp, #20]
 8009584:	2101      	movs	r1, #1
 8009586:	f7ff f929 	bl	80087dc <__i2b>
 800958a:	4680      	mov	r8, r0
 800958c:	b948      	cbnz	r0, 80095a2 <_strtod_l+0x6a2>
 800958e:	f04f 0800 	mov.w	r8, #0
 8009592:	e6d4      	b.n	800933e <_strtod_l+0x43e>
 8009594:	f04f 32ff 	mov.w	r2, #4294967295
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	ea03 0a0a 	and.w	sl, r3, sl
 80095a0:	e7b0      	b.n	8009504 <_strtod_l+0x604>
 80095a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80095a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	bfab      	itete	ge
 80095aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80095ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80095ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80095b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80095b2:	bfac      	ite	ge
 80095b4:	18ef      	addge	r7, r5, r3
 80095b6:	1b5e      	sublt	r6, r3, r5
 80095b8:	9b08      	ldr	r3, [sp, #32]
 80095ba:	1aed      	subs	r5, r5, r3
 80095bc:	4415      	add	r5, r2
 80095be:	4b66      	ldr	r3, [pc, #408]	@ (8009758 <_strtod_l+0x858>)
 80095c0:	3d01      	subs	r5, #1
 80095c2:	429d      	cmp	r5, r3
 80095c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80095c8:	da50      	bge.n	800966c <_strtod_l+0x76c>
 80095ca:	1b5b      	subs	r3, r3, r5
 80095cc:	2b1f      	cmp	r3, #31
 80095ce:	eba2 0203 	sub.w	r2, r2, r3
 80095d2:	f04f 0101 	mov.w	r1, #1
 80095d6:	dc3d      	bgt.n	8009654 <_strtod_l+0x754>
 80095d8:	fa01 f303 	lsl.w	r3, r1, r3
 80095dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095de:	2300      	movs	r3, #0
 80095e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80095e2:	18bd      	adds	r5, r7, r2
 80095e4:	9b08      	ldr	r3, [sp, #32]
 80095e6:	42af      	cmp	r7, r5
 80095e8:	4416      	add	r6, r2
 80095ea:	441e      	add	r6, r3
 80095ec:	463b      	mov	r3, r7
 80095ee:	bfa8      	it	ge
 80095f0:	462b      	movge	r3, r5
 80095f2:	42b3      	cmp	r3, r6
 80095f4:	bfa8      	it	ge
 80095f6:	4633      	movge	r3, r6
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bfc2      	ittt	gt
 80095fc:	1aed      	subgt	r5, r5, r3
 80095fe:	1af6      	subgt	r6, r6, r3
 8009600:	1aff      	subgt	r7, r7, r3
 8009602:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009604:	2b00      	cmp	r3, #0
 8009606:	dd16      	ble.n	8009636 <_strtod_l+0x736>
 8009608:	4641      	mov	r1, r8
 800960a:	9805      	ldr	r0, [sp, #20]
 800960c:	461a      	mov	r2, r3
 800960e:	f7ff f9a5 	bl	800895c <__pow5mult>
 8009612:	4680      	mov	r8, r0
 8009614:	2800      	cmp	r0, #0
 8009616:	d0ba      	beq.n	800958e <_strtod_l+0x68e>
 8009618:	4601      	mov	r1, r0
 800961a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800961c:	9805      	ldr	r0, [sp, #20]
 800961e:	f7ff f8f3 	bl	8008808 <__multiply>
 8009622:	900e      	str	r0, [sp, #56]	@ 0x38
 8009624:	2800      	cmp	r0, #0
 8009626:	f43f ae8a 	beq.w	800933e <_strtod_l+0x43e>
 800962a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800962c:	9805      	ldr	r0, [sp, #20]
 800962e:	f7fe ffd7 	bl	80085e0 <_Bfree>
 8009632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009634:	931a      	str	r3, [sp, #104]	@ 0x68
 8009636:	2d00      	cmp	r5, #0
 8009638:	dc1d      	bgt.n	8009676 <_strtod_l+0x776>
 800963a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800963c:	2b00      	cmp	r3, #0
 800963e:	dd23      	ble.n	8009688 <_strtod_l+0x788>
 8009640:	4649      	mov	r1, r9
 8009642:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009644:	9805      	ldr	r0, [sp, #20]
 8009646:	f7ff f989 	bl	800895c <__pow5mult>
 800964a:	4681      	mov	r9, r0
 800964c:	b9e0      	cbnz	r0, 8009688 <_strtod_l+0x788>
 800964e:	f04f 0900 	mov.w	r9, #0
 8009652:	e674      	b.n	800933e <_strtod_l+0x43e>
 8009654:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009658:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800965c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009660:	35e2      	adds	r5, #226	@ 0xe2
 8009662:	fa01 f305 	lsl.w	r3, r1, r5
 8009666:	9310      	str	r3, [sp, #64]	@ 0x40
 8009668:	9113      	str	r1, [sp, #76]	@ 0x4c
 800966a:	e7ba      	b.n	80095e2 <_strtod_l+0x6e2>
 800966c:	2300      	movs	r3, #0
 800966e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009670:	2301      	movs	r3, #1
 8009672:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009674:	e7b5      	b.n	80095e2 <_strtod_l+0x6e2>
 8009676:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009678:	9805      	ldr	r0, [sp, #20]
 800967a:	462a      	mov	r2, r5
 800967c:	f7ff f9c8 	bl	8008a10 <__lshift>
 8009680:	901a      	str	r0, [sp, #104]	@ 0x68
 8009682:	2800      	cmp	r0, #0
 8009684:	d1d9      	bne.n	800963a <_strtod_l+0x73a>
 8009686:	e65a      	b.n	800933e <_strtod_l+0x43e>
 8009688:	2e00      	cmp	r6, #0
 800968a:	dd07      	ble.n	800969c <_strtod_l+0x79c>
 800968c:	4649      	mov	r1, r9
 800968e:	9805      	ldr	r0, [sp, #20]
 8009690:	4632      	mov	r2, r6
 8009692:	f7ff f9bd 	bl	8008a10 <__lshift>
 8009696:	4681      	mov	r9, r0
 8009698:	2800      	cmp	r0, #0
 800969a:	d0d8      	beq.n	800964e <_strtod_l+0x74e>
 800969c:	2f00      	cmp	r7, #0
 800969e:	dd08      	ble.n	80096b2 <_strtod_l+0x7b2>
 80096a0:	4641      	mov	r1, r8
 80096a2:	9805      	ldr	r0, [sp, #20]
 80096a4:	463a      	mov	r2, r7
 80096a6:	f7ff f9b3 	bl	8008a10 <__lshift>
 80096aa:	4680      	mov	r8, r0
 80096ac:	2800      	cmp	r0, #0
 80096ae:	f43f ae46 	beq.w	800933e <_strtod_l+0x43e>
 80096b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096b4:	9805      	ldr	r0, [sp, #20]
 80096b6:	464a      	mov	r2, r9
 80096b8:	f7ff fa32 	bl	8008b20 <__mdiff>
 80096bc:	4604      	mov	r4, r0
 80096be:	2800      	cmp	r0, #0
 80096c0:	f43f ae3d 	beq.w	800933e <_strtod_l+0x43e>
 80096c4:	68c3      	ldr	r3, [r0, #12]
 80096c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096c8:	2300      	movs	r3, #0
 80096ca:	60c3      	str	r3, [r0, #12]
 80096cc:	4641      	mov	r1, r8
 80096ce:	f7ff fa0b 	bl	8008ae8 <__mcmp>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	da46      	bge.n	8009764 <_strtod_l+0x864>
 80096d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096d8:	ea53 030a 	orrs.w	r3, r3, sl
 80096dc:	d16c      	bne.n	80097b8 <_strtod_l+0x8b8>
 80096de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d168      	bne.n	80097b8 <_strtod_l+0x8b8>
 80096e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096ea:	0d1b      	lsrs	r3, r3, #20
 80096ec:	051b      	lsls	r3, r3, #20
 80096ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80096f2:	d961      	bls.n	80097b8 <_strtod_l+0x8b8>
 80096f4:	6963      	ldr	r3, [r4, #20]
 80096f6:	b913      	cbnz	r3, 80096fe <_strtod_l+0x7fe>
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	dd5c      	ble.n	80097b8 <_strtod_l+0x8b8>
 80096fe:	4621      	mov	r1, r4
 8009700:	2201      	movs	r2, #1
 8009702:	9805      	ldr	r0, [sp, #20]
 8009704:	f7ff f984 	bl	8008a10 <__lshift>
 8009708:	4641      	mov	r1, r8
 800970a:	4604      	mov	r4, r0
 800970c:	f7ff f9ec 	bl	8008ae8 <__mcmp>
 8009710:	2800      	cmp	r0, #0
 8009712:	dd51      	ble.n	80097b8 <_strtod_l+0x8b8>
 8009714:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009718:	9a08      	ldr	r2, [sp, #32]
 800971a:	0d1b      	lsrs	r3, r3, #20
 800971c:	051b      	lsls	r3, r3, #20
 800971e:	2a00      	cmp	r2, #0
 8009720:	d06b      	beq.n	80097fa <_strtod_l+0x8fa>
 8009722:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009726:	d868      	bhi.n	80097fa <_strtod_l+0x8fa>
 8009728:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800972c:	f67f ae9d 	bls.w	800946a <_strtod_l+0x56a>
 8009730:	4b0a      	ldr	r3, [pc, #40]	@ (800975c <_strtod_l+0x85c>)
 8009732:	4650      	mov	r0, sl
 8009734:	4659      	mov	r1, fp
 8009736:	2200      	movs	r2, #0
 8009738:	f7f6 ff5e 	bl	80005f8 <__aeabi_dmul>
 800973c:	4b08      	ldr	r3, [pc, #32]	@ (8009760 <_strtod_l+0x860>)
 800973e:	400b      	ands	r3, r1
 8009740:	4682      	mov	sl, r0
 8009742:	468b      	mov	fp, r1
 8009744:	2b00      	cmp	r3, #0
 8009746:	f47f ae05 	bne.w	8009354 <_strtod_l+0x454>
 800974a:	9a05      	ldr	r2, [sp, #20]
 800974c:	2322      	movs	r3, #34	@ 0x22
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	e600      	b.n	8009354 <_strtod_l+0x454>
 8009752:	bf00      	nop
 8009754:	0800b6b0 	.word	0x0800b6b0
 8009758:	fffffc02 	.word	0xfffffc02
 800975c:	39500000 	.word	0x39500000
 8009760:	7ff00000 	.word	0x7ff00000
 8009764:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009768:	d165      	bne.n	8009836 <_strtod_l+0x936>
 800976a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800976c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009770:	b35a      	cbz	r2, 80097ca <_strtod_l+0x8ca>
 8009772:	4a9f      	ldr	r2, [pc, #636]	@ (80099f0 <_strtod_l+0xaf0>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d12b      	bne.n	80097d0 <_strtod_l+0x8d0>
 8009778:	9b08      	ldr	r3, [sp, #32]
 800977a:	4651      	mov	r1, sl
 800977c:	b303      	cbz	r3, 80097c0 <_strtod_l+0x8c0>
 800977e:	4b9d      	ldr	r3, [pc, #628]	@ (80099f4 <_strtod_l+0xaf4>)
 8009780:	465a      	mov	r2, fp
 8009782:	4013      	ands	r3, r2
 8009784:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009788:	f04f 32ff 	mov.w	r2, #4294967295
 800978c:	d81b      	bhi.n	80097c6 <_strtod_l+0x8c6>
 800978e:	0d1b      	lsrs	r3, r3, #20
 8009790:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009794:	fa02 f303 	lsl.w	r3, r2, r3
 8009798:	4299      	cmp	r1, r3
 800979a:	d119      	bne.n	80097d0 <_strtod_l+0x8d0>
 800979c:	4b96      	ldr	r3, [pc, #600]	@ (80099f8 <_strtod_l+0xaf8>)
 800979e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d102      	bne.n	80097aa <_strtod_l+0x8aa>
 80097a4:	3101      	adds	r1, #1
 80097a6:	f43f adca 	beq.w	800933e <_strtod_l+0x43e>
 80097aa:	4b92      	ldr	r3, [pc, #584]	@ (80099f4 <_strtod_l+0xaf4>)
 80097ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097ae:	401a      	ands	r2, r3
 80097b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80097b4:	f04f 0a00 	mov.w	sl, #0
 80097b8:	9b08      	ldr	r3, [sp, #32]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1b8      	bne.n	8009730 <_strtod_l+0x830>
 80097be:	e5c9      	b.n	8009354 <_strtod_l+0x454>
 80097c0:	f04f 33ff 	mov.w	r3, #4294967295
 80097c4:	e7e8      	b.n	8009798 <_strtod_l+0x898>
 80097c6:	4613      	mov	r3, r2
 80097c8:	e7e6      	b.n	8009798 <_strtod_l+0x898>
 80097ca:	ea53 030a 	orrs.w	r3, r3, sl
 80097ce:	d0a1      	beq.n	8009714 <_strtod_l+0x814>
 80097d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097d2:	b1db      	cbz	r3, 800980c <_strtod_l+0x90c>
 80097d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097d6:	4213      	tst	r3, r2
 80097d8:	d0ee      	beq.n	80097b8 <_strtod_l+0x8b8>
 80097da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097dc:	9a08      	ldr	r2, [sp, #32]
 80097de:	4650      	mov	r0, sl
 80097e0:	4659      	mov	r1, fp
 80097e2:	b1bb      	cbz	r3, 8009814 <_strtod_l+0x914>
 80097e4:	f7ff fb6e 	bl	8008ec4 <sulp>
 80097e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ec:	ec53 2b10 	vmov	r2, r3, d0
 80097f0:	f7f6 fd4c 	bl	800028c <__adddf3>
 80097f4:	4682      	mov	sl, r0
 80097f6:	468b      	mov	fp, r1
 80097f8:	e7de      	b.n	80097b8 <_strtod_l+0x8b8>
 80097fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80097fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009802:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009806:	f04f 3aff 	mov.w	sl, #4294967295
 800980a:	e7d5      	b.n	80097b8 <_strtod_l+0x8b8>
 800980c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800980e:	ea13 0f0a 	tst.w	r3, sl
 8009812:	e7e1      	b.n	80097d8 <_strtod_l+0x8d8>
 8009814:	f7ff fb56 	bl	8008ec4 <sulp>
 8009818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800981c:	ec53 2b10 	vmov	r2, r3, d0
 8009820:	f7f6 fd32 	bl	8000288 <__aeabi_dsub>
 8009824:	2200      	movs	r2, #0
 8009826:	2300      	movs	r3, #0
 8009828:	4682      	mov	sl, r0
 800982a:	468b      	mov	fp, r1
 800982c:	f7f7 f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009830:	2800      	cmp	r0, #0
 8009832:	d0c1      	beq.n	80097b8 <_strtod_l+0x8b8>
 8009834:	e619      	b.n	800946a <_strtod_l+0x56a>
 8009836:	4641      	mov	r1, r8
 8009838:	4620      	mov	r0, r4
 800983a:	f7ff facd 	bl	8008dd8 <__ratio>
 800983e:	ec57 6b10 	vmov	r6, r7, d0
 8009842:	2200      	movs	r2, #0
 8009844:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009848:	4630      	mov	r0, r6
 800984a:	4639      	mov	r1, r7
 800984c:	f7f7 f950 	bl	8000af0 <__aeabi_dcmple>
 8009850:	2800      	cmp	r0, #0
 8009852:	d06f      	beq.n	8009934 <_strtod_l+0xa34>
 8009854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d17a      	bne.n	8009950 <_strtod_l+0xa50>
 800985a:	f1ba 0f00 	cmp.w	sl, #0
 800985e:	d158      	bne.n	8009912 <_strtod_l+0xa12>
 8009860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009866:	2b00      	cmp	r3, #0
 8009868:	d15a      	bne.n	8009920 <_strtod_l+0xa20>
 800986a:	4b64      	ldr	r3, [pc, #400]	@ (80099fc <_strtod_l+0xafc>)
 800986c:	2200      	movs	r2, #0
 800986e:	4630      	mov	r0, r6
 8009870:	4639      	mov	r1, r7
 8009872:	f7f7 f933 	bl	8000adc <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	d159      	bne.n	800992e <_strtod_l+0xa2e>
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	4b60      	ldr	r3, [pc, #384]	@ (8009a00 <_strtod_l+0xb00>)
 8009880:	2200      	movs	r2, #0
 8009882:	f7f6 feb9 	bl	80005f8 <__aeabi_dmul>
 8009886:	4606      	mov	r6, r0
 8009888:	460f      	mov	r7, r1
 800988a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800988e:	9606      	str	r6, [sp, #24]
 8009890:	9307      	str	r3, [sp, #28]
 8009892:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009896:	4d57      	ldr	r5, [pc, #348]	@ (80099f4 <_strtod_l+0xaf4>)
 8009898:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800989c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800989e:	401d      	ands	r5, r3
 80098a0:	4b58      	ldr	r3, [pc, #352]	@ (8009a04 <_strtod_l+0xb04>)
 80098a2:	429d      	cmp	r5, r3
 80098a4:	f040 80b2 	bne.w	8009a0c <_strtod_l+0xb0c>
 80098a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80098ae:	ec4b ab10 	vmov	d0, sl, fp
 80098b2:	f7ff f9c9 	bl	8008c48 <__ulp>
 80098b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098ba:	ec51 0b10 	vmov	r0, r1, d0
 80098be:	f7f6 fe9b 	bl	80005f8 <__aeabi_dmul>
 80098c2:	4652      	mov	r2, sl
 80098c4:	465b      	mov	r3, fp
 80098c6:	f7f6 fce1 	bl	800028c <__adddf3>
 80098ca:	460b      	mov	r3, r1
 80098cc:	4949      	ldr	r1, [pc, #292]	@ (80099f4 <_strtod_l+0xaf4>)
 80098ce:	4a4e      	ldr	r2, [pc, #312]	@ (8009a08 <_strtod_l+0xb08>)
 80098d0:	4019      	ands	r1, r3
 80098d2:	4291      	cmp	r1, r2
 80098d4:	4682      	mov	sl, r0
 80098d6:	d942      	bls.n	800995e <_strtod_l+0xa5e>
 80098d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098da:	4b47      	ldr	r3, [pc, #284]	@ (80099f8 <_strtod_l+0xaf8>)
 80098dc:	429a      	cmp	r2, r3
 80098de:	d103      	bne.n	80098e8 <_strtod_l+0x9e8>
 80098e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098e2:	3301      	adds	r3, #1
 80098e4:	f43f ad2b 	beq.w	800933e <_strtod_l+0x43e>
 80098e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80099f8 <_strtod_l+0xaf8>
 80098ec:	f04f 3aff 	mov.w	sl, #4294967295
 80098f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098f2:	9805      	ldr	r0, [sp, #20]
 80098f4:	f7fe fe74 	bl	80085e0 <_Bfree>
 80098f8:	9805      	ldr	r0, [sp, #20]
 80098fa:	4649      	mov	r1, r9
 80098fc:	f7fe fe70 	bl	80085e0 <_Bfree>
 8009900:	9805      	ldr	r0, [sp, #20]
 8009902:	4641      	mov	r1, r8
 8009904:	f7fe fe6c 	bl	80085e0 <_Bfree>
 8009908:	9805      	ldr	r0, [sp, #20]
 800990a:	4621      	mov	r1, r4
 800990c:	f7fe fe68 	bl	80085e0 <_Bfree>
 8009910:	e618      	b.n	8009544 <_strtod_l+0x644>
 8009912:	f1ba 0f01 	cmp.w	sl, #1
 8009916:	d103      	bne.n	8009920 <_strtod_l+0xa20>
 8009918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800991a:	2b00      	cmp	r3, #0
 800991c:	f43f ada5 	beq.w	800946a <_strtod_l+0x56a>
 8009920:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80099d0 <_strtod_l+0xad0>
 8009924:	4f35      	ldr	r7, [pc, #212]	@ (80099fc <_strtod_l+0xafc>)
 8009926:	ed8d 7b06 	vstr	d7, [sp, #24]
 800992a:	2600      	movs	r6, #0
 800992c:	e7b1      	b.n	8009892 <_strtod_l+0x992>
 800992e:	4f34      	ldr	r7, [pc, #208]	@ (8009a00 <_strtod_l+0xb00>)
 8009930:	2600      	movs	r6, #0
 8009932:	e7aa      	b.n	800988a <_strtod_l+0x98a>
 8009934:	4b32      	ldr	r3, [pc, #200]	@ (8009a00 <_strtod_l+0xb00>)
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	2200      	movs	r2, #0
 800993c:	f7f6 fe5c 	bl	80005f8 <__aeabi_dmul>
 8009940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009942:	4606      	mov	r6, r0
 8009944:	460f      	mov	r7, r1
 8009946:	2b00      	cmp	r3, #0
 8009948:	d09f      	beq.n	800988a <_strtod_l+0x98a>
 800994a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800994e:	e7a0      	b.n	8009892 <_strtod_l+0x992>
 8009950:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80099d8 <_strtod_l+0xad8>
 8009954:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009958:	ec57 6b17 	vmov	r6, r7, d7
 800995c:	e799      	b.n	8009892 <_strtod_l+0x992>
 800995e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009962:	9b08      	ldr	r3, [sp, #32]
 8009964:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1c1      	bne.n	80098f0 <_strtod_l+0x9f0>
 800996c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009970:	0d1b      	lsrs	r3, r3, #20
 8009972:	051b      	lsls	r3, r3, #20
 8009974:	429d      	cmp	r5, r3
 8009976:	d1bb      	bne.n	80098f0 <_strtod_l+0x9f0>
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f7 f99c 	bl	8000cb8 <__aeabi_d2lz>
 8009980:	f7f6 fe0c 	bl	800059c <__aeabi_l2d>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f6 fc7c 	bl	8000288 <__aeabi_dsub>
 8009990:	460b      	mov	r3, r1
 8009992:	4602      	mov	r2, r0
 8009994:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009998:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800999c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800999e:	ea46 060a 	orr.w	r6, r6, sl
 80099a2:	431e      	orrs	r6, r3
 80099a4:	d06f      	beq.n	8009a86 <_strtod_l+0xb86>
 80099a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80099e0 <_strtod_l+0xae0>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f7f7 f896 	bl	8000adc <__aeabi_dcmplt>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	f47f accf 	bne.w	8009354 <_strtod_l+0x454>
 80099b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80099e8 <_strtod_l+0xae8>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099c0:	f7f7 f8aa 	bl	8000b18 <__aeabi_dcmpgt>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d093      	beq.n	80098f0 <_strtod_l+0x9f0>
 80099c8:	e4c4      	b.n	8009354 <_strtod_l+0x454>
 80099ca:	bf00      	nop
 80099cc:	f3af 8000 	nop.w
 80099d0:	00000000 	.word	0x00000000
 80099d4:	bff00000 	.word	0xbff00000
 80099d8:	00000000 	.word	0x00000000
 80099dc:	3ff00000 	.word	0x3ff00000
 80099e0:	94a03595 	.word	0x94a03595
 80099e4:	3fdfffff 	.word	0x3fdfffff
 80099e8:	35afe535 	.word	0x35afe535
 80099ec:	3fe00000 	.word	0x3fe00000
 80099f0:	000fffff 	.word	0x000fffff
 80099f4:	7ff00000 	.word	0x7ff00000
 80099f8:	7fefffff 	.word	0x7fefffff
 80099fc:	3ff00000 	.word	0x3ff00000
 8009a00:	3fe00000 	.word	0x3fe00000
 8009a04:	7fe00000 	.word	0x7fe00000
 8009a08:	7c9fffff 	.word	0x7c9fffff
 8009a0c:	9b08      	ldr	r3, [sp, #32]
 8009a0e:	b323      	cbz	r3, 8009a5a <_strtod_l+0xb5a>
 8009a10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009a14:	d821      	bhi.n	8009a5a <_strtod_l+0xb5a>
 8009a16:	a328      	add	r3, pc, #160	@ (adr r3, 8009ab8 <_strtod_l+0xbb8>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	4639      	mov	r1, r7
 8009a20:	f7f7 f866 	bl	8000af0 <__aeabi_dcmple>
 8009a24:	b1a0      	cbz	r0, 8009a50 <_strtod_l+0xb50>
 8009a26:	4639      	mov	r1, r7
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7f7 f8bd 	bl	8000ba8 <__aeabi_d2uiz>
 8009a2e:	2801      	cmp	r0, #1
 8009a30:	bf38      	it	cc
 8009a32:	2001      	movcc	r0, #1
 8009a34:	f7f6 fd66 	bl	8000504 <__aeabi_ui2d>
 8009a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	b9fb      	cbnz	r3, 8009a80 <_strtod_l+0xb80>
 8009a40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a44:	9014      	str	r0, [sp, #80]	@ 0x50
 8009a46:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009a4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009a56:	1b5b      	subs	r3, r3, r5
 8009a58:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009a62:	f7ff f8f1 	bl	8008c48 <__ulp>
 8009a66:	4650      	mov	r0, sl
 8009a68:	ec53 2b10 	vmov	r2, r3, d0
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	f7f6 fdc3 	bl	80005f8 <__aeabi_dmul>
 8009a72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009a76:	f7f6 fc09 	bl	800028c <__adddf3>
 8009a7a:	4682      	mov	sl, r0
 8009a7c:	468b      	mov	fp, r1
 8009a7e:	e770      	b.n	8009962 <_strtod_l+0xa62>
 8009a80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009a84:	e7e0      	b.n	8009a48 <_strtod_l+0xb48>
 8009a86:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ac0 <_strtod_l+0xbc0>)
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f7f7 f826 	bl	8000adc <__aeabi_dcmplt>
 8009a90:	e798      	b.n	80099c4 <_strtod_l+0xac4>
 8009a92:	2300      	movs	r3, #0
 8009a94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009a98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	f7ff ba6d 	b.w	8008f7a <_strtod_l+0x7a>
 8009aa0:	2a65      	cmp	r2, #101	@ 0x65
 8009aa2:	f43f ab66 	beq.w	8009172 <_strtod_l+0x272>
 8009aa6:	2a45      	cmp	r2, #69	@ 0x45
 8009aa8:	f43f ab63 	beq.w	8009172 <_strtod_l+0x272>
 8009aac:	2301      	movs	r3, #1
 8009aae:	f7ff bb9e 	b.w	80091ee <_strtod_l+0x2ee>
 8009ab2:	bf00      	nop
 8009ab4:	f3af 8000 	nop.w
 8009ab8:	ffc00000 	.word	0xffc00000
 8009abc:	41dfffff 	.word	0x41dfffff
 8009ac0:	94a03595 	.word	0x94a03595
 8009ac4:	3fcfffff 	.word	0x3fcfffff

08009ac8 <_strtod_r>:
 8009ac8:	4b01      	ldr	r3, [pc, #4]	@ (8009ad0 <_strtod_r+0x8>)
 8009aca:	f7ff ba19 	b.w	8008f00 <_strtod_l>
 8009ace:	bf00      	nop
 8009ad0:	20000084 	.word	0x20000084

08009ad4 <_strtol_l.constprop.0>:
 8009ad4:	2b24      	cmp	r3, #36	@ 0x24
 8009ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ada:	4686      	mov	lr, r0
 8009adc:	4690      	mov	r8, r2
 8009ade:	d801      	bhi.n	8009ae4 <_strtol_l.constprop.0+0x10>
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d106      	bne.n	8009af2 <_strtol_l.constprop.0+0x1e>
 8009ae4:	f7fd fdac 	bl	8007640 <__errno>
 8009ae8:	2316      	movs	r3, #22
 8009aea:	6003      	str	r3, [r0, #0]
 8009aec:	2000      	movs	r0, #0
 8009aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af2:	4834      	ldr	r0, [pc, #208]	@ (8009bc4 <_strtol_l.constprop.0+0xf0>)
 8009af4:	460d      	mov	r5, r1
 8009af6:	462a      	mov	r2, r5
 8009af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009afc:	5d06      	ldrb	r6, [r0, r4]
 8009afe:	f016 0608 	ands.w	r6, r6, #8
 8009b02:	d1f8      	bne.n	8009af6 <_strtol_l.constprop.0+0x22>
 8009b04:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b06:	d12d      	bne.n	8009b64 <_strtol_l.constprop.0+0x90>
 8009b08:	782c      	ldrb	r4, [r5, #0]
 8009b0a:	2601      	movs	r6, #1
 8009b0c:	1c95      	adds	r5, r2, #2
 8009b0e:	f033 0210 	bics.w	r2, r3, #16
 8009b12:	d109      	bne.n	8009b28 <_strtol_l.constprop.0+0x54>
 8009b14:	2c30      	cmp	r4, #48	@ 0x30
 8009b16:	d12a      	bne.n	8009b6e <_strtol_l.constprop.0+0x9a>
 8009b18:	782a      	ldrb	r2, [r5, #0]
 8009b1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b1e:	2a58      	cmp	r2, #88	@ 0x58
 8009b20:	d125      	bne.n	8009b6e <_strtol_l.constprop.0+0x9a>
 8009b22:	786c      	ldrb	r4, [r5, #1]
 8009b24:	2310      	movs	r3, #16
 8009b26:	3502      	adds	r5, #2
 8009b28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009b2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b30:	2200      	movs	r2, #0
 8009b32:	fbbc f9f3 	udiv	r9, ip, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	fb03 ca19 	mls	sl, r3, r9, ip
 8009b3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009b40:	2f09      	cmp	r7, #9
 8009b42:	d81b      	bhi.n	8009b7c <_strtol_l.constprop.0+0xa8>
 8009b44:	463c      	mov	r4, r7
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	dd27      	ble.n	8009b9a <_strtol_l.constprop.0+0xc6>
 8009b4a:	1c57      	adds	r7, r2, #1
 8009b4c:	d007      	beq.n	8009b5e <_strtol_l.constprop.0+0x8a>
 8009b4e:	4581      	cmp	r9, r0
 8009b50:	d320      	bcc.n	8009b94 <_strtol_l.constprop.0+0xc0>
 8009b52:	d101      	bne.n	8009b58 <_strtol_l.constprop.0+0x84>
 8009b54:	45a2      	cmp	sl, r4
 8009b56:	db1d      	blt.n	8009b94 <_strtol_l.constprop.0+0xc0>
 8009b58:	fb00 4003 	mla	r0, r0, r3, r4
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b62:	e7eb      	b.n	8009b3c <_strtol_l.constprop.0+0x68>
 8009b64:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b66:	bf04      	itt	eq
 8009b68:	782c      	ldrbeq	r4, [r5, #0]
 8009b6a:	1c95      	addeq	r5, r2, #2
 8009b6c:	e7cf      	b.n	8009b0e <_strtol_l.constprop.0+0x3a>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1da      	bne.n	8009b28 <_strtol_l.constprop.0+0x54>
 8009b72:	2c30      	cmp	r4, #48	@ 0x30
 8009b74:	bf0c      	ite	eq
 8009b76:	2308      	moveq	r3, #8
 8009b78:	230a      	movne	r3, #10
 8009b7a:	e7d5      	b.n	8009b28 <_strtol_l.constprop.0+0x54>
 8009b7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009b80:	2f19      	cmp	r7, #25
 8009b82:	d801      	bhi.n	8009b88 <_strtol_l.constprop.0+0xb4>
 8009b84:	3c37      	subs	r4, #55	@ 0x37
 8009b86:	e7de      	b.n	8009b46 <_strtol_l.constprop.0+0x72>
 8009b88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b8c:	2f19      	cmp	r7, #25
 8009b8e:	d804      	bhi.n	8009b9a <_strtol_l.constprop.0+0xc6>
 8009b90:	3c57      	subs	r4, #87	@ 0x57
 8009b92:	e7d8      	b.n	8009b46 <_strtol_l.constprop.0+0x72>
 8009b94:	f04f 32ff 	mov.w	r2, #4294967295
 8009b98:	e7e1      	b.n	8009b5e <_strtol_l.constprop.0+0x8a>
 8009b9a:	1c53      	adds	r3, r2, #1
 8009b9c:	d108      	bne.n	8009bb0 <_strtol_l.constprop.0+0xdc>
 8009b9e:	2322      	movs	r3, #34	@ 0x22
 8009ba0:	f8ce 3000 	str.w	r3, [lr]
 8009ba4:	4660      	mov	r0, ip
 8009ba6:	f1b8 0f00 	cmp.w	r8, #0
 8009baa:	d0a0      	beq.n	8009aee <_strtol_l.constprop.0+0x1a>
 8009bac:	1e69      	subs	r1, r5, #1
 8009bae:	e006      	b.n	8009bbe <_strtol_l.constprop.0+0xea>
 8009bb0:	b106      	cbz	r6, 8009bb4 <_strtol_l.constprop.0+0xe0>
 8009bb2:	4240      	negs	r0, r0
 8009bb4:	f1b8 0f00 	cmp.w	r8, #0
 8009bb8:	d099      	beq.n	8009aee <_strtol_l.constprop.0+0x1a>
 8009bba:	2a00      	cmp	r2, #0
 8009bbc:	d1f6      	bne.n	8009bac <_strtol_l.constprop.0+0xd8>
 8009bbe:	f8c8 1000 	str.w	r1, [r8]
 8009bc2:	e794      	b.n	8009aee <_strtol_l.constprop.0+0x1a>
 8009bc4:	0800b6d9 	.word	0x0800b6d9

08009bc8 <_strtol_r>:
 8009bc8:	f7ff bf84 	b.w	8009ad4 <_strtol_l.constprop.0>

08009bcc <__ssputs_r>:
 8009bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd0:	688e      	ldr	r6, [r1, #8]
 8009bd2:	461f      	mov	r7, r3
 8009bd4:	42be      	cmp	r6, r7
 8009bd6:	680b      	ldr	r3, [r1, #0]
 8009bd8:	4682      	mov	sl, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	4690      	mov	r8, r2
 8009bde:	d82d      	bhi.n	8009c3c <__ssputs_r+0x70>
 8009be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009be4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009be8:	d026      	beq.n	8009c38 <__ssputs_r+0x6c>
 8009bea:	6965      	ldr	r5, [r4, #20]
 8009bec:	6909      	ldr	r1, [r1, #16]
 8009bee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bf2:	eba3 0901 	sub.w	r9, r3, r1
 8009bf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bfa:	1c7b      	adds	r3, r7, #1
 8009bfc:	444b      	add	r3, r9
 8009bfe:	106d      	asrs	r5, r5, #1
 8009c00:	429d      	cmp	r5, r3
 8009c02:	bf38      	it	cc
 8009c04:	461d      	movcc	r5, r3
 8009c06:	0553      	lsls	r3, r2, #21
 8009c08:	d527      	bpl.n	8009c5a <__ssputs_r+0x8e>
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	f7fe fc1c 	bl	8008448 <_malloc_r>
 8009c10:	4606      	mov	r6, r0
 8009c12:	b360      	cbz	r0, 8009c6e <__ssputs_r+0xa2>
 8009c14:	6921      	ldr	r1, [r4, #16]
 8009c16:	464a      	mov	r2, r9
 8009c18:	f7fd fd3f 	bl	800769a <memcpy>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	6126      	str	r6, [r4, #16]
 8009c2a:	6165      	str	r5, [r4, #20]
 8009c2c:	444e      	add	r6, r9
 8009c2e:	eba5 0509 	sub.w	r5, r5, r9
 8009c32:	6026      	str	r6, [r4, #0]
 8009c34:	60a5      	str	r5, [r4, #8]
 8009c36:	463e      	mov	r6, r7
 8009c38:	42be      	cmp	r6, r7
 8009c3a:	d900      	bls.n	8009c3e <__ssputs_r+0x72>
 8009c3c:	463e      	mov	r6, r7
 8009c3e:	6820      	ldr	r0, [r4, #0]
 8009c40:	4632      	mov	r2, r6
 8009c42:	4641      	mov	r1, r8
 8009c44:	f000 f9c6 	bl	8009fd4 <memmove>
 8009c48:	68a3      	ldr	r3, [r4, #8]
 8009c4a:	1b9b      	subs	r3, r3, r6
 8009c4c:	60a3      	str	r3, [r4, #8]
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	4433      	add	r3, r6
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	2000      	movs	r0, #0
 8009c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5a:	462a      	mov	r2, r5
 8009c5c:	f000 fd7d 	bl	800a75a <_realloc_r>
 8009c60:	4606      	mov	r6, r0
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d1e0      	bne.n	8009c28 <__ssputs_r+0x5c>
 8009c66:	6921      	ldr	r1, [r4, #16]
 8009c68:	4650      	mov	r0, sl
 8009c6a:	f7fe fb79 	bl	8008360 <_free_r>
 8009c6e:	230c      	movs	r3, #12
 8009c70:	f8ca 3000 	str.w	r3, [sl]
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c7a:	81a3      	strh	r3, [r4, #12]
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c80:	e7e9      	b.n	8009c56 <__ssputs_r+0x8a>
	...

08009c84 <_svfiprintf_r>:
 8009c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c88:	4698      	mov	r8, r3
 8009c8a:	898b      	ldrh	r3, [r1, #12]
 8009c8c:	061b      	lsls	r3, r3, #24
 8009c8e:	b09d      	sub	sp, #116	@ 0x74
 8009c90:	4607      	mov	r7, r0
 8009c92:	460d      	mov	r5, r1
 8009c94:	4614      	mov	r4, r2
 8009c96:	d510      	bpl.n	8009cba <_svfiprintf_r+0x36>
 8009c98:	690b      	ldr	r3, [r1, #16]
 8009c9a:	b973      	cbnz	r3, 8009cba <_svfiprintf_r+0x36>
 8009c9c:	2140      	movs	r1, #64	@ 0x40
 8009c9e:	f7fe fbd3 	bl	8008448 <_malloc_r>
 8009ca2:	6028      	str	r0, [r5, #0]
 8009ca4:	6128      	str	r0, [r5, #16]
 8009ca6:	b930      	cbnz	r0, 8009cb6 <_svfiprintf_r+0x32>
 8009ca8:	230c      	movs	r3, #12
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb0:	b01d      	add	sp, #116	@ 0x74
 8009cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	2340      	movs	r3, #64	@ 0x40
 8009cb8:	616b      	str	r3, [r5, #20]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cbe:	2320      	movs	r3, #32
 8009cc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cc8:	2330      	movs	r3, #48	@ 0x30
 8009cca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e68 <_svfiprintf_r+0x1e4>
 8009cce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cd2:	f04f 0901 	mov.w	r9, #1
 8009cd6:	4623      	mov	r3, r4
 8009cd8:	469a      	mov	sl, r3
 8009cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cde:	b10a      	cbz	r2, 8009ce4 <_svfiprintf_r+0x60>
 8009ce0:	2a25      	cmp	r2, #37	@ 0x25
 8009ce2:	d1f9      	bne.n	8009cd8 <_svfiprintf_r+0x54>
 8009ce4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ce8:	d00b      	beq.n	8009d02 <_svfiprintf_r+0x7e>
 8009cea:	465b      	mov	r3, fp
 8009cec:	4622      	mov	r2, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f7ff ff6b 	bl	8009bcc <__ssputs_r>
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f000 80a7 	beq.w	8009e4a <_svfiprintf_r+0x1c6>
 8009cfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cfe:	445a      	add	r2, fp
 8009d00:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d02:	f89a 3000 	ldrb.w	r3, [sl]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 809f 	beq.w	8009e4a <_svfiprintf_r+0x1c6>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d16:	f10a 0a01 	add.w	sl, sl, #1
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	9307      	str	r3, [sp, #28]
 8009d1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d22:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d24:	4654      	mov	r4, sl
 8009d26:	2205      	movs	r2, #5
 8009d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d2c:	484e      	ldr	r0, [pc, #312]	@ (8009e68 <_svfiprintf_r+0x1e4>)
 8009d2e:	f7f6 fa4f 	bl	80001d0 <memchr>
 8009d32:	9a04      	ldr	r2, [sp, #16]
 8009d34:	b9d8      	cbnz	r0, 8009d6e <_svfiprintf_r+0xea>
 8009d36:	06d0      	lsls	r0, r2, #27
 8009d38:	bf44      	itt	mi
 8009d3a:	2320      	movmi	r3, #32
 8009d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d40:	0711      	lsls	r1, r2, #28
 8009d42:	bf44      	itt	mi
 8009d44:	232b      	movmi	r3, #43	@ 0x2b
 8009d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d50:	d015      	beq.n	8009d7e <_svfiprintf_r+0xfa>
 8009d52:	9a07      	ldr	r2, [sp, #28]
 8009d54:	4654      	mov	r4, sl
 8009d56:	2000      	movs	r0, #0
 8009d58:	f04f 0c0a 	mov.w	ip, #10
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d62:	3b30      	subs	r3, #48	@ 0x30
 8009d64:	2b09      	cmp	r3, #9
 8009d66:	d94b      	bls.n	8009e00 <_svfiprintf_r+0x17c>
 8009d68:	b1b0      	cbz	r0, 8009d98 <_svfiprintf_r+0x114>
 8009d6a:	9207      	str	r2, [sp, #28]
 8009d6c:	e014      	b.n	8009d98 <_svfiprintf_r+0x114>
 8009d6e:	eba0 0308 	sub.w	r3, r0, r8
 8009d72:	fa09 f303 	lsl.w	r3, r9, r3
 8009d76:	4313      	orrs	r3, r2
 8009d78:	9304      	str	r3, [sp, #16]
 8009d7a:	46a2      	mov	sl, r4
 8009d7c:	e7d2      	b.n	8009d24 <_svfiprintf_r+0xa0>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	1d19      	adds	r1, r3, #4
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	9103      	str	r1, [sp, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfbb      	ittet	lt
 8009d8a:	425b      	neglt	r3, r3
 8009d8c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d90:	9307      	strge	r3, [sp, #28]
 8009d92:	9307      	strlt	r3, [sp, #28]
 8009d94:	bfb8      	it	lt
 8009d96:	9204      	strlt	r2, [sp, #16]
 8009d98:	7823      	ldrb	r3, [r4, #0]
 8009d9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d9c:	d10a      	bne.n	8009db4 <_svfiprintf_r+0x130>
 8009d9e:	7863      	ldrb	r3, [r4, #1]
 8009da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009da2:	d132      	bne.n	8009e0a <_svfiprintf_r+0x186>
 8009da4:	9b03      	ldr	r3, [sp, #12]
 8009da6:	1d1a      	adds	r2, r3, #4
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	9203      	str	r2, [sp, #12]
 8009dac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009db0:	3402      	adds	r4, #2
 8009db2:	9305      	str	r3, [sp, #20]
 8009db4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e78 <_svfiprintf_r+0x1f4>
 8009db8:	7821      	ldrb	r1, [r4, #0]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	4650      	mov	r0, sl
 8009dbe:	f7f6 fa07 	bl	80001d0 <memchr>
 8009dc2:	b138      	cbz	r0, 8009dd4 <_svfiprintf_r+0x150>
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	eba0 000a 	sub.w	r0, r0, sl
 8009dca:	2240      	movs	r2, #64	@ 0x40
 8009dcc:	4082      	lsls	r2, r0
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	3401      	adds	r4, #1
 8009dd2:	9304      	str	r3, [sp, #16]
 8009dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd8:	4824      	ldr	r0, [pc, #144]	@ (8009e6c <_svfiprintf_r+0x1e8>)
 8009dda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dde:	2206      	movs	r2, #6
 8009de0:	f7f6 f9f6 	bl	80001d0 <memchr>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d036      	beq.n	8009e56 <_svfiprintf_r+0x1d2>
 8009de8:	4b21      	ldr	r3, [pc, #132]	@ (8009e70 <_svfiprintf_r+0x1ec>)
 8009dea:	bb1b      	cbnz	r3, 8009e34 <_svfiprintf_r+0x1b0>
 8009dec:	9b03      	ldr	r3, [sp, #12]
 8009dee:	3307      	adds	r3, #7
 8009df0:	f023 0307 	bic.w	r3, r3, #7
 8009df4:	3308      	adds	r3, #8
 8009df6:	9303      	str	r3, [sp, #12]
 8009df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dfa:	4433      	add	r3, r6
 8009dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dfe:	e76a      	b.n	8009cd6 <_svfiprintf_r+0x52>
 8009e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e04:	460c      	mov	r4, r1
 8009e06:	2001      	movs	r0, #1
 8009e08:	e7a8      	b.n	8009d5c <_svfiprintf_r+0xd8>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	3401      	adds	r4, #1
 8009e0e:	9305      	str	r3, [sp, #20]
 8009e10:	4619      	mov	r1, r3
 8009e12:	f04f 0c0a 	mov.w	ip, #10
 8009e16:	4620      	mov	r0, r4
 8009e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e1c:	3a30      	subs	r2, #48	@ 0x30
 8009e1e:	2a09      	cmp	r2, #9
 8009e20:	d903      	bls.n	8009e2a <_svfiprintf_r+0x1a6>
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0c6      	beq.n	8009db4 <_svfiprintf_r+0x130>
 8009e26:	9105      	str	r1, [sp, #20]
 8009e28:	e7c4      	b.n	8009db4 <_svfiprintf_r+0x130>
 8009e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e2e:	4604      	mov	r4, r0
 8009e30:	2301      	movs	r3, #1
 8009e32:	e7f0      	b.n	8009e16 <_svfiprintf_r+0x192>
 8009e34:	ab03      	add	r3, sp, #12
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	462a      	mov	r2, r5
 8009e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e74 <_svfiprintf_r+0x1f0>)
 8009e3c:	a904      	add	r1, sp, #16
 8009e3e:	4638      	mov	r0, r7
 8009e40:	f7fc fcba 	bl	80067b8 <_printf_float>
 8009e44:	1c42      	adds	r2, r0, #1
 8009e46:	4606      	mov	r6, r0
 8009e48:	d1d6      	bne.n	8009df8 <_svfiprintf_r+0x174>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	065b      	lsls	r3, r3, #25
 8009e4e:	f53f af2d 	bmi.w	8009cac <_svfiprintf_r+0x28>
 8009e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e54:	e72c      	b.n	8009cb0 <_svfiprintf_r+0x2c>
 8009e56:	ab03      	add	r3, sp, #12
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	462a      	mov	r2, r5
 8009e5c:	4b05      	ldr	r3, [pc, #20]	@ (8009e74 <_svfiprintf_r+0x1f0>)
 8009e5e:	a904      	add	r1, sp, #16
 8009e60:	4638      	mov	r0, r7
 8009e62:	f7fc ff41 	bl	8006ce8 <_printf_i>
 8009e66:	e7ed      	b.n	8009e44 <_svfiprintf_r+0x1c0>
 8009e68:	0800b7d9 	.word	0x0800b7d9
 8009e6c:	0800b7e3 	.word	0x0800b7e3
 8009e70:	080067b9 	.word	0x080067b9
 8009e74:	08009bcd 	.word	0x08009bcd
 8009e78:	0800b7df 	.word	0x0800b7df

08009e7c <__sflush_r>:
 8009e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e84:	0716      	lsls	r6, r2, #28
 8009e86:	4605      	mov	r5, r0
 8009e88:	460c      	mov	r4, r1
 8009e8a:	d454      	bmi.n	8009f36 <__sflush_r+0xba>
 8009e8c:	684b      	ldr	r3, [r1, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	dc02      	bgt.n	8009e98 <__sflush_r+0x1c>
 8009e92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd48      	ble.n	8009f2a <__sflush_r+0xae>
 8009e98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e9a:	2e00      	cmp	r6, #0
 8009e9c:	d045      	beq.n	8009f2a <__sflush_r+0xae>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ea4:	682f      	ldr	r7, [r5, #0]
 8009ea6:	6a21      	ldr	r1, [r4, #32]
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	d030      	beq.n	8009f0e <__sflush_r+0x92>
 8009eac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	0759      	lsls	r1, r3, #29
 8009eb2:	d505      	bpl.n	8009ec0 <__sflush_r+0x44>
 8009eb4:	6863      	ldr	r3, [r4, #4]
 8009eb6:	1ad2      	subs	r2, r2, r3
 8009eb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009eba:	b10b      	cbz	r3, 8009ec0 <__sflush_r+0x44>
 8009ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ebe:	1ad2      	subs	r2, r2, r3
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ec4:	6a21      	ldr	r1, [r4, #32]
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b0      	blx	r6
 8009eca:	1c43      	adds	r3, r0, #1
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	d106      	bne.n	8009ede <__sflush_r+0x62>
 8009ed0:	6829      	ldr	r1, [r5, #0]
 8009ed2:	291d      	cmp	r1, #29
 8009ed4:	d82b      	bhi.n	8009f2e <__sflush_r+0xb2>
 8009ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8009f80 <__sflush_r+0x104>)
 8009ed8:	410a      	asrs	r2, r1
 8009eda:	07d6      	lsls	r6, r2, #31
 8009edc:	d427      	bmi.n	8009f2e <__sflush_r+0xb2>
 8009ede:	2200      	movs	r2, #0
 8009ee0:	6062      	str	r2, [r4, #4]
 8009ee2:	04d9      	lsls	r1, r3, #19
 8009ee4:	6922      	ldr	r2, [r4, #16]
 8009ee6:	6022      	str	r2, [r4, #0]
 8009ee8:	d504      	bpl.n	8009ef4 <__sflush_r+0x78>
 8009eea:	1c42      	adds	r2, r0, #1
 8009eec:	d101      	bne.n	8009ef2 <__sflush_r+0x76>
 8009eee:	682b      	ldr	r3, [r5, #0]
 8009ef0:	b903      	cbnz	r3, 8009ef4 <__sflush_r+0x78>
 8009ef2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ef6:	602f      	str	r7, [r5, #0]
 8009ef8:	b1b9      	cbz	r1, 8009f2a <__sflush_r+0xae>
 8009efa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009efe:	4299      	cmp	r1, r3
 8009f00:	d002      	beq.n	8009f08 <__sflush_r+0x8c>
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7fe fa2c 	bl	8008360 <_free_r>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f0c:	e00d      	b.n	8009f2a <__sflush_r+0xae>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b0      	blx	r6
 8009f14:	4602      	mov	r2, r0
 8009f16:	1c50      	adds	r0, r2, #1
 8009f18:	d1c9      	bne.n	8009eae <__sflush_r+0x32>
 8009f1a:	682b      	ldr	r3, [r5, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0c6      	beq.n	8009eae <__sflush_r+0x32>
 8009f20:	2b1d      	cmp	r3, #29
 8009f22:	d001      	beq.n	8009f28 <__sflush_r+0xac>
 8009f24:	2b16      	cmp	r3, #22
 8009f26:	d11e      	bne.n	8009f66 <__sflush_r+0xea>
 8009f28:	602f      	str	r7, [r5, #0]
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	e022      	b.n	8009f74 <__sflush_r+0xf8>
 8009f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f32:	b21b      	sxth	r3, r3
 8009f34:	e01b      	b.n	8009f6e <__sflush_r+0xf2>
 8009f36:	690f      	ldr	r7, [r1, #16]
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	d0f6      	beq.n	8009f2a <__sflush_r+0xae>
 8009f3c:	0793      	lsls	r3, r2, #30
 8009f3e:	680e      	ldr	r6, [r1, #0]
 8009f40:	bf08      	it	eq
 8009f42:	694b      	ldreq	r3, [r1, #20]
 8009f44:	600f      	str	r7, [r1, #0]
 8009f46:	bf18      	it	ne
 8009f48:	2300      	movne	r3, #0
 8009f4a:	eba6 0807 	sub.w	r8, r6, r7
 8009f4e:	608b      	str	r3, [r1, #8]
 8009f50:	f1b8 0f00 	cmp.w	r8, #0
 8009f54:	dde9      	ble.n	8009f2a <__sflush_r+0xae>
 8009f56:	6a21      	ldr	r1, [r4, #32]
 8009f58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009f5a:	4643      	mov	r3, r8
 8009f5c:	463a      	mov	r2, r7
 8009f5e:	4628      	mov	r0, r5
 8009f60:	47b0      	blx	r6
 8009f62:	2800      	cmp	r0, #0
 8009f64:	dc08      	bgt.n	8009f78 <__sflush_r+0xfc>
 8009f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f6e:	81a3      	strh	r3, [r4, #12]
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295
 8009f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f78:	4407      	add	r7, r0
 8009f7a:	eba8 0800 	sub.w	r8, r8, r0
 8009f7e:	e7e7      	b.n	8009f50 <__sflush_r+0xd4>
 8009f80:	dfbffffe 	.word	0xdfbffffe

08009f84 <_fflush_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	690b      	ldr	r3, [r1, #16]
 8009f88:	4605      	mov	r5, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	b913      	cbnz	r3, 8009f94 <_fflush_r+0x10>
 8009f8e:	2500      	movs	r5, #0
 8009f90:	4628      	mov	r0, r5
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	b118      	cbz	r0, 8009f9e <_fflush_r+0x1a>
 8009f96:	6a03      	ldr	r3, [r0, #32]
 8009f98:	b90b      	cbnz	r3, 8009f9e <_fflush_r+0x1a>
 8009f9a:	f7fd fa65 	bl	8007468 <__sinit>
 8009f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f3      	beq.n	8009f8e <_fflush_r+0xa>
 8009fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009fa8:	07d0      	lsls	r0, r2, #31
 8009faa:	d404      	bmi.n	8009fb6 <_fflush_r+0x32>
 8009fac:	0599      	lsls	r1, r3, #22
 8009fae:	d402      	bmi.n	8009fb6 <_fflush_r+0x32>
 8009fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fb2:	f7fd fb70 	bl	8007696 <__retarget_lock_acquire_recursive>
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	4621      	mov	r1, r4
 8009fba:	f7ff ff5f 	bl	8009e7c <__sflush_r>
 8009fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fc0:	07da      	lsls	r2, r3, #31
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	d4e4      	bmi.n	8009f90 <_fflush_r+0xc>
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	059b      	lsls	r3, r3, #22
 8009fca:	d4e1      	bmi.n	8009f90 <_fflush_r+0xc>
 8009fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fce:	f7fd fb63 	bl	8007698 <__retarget_lock_release_recursive>
 8009fd2:	e7dd      	b.n	8009f90 <_fflush_r+0xc>

08009fd4 <memmove>:
 8009fd4:	4288      	cmp	r0, r1
 8009fd6:	b510      	push	{r4, lr}
 8009fd8:	eb01 0402 	add.w	r4, r1, r2
 8009fdc:	d902      	bls.n	8009fe4 <memmove+0x10>
 8009fde:	4284      	cmp	r4, r0
 8009fe0:	4623      	mov	r3, r4
 8009fe2:	d807      	bhi.n	8009ff4 <memmove+0x20>
 8009fe4:	1e43      	subs	r3, r0, #1
 8009fe6:	42a1      	cmp	r1, r4
 8009fe8:	d008      	beq.n	8009ffc <memmove+0x28>
 8009fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ff2:	e7f8      	b.n	8009fe6 <memmove+0x12>
 8009ff4:	4402      	add	r2, r0
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	428a      	cmp	r2, r1
 8009ffa:	d100      	bne.n	8009ffe <memmove+0x2a>
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a006:	e7f7      	b.n	8009ff8 <memmove+0x24>

0800a008 <strncmp>:
 800a008:	b510      	push	{r4, lr}
 800a00a:	b16a      	cbz	r2, 800a028 <strncmp+0x20>
 800a00c:	3901      	subs	r1, #1
 800a00e:	1884      	adds	r4, r0, r2
 800a010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a014:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a018:	429a      	cmp	r2, r3
 800a01a:	d103      	bne.n	800a024 <strncmp+0x1c>
 800a01c:	42a0      	cmp	r0, r4
 800a01e:	d001      	beq.n	800a024 <strncmp+0x1c>
 800a020:	2a00      	cmp	r2, #0
 800a022:	d1f5      	bne.n	800a010 <strncmp+0x8>
 800a024:	1ad0      	subs	r0, r2, r3
 800a026:	bd10      	pop	{r4, pc}
 800a028:	4610      	mov	r0, r2
 800a02a:	e7fc      	b.n	800a026 <strncmp+0x1e>

0800a02c <_sbrk_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	4d06      	ldr	r5, [pc, #24]	@ (800a048 <_sbrk_r+0x1c>)
 800a030:	2300      	movs	r3, #0
 800a032:	4604      	mov	r4, r0
 800a034:	4608      	mov	r0, r1
 800a036:	602b      	str	r3, [r5, #0]
 800a038:	f7f8 fbca 	bl	80027d0 <_sbrk>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d102      	bne.n	800a046 <_sbrk_r+0x1a>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	b103      	cbz	r3, 800a046 <_sbrk_r+0x1a>
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	20000638 	.word	0x20000638
 800a04c:	00000000 	.word	0x00000000

0800a050 <nan>:
 800a050:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a058 <nan+0x8>
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	00000000 	.word	0x00000000
 800a05c:	7ff80000 	.word	0x7ff80000

0800a060 <__assert_func>:
 800a060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a062:	4614      	mov	r4, r2
 800a064:	461a      	mov	r2, r3
 800a066:	4b09      	ldr	r3, [pc, #36]	@ (800a08c <__assert_func+0x2c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4605      	mov	r5, r0
 800a06c:	68d8      	ldr	r0, [r3, #12]
 800a06e:	b954      	cbnz	r4, 800a086 <__assert_func+0x26>
 800a070:	4b07      	ldr	r3, [pc, #28]	@ (800a090 <__assert_func+0x30>)
 800a072:	461c      	mov	r4, r3
 800a074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a078:	9100      	str	r1, [sp, #0]
 800a07a:	462b      	mov	r3, r5
 800a07c:	4905      	ldr	r1, [pc, #20]	@ (800a094 <__assert_func+0x34>)
 800a07e:	f000 fba7 	bl	800a7d0 <fiprintf>
 800a082:	f000 fbb7 	bl	800a7f4 <abort>
 800a086:	4b04      	ldr	r3, [pc, #16]	@ (800a098 <__assert_func+0x38>)
 800a088:	e7f4      	b.n	800a074 <__assert_func+0x14>
 800a08a:	bf00      	nop
 800a08c:	20000034 	.word	0x20000034
 800a090:	0800b82d 	.word	0x0800b82d
 800a094:	0800b7ff 	.word	0x0800b7ff
 800a098:	0800b7f2 	.word	0x0800b7f2

0800a09c <_calloc_r>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	fba1 5402 	umull	r5, r4, r1, r2
 800a0a2:	b93c      	cbnz	r4, 800a0b4 <_calloc_r+0x18>
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	f7fe f9cf 	bl	8008448 <_malloc_r>
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	b928      	cbnz	r0, 800a0ba <_calloc_r+0x1e>
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	220c      	movs	r2, #12
 800a0b6:	6002      	str	r2, [r0, #0]
 800a0b8:	e7f9      	b.n	800a0ae <_calloc_r+0x12>
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	4621      	mov	r1, r4
 800a0be:	f7fd fa6c 	bl	800759a <memset>
 800a0c2:	e7f5      	b.n	800a0b0 <_calloc_r+0x14>

0800a0c4 <rshift>:
 800a0c4:	6903      	ldr	r3, [r0, #16]
 800a0c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0d2:	f100 0414 	add.w	r4, r0, #20
 800a0d6:	dd45      	ble.n	800a164 <rshift+0xa0>
 800a0d8:	f011 011f 	ands.w	r1, r1, #31
 800a0dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0e4:	d10c      	bne.n	800a100 <rshift+0x3c>
 800a0e6:	f100 0710 	add.w	r7, r0, #16
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	42b1      	cmp	r1, r6
 800a0ee:	d334      	bcc.n	800a15a <rshift+0x96>
 800a0f0:	1a9b      	subs	r3, r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	1eea      	subs	r2, r5, #3
 800a0f6:	4296      	cmp	r6, r2
 800a0f8:	bf38      	it	cc
 800a0fa:	2300      	movcc	r3, #0
 800a0fc:	4423      	add	r3, r4
 800a0fe:	e015      	b.n	800a12c <rshift+0x68>
 800a100:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a104:	f1c1 0820 	rsb	r8, r1, #32
 800a108:	40cf      	lsrs	r7, r1
 800a10a:	f105 0e04 	add.w	lr, r5, #4
 800a10e:	46a1      	mov	r9, r4
 800a110:	4576      	cmp	r6, lr
 800a112:	46f4      	mov	ip, lr
 800a114:	d815      	bhi.n	800a142 <rshift+0x7e>
 800a116:	1a9a      	subs	r2, r3, r2
 800a118:	0092      	lsls	r2, r2, #2
 800a11a:	3a04      	subs	r2, #4
 800a11c:	3501      	adds	r5, #1
 800a11e:	42ae      	cmp	r6, r5
 800a120:	bf38      	it	cc
 800a122:	2200      	movcc	r2, #0
 800a124:	18a3      	adds	r3, r4, r2
 800a126:	50a7      	str	r7, [r4, r2]
 800a128:	b107      	cbz	r7, 800a12c <rshift+0x68>
 800a12a:	3304      	adds	r3, #4
 800a12c:	1b1a      	subs	r2, r3, r4
 800a12e:	42a3      	cmp	r3, r4
 800a130:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a134:	bf08      	it	eq
 800a136:	2300      	moveq	r3, #0
 800a138:	6102      	str	r2, [r0, #16]
 800a13a:	bf08      	it	eq
 800a13c:	6143      	streq	r3, [r0, #20]
 800a13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a142:	f8dc c000 	ldr.w	ip, [ip]
 800a146:	fa0c fc08 	lsl.w	ip, ip, r8
 800a14a:	ea4c 0707 	orr.w	r7, ip, r7
 800a14e:	f849 7b04 	str.w	r7, [r9], #4
 800a152:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a156:	40cf      	lsrs	r7, r1
 800a158:	e7da      	b.n	800a110 <rshift+0x4c>
 800a15a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a15e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a162:	e7c3      	b.n	800a0ec <rshift+0x28>
 800a164:	4623      	mov	r3, r4
 800a166:	e7e1      	b.n	800a12c <rshift+0x68>

0800a168 <__hexdig_fun>:
 800a168:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a16c:	2b09      	cmp	r3, #9
 800a16e:	d802      	bhi.n	800a176 <__hexdig_fun+0xe>
 800a170:	3820      	subs	r0, #32
 800a172:	b2c0      	uxtb	r0, r0
 800a174:	4770      	bx	lr
 800a176:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a17a:	2b05      	cmp	r3, #5
 800a17c:	d801      	bhi.n	800a182 <__hexdig_fun+0x1a>
 800a17e:	3847      	subs	r0, #71	@ 0x47
 800a180:	e7f7      	b.n	800a172 <__hexdig_fun+0xa>
 800a182:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a186:	2b05      	cmp	r3, #5
 800a188:	d801      	bhi.n	800a18e <__hexdig_fun+0x26>
 800a18a:	3827      	subs	r0, #39	@ 0x27
 800a18c:	e7f1      	b.n	800a172 <__hexdig_fun+0xa>
 800a18e:	2000      	movs	r0, #0
 800a190:	4770      	bx	lr
	...

0800a194 <__gethex>:
 800a194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	b085      	sub	sp, #20
 800a19a:	468a      	mov	sl, r1
 800a19c:	9302      	str	r3, [sp, #8]
 800a19e:	680b      	ldr	r3, [r1, #0]
 800a1a0:	9001      	str	r0, [sp, #4]
 800a1a2:	4690      	mov	r8, r2
 800a1a4:	1c9c      	adds	r4, r3, #2
 800a1a6:	46a1      	mov	r9, r4
 800a1a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a1ac:	2830      	cmp	r0, #48	@ 0x30
 800a1ae:	d0fa      	beq.n	800a1a6 <__gethex+0x12>
 800a1b0:	eba9 0303 	sub.w	r3, r9, r3
 800a1b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a1b8:	f7ff ffd6 	bl	800a168 <__hexdig_fun>
 800a1bc:	4605      	mov	r5, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d168      	bne.n	800a294 <__gethex+0x100>
 800a1c2:	49a0      	ldr	r1, [pc, #640]	@ (800a444 <__gethex+0x2b0>)
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	4648      	mov	r0, r9
 800a1c8:	f7ff ff1e 	bl	800a008 <strncmp>
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d167      	bne.n	800a2a2 <__gethex+0x10e>
 800a1d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a1d6:	4626      	mov	r6, r4
 800a1d8:	f7ff ffc6 	bl	800a168 <__hexdig_fun>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d062      	beq.n	800a2a6 <__gethex+0x112>
 800a1e0:	4623      	mov	r3, r4
 800a1e2:	7818      	ldrb	r0, [r3, #0]
 800a1e4:	2830      	cmp	r0, #48	@ 0x30
 800a1e6:	4699      	mov	r9, r3
 800a1e8:	f103 0301 	add.w	r3, r3, #1
 800a1ec:	d0f9      	beq.n	800a1e2 <__gethex+0x4e>
 800a1ee:	f7ff ffbb 	bl	800a168 <__hexdig_fun>
 800a1f2:	fab0 f580 	clz	r5, r0
 800a1f6:	096d      	lsrs	r5, r5, #5
 800a1f8:	f04f 0b01 	mov.w	fp, #1
 800a1fc:	464a      	mov	r2, r9
 800a1fe:	4616      	mov	r6, r2
 800a200:	3201      	adds	r2, #1
 800a202:	7830      	ldrb	r0, [r6, #0]
 800a204:	f7ff ffb0 	bl	800a168 <__hexdig_fun>
 800a208:	2800      	cmp	r0, #0
 800a20a:	d1f8      	bne.n	800a1fe <__gethex+0x6a>
 800a20c:	498d      	ldr	r1, [pc, #564]	@ (800a444 <__gethex+0x2b0>)
 800a20e:	2201      	movs	r2, #1
 800a210:	4630      	mov	r0, r6
 800a212:	f7ff fef9 	bl	800a008 <strncmp>
 800a216:	2800      	cmp	r0, #0
 800a218:	d13f      	bne.n	800a29a <__gethex+0x106>
 800a21a:	b944      	cbnz	r4, 800a22e <__gethex+0x9a>
 800a21c:	1c74      	adds	r4, r6, #1
 800a21e:	4622      	mov	r2, r4
 800a220:	4616      	mov	r6, r2
 800a222:	3201      	adds	r2, #1
 800a224:	7830      	ldrb	r0, [r6, #0]
 800a226:	f7ff ff9f 	bl	800a168 <__hexdig_fun>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d1f8      	bne.n	800a220 <__gethex+0x8c>
 800a22e:	1ba4      	subs	r4, r4, r6
 800a230:	00a7      	lsls	r7, r4, #2
 800a232:	7833      	ldrb	r3, [r6, #0]
 800a234:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a238:	2b50      	cmp	r3, #80	@ 0x50
 800a23a:	d13e      	bne.n	800a2ba <__gethex+0x126>
 800a23c:	7873      	ldrb	r3, [r6, #1]
 800a23e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a240:	d033      	beq.n	800a2aa <__gethex+0x116>
 800a242:	2b2d      	cmp	r3, #45	@ 0x2d
 800a244:	d034      	beq.n	800a2b0 <__gethex+0x11c>
 800a246:	1c71      	adds	r1, r6, #1
 800a248:	2400      	movs	r4, #0
 800a24a:	7808      	ldrb	r0, [r1, #0]
 800a24c:	f7ff ff8c 	bl	800a168 <__hexdig_fun>
 800a250:	1e43      	subs	r3, r0, #1
 800a252:	b2db      	uxtb	r3, r3
 800a254:	2b18      	cmp	r3, #24
 800a256:	d830      	bhi.n	800a2ba <__gethex+0x126>
 800a258:	f1a0 0210 	sub.w	r2, r0, #16
 800a25c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a260:	f7ff ff82 	bl	800a168 <__hexdig_fun>
 800a264:	f100 3cff 	add.w	ip, r0, #4294967295
 800a268:	fa5f fc8c 	uxtb.w	ip, ip
 800a26c:	f1bc 0f18 	cmp.w	ip, #24
 800a270:	f04f 030a 	mov.w	r3, #10
 800a274:	d91e      	bls.n	800a2b4 <__gethex+0x120>
 800a276:	b104      	cbz	r4, 800a27a <__gethex+0xe6>
 800a278:	4252      	negs	r2, r2
 800a27a:	4417      	add	r7, r2
 800a27c:	f8ca 1000 	str.w	r1, [sl]
 800a280:	b1ed      	cbz	r5, 800a2be <__gethex+0x12a>
 800a282:	f1bb 0f00 	cmp.w	fp, #0
 800a286:	bf0c      	ite	eq
 800a288:	2506      	moveq	r5, #6
 800a28a:	2500      	movne	r5, #0
 800a28c:	4628      	mov	r0, r5
 800a28e:	b005      	add	sp, #20
 800a290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a294:	2500      	movs	r5, #0
 800a296:	462c      	mov	r4, r5
 800a298:	e7b0      	b.n	800a1fc <__gethex+0x68>
 800a29a:	2c00      	cmp	r4, #0
 800a29c:	d1c7      	bne.n	800a22e <__gethex+0x9a>
 800a29e:	4627      	mov	r7, r4
 800a2a0:	e7c7      	b.n	800a232 <__gethex+0x9e>
 800a2a2:	464e      	mov	r6, r9
 800a2a4:	462f      	mov	r7, r5
 800a2a6:	2501      	movs	r5, #1
 800a2a8:	e7c3      	b.n	800a232 <__gethex+0x9e>
 800a2aa:	2400      	movs	r4, #0
 800a2ac:	1cb1      	adds	r1, r6, #2
 800a2ae:	e7cc      	b.n	800a24a <__gethex+0xb6>
 800a2b0:	2401      	movs	r4, #1
 800a2b2:	e7fb      	b.n	800a2ac <__gethex+0x118>
 800a2b4:	fb03 0002 	mla	r0, r3, r2, r0
 800a2b8:	e7ce      	b.n	800a258 <__gethex+0xc4>
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	e7de      	b.n	800a27c <__gethex+0xe8>
 800a2be:	eba6 0309 	sub.w	r3, r6, r9
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	2b07      	cmp	r3, #7
 800a2c8:	dc0a      	bgt.n	800a2e0 <__gethex+0x14c>
 800a2ca:	9801      	ldr	r0, [sp, #4]
 800a2cc:	f7fe f948 	bl	8008560 <_Balloc>
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	b940      	cbnz	r0, 800a2e6 <__gethex+0x152>
 800a2d4:	4b5c      	ldr	r3, [pc, #368]	@ (800a448 <__gethex+0x2b4>)
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	21e4      	movs	r1, #228	@ 0xe4
 800a2da:	485c      	ldr	r0, [pc, #368]	@ (800a44c <__gethex+0x2b8>)
 800a2dc:	f7ff fec0 	bl	800a060 <__assert_func>
 800a2e0:	3101      	adds	r1, #1
 800a2e2:	105b      	asrs	r3, r3, #1
 800a2e4:	e7ef      	b.n	800a2c6 <__gethex+0x132>
 800a2e6:	f100 0a14 	add.w	sl, r0, #20
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	4655      	mov	r5, sl
 800a2ee:	469b      	mov	fp, r3
 800a2f0:	45b1      	cmp	r9, r6
 800a2f2:	d337      	bcc.n	800a364 <__gethex+0x1d0>
 800a2f4:	f845 bb04 	str.w	fp, [r5], #4
 800a2f8:	eba5 050a 	sub.w	r5, r5, sl
 800a2fc:	10ad      	asrs	r5, r5, #2
 800a2fe:	6125      	str	r5, [r4, #16]
 800a300:	4658      	mov	r0, fp
 800a302:	f7fe fa1f 	bl	8008744 <__hi0bits>
 800a306:	016d      	lsls	r5, r5, #5
 800a308:	f8d8 6000 	ldr.w	r6, [r8]
 800a30c:	1a2d      	subs	r5, r5, r0
 800a30e:	42b5      	cmp	r5, r6
 800a310:	dd54      	ble.n	800a3bc <__gethex+0x228>
 800a312:	1bad      	subs	r5, r5, r6
 800a314:	4629      	mov	r1, r5
 800a316:	4620      	mov	r0, r4
 800a318:	f7fe fdb3 	bl	8008e82 <__any_on>
 800a31c:	4681      	mov	r9, r0
 800a31e:	b178      	cbz	r0, 800a340 <__gethex+0x1ac>
 800a320:	1e6b      	subs	r3, r5, #1
 800a322:	1159      	asrs	r1, r3, #5
 800a324:	f003 021f 	and.w	r2, r3, #31
 800a328:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a32c:	f04f 0901 	mov.w	r9, #1
 800a330:	fa09 f202 	lsl.w	r2, r9, r2
 800a334:	420a      	tst	r2, r1
 800a336:	d003      	beq.n	800a340 <__gethex+0x1ac>
 800a338:	454b      	cmp	r3, r9
 800a33a:	dc36      	bgt.n	800a3aa <__gethex+0x216>
 800a33c:	f04f 0902 	mov.w	r9, #2
 800a340:	4629      	mov	r1, r5
 800a342:	4620      	mov	r0, r4
 800a344:	f7ff febe 	bl	800a0c4 <rshift>
 800a348:	442f      	add	r7, r5
 800a34a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a34e:	42bb      	cmp	r3, r7
 800a350:	da42      	bge.n	800a3d8 <__gethex+0x244>
 800a352:	9801      	ldr	r0, [sp, #4]
 800a354:	4621      	mov	r1, r4
 800a356:	f7fe f943 	bl	80085e0 <_Bfree>
 800a35a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a35c:	2300      	movs	r3, #0
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	25a3      	movs	r5, #163	@ 0xa3
 800a362:	e793      	b.n	800a28c <__gethex+0xf8>
 800a364:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a368:	2a2e      	cmp	r2, #46	@ 0x2e
 800a36a:	d012      	beq.n	800a392 <__gethex+0x1fe>
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d104      	bne.n	800a37a <__gethex+0x1e6>
 800a370:	f845 bb04 	str.w	fp, [r5], #4
 800a374:	f04f 0b00 	mov.w	fp, #0
 800a378:	465b      	mov	r3, fp
 800a37a:	7830      	ldrb	r0, [r6, #0]
 800a37c:	9303      	str	r3, [sp, #12]
 800a37e:	f7ff fef3 	bl	800a168 <__hexdig_fun>
 800a382:	9b03      	ldr	r3, [sp, #12]
 800a384:	f000 000f 	and.w	r0, r0, #15
 800a388:	4098      	lsls	r0, r3
 800a38a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a38e:	3304      	adds	r3, #4
 800a390:	e7ae      	b.n	800a2f0 <__gethex+0x15c>
 800a392:	45b1      	cmp	r9, r6
 800a394:	d8ea      	bhi.n	800a36c <__gethex+0x1d8>
 800a396:	492b      	ldr	r1, [pc, #172]	@ (800a444 <__gethex+0x2b0>)
 800a398:	9303      	str	r3, [sp, #12]
 800a39a:	2201      	movs	r2, #1
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7ff fe33 	bl	800a008 <strncmp>
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1e1      	bne.n	800a36c <__gethex+0x1d8>
 800a3a8:	e7a2      	b.n	800a2f0 <__gethex+0x15c>
 800a3aa:	1ea9      	subs	r1, r5, #2
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f7fe fd68 	bl	8008e82 <__any_on>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d0c2      	beq.n	800a33c <__gethex+0x1a8>
 800a3b6:	f04f 0903 	mov.w	r9, #3
 800a3ba:	e7c1      	b.n	800a340 <__gethex+0x1ac>
 800a3bc:	da09      	bge.n	800a3d2 <__gethex+0x23e>
 800a3be:	1b75      	subs	r5, r6, r5
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	9801      	ldr	r0, [sp, #4]
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	f7fe fb23 	bl	8008a10 <__lshift>
 800a3ca:	1b7f      	subs	r7, r7, r5
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	f100 0a14 	add.w	sl, r0, #20
 800a3d2:	f04f 0900 	mov.w	r9, #0
 800a3d6:	e7b8      	b.n	800a34a <__gethex+0x1b6>
 800a3d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3dc:	42bd      	cmp	r5, r7
 800a3de:	dd6f      	ble.n	800a4c0 <__gethex+0x32c>
 800a3e0:	1bed      	subs	r5, r5, r7
 800a3e2:	42ae      	cmp	r6, r5
 800a3e4:	dc34      	bgt.n	800a450 <__gethex+0x2bc>
 800a3e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d022      	beq.n	800a434 <__gethex+0x2a0>
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d024      	beq.n	800a43c <__gethex+0x2a8>
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d115      	bne.n	800a422 <__gethex+0x28e>
 800a3f6:	42ae      	cmp	r6, r5
 800a3f8:	d113      	bne.n	800a422 <__gethex+0x28e>
 800a3fa:	2e01      	cmp	r6, #1
 800a3fc:	d10b      	bne.n	800a416 <__gethex+0x282>
 800a3fe:	9a02      	ldr	r2, [sp, #8]
 800a400:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	2301      	movs	r3, #1
 800a408:	6123      	str	r3, [r4, #16]
 800a40a:	f8ca 3000 	str.w	r3, [sl]
 800a40e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a410:	2562      	movs	r5, #98	@ 0x62
 800a412:	601c      	str	r4, [r3, #0]
 800a414:	e73a      	b.n	800a28c <__gethex+0xf8>
 800a416:	1e71      	subs	r1, r6, #1
 800a418:	4620      	mov	r0, r4
 800a41a:	f7fe fd32 	bl	8008e82 <__any_on>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d1ed      	bne.n	800a3fe <__gethex+0x26a>
 800a422:	9801      	ldr	r0, [sp, #4]
 800a424:	4621      	mov	r1, r4
 800a426:	f7fe f8db 	bl	80085e0 <_Bfree>
 800a42a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a42c:	2300      	movs	r3, #0
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	2550      	movs	r5, #80	@ 0x50
 800a432:	e72b      	b.n	800a28c <__gethex+0xf8>
 800a434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1f3      	bne.n	800a422 <__gethex+0x28e>
 800a43a:	e7e0      	b.n	800a3fe <__gethex+0x26a>
 800a43c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1dd      	bne.n	800a3fe <__gethex+0x26a>
 800a442:	e7ee      	b.n	800a422 <__gethex+0x28e>
 800a444:	0800b680 	.word	0x0800b680
 800a448:	0800b515 	.word	0x0800b515
 800a44c:	0800b82e 	.word	0x0800b82e
 800a450:	1e6f      	subs	r7, r5, #1
 800a452:	f1b9 0f00 	cmp.w	r9, #0
 800a456:	d130      	bne.n	800a4ba <__gethex+0x326>
 800a458:	b127      	cbz	r7, 800a464 <__gethex+0x2d0>
 800a45a:	4639      	mov	r1, r7
 800a45c:	4620      	mov	r0, r4
 800a45e:	f7fe fd10 	bl	8008e82 <__any_on>
 800a462:	4681      	mov	r9, r0
 800a464:	117a      	asrs	r2, r7, #5
 800a466:	2301      	movs	r3, #1
 800a468:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a46c:	f007 071f 	and.w	r7, r7, #31
 800a470:	40bb      	lsls	r3, r7
 800a472:	4213      	tst	r3, r2
 800a474:	4629      	mov	r1, r5
 800a476:	4620      	mov	r0, r4
 800a478:	bf18      	it	ne
 800a47a:	f049 0902 	orrne.w	r9, r9, #2
 800a47e:	f7ff fe21 	bl	800a0c4 <rshift>
 800a482:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a486:	1b76      	subs	r6, r6, r5
 800a488:	2502      	movs	r5, #2
 800a48a:	f1b9 0f00 	cmp.w	r9, #0
 800a48e:	d047      	beq.n	800a520 <__gethex+0x38c>
 800a490:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d015      	beq.n	800a4c4 <__gethex+0x330>
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d017      	beq.n	800a4cc <__gethex+0x338>
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d109      	bne.n	800a4b4 <__gethex+0x320>
 800a4a0:	f019 0f02 	tst.w	r9, #2
 800a4a4:	d006      	beq.n	800a4b4 <__gethex+0x320>
 800a4a6:	f8da 3000 	ldr.w	r3, [sl]
 800a4aa:	ea49 0903 	orr.w	r9, r9, r3
 800a4ae:	f019 0f01 	tst.w	r9, #1
 800a4b2:	d10e      	bne.n	800a4d2 <__gethex+0x33e>
 800a4b4:	f045 0510 	orr.w	r5, r5, #16
 800a4b8:	e032      	b.n	800a520 <__gethex+0x38c>
 800a4ba:	f04f 0901 	mov.w	r9, #1
 800a4be:	e7d1      	b.n	800a464 <__gethex+0x2d0>
 800a4c0:	2501      	movs	r5, #1
 800a4c2:	e7e2      	b.n	800a48a <__gethex+0x2f6>
 800a4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4c6:	f1c3 0301 	rsb	r3, r3, #1
 800a4ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0f0      	beq.n	800a4b4 <__gethex+0x320>
 800a4d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4d6:	f104 0314 	add.w	r3, r4, #20
 800a4da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4e2:	f04f 0c00 	mov.w	ip, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4f0:	d01b      	beq.n	800a52a <__gethex+0x396>
 800a4f2:	3201      	adds	r2, #1
 800a4f4:	6002      	str	r2, [r0, #0]
 800a4f6:	2d02      	cmp	r5, #2
 800a4f8:	f104 0314 	add.w	r3, r4, #20
 800a4fc:	d13c      	bne.n	800a578 <__gethex+0x3e4>
 800a4fe:	f8d8 2000 	ldr.w	r2, [r8]
 800a502:	3a01      	subs	r2, #1
 800a504:	42b2      	cmp	r2, r6
 800a506:	d109      	bne.n	800a51c <__gethex+0x388>
 800a508:	1171      	asrs	r1, r6, #5
 800a50a:	2201      	movs	r2, #1
 800a50c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a510:	f006 061f 	and.w	r6, r6, #31
 800a514:	fa02 f606 	lsl.w	r6, r2, r6
 800a518:	421e      	tst	r6, r3
 800a51a:	d13a      	bne.n	800a592 <__gethex+0x3fe>
 800a51c:	f045 0520 	orr.w	r5, r5, #32
 800a520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a522:	601c      	str	r4, [r3, #0]
 800a524:	9b02      	ldr	r3, [sp, #8]
 800a526:	601f      	str	r7, [r3, #0]
 800a528:	e6b0      	b.n	800a28c <__gethex+0xf8>
 800a52a:	4299      	cmp	r1, r3
 800a52c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a530:	d8d9      	bhi.n	800a4e6 <__gethex+0x352>
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	459b      	cmp	fp, r3
 800a536:	db17      	blt.n	800a568 <__gethex+0x3d4>
 800a538:	6861      	ldr	r1, [r4, #4]
 800a53a:	9801      	ldr	r0, [sp, #4]
 800a53c:	3101      	adds	r1, #1
 800a53e:	f7fe f80f 	bl	8008560 <_Balloc>
 800a542:	4681      	mov	r9, r0
 800a544:	b918      	cbnz	r0, 800a54e <__gethex+0x3ba>
 800a546:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b0 <__gethex+0x41c>)
 800a548:	4602      	mov	r2, r0
 800a54a:	2184      	movs	r1, #132	@ 0x84
 800a54c:	e6c5      	b.n	800a2da <__gethex+0x146>
 800a54e:	6922      	ldr	r2, [r4, #16]
 800a550:	3202      	adds	r2, #2
 800a552:	f104 010c 	add.w	r1, r4, #12
 800a556:	0092      	lsls	r2, r2, #2
 800a558:	300c      	adds	r0, #12
 800a55a:	f7fd f89e 	bl	800769a <memcpy>
 800a55e:	4621      	mov	r1, r4
 800a560:	9801      	ldr	r0, [sp, #4]
 800a562:	f7fe f83d 	bl	80085e0 <_Bfree>
 800a566:	464c      	mov	r4, r9
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a570:	6122      	str	r2, [r4, #16]
 800a572:	2201      	movs	r2, #1
 800a574:	615a      	str	r2, [r3, #20]
 800a576:	e7be      	b.n	800a4f6 <__gethex+0x362>
 800a578:	6922      	ldr	r2, [r4, #16]
 800a57a:	455a      	cmp	r2, fp
 800a57c:	dd0b      	ble.n	800a596 <__gethex+0x402>
 800a57e:	2101      	movs	r1, #1
 800a580:	4620      	mov	r0, r4
 800a582:	f7ff fd9f 	bl	800a0c4 <rshift>
 800a586:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a58a:	3701      	adds	r7, #1
 800a58c:	42bb      	cmp	r3, r7
 800a58e:	f6ff aee0 	blt.w	800a352 <__gethex+0x1be>
 800a592:	2501      	movs	r5, #1
 800a594:	e7c2      	b.n	800a51c <__gethex+0x388>
 800a596:	f016 061f 	ands.w	r6, r6, #31
 800a59a:	d0fa      	beq.n	800a592 <__gethex+0x3fe>
 800a59c:	4453      	add	r3, sl
 800a59e:	f1c6 0620 	rsb	r6, r6, #32
 800a5a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5a6:	f7fe f8cd 	bl	8008744 <__hi0bits>
 800a5aa:	42b0      	cmp	r0, r6
 800a5ac:	dbe7      	blt.n	800a57e <__gethex+0x3ea>
 800a5ae:	e7f0      	b.n	800a592 <__gethex+0x3fe>
 800a5b0:	0800b515 	.word	0x0800b515

0800a5b4 <L_shift>:
 800a5b4:	f1c2 0208 	rsb	r2, r2, #8
 800a5b8:	0092      	lsls	r2, r2, #2
 800a5ba:	b570      	push	{r4, r5, r6, lr}
 800a5bc:	f1c2 0620 	rsb	r6, r2, #32
 800a5c0:	6843      	ldr	r3, [r0, #4]
 800a5c2:	6804      	ldr	r4, [r0, #0]
 800a5c4:	fa03 f506 	lsl.w	r5, r3, r6
 800a5c8:	432c      	orrs	r4, r5
 800a5ca:	40d3      	lsrs	r3, r2
 800a5cc:	6004      	str	r4, [r0, #0]
 800a5ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5d2:	4288      	cmp	r0, r1
 800a5d4:	d3f4      	bcc.n	800a5c0 <L_shift+0xc>
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}

0800a5d8 <__match>:
 800a5d8:	b530      	push	{r4, r5, lr}
 800a5da:	6803      	ldr	r3, [r0, #0]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5e2:	b914      	cbnz	r4, 800a5ea <__match+0x12>
 800a5e4:	6003      	str	r3, [r0, #0]
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	bd30      	pop	{r4, r5, pc}
 800a5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a5f2:	2d19      	cmp	r5, #25
 800a5f4:	bf98      	it	ls
 800a5f6:	3220      	addls	r2, #32
 800a5f8:	42a2      	cmp	r2, r4
 800a5fa:	d0f0      	beq.n	800a5de <__match+0x6>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	e7f3      	b.n	800a5e8 <__match+0x10>

0800a600 <__hexnan>:
 800a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	680b      	ldr	r3, [r1, #0]
 800a606:	6801      	ldr	r1, [r0, #0]
 800a608:	115e      	asrs	r6, r3, #5
 800a60a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a60e:	f013 031f 	ands.w	r3, r3, #31
 800a612:	b087      	sub	sp, #28
 800a614:	bf18      	it	ne
 800a616:	3604      	addne	r6, #4
 800a618:	2500      	movs	r5, #0
 800a61a:	1f37      	subs	r7, r6, #4
 800a61c:	4682      	mov	sl, r0
 800a61e:	4690      	mov	r8, r2
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	f846 5c04 	str.w	r5, [r6, #-4]
 800a626:	46b9      	mov	r9, r7
 800a628:	463c      	mov	r4, r7
 800a62a:	9502      	str	r5, [sp, #8]
 800a62c:	46ab      	mov	fp, r5
 800a62e:	784a      	ldrb	r2, [r1, #1]
 800a630:	1c4b      	adds	r3, r1, #1
 800a632:	9303      	str	r3, [sp, #12]
 800a634:	b342      	cbz	r2, 800a688 <__hexnan+0x88>
 800a636:	4610      	mov	r0, r2
 800a638:	9105      	str	r1, [sp, #20]
 800a63a:	9204      	str	r2, [sp, #16]
 800a63c:	f7ff fd94 	bl	800a168 <__hexdig_fun>
 800a640:	2800      	cmp	r0, #0
 800a642:	d151      	bne.n	800a6e8 <__hexnan+0xe8>
 800a644:	9a04      	ldr	r2, [sp, #16]
 800a646:	9905      	ldr	r1, [sp, #20]
 800a648:	2a20      	cmp	r2, #32
 800a64a:	d818      	bhi.n	800a67e <__hexnan+0x7e>
 800a64c:	9b02      	ldr	r3, [sp, #8]
 800a64e:	459b      	cmp	fp, r3
 800a650:	dd13      	ble.n	800a67a <__hexnan+0x7a>
 800a652:	454c      	cmp	r4, r9
 800a654:	d206      	bcs.n	800a664 <__hexnan+0x64>
 800a656:	2d07      	cmp	r5, #7
 800a658:	dc04      	bgt.n	800a664 <__hexnan+0x64>
 800a65a:	462a      	mov	r2, r5
 800a65c:	4649      	mov	r1, r9
 800a65e:	4620      	mov	r0, r4
 800a660:	f7ff ffa8 	bl	800a5b4 <L_shift>
 800a664:	4544      	cmp	r4, r8
 800a666:	d952      	bls.n	800a70e <__hexnan+0x10e>
 800a668:	2300      	movs	r3, #0
 800a66a:	f1a4 0904 	sub.w	r9, r4, #4
 800a66e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a672:	f8cd b008 	str.w	fp, [sp, #8]
 800a676:	464c      	mov	r4, r9
 800a678:	461d      	mov	r5, r3
 800a67a:	9903      	ldr	r1, [sp, #12]
 800a67c:	e7d7      	b.n	800a62e <__hexnan+0x2e>
 800a67e:	2a29      	cmp	r2, #41	@ 0x29
 800a680:	d157      	bne.n	800a732 <__hexnan+0x132>
 800a682:	3102      	adds	r1, #2
 800a684:	f8ca 1000 	str.w	r1, [sl]
 800a688:	f1bb 0f00 	cmp.w	fp, #0
 800a68c:	d051      	beq.n	800a732 <__hexnan+0x132>
 800a68e:	454c      	cmp	r4, r9
 800a690:	d206      	bcs.n	800a6a0 <__hexnan+0xa0>
 800a692:	2d07      	cmp	r5, #7
 800a694:	dc04      	bgt.n	800a6a0 <__hexnan+0xa0>
 800a696:	462a      	mov	r2, r5
 800a698:	4649      	mov	r1, r9
 800a69a:	4620      	mov	r0, r4
 800a69c:	f7ff ff8a 	bl	800a5b4 <L_shift>
 800a6a0:	4544      	cmp	r4, r8
 800a6a2:	d936      	bls.n	800a712 <__hexnan+0x112>
 800a6a4:	f1a8 0204 	sub.w	r2, r8, #4
 800a6a8:	4623      	mov	r3, r4
 800a6aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6b2:	429f      	cmp	r7, r3
 800a6b4:	d2f9      	bcs.n	800a6aa <__hexnan+0xaa>
 800a6b6:	1b3b      	subs	r3, r7, r4
 800a6b8:	f023 0303 	bic.w	r3, r3, #3
 800a6bc:	3304      	adds	r3, #4
 800a6be:	3401      	adds	r4, #1
 800a6c0:	3e03      	subs	r6, #3
 800a6c2:	42b4      	cmp	r4, r6
 800a6c4:	bf88      	it	hi
 800a6c6:	2304      	movhi	r3, #4
 800a6c8:	4443      	add	r3, r8
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f843 2b04 	str.w	r2, [r3], #4
 800a6d0:	429f      	cmp	r7, r3
 800a6d2:	d2fb      	bcs.n	800a6cc <__hexnan+0xcc>
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	b91b      	cbnz	r3, 800a6e0 <__hexnan+0xe0>
 800a6d8:	4547      	cmp	r7, r8
 800a6da:	d128      	bne.n	800a72e <__hexnan+0x12e>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	603b      	str	r3, [r7, #0]
 800a6e0:	2005      	movs	r0, #5
 800a6e2:	b007      	add	sp, #28
 800a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e8:	3501      	adds	r5, #1
 800a6ea:	2d08      	cmp	r5, #8
 800a6ec:	f10b 0b01 	add.w	fp, fp, #1
 800a6f0:	dd06      	ble.n	800a700 <__hexnan+0x100>
 800a6f2:	4544      	cmp	r4, r8
 800a6f4:	d9c1      	bls.n	800a67a <__hexnan+0x7a>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6fc:	2501      	movs	r5, #1
 800a6fe:	3c04      	subs	r4, #4
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	f000 000f 	and.w	r0, r0, #15
 800a706:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a70a:	6020      	str	r0, [r4, #0]
 800a70c:	e7b5      	b.n	800a67a <__hexnan+0x7a>
 800a70e:	2508      	movs	r5, #8
 800a710:	e7b3      	b.n	800a67a <__hexnan+0x7a>
 800a712:	9b01      	ldr	r3, [sp, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d0dd      	beq.n	800a6d4 <__hexnan+0xd4>
 800a718:	f1c3 0320 	rsb	r3, r3, #32
 800a71c:	f04f 32ff 	mov.w	r2, #4294967295
 800a720:	40da      	lsrs	r2, r3
 800a722:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a726:	4013      	ands	r3, r2
 800a728:	f846 3c04 	str.w	r3, [r6, #-4]
 800a72c:	e7d2      	b.n	800a6d4 <__hexnan+0xd4>
 800a72e:	3f04      	subs	r7, #4
 800a730:	e7d0      	b.n	800a6d4 <__hexnan+0xd4>
 800a732:	2004      	movs	r0, #4
 800a734:	e7d5      	b.n	800a6e2 <__hexnan+0xe2>

0800a736 <__ascii_mbtowc>:
 800a736:	b082      	sub	sp, #8
 800a738:	b901      	cbnz	r1, 800a73c <__ascii_mbtowc+0x6>
 800a73a:	a901      	add	r1, sp, #4
 800a73c:	b142      	cbz	r2, 800a750 <__ascii_mbtowc+0x1a>
 800a73e:	b14b      	cbz	r3, 800a754 <__ascii_mbtowc+0x1e>
 800a740:	7813      	ldrb	r3, [r2, #0]
 800a742:	600b      	str	r3, [r1, #0]
 800a744:	7812      	ldrb	r2, [r2, #0]
 800a746:	1e10      	subs	r0, r2, #0
 800a748:	bf18      	it	ne
 800a74a:	2001      	movne	r0, #1
 800a74c:	b002      	add	sp, #8
 800a74e:	4770      	bx	lr
 800a750:	4610      	mov	r0, r2
 800a752:	e7fb      	b.n	800a74c <__ascii_mbtowc+0x16>
 800a754:	f06f 0001 	mvn.w	r0, #1
 800a758:	e7f8      	b.n	800a74c <__ascii_mbtowc+0x16>

0800a75a <_realloc_r>:
 800a75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75e:	4680      	mov	r8, r0
 800a760:	4615      	mov	r5, r2
 800a762:	460c      	mov	r4, r1
 800a764:	b921      	cbnz	r1, 800a770 <_realloc_r+0x16>
 800a766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a76a:	4611      	mov	r1, r2
 800a76c:	f7fd be6c 	b.w	8008448 <_malloc_r>
 800a770:	b92a      	cbnz	r2, 800a77e <_realloc_r+0x24>
 800a772:	f7fd fdf5 	bl	8008360 <_free_r>
 800a776:	2400      	movs	r4, #0
 800a778:	4620      	mov	r0, r4
 800a77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77e:	f000 f840 	bl	800a802 <_malloc_usable_size_r>
 800a782:	4285      	cmp	r5, r0
 800a784:	4606      	mov	r6, r0
 800a786:	d802      	bhi.n	800a78e <_realloc_r+0x34>
 800a788:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a78c:	d8f4      	bhi.n	800a778 <_realloc_r+0x1e>
 800a78e:	4629      	mov	r1, r5
 800a790:	4640      	mov	r0, r8
 800a792:	f7fd fe59 	bl	8008448 <_malloc_r>
 800a796:	4607      	mov	r7, r0
 800a798:	2800      	cmp	r0, #0
 800a79a:	d0ec      	beq.n	800a776 <_realloc_r+0x1c>
 800a79c:	42b5      	cmp	r5, r6
 800a79e:	462a      	mov	r2, r5
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	bf28      	it	cs
 800a7a4:	4632      	movcs	r2, r6
 800a7a6:	f7fc ff78 	bl	800769a <memcpy>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	f7fd fdd7 	bl	8008360 <_free_r>
 800a7b2:	463c      	mov	r4, r7
 800a7b4:	e7e0      	b.n	800a778 <_realloc_r+0x1e>

0800a7b6 <__ascii_wctomb>:
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	b141      	cbz	r1, 800a7ce <__ascii_wctomb+0x18>
 800a7bc:	2aff      	cmp	r2, #255	@ 0xff
 800a7be:	d904      	bls.n	800a7ca <__ascii_wctomb+0x14>
 800a7c0:	228a      	movs	r2, #138	@ 0x8a
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c8:	4770      	bx	lr
 800a7ca:	700a      	strb	r2, [r1, #0]
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	4770      	bx	lr

0800a7d0 <fiprintf>:
 800a7d0:	b40e      	push	{r1, r2, r3}
 800a7d2:	b503      	push	{r0, r1, lr}
 800a7d4:	4601      	mov	r1, r0
 800a7d6:	ab03      	add	r3, sp, #12
 800a7d8:	4805      	ldr	r0, [pc, #20]	@ (800a7f0 <fiprintf+0x20>)
 800a7da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7de:	6800      	ldr	r0, [r0, #0]
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	f000 f83f 	bl	800a864 <_vfiprintf_r>
 800a7e6:	b002      	add	sp, #8
 800a7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7ec:	b003      	add	sp, #12
 800a7ee:	4770      	bx	lr
 800a7f0:	20000034 	.word	0x20000034

0800a7f4 <abort>:
 800a7f4:	b508      	push	{r3, lr}
 800a7f6:	2006      	movs	r0, #6
 800a7f8:	f000 fa08 	bl	800ac0c <raise>
 800a7fc:	2001      	movs	r0, #1
 800a7fe:	f7f7 ff6f 	bl	80026e0 <_exit>

0800a802 <_malloc_usable_size_r>:
 800a802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a806:	1f18      	subs	r0, r3, #4
 800a808:	2b00      	cmp	r3, #0
 800a80a:	bfbc      	itt	lt
 800a80c:	580b      	ldrlt	r3, [r1, r0]
 800a80e:	18c0      	addlt	r0, r0, r3
 800a810:	4770      	bx	lr

0800a812 <__sfputc_r>:
 800a812:	6893      	ldr	r3, [r2, #8]
 800a814:	3b01      	subs	r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	b410      	push	{r4}
 800a81a:	6093      	str	r3, [r2, #8]
 800a81c:	da08      	bge.n	800a830 <__sfputc_r+0x1e>
 800a81e:	6994      	ldr	r4, [r2, #24]
 800a820:	42a3      	cmp	r3, r4
 800a822:	db01      	blt.n	800a828 <__sfputc_r+0x16>
 800a824:	290a      	cmp	r1, #10
 800a826:	d103      	bne.n	800a830 <__sfputc_r+0x1e>
 800a828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a82c:	f000 b932 	b.w	800aa94 <__swbuf_r>
 800a830:	6813      	ldr	r3, [r2, #0]
 800a832:	1c58      	adds	r0, r3, #1
 800a834:	6010      	str	r0, [r2, #0]
 800a836:	7019      	strb	r1, [r3, #0]
 800a838:	4608      	mov	r0, r1
 800a83a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <__sfputs_r>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	4606      	mov	r6, r0
 800a844:	460f      	mov	r7, r1
 800a846:	4614      	mov	r4, r2
 800a848:	18d5      	adds	r5, r2, r3
 800a84a:	42ac      	cmp	r4, r5
 800a84c:	d101      	bne.n	800a852 <__sfputs_r+0x12>
 800a84e:	2000      	movs	r0, #0
 800a850:	e007      	b.n	800a862 <__sfputs_r+0x22>
 800a852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a856:	463a      	mov	r2, r7
 800a858:	4630      	mov	r0, r6
 800a85a:	f7ff ffda 	bl	800a812 <__sfputc_r>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	d1f3      	bne.n	800a84a <__sfputs_r+0xa>
 800a862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a864 <_vfiprintf_r>:
 800a864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a868:	460d      	mov	r5, r1
 800a86a:	b09d      	sub	sp, #116	@ 0x74
 800a86c:	4614      	mov	r4, r2
 800a86e:	4698      	mov	r8, r3
 800a870:	4606      	mov	r6, r0
 800a872:	b118      	cbz	r0, 800a87c <_vfiprintf_r+0x18>
 800a874:	6a03      	ldr	r3, [r0, #32]
 800a876:	b90b      	cbnz	r3, 800a87c <_vfiprintf_r+0x18>
 800a878:	f7fc fdf6 	bl	8007468 <__sinit>
 800a87c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a87e:	07d9      	lsls	r1, r3, #31
 800a880:	d405      	bmi.n	800a88e <_vfiprintf_r+0x2a>
 800a882:	89ab      	ldrh	r3, [r5, #12]
 800a884:	059a      	lsls	r2, r3, #22
 800a886:	d402      	bmi.n	800a88e <_vfiprintf_r+0x2a>
 800a888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a88a:	f7fc ff04 	bl	8007696 <__retarget_lock_acquire_recursive>
 800a88e:	89ab      	ldrh	r3, [r5, #12]
 800a890:	071b      	lsls	r3, r3, #28
 800a892:	d501      	bpl.n	800a898 <_vfiprintf_r+0x34>
 800a894:	692b      	ldr	r3, [r5, #16]
 800a896:	b99b      	cbnz	r3, 800a8c0 <_vfiprintf_r+0x5c>
 800a898:	4629      	mov	r1, r5
 800a89a:	4630      	mov	r0, r6
 800a89c:	f000 f938 	bl	800ab10 <__swsetup_r>
 800a8a0:	b170      	cbz	r0, 800a8c0 <_vfiprintf_r+0x5c>
 800a8a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8a4:	07dc      	lsls	r4, r3, #31
 800a8a6:	d504      	bpl.n	800a8b2 <_vfiprintf_r+0x4e>
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	b01d      	add	sp, #116	@ 0x74
 800a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b2:	89ab      	ldrh	r3, [r5, #12]
 800a8b4:	0598      	lsls	r0, r3, #22
 800a8b6:	d4f7      	bmi.n	800a8a8 <_vfiprintf_r+0x44>
 800a8b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8ba:	f7fc feed 	bl	8007698 <__retarget_lock_release_recursive>
 800a8be:	e7f3      	b.n	800a8a8 <_vfiprintf_r+0x44>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8c4:	2320      	movs	r3, #32
 800a8c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ce:	2330      	movs	r3, #48	@ 0x30
 800a8d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa80 <_vfiprintf_r+0x21c>
 800a8d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8d8:	f04f 0901 	mov.w	r9, #1
 800a8dc:	4623      	mov	r3, r4
 800a8de:	469a      	mov	sl, r3
 800a8e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8e4:	b10a      	cbz	r2, 800a8ea <_vfiprintf_r+0x86>
 800a8e6:	2a25      	cmp	r2, #37	@ 0x25
 800a8e8:	d1f9      	bne.n	800a8de <_vfiprintf_r+0x7a>
 800a8ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a8ee:	d00b      	beq.n	800a908 <_vfiprintf_r+0xa4>
 800a8f0:	465b      	mov	r3, fp
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f7ff ffa2 	bl	800a840 <__sfputs_r>
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	f000 80a7 	beq.w	800aa50 <_vfiprintf_r+0x1ec>
 800a902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a904:	445a      	add	r2, fp
 800a906:	9209      	str	r2, [sp, #36]	@ 0x24
 800a908:	f89a 3000 	ldrb.w	r3, [sl]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 809f 	beq.w	800aa50 <_vfiprintf_r+0x1ec>
 800a912:	2300      	movs	r3, #0
 800a914:	f04f 32ff 	mov.w	r2, #4294967295
 800a918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a91c:	f10a 0a01 	add.w	sl, sl, #1
 800a920:	9304      	str	r3, [sp, #16]
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a928:	931a      	str	r3, [sp, #104]	@ 0x68
 800a92a:	4654      	mov	r4, sl
 800a92c:	2205      	movs	r2, #5
 800a92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a932:	4853      	ldr	r0, [pc, #332]	@ (800aa80 <_vfiprintf_r+0x21c>)
 800a934:	f7f5 fc4c 	bl	80001d0 <memchr>
 800a938:	9a04      	ldr	r2, [sp, #16]
 800a93a:	b9d8      	cbnz	r0, 800a974 <_vfiprintf_r+0x110>
 800a93c:	06d1      	lsls	r1, r2, #27
 800a93e:	bf44      	itt	mi
 800a940:	2320      	movmi	r3, #32
 800a942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a946:	0713      	lsls	r3, r2, #28
 800a948:	bf44      	itt	mi
 800a94a:	232b      	movmi	r3, #43	@ 0x2b
 800a94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a950:	f89a 3000 	ldrb.w	r3, [sl]
 800a954:	2b2a      	cmp	r3, #42	@ 0x2a
 800a956:	d015      	beq.n	800a984 <_vfiprintf_r+0x120>
 800a958:	9a07      	ldr	r2, [sp, #28]
 800a95a:	4654      	mov	r4, sl
 800a95c:	2000      	movs	r0, #0
 800a95e:	f04f 0c0a 	mov.w	ip, #10
 800a962:	4621      	mov	r1, r4
 800a964:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a968:	3b30      	subs	r3, #48	@ 0x30
 800a96a:	2b09      	cmp	r3, #9
 800a96c:	d94b      	bls.n	800aa06 <_vfiprintf_r+0x1a2>
 800a96e:	b1b0      	cbz	r0, 800a99e <_vfiprintf_r+0x13a>
 800a970:	9207      	str	r2, [sp, #28]
 800a972:	e014      	b.n	800a99e <_vfiprintf_r+0x13a>
 800a974:	eba0 0308 	sub.w	r3, r0, r8
 800a978:	fa09 f303 	lsl.w	r3, r9, r3
 800a97c:	4313      	orrs	r3, r2
 800a97e:	9304      	str	r3, [sp, #16]
 800a980:	46a2      	mov	sl, r4
 800a982:	e7d2      	b.n	800a92a <_vfiprintf_r+0xc6>
 800a984:	9b03      	ldr	r3, [sp, #12]
 800a986:	1d19      	adds	r1, r3, #4
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	9103      	str	r1, [sp, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	bfbb      	ittet	lt
 800a990:	425b      	neglt	r3, r3
 800a992:	f042 0202 	orrlt.w	r2, r2, #2
 800a996:	9307      	strge	r3, [sp, #28]
 800a998:	9307      	strlt	r3, [sp, #28]
 800a99a:	bfb8      	it	lt
 800a99c:	9204      	strlt	r2, [sp, #16]
 800a99e:	7823      	ldrb	r3, [r4, #0]
 800a9a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9a2:	d10a      	bne.n	800a9ba <_vfiprintf_r+0x156>
 800a9a4:	7863      	ldrb	r3, [r4, #1]
 800a9a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9a8:	d132      	bne.n	800aa10 <_vfiprintf_r+0x1ac>
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	1d1a      	adds	r2, r3, #4
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	9203      	str	r2, [sp, #12]
 800a9b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9b6:	3402      	adds	r4, #2
 800a9b8:	9305      	str	r3, [sp, #20]
 800a9ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa90 <_vfiprintf_r+0x22c>
 800a9be:	7821      	ldrb	r1, [r4, #0]
 800a9c0:	2203      	movs	r2, #3
 800a9c2:	4650      	mov	r0, sl
 800a9c4:	f7f5 fc04 	bl	80001d0 <memchr>
 800a9c8:	b138      	cbz	r0, 800a9da <_vfiprintf_r+0x176>
 800a9ca:	9b04      	ldr	r3, [sp, #16]
 800a9cc:	eba0 000a 	sub.w	r0, r0, sl
 800a9d0:	2240      	movs	r2, #64	@ 0x40
 800a9d2:	4082      	lsls	r2, r0
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	3401      	adds	r4, #1
 800a9d8:	9304      	str	r3, [sp, #16]
 800a9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9de:	4829      	ldr	r0, [pc, #164]	@ (800aa84 <_vfiprintf_r+0x220>)
 800a9e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9e4:	2206      	movs	r2, #6
 800a9e6:	f7f5 fbf3 	bl	80001d0 <memchr>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d03f      	beq.n	800aa6e <_vfiprintf_r+0x20a>
 800a9ee:	4b26      	ldr	r3, [pc, #152]	@ (800aa88 <_vfiprintf_r+0x224>)
 800a9f0:	bb1b      	cbnz	r3, 800aa3a <_vfiprintf_r+0x1d6>
 800a9f2:	9b03      	ldr	r3, [sp, #12]
 800a9f4:	3307      	adds	r3, #7
 800a9f6:	f023 0307 	bic.w	r3, r3, #7
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	9303      	str	r3, [sp, #12]
 800a9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa00:	443b      	add	r3, r7
 800aa02:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa04:	e76a      	b.n	800a8dc <_vfiprintf_r+0x78>
 800aa06:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	2001      	movs	r0, #1
 800aa0e:	e7a8      	b.n	800a962 <_vfiprintf_r+0xfe>
 800aa10:	2300      	movs	r3, #0
 800aa12:	3401      	adds	r4, #1
 800aa14:	9305      	str	r3, [sp, #20]
 800aa16:	4619      	mov	r1, r3
 800aa18:	f04f 0c0a 	mov.w	ip, #10
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa22:	3a30      	subs	r2, #48	@ 0x30
 800aa24:	2a09      	cmp	r2, #9
 800aa26:	d903      	bls.n	800aa30 <_vfiprintf_r+0x1cc>
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d0c6      	beq.n	800a9ba <_vfiprintf_r+0x156>
 800aa2c:	9105      	str	r1, [sp, #20]
 800aa2e:	e7c4      	b.n	800a9ba <_vfiprintf_r+0x156>
 800aa30:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa34:	4604      	mov	r4, r0
 800aa36:	2301      	movs	r3, #1
 800aa38:	e7f0      	b.n	800aa1c <_vfiprintf_r+0x1b8>
 800aa3a:	ab03      	add	r3, sp, #12
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	462a      	mov	r2, r5
 800aa40:	4b12      	ldr	r3, [pc, #72]	@ (800aa8c <_vfiprintf_r+0x228>)
 800aa42:	a904      	add	r1, sp, #16
 800aa44:	4630      	mov	r0, r6
 800aa46:	f7fb feb7 	bl	80067b8 <_printf_float>
 800aa4a:	4607      	mov	r7, r0
 800aa4c:	1c78      	adds	r0, r7, #1
 800aa4e:	d1d6      	bne.n	800a9fe <_vfiprintf_r+0x19a>
 800aa50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa52:	07d9      	lsls	r1, r3, #31
 800aa54:	d405      	bmi.n	800aa62 <_vfiprintf_r+0x1fe>
 800aa56:	89ab      	ldrh	r3, [r5, #12]
 800aa58:	059a      	lsls	r2, r3, #22
 800aa5a:	d402      	bmi.n	800aa62 <_vfiprintf_r+0x1fe>
 800aa5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa5e:	f7fc fe1b 	bl	8007698 <__retarget_lock_release_recursive>
 800aa62:	89ab      	ldrh	r3, [r5, #12]
 800aa64:	065b      	lsls	r3, r3, #25
 800aa66:	f53f af1f 	bmi.w	800a8a8 <_vfiprintf_r+0x44>
 800aa6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa6c:	e71e      	b.n	800a8ac <_vfiprintf_r+0x48>
 800aa6e:	ab03      	add	r3, sp, #12
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	462a      	mov	r2, r5
 800aa74:	4b05      	ldr	r3, [pc, #20]	@ (800aa8c <_vfiprintf_r+0x228>)
 800aa76:	a904      	add	r1, sp, #16
 800aa78:	4630      	mov	r0, r6
 800aa7a:	f7fc f935 	bl	8006ce8 <_printf_i>
 800aa7e:	e7e4      	b.n	800aa4a <_vfiprintf_r+0x1e6>
 800aa80:	0800b7d9 	.word	0x0800b7d9
 800aa84:	0800b7e3 	.word	0x0800b7e3
 800aa88:	080067b9 	.word	0x080067b9
 800aa8c:	0800a841 	.word	0x0800a841
 800aa90:	0800b7df 	.word	0x0800b7df

0800aa94 <__swbuf_r>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	460e      	mov	r6, r1
 800aa98:	4614      	mov	r4, r2
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	b118      	cbz	r0, 800aaa6 <__swbuf_r+0x12>
 800aa9e:	6a03      	ldr	r3, [r0, #32]
 800aaa0:	b90b      	cbnz	r3, 800aaa6 <__swbuf_r+0x12>
 800aaa2:	f7fc fce1 	bl	8007468 <__sinit>
 800aaa6:	69a3      	ldr	r3, [r4, #24]
 800aaa8:	60a3      	str	r3, [r4, #8]
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	071a      	lsls	r2, r3, #28
 800aaae:	d501      	bpl.n	800aab4 <__swbuf_r+0x20>
 800aab0:	6923      	ldr	r3, [r4, #16]
 800aab2:	b943      	cbnz	r3, 800aac6 <__swbuf_r+0x32>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f82a 	bl	800ab10 <__swsetup_r>
 800aabc:	b118      	cbz	r0, 800aac6 <__swbuf_r+0x32>
 800aabe:	f04f 37ff 	mov.w	r7, #4294967295
 800aac2:	4638      	mov	r0, r7
 800aac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	6922      	ldr	r2, [r4, #16]
 800aaca:	1a98      	subs	r0, r3, r2
 800aacc:	6963      	ldr	r3, [r4, #20]
 800aace:	b2f6      	uxtb	r6, r6
 800aad0:	4283      	cmp	r3, r0
 800aad2:	4637      	mov	r7, r6
 800aad4:	dc05      	bgt.n	800aae2 <__swbuf_r+0x4e>
 800aad6:	4621      	mov	r1, r4
 800aad8:	4628      	mov	r0, r5
 800aada:	f7ff fa53 	bl	8009f84 <_fflush_r>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d1ed      	bne.n	800aabe <__swbuf_r+0x2a>
 800aae2:	68a3      	ldr	r3, [r4, #8]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	60a3      	str	r3, [r4, #8]
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	6022      	str	r2, [r4, #0]
 800aaee:	701e      	strb	r6, [r3, #0]
 800aaf0:	6962      	ldr	r2, [r4, #20]
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d004      	beq.n	800ab02 <__swbuf_r+0x6e>
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	07db      	lsls	r3, r3, #31
 800aafc:	d5e1      	bpl.n	800aac2 <__swbuf_r+0x2e>
 800aafe:	2e0a      	cmp	r6, #10
 800ab00:	d1df      	bne.n	800aac2 <__swbuf_r+0x2e>
 800ab02:	4621      	mov	r1, r4
 800ab04:	4628      	mov	r0, r5
 800ab06:	f7ff fa3d 	bl	8009f84 <_fflush_r>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d0d9      	beq.n	800aac2 <__swbuf_r+0x2e>
 800ab0e:	e7d6      	b.n	800aabe <__swbuf_r+0x2a>

0800ab10 <__swsetup_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4b29      	ldr	r3, [pc, #164]	@ (800abb8 <__swsetup_r+0xa8>)
 800ab14:	4605      	mov	r5, r0
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	460c      	mov	r4, r1
 800ab1a:	b118      	cbz	r0, 800ab24 <__swsetup_r+0x14>
 800ab1c:	6a03      	ldr	r3, [r0, #32]
 800ab1e:	b90b      	cbnz	r3, 800ab24 <__swsetup_r+0x14>
 800ab20:	f7fc fca2 	bl	8007468 <__sinit>
 800ab24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab28:	0719      	lsls	r1, r3, #28
 800ab2a:	d422      	bmi.n	800ab72 <__swsetup_r+0x62>
 800ab2c:	06da      	lsls	r2, r3, #27
 800ab2e:	d407      	bmi.n	800ab40 <__swsetup_r+0x30>
 800ab30:	2209      	movs	r2, #9
 800ab32:	602a      	str	r2, [r5, #0]
 800ab34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab38:	81a3      	strh	r3, [r4, #12]
 800ab3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3e:	e033      	b.n	800aba8 <__swsetup_r+0x98>
 800ab40:	0758      	lsls	r0, r3, #29
 800ab42:	d512      	bpl.n	800ab6a <__swsetup_r+0x5a>
 800ab44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab46:	b141      	cbz	r1, 800ab5a <__swsetup_r+0x4a>
 800ab48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	d002      	beq.n	800ab56 <__swsetup_r+0x46>
 800ab50:	4628      	mov	r0, r5
 800ab52:	f7fd fc05 	bl	8008360 <_free_r>
 800ab56:	2300      	movs	r3, #0
 800ab58:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	2300      	movs	r3, #0
 800ab64:	6063      	str	r3, [r4, #4]
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	f043 0308 	orr.w	r3, r3, #8
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	b94b      	cbnz	r3, 800ab8a <__swsetup_r+0x7a>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab80:	d003      	beq.n	800ab8a <__swsetup_r+0x7a>
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	f000 f883 	bl	800ac90 <__smakebuf_r>
 800ab8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab8e:	f013 0201 	ands.w	r2, r3, #1
 800ab92:	d00a      	beq.n	800abaa <__swsetup_r+0x9a>
 800ab94:	2200      	movs	r2, #0
 800ab96:	60a2      	str	r2, [r4, #8]
 800ab98:	6962      	ldr	r2, [r4, #20]
 800ab9a:	4252      	negs	r2, r2
 800ab9c:	61a2      	str	r2, [r4, #24]
 800ab9e:	6922      	ldr	r2, [r4, #16]
 800aba0:	b942      	cbnz	r2, 800abb4 <__swsetup_r+0xa4>
 800aba2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aba6:	d1c5      	bne.n	800ab34 <__swsetup_r+0x24>
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
 800abaa:	0799      	lsls	r1, r3, #30
 800abac:	bf58      	it	pl
 800abae:	6962      	ldrpl	r2, [r4, #20]
 800abb0:	60a2      	str	r2, [r4, #8]
 800abb2:	e7f4      	b.n	800ab9e <__swsetup_r+0x8e>
 800abb4:	2000      	movs	r0, #0
 800abb6:	e7f7      	b.n	800aba8 <__swsetup_r+0x98>
 800abb8:	20000034 	.word	0x20000034

0800abbc <_raise_r>:
 800abbc:	291f      	cmp	r1, #31
 800abbe:	b538      	push	{r3, r4, r5, lr}
 800abc0:	4605      	mov	r5, r0
 800abc2:	460c      	mov	r4, r1
 800abc4:	d904      	bls.n	800abd0 <_raise_r+0x14>
 800abc6:	2316      	movs	r3, #22
 800abc8:	6003      	str	r3, [r0, #0]
 800abca:	f04f 30ff 	mov.w	r0, #4294967295
 800abce:	bd38      	pop	{r3, r4, r5, pc}
 800abd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800abd2:	b112      	cbz	r2, 800abda <_raise_r+0x1e>
 800abd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abd8:	b94b      	cbnz	r3, 800abee <_raise_r+0x32>
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 f830 	bl	800ac40 <_getpid_r>
 800abe0:	4622      	mov	r2, r4
 800abe2:	4601      	mov	r1, r0
 800abe4:	4628      	mov	r0, r5
 800abe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abea:	f000 b817 	b.w	800ac1c <_kill_r>
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d00a      	beq.n	800ac08 <_raise_r+0x4c>
 800abf2:	1c59      	adds	r1, r3, #1
 800abf4:	d103      	bne.n	800abfe <_raise_r+0x42>
 800abf6:	2316      	movs	r3, #22
 800abf8:	6003      	str	r3, [r0, #0]
 800abfa:	2001      	movs	r0, #1
 800abfc:	e7e7      	b.n	800abce <_raise_r+0x12>
 800abfe:	2100      	movs	r1, #0
 800ac00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac04:	4620      	mov	r0, r4
 800ac06:	4798      	blx	r3
 800ac08:	2000      	movs	r0, #0
 800ac0a:	e7e0      	b.n	800abce <_raise_r+0x12>

0800ac0c <raise>:
 800ac0c:	4b02      	ldr	r3, [pc, #8]	@ (800ac18 <raise+0xc>)
 800ac0e:	4601      	mov	r1, r0
 800ac10:	6818      	ldr	r0, [r3, #0]
 800ac12:	f7ff bfd3 	b.w	800abbc <_raise_r>
 800ac16:	bf00      	nop
 800ac18:	20000034 	.word	0x20000034

0800ac1c <_kill_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4d07      	ldr	r5, [pc, #28]	@ (800ac3c <_kill_r+0x20>)
 800ac20:	2300      	movs	r3, #0
 800ac22:	4604      	mov	r4, r0
 800ac24:	4608      	mov	r0, r1
 800ac26:	4611      	mov	r1, r2
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	f7f7 fd49 	bl	80026c0 <_kill>
 800ac2e:	1c43      	adds	r3, r0, #1
 800ac30:	d102      	bne.n	800ac38 <_kill_r+0x1c>
 800ac32:	682b      	ldr	r3, [r5, #0]
 800ac34:	b103      	cbz	r3, 800ac38 <_kill_r+0x1c>
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	bd38      	pop	{r3, r4, r5, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000638 	.word	0x20000638

0800ac40 <_getpid_r>:
 800ac40:	f7f7 bd36 	b.w	80026b0 <_getpid>

0800ac44 <__swhatbuf_r>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	460c      	mov	r4, r1
 800ac48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac4c:	2900      	cmp	r1, #0
 800ac4e:	b096      	sub	sp, #88	@ 0x58
 800ac50:	4615      	mov	r5, r2
 800ac52:	461e      	mov	r6, r3
 800ac54:	da0d      	bge.n	800ac72 <__swhatbuf_r+0x2e>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac5c:	f04f 0100 	mov.w	r1, #0
 800ac60:	bf14      	ite	ne
 800ac62:	2340      	movne	r3, #64	@ 0x40
 800ac64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac68:	2000      	movs	r0, #0
 800ac6a:	6031      	str	r1, [r6, #0]
 800ac6c:	602b      	str	r3, [r5, #0]
 800ac6e:	b016      	add	sp, #88	@ 0x58
 800ac70:	bd70      	pop	{r4, r5, r6, pc}
 800ac72:	466a      	mov	r2, sp
 800ac74:	f000 f848 	bl	800ad08 <_fstat_r>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	dbec      	blt.n	800ac56 <__swhatbuf_r+0x12>
 800ac7c:	9901      	ldr	r1, [sp, #4]
 800ac7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac86:	4259      	negs	r1, r3
 800ac88:	4159      	adcs	r1, r3
 800ac8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac8e:	e7eb      	b.n	800ac68 <__swhatbuf_r+0x24>

0800ac90 <__smakebuf_r>:
 800ac90:	898b      	ldrh	r3, [r1, #12]
 800ac92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac94:	079d      	lsls	r5, r3, #30
 800ac96:	4606      	mov	r6, r0
 800ac98:	460c      	mov	r4, r1
 800ac9a:	d507      	bpl.n	800acac <__smakebuf_r+0x1c>
 800ac9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	6123      	str	r3, [r4, #16]
 800aca4:	2301      	movs	r3, #1
 800aca6:	6163      	str	r3, [r4, #20]
 800aca8:	b003      	add	sp, #12
 800acaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acac:	ab01      	add	r3, sp, #4
 800acae:	466a      	mov	r2, sp
 800acb0:	f7ff ffc8 	bl	800ac44 <__swhatbuf_r>
 800acb4:	9f00      	ldr	r7, [sp, #0]
 800acb6:	4605      	mov	r5, r0
 800acb8:	4639      	mov	r1, r7
 800acba:	4630      	mov	r0, r6
 800acbc:	f7fd fbc4 	bl	8008448 <_malloc_r>
 800acc0:	b948      	cbnz	r0, 800acd6 <__smakebuf_r+0x46>
 800acc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc6:	059a      	lsls	r2, r3, #22
 800acc8:	d4ee      	bmi.n	800aca8 <__smakebuf_r+0x18>
 800acca:	f023 0303 	bic.w	r3, r3, #3
 800acce:	f043 0302 	orr.w	r3, r3, #2
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	e7e2      	b.n	800ac9c <__smakebuf_r+0xc>
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	6020      	str	r0, [r4, #0]
 800acda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acde:	81a3      	strh	r3, [r4, #12]
 800ace0:	9b01      	ldr	r3, [sp, #4]
 800ace2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ace6:	b15b      	cbz	r3, 800ad00 <__smakebuf_r+0x70>
 800ace8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acec:	4630      	mov	r0, r6
 800acee:	f000 f81d 	bl	800ad2c <_isatty_r>
 800acf2:	b128      	cbz	r0, 800ad00 <__smakebuf_r+0x70>
 800acf4:	89a3      	ldrh	r3, [r4, #12]
 800acf6:	f023 0303 	bic.w	r3, r3, #3
 800acfa:	f043 0301 	orr.w	r3, r3, #1
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	431d      	orrs	r5, r3
 800ad04:	81a5      	strh	r5, [r4, #12]
 800ad06:	e7cf      	b.n	800aca8 <__smakebuf_r+0x18>

0800ad08 <_fstat_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d07      	ldr	r5, [pc, #28]	@ (800ad28 <_fstat_r+0x20>)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4604      	mov	r4, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	4611      	mov	r1, r2
 800ad14:	602b      	str	r3, [r5, #0]
 800ad16:	f7f7 fd33 	bl	8002780 <_fstat>
 800ad1a:	1c43      	adds	r3, r0, #1
 800ad1c:	d102      	bne.n	800ad24 <_fstat_r+0x1c>
 800ad1e:	682b      	ldr	r3, [r5, #0]
 800ad20:	b103      	cbz	r3, 800ad24 <_fstat_r+0x1c>
 800ad22:	6023      	str	r3, [r4, #0]
 800ad24:	bd38      	pop	{r3, r4, r5, pc}
 800ad26:	bf00      	nop
 800ad28:	20000638 	.word	0x20000638

0800ad2c <_isatty_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4d06      	ldr	r5, [pc, #24]	@ (800ad48 <_isatty_r+0x1c>)
 800ad30:	2300      	movs	r3, #0
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	602b      	str	r3, [r5, #0]
 800ad38:	f7f7 fd32 	bl	80027a0 <_isatty>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_isatty_r+0x1a>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_isatty_r+0x1a>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	20000638 	.word	0x20000638

0800ad4c <atan2>:
 800ad4c:	f000 b908 	b.w	800af60 <__ieee754_atan2>

0800ad50 <sqrt>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	ed2d 8b02 	vpush	{d8}
 800ad56:	ec55 4b10 	vmov	r4, r5, d0
 800ad5a:	f000 f825 	bl	800ada8 <__ieee754_sqrt>
 800ad5e:	4622      	mov	r2, r4
 800ad60:	462b      	mov	r3, r5
 800ad62:	4620      	mov	r0, r4
 800ad64:	4629      	mov	r1, r5
 800ad66:	eeb0 8a40 	vmov.f32	s16, s0
 800ad6a:	eef0 8a60 	vmov.f32	s17, s1
 800ad6e:	f7f5 fedd 	bl	8000b2c <__aeabi_dcmpun>
 800ad72:	b990      	cbnz	r0, 800ad9a <sqrt+0x4a>
 800ad74:	2200      	movs	r2, #0
 800ad76:	2300      	movs	r3, #0
 800ad78:	4620      	mov	r0, r4
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f7f5 feae 	bl	8000adc <__aeabi_dcmplt>
 800ad80:	b158      	cbz	r0, 800ad9a <sqrt+0x4a>
 800ad82:	f7fc fc5d 	bl	8007640 <__errno>
 800ad86:	2321      	movs	r3, #33	@ 0x21
 800ad88:	6003      	str	r3, [r0, #0]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4610      	mov	r0, r2
 800ad90:	4619      	mov	r1, r3
 800ad92:	f7f5 fd5b 	bl	800084c <__aeabi_ddiv>
 800ad96:	ec41 0b18 	vmov	d8, r0, r1
 800ad9a:	eeb0 0a48 	vmov.f32	s0, s16
 800ad9e:	eef0 0a68 	vmov.f32	s1, s17
 800ada2:	ecbd 8b02 	vpop	{d8}
 800ada6:	bd38      	pop	{r3, r4, r5, pc}

0800ada8 <__ieee754_sqrt>:
 800ada8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	4a68      	ldr	r2, [pc, #416]	@ (800af50 <__ieee754_sqrt+0x1a8>)
 800adae:	ec55 4b10 	vmov	r4, r5, d0
 800adb2:	43aa      	bics	r2, r5
 800adb4:	462b      	mov	r3, r5
 800adb6:	4621      	mov	r1, r4
 800adb8:	d110      	bne.n	800addc <__ieee754_sqrt+0x34>
 800adba:	4622      	mov	r2, r4
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	f7f5 fc1a 	bl	80005f8 <__aeabi_dmul>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	4620      	mov	r0, r4
 800adca:	4629      	mov	r1, r5
 800adcc:	f7f5 fa5e 	bl	800028c <__adddf3>
 800add0:	4604      	mov	r4, r0
 800add2:	460d      	mov	r5, r1
 800add4:	ec45 4b10 	vmov	d0, r4, r5
 800add8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	2d00      	cmp	r5, #0
 800adde:	dc0e      	bgt.n	800adfe <__ieee754_sqrt+0x56>
 800ade0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ade4:	4322      	orrs	r2, r4
 800ade6:	d0f5      	beq.n	800add4 <__ieee754_sqrt+0x2c>
 800ade8:	b19d      	cbz	r5, 800ae12 <__ieee754_sqrt+0x6a>
 800adea:	4622      	mov	r2, r4
 800adec:	4620      	mov	r0, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	f7f5 fa4a 	bl	8000288 <__aeabi_dsub>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	f7f5 fd28 	bl	800084c <__aeabi_ddiv>
 800adfc:	e7e8      	b.n	800add0 <__ieee754_sqrt+0x28>
 800adfe:	152a      	asrs	r2, r5, #20
 800ae00:	d115      	bne.n	800ae2e <__ieee754_sqrt+0x86>
 800ae02:	2000      	movs	r0, #0
 800ae04:	e009      	b.n	800ae1a <__ieee754_sqrt+0x72>
 800ae06:	0acb      	lsrs	r3, r1, #11
 800ae08:	3a15      	subs	r2, #21
 800ae0a:	0549      	lsls	r1, r1, #21
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0fa      	beq.n	800ae06 <__ieee754_sqrt+0x5e>
 800ae10:	e7f7      	b.n	800ae02 <__ieee754_sqrt+0x5a>
 800ae12:	462a      	mov	r2, r5
 800ae14:	e7fa      	b.n	800ae0c <__ieee754_sqrt+0x64>
 800ae16:	005b      	lsls	r3, r3, #1
 800ae18:	3001      	adds	r0, #1
 800ae1a:	02dc      	lsls	r4, r3, #11
 800ae1c:	d5fb      	bpl.n	800ae16 <__ieee754_sqrt+0x6e>
 800ae1e:	1e44      	subs	r4, r0, #1
 800ae20:	1b12      	subs	r2, r2, r4
 800ae22:	f1c0 0420 	rsb	r4, r0, #32
 800ae26:	fa21 f404 	lsr.w	r4, r1, r4
 800ae2a:	4323      	orrs	r3, r4
 800ae2c:	4081      	lsls	r1, r0
 800ae2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae32:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ae36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae3a:	07d2      	lsls	r2, r2, #31
 800ae3c:	bf5c      	itt	pl
 800ae3e:	005b      	lslpl	r3, r3, #1
 800ae40:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ae44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae48:	bf58      	it	pl
 800ae4a:	0049      	lslpl	r1, r1, #1
 800ae4c:	2600      	movs	r6, #0
 800ae4e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ae52:	106d      	asrs	r5, r5, #1
 800ae54:	0049      	lsls	r1, r1, #1
 800ae56:	2016      	movs	r0, #22
 800ae58:	4632      	mov	r2, r6
 800ae5a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ae5e:	1917      	adds	r7, r2, r4
 800ae60:	429f      	cmp	r7, r3
 800ae62:	bfde      	ittt	le
 800ae64:	193a      	addle	r2, r7, r4
 800ae66:	1bdb      	suble	r3, r3, r7
 800ae68:	1936      	addle	r6, r6, r4
 800ae6a:	0fcf      	lsrs	r7, r1, #31
 800ae6c:	3801      	subs	r0, #1
 800ae6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ae72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ae76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ae7a:	d1f0      	bne.n	800ae5e <__ieee754_sqrt+0xb6>
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	2720      	movs	r7, #32
 800ae80:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ae84:	429a      	cmp	r2, r3
 800ae86:	eb00 0e0c 	add.w	lr, r0, ip
 800ae8a:	db02      	blt.n	800ae92 <__ieee754_sqrt+0xea>
 800ae8c:	d113      	bne.n	800aeb6 <__ieee754_sqrt+0x10e>
 800ae8e:	458e      	cmp	lr, r1
 800ae90:	d811      	bhi.n	800aeb6 <__ieee754_sqrt+0x10e>
 800ae92:	f1be 0f00 	cmp.w	lr, #0
 800ae96:	eb0e 000c 	add.w	r0, lr, ip
 800ae9a:	da42      	bge.n	800af22 <__ieee754_sqrt+0x17a>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	db40      	blt.n	800af22 <__ieee754_sqrt+0x17a>
 800aea0:	f102 0801 	add.w	r8, r2, #1
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	458e      	cmp	lr, r1
 800aea8:	bf88      	it	hi
 800aeaa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aeae:	eba1 010e 	sub.w	r1, r1, lr
 800aeb2:	4464      	add	r4, ip
 800aeb4:	4642      	mov	r2, r8
 800aeb6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800aeba:	3f01      	subs	r7, #1
 800aebc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800aec0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aec4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800aec8:	d1dc      	bne.n	800ae84 <__ieee754_sqrt+0xdc>
 800aeca:	4319      	orrs	r1, r3
 800aecc:	d01b      	beq.n	800af06 <__ieee754_sqrt+0x15e>
 800aece:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800af54 <__ieee754_sqrt+0x1ac>
 800aed2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800af58 <__ieee754_sqrt+0x1b0>
 800aed6:	e9da 0100 	ldrd	r0, r1, [sl]
 800aeda:	e9db 2300 	ldrd	r2, r3, [fp]
 800aede:	f7f5 f9d3 	bl	8000288 <__aeabi_dsub>
 800aee2:	e9da 8900 	ldrd	r8, r9, [sl]
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	4640      	mov	r0, r8
 800aeec:	4649      	mov	r1, r9
 800aeee:	f7f5 fdff 	bl	8000af0 <__aeabi_dcmple>
 800aef2:	b140      	cbz	r0, 800af06 <__ieee754_sqrt+0x15e>
 800aef4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800aef8:	e9da 0100 	ldrd	r0, r1, [sl]
 800aefc:	e9db 2300 	ldrd	r2, r3, [fp]
 800af00:	d111      	bne.n	800af26 <__ieee754_sqrt+0x17e>
 800af02:	3601      	adds	r6, #1
 800af04:	463c      	mov	r4, r7
 800af06:	1072      	asrs	r2, r6, #1
 800af08:	0863      	lsrs	r3, r4, #1
 800af0a:	07f1      	lsls	r1, r6, #31
 800af0c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800af10:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800af14:	bf48      	it	mi
 800af16:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800af1a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800af1e:	4618      	mov	r0, r3
 800af20:	e756      	b.n	800add0 <__ieee754_sqrt+0x28>
 800af22:	4690      	mov	r8, r2
 800af24:	e7be      	b.n	800aea4 <__ieee754_sqrt+0xfc>
 800af26:	f7f5 f9b1 	bl	800028c <__adddf3>
 800af2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4640      	mov	r0, r8
 800af34:	4649      	mov	r1, r9
 800af36:	f7f5 fdd1 	bl	8000adc <__aeabi_dcmplt>
 800af3a:	b120      	cbz	r0, 800af46 <__ieee754_sqrt+0x19e>
 800af3c:	1ca0      	adds	r0, r4, #2
 800af3e:	bf08      	it	eq
 800af40:	3601      	addeq	r6, #1
 800af42:	3402      	adds	r4, #2
 800af44:	e7df      	b.n	800af06 <__ieee754_sqrt+0x15e>
 800af46:	1c63      	adds	r3, r4, #1
 800af48:	f023 0401 	bic.w	r4, r3, #1
 800af4c:	e7db      	b.n	800af06 <__ieee754_sqrt+0x15e>
 800af4e:	bf00      	nop
 800af50:	7ff00000 	.word	0x7ff00000
 800af54:	200001f8 	.word	0x200001f8
 800af58:	200001f0 	.word	0x200001f0
 800af5c:	00000000 	.word	0x00000000

0800af60 <__ieee754_atan2>:
 800af60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af64:	ec57 6b11 	vmov	r6, r7, d1
 800af68:	4273      	negs	r3, r6
 800af6a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800b0e8 <__ieee754_atan2+0x188>
 800af6e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800af72:	4333      	orrs	r3, r6
 800af74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800af78:	4543      	cmp	r3, r8
 800af7a:	ec51 0b10 	vmov	r0, r1, d0
 800af7e:	4635      	mov	r5, r6
 800af80:	d809      	bhi.n	800af96 <__ieee754_atan2+0x36>
 800af82:	4244      	negs	r4, r0
 800af84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800af88:	4304      	orrs	r4, r0
 800af8a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800af8e:	4544      	cmp	r4, r8
 800af90:	468e      	mov	lr, r1
 800af92:	4681      	mov	r9, r0
 800af94:	d907      	bls.n	800afa6 <__ieee754_atan2+0x46>
 800af96:	4632      	mov	r2, r6
 800af98:	463b      	mov	r3, r7
 800af9a:	f7f5 f977 	bl	800028c <__adddf3>
 800af9e:	ec41 0b10 	vmov	d0, r0, r1
 800afa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afa6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800afaa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800afae:	4334      	orrs	r4, r6
 800afb0:	d103      	bne.n	800afba <__ieee754_atan2+0x5a>
 800afb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb6:	f000 b89b 	b.w	800b0f0 <atan>
 800afba:	17bc      	asrs	r4, r7, #30
 800afbc:	f004 0402 	and.w	r4, r4, #2
 800afc0:	ea53 0909 	orrs.w	r9, r3, r9
 800afc4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800afc8:	d107      	bne.n	800afda <__ieee754_atan2+0x7a>
 800afca:	2c02      	cmp	r4, #2
 800afcc:	d05f      	beq.n	800b08e <__ieee754_atan2+0x12e>
 800afce:	2c03      	cmp	r4, #3
 800afd0:	d1e5      	bne.n	800af9e <__ieee754_atan2+0x3e>
 800afd2:	a141      	add	r1, pc, #260	@ (adr r1, 800b0d8 <__ieee754_atan2+0x178>)
 800afd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afd8:	e7e1      	b.n	800af9e <__ieee754_atan2+0x3e>
 800afda:	4315      	orrs	r5, r2
 800afdc:	d106      	bne.n	800afec <__ieee754_atan2+0x8c>
 800afde:	f1be 0f00 	cmp.w	lr, #0
 800afe2:	da5f      	bge.n	800b0a4 <__ieee754_atan2+0x144>
 800afe4:	a13e      	add	r1, pc, #248	@ (adr r1, 800b0e0 <__ieee754_atan2+0x180>)
 800afe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afea:	e7d8      	b.n	800af9e <__ieee754_atan2+0x3e>
 800afec:	4542      	cmp	r2, r8
 800afee:	d10f      	bne.n	800b010 <__ieee754_atan2+0xb0>
 800aff0:	4293      	cmp	r3, r2
 800aff2:	f104 34ff 	add.w	r4, r4, #4294967295
 800aff6:	d107      	bne.n	800b008 <__ieee754_atan2+0xa8>
 800aff8:	2c02      	cmp	r4, #2
 800affa:	d84c      	bhi.n	800b096 <__ieee754_atan2+0x136>
 800affc:	4b34      	ldr	r3, [pc, #208]	@ (800b0d0 <__ieee754_atan2+0x170>)
 800affe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b002:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b006:	e7ca      	b.n	800af9e <__ieee754_atan2+0x3e>
 800b008:	2c02      	cmp	r4, #2
 800b00a:	d848      	bhi.n	800b09e <__ieee754_atan2+0x13e>
 800b00c:	4b31      	ldr	r3, [pc, #196]	@ (800b0d4 <__ieee754_atan2+0x174>)
 800b00e:	e7f6      	b.n	800affe <__ieee754_atan2+0x9e>
 800b010:	4543      	cmp	r3, r8
 800b012:	d0e4      	beq.n	800afde <__ieee754_atan2+0x7e>
 800b014:	1a9b      	subs	r3, r3, r2
 800b016:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b01a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b01e:	da1e      	bge.n	800b05e <__ieee754_atan2+0xfe>
 800b020:	2f00      	cmp	r7, #0
 800b022:	da01      	bge.n	800b028 <__ieee754_atan2+0xc8>
 800b024:	323c      	adds	r2, #60	@ 0x3c
 800b026:	db1e      	blt.n	800b066 <__ieee754_atan2+0x106>
 800b028:	4632      	mov	r2, r6
 800b02a:	463b      	mov	r3, r7
 800b02c:	f7f5 fc0e 	bl	800084c <__aeabi_ddiv>
 800b030:	ec41 0b10 	vmov	d0, r0, r1
 800b034:	f000 f9f4 	bl	800b420 <fabs>
 800b038:	f000 f85a 	bl	800b0f0 <atan>
 800b03c:	ec51 0b10 	vmov	r0, r1, d0
 800b040:	2c01      	cmp	r4, #1
 800b042:	d013      	beq.n	800b06c <__ieee754_atan2+0x10c>
 800b044:	2c02      	cmp	r4, #2
 800b046:	d015      	beq.n	800b074 <__ieee754_atan2+0x114>
 800b048:	2c00      	cmp	r4, #0
 800b04a:	d0a8      	beq.n	800af9e <__ieee754_atan2+0x3e>
 800b04c:	a318      	add	r3, pc, #96	@ (adr r3, 800b0b0 <__ieee754_atan2+0x150>)
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	f7f5 f919 	bl	8000288 <__aeabi_dsub>
 800b056:	a318      	add	r3, pc, #96	@ (adr r3, 800b0b8 <__ieee754_atan2+0x158>)
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	e014      	b.n	800b088 <__ieee754_atan2+0x128>
 800b05e:	a118      	add	r1, pc, #96	@ (adr r1, 800b0c0 <__ieee754_atan2+0x160>)
 800b060:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b064:	e7ec      	b.n	800b040 <__ieee754_atan2+0xe0>
 800b066:	2000      	movs	r0, #0
 800b068:	2100      	movs	r1, #0
 800b06a:	e7e9      	b.n	800b040 <__ieee754_atan2+0xe0>
 800b06c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b070:	4619      	mov	r1, r3
 800b072:	e794      	b.n	800af9e <__ieee754_atan2+0x3e>
 800b074:	a30e      	add	r3, pc, #56	@ (adr r3, 800b0b0 <__ieee754_atan2+0x150>)
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	f7f5 f905 	bl	8000288 <__aeabi_dsub>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	a10d      	add	r1, pc, #52	@ (adr r1, 800b0b8 <__ieee754_atan2+0x158>)
 800b084:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b088:	f7f5 f8fe 	bl	8000288 <__aeabi_dsub>
 800b08c:	e787      	b.n	800af9e <__ieee754_atan2+0x3e>
 800b08e:	a10a      	add	r1, pc, #40	@ (adr r1, 800b0b8 <__ieee754_atan2+0x158>)
 800b090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b094:	e783      	b.n	800af9e <__ieee754_atan2+0x3e>
 800b096:	a10c      	add	r1, pc, #48	@ (adr r1, 800b0c8 <__ieee754_atan2+0x168>)
 800b098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b09c:	e77f      	b.n	800af9e <__ieee754_atan2+0x3e>
 800b09e:	2000      	movs	r0, #0
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	e77c      	b.n	800af9e <__ieee754_atan2+0x3e>
 800b0a4:	a106      	add	r1, pc, #24	@ (adr r1, 800b0c0 <__ieee754_atan2+0x160>)
 800b0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0aa:	e778      	b.n	800af9e <__ieee754_atan2+0x3e>
 800b0ac:	f3af 8000 	nop.w
 800b0b0:	33145c07 	.word	0x33145c07
 800b0b4:	3ca1a626 	.word	0x3ca1a626
 800b0b8:	54442d18 	.word	0x54442d18
 800b0bc:	400921fb 	.word	0x400921fb
 800b0c0:	54442d18 	.word	0x54442d18
 800b0c4:	3ff921fb 	.word	0x3ff921fb
 800b0c8:	54442d18 	.word	0x54442d18
 800b0cc:	3fe921fb 	.word	0x3fe921fb
 800b0d0:	0800b8a8 	.word	0x0800b8a8
 800b0d4:	0800b890 	.word	0x0800b890
 800b0d8:	54442d18 	.word	0x54442d18
 800b0dc:	c00921fb 	.word	0xc00921fb
 800b0e0:	54442d18 	.word	0x54442d18
 800b0e4:	bff921fb 	.word	0xbff921fb
 800b0e8:	7ff00000 	.word	0x7ff00000
 800b0ec:	00000000 	.word	0x00000000

0800b0f0 <atan>:
 800b0f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	ec55 4b10 	vmov	r4, r5, d0
 800b0f8:	4bbf      	ldr	r3, [pc, #764]	@ (800b3f8 <atan+0x308>)
 800b0fa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b0fe:	429e      	cmp	r6, r3
 800b100:	46ab      	mov	fp, r5
 800b102:	d918      	bls.n	800b136 <atan+0x46>
 800b104:	4bbd      	ldr	r3, [pc, #756]	@ (800b3fc <atan+0x30c>)
 800b106:	429e      	cmp	r6, r3
 800b108:	d801      	bhi.n	800b10e <atan+0x1e>
 800b10a:	d109      	bne.n	800b120 <atan+0x30>
 800b10c:	b144      	cbz	r4, 800b120 <atan+0x30>
 800b10e:	4622      	mov	r2, r4
 800b110:	462b      	mov	r3, r5
 800b112:	4620      	mov	r0, r4
 800b114:	4629      	mov	r1, r5
 800b116:	f7f5 f8b9 	bl	800028c <__adddf3>
 800b11a:	4604      	mov	r4, r0
 800b11c:	460d      	mov	r5, r1
 800b11e:	e006      	b.n	800b12e <atan+0x3e>
 800b120:	f1bb 0f00 	cmp.w	fp, #0
 800b124:	f340 812b 	ble.w	800b37e <atan+0x28e>
 800b128:	a597      	add	r5, pc, #604	@ (adr r5, 800b388 <atan+0x298>)
 800b12a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b12e:	ec45 4b10 	vmov	d0, r4, r5
 800b132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b136:	4bb2      	ldr	r3, [pc, #712]	@ (800b400 <atan+0x310>)
 800b138:	429e      	cmp	r6, r3
 800b13a:	d813      	bhi.n	800b164 <atan+0x74>
 800b13c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b140:	429e      	cmp	r6, r3
 800b142:	d80c      	bhi.n	800b15e <atan+0x6e>
 800b144:	a392      	add	r3, pc, #584	@ (adr r3, 800b390 <atan+0x2a0>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	4620      	mov	r0, r4
 800b14c:	4629      	mov	r1, r5
 800b14e:	f7f5 f89d 	bl	800028c <__adddf3>
 800b152:	4bac      	ldr	r3, [pc, #688]	@ (800b404 <atan+0x314>)
 800b154:	2200      	movs	r2, #0
 800b156:	f7f5 fcdf 	bl	8000b18 <__aeabi_dcmpgt>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d1e7      	bne.n	800b12e <atan+0x3e>
 800b15e:	f04f 3aff 	mov.w	sl, #4294967295
 800b162:	e029      	b.n	800b1b8 <atan+0xc8>
 800b164:	f000 f95c 	bl	800b420 <fabs>
 800b168:	4ba7      	ldr	r3, [pc, #668]	@ (800b408 <atan+0x318>)
 800b16a:	429e      	cmp	r6, r3
 800b16c:	ec55 4b10 	vmov	r4, r5, d0
 800b170:	f200 80bc 	bhi.w	800b2ec <atan+0x1fc>
 800b174:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b178:	429e      	cmp	r6, r3
 800b17a:	f200 809e 	bhi.w	800b2ba <atan+0x1ca>
 800b17e:	4622      	mov	r2, r4
 800b180:	462b      	mov	r3, r5
 800b182:	4620      	mov	r0, r4
 800b184:	4629      	mov	r1, r5
 800b186:	f7f5 f881 	bl	800028c <__adddf3>
 800b18a:	4b9e      	ldr	r3, [pc, #632]	@ (800b404 <atan+0x314>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	f7f5 f87b 	bl	8000288 <__aeabi_dsub>
 800b192:	2200      	movs	r2, #0
 800b194:	4606      	mov	r6, r0
 800b196:	460f      	mov	r7, r1
 800b198:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b19c:	4620      	mov	r0, r4
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7f5 f874 	bl	800028c <__adddf3>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f7f5 fb4e 	bl	800084c <__aeabi_ddiv>
 800b1b0:	f04f 0a00 	mov.w	sl, #0
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	460d      	mov	r5, r1
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	462b      	mov	r3, r5
 800b1bc:	4620      	mov	r0, r4
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f7f5 fa1a 	bl	80005f8 <__aeabi_dmul>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4680      	mov	r8, r0
 800b1ca:	4689      	mov	r9, r1
 800b1cc:	f7f5 fa14 	bl	80005f8 <__aeabi_dmul>
 800b1d0:	a371      	add	r3, pc, #452	@ (adr r3, 800b398 <atan+0x2a8>)
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	460f      	mov	r7, r1
 800b1da:	f7f5 fa0d 	bl	80005f8 <__aeabi_dmul>
 800b1de:	a370      	add	r3, pc, #448	@ (adr r3, 800b3a0 <atan+0x2b0>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f7f5 f852 	bl	800028c <__adddf3>
 800b1e8:	4632      	mov	r2, r6
 800b1ea:	463b      	mov	r3, r7
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	a36d      	add	r3, pc, #436	@ (adr r3, 800b3a8 <atan+0x2b8>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f7f5 f849 	bl	800028c <__adddf3>
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	463b      	mov	r3, r7
 800b1fe:	f7f5 f9fb 	bl	80005f8 <__aeabi_dmul>
 800b202:	a36b      	add	r3, pc, #428	@ (adr r3, 800b3b0 <atan+0x2c0>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	f7f5 f840 	bl	800028c <__adddf3>
 800b20c:	4632      	mov	r2, r6
 800b20e:	463b      	mov	r3, r7
 800b210:	f7f5 f9f2 	bl	80005f8 <__aeabi_dmul>
 800b214:	a368      	add	r3, pc, #416	@ (adr r3, 800b3b8 <atan+0x2c8>)
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	f7f5 f837 	bl	800028c <__adddf3>
 800b21e:	4632      	mov	r2, r6
 800b220:	463b      	mov	r3, r7
 800b222:	f7f5 f9e9 	bl	80005f8 <__aeabi_dmul>
 800b226:	a366      	add	r3, pc, #408	@ (adr r3, 800b3c0 <atan+0x2d0>)
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f7f5 f82e 	bl	800028c <__adddf3>
 800b230:	4642      	mov	r2, r8
 800b232:	464b      	mov	r3, r9
 800b234:	f7f5 f9e0 	bl	80005f8 <__aeabi_dmul>
 800b238:	a363      	add	r3, pc, #396	@ (adr r3, 800b3c8 <atan+0x2d8>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	4680      	mov	r8, r0
 800b240:	4689      	mov	r9, r1
 800b242:	4630      	mov	r0, r6
 800b244:	4639      	mov	r1, r7
 800b246:	f7f5 f9d7 	bl	80005f8 <__aeabi_dmul>
 800b24a:	a361      	add	r3, pc, #388	@ (adr r3, 800b3d0 <atan+0x2e0>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f81a 	bl	8000288 <__aeabi_dsub>
 800b254:	4632      	mov	r2, r6
 800b256:	463b      	mov	r3, r7
 800b258:	f7f5 f9ce 	bl	80005f8 <__aeabi_dmul>
 800b25c:	a35e      	add	r3, pc, #376	@ (adr r3, 800b3d8 <atan+0x2e8>)
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	f7f5 f811 	bl	8000288 <__aeabi_dsub>
 800b266:	4632      	mov	r2, r6
 800b268:	463b      	mov	r3, r7
 800b26a:	f7f5 f9c5 	bl	80005f8 <__aeabi_dmul>
 800b26e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b3e0 <atan+0x2f0>)
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f7f5 f808 	bl	8000288 <__aeabi_dsub>
 800b278:	4632      	mov	r2, r6
 800b27a:	463b      	mov	r3, r7
 800b27c:	f7f5 f9bc 	bl	80005f8 <__aeabi_dmul>
 800b280:	a359      	add	r3, pc, #356	@ (adr r3, 800b3e8 <atan+0x2f8>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f7f4 ffff 	bl	8000288 <__aeabi_dsub>
 800b28a:	4632      	mov	r2, r6
 800b28c:	463b      	mov	r3, r7
 800b28e:	f7f5 f9b3 	bl	80005f8 <__aeabi_dmul>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4640      	mov	r0, r8
 800b298:	4649      	mov	r1, r9
 800b29a:	f7f4 fff7 	bl	800028c <__adddf3>
 800b29e:	4622      	mov	r2, r4
 800b2a0:	462b      	mov	r3, r5
 800b2a2:	f7f5 f9a9 	bl	80005f8 <__aeabi_dmul>
 800b2a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	d148      	bne.n	800b342 <atan+0x252>
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	f7f4 ffe8 	bl	8000288 <__aeabi_dsub>
 800b2b8:	e72f      	b.n	800b11a <atan+0x2a>
 800b2ba:	4b52      	ldr	r3, [pc, #328]	@ (800b404 <atan+0x314>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	f7f4 ffe1 	bl	8000288 <__aeabi_dsub>
 800b2c6:	4b4f      	ldr	r3, [pc, #316]	@ (800b404 <atan+0x314>)
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	460f      	mov	r7, r1
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	f7f4 ffdb 	bl	800028c <__adddf3>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4630      	mov	r0, r6
 800b2dc:	4639      	mov	r1, r7
 800b2de:	f7f5 fab5 	bl	800084c <__aeabi_ddiv>
 800b2e2:	f04f 0a01 	mov.w	sl, #1
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	460d      	mov	r5, r1
 800b2ea:	e765      	b.n	800b1b8 <atan+0xc8>
 800b2ec:	4b47      	ldr	r3, [pc, #284]	@ (800b40c <atan+0x31c>)
 800b2ee:	429e      	cmp	r6, r3
 800b2f0:	d21c      	bcs.n	800b32c <atan+0x23c>
 800b2f2:	4b47      	ldr	r3, [pc, #284]	@ (800b410 <atan+0x320>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7f4 ffc5 	bl	8000288 <__aeabi_dsub>
 800b2fe:	4b44      	ldr	r3, [pc, #272]	@ (800b410 <atan+0x320>)
 800b300:	4606      	mov	r6, r0
 800b302:	460f      	mov	r7, r1
 800b304:	2200      	movs	r2, #0
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f5 f975 	bl	80005f8 <__aeabi_dmul>
 800b30e:	4b3d      	ldr	r3, [pc, #244]	@ (800b404 <atan+0x314>)
 800b310:	2200      	movs	r2, #0
 800b312:	f7f4 ffbb 	bl	800028c <__adddf3>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f5 fa95 	bl	800084c <__aeabi_ddiv>
 800b322:	f04f 0a02 	mov.w	sl, #2
 800b326:	4604      	mov	r4, r0
 800b328:	460d      	mov	r5, r1
 800b32a:	e745      	b.n	800b1b8 <atan+0xc8>
 800b32c:	4622      	mov	r2, r4
 800b32e:	462b      	mov	r3, r5
 800b330:	4938      	ldr	r1, [pc, #224]	@ (800b414 <atan+0x324>)
 800b332:	2000      	movs	r0, #0
 800b334:	f7f5 fa8a 	bl	800084c <__aeabi_ddiv>
 800b338:	f04f 0a03 	mov.w	sl, #3
 800b33c:	4604      	mov	r4, r0
 800b33e:	460d      	mov	r5, r1
 800b340:	e73a      	b.n	800b1b8 <atan+0xc8>
 800b342:	4b35      	ldr	r3, [pc, #212]	@ (800b418 <atan+0x328>)
 800b344:	4e35      	ldr	r6, [pc, #212]	@ (800b41c <atan+0x32c>)
 800b346:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f7f4 ff9b 	bl	8000288 <__aeabi_dsub>
 800b352:	4622      	mov	r2, r4
 800b354:	462b      	mov	r3, r5
 800b356:	f7f4 ff97 	bl	8000288 <__aeabi_dsub>
 800b35a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b366:	f7f4 ff8f 	bl	8000288 <__aeabi_dsub>
 800b36a:	f1bb 0f00 	cmp.w	fp, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	460d      	mov	r5, r1
 800b372:	f6bf aedc 	bge.w	800b12e <atan+0x3e>
 800b376:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b37a:	461d      	mov	r5, r3
 800b37c:	e6d7      	b.n	800b12e <atan+0x3e>
 800b37e:	a51c      	add	r5, pc, #112	@ (adr r5, 800b3f0 <atan+0x300>)
 800b380:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b384:	e6d3      	b.n	800b12e <atan+0x3e>
 800b386:	bf00      	nop
 800b388:	54442d18 	.word	0x54442d18
 800b38c:	3ff921fb 	.word	0x3ff921fb
 800b390:	8800759c 	.word	0x8800759c
 800b394:	7e37e43c 	.word	0x7e37e43c
 800b398:	e322da11 	.word	0xe322da11
 800b39c:	3f90ad3a 	.word	0x3f90ad3a
 800b3a0:	24760deb 	.word	0x24760deb
 800b3a4:	3fa97b4b 	.word	0x3fa97b4b
 800b3a8:	a0d03d51 	.word	0xa0d03d51
 800b3ac:	3fb10d66 	.word	0x3fb10d66
 800b3b0:	c54c206e 	.word	0xc54c206e
 800b3b4:	3fb745cd 	.word	0x3fb745cd
 800b3b8:	920083ff 	.word	0x920083ff
 800b3bc:	3fc24924 	.word	0x3fc24924
 800b3c0:	5555550d 	.word	0x5555550d
 800b3c4:	3fd55555 	.word	0x3fd55555
 800b3c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b3cc:	bfa2b444 	.word	0xbfa2b444
 800b3d0:	52defd9a 	.word	0x52defd9a
 800b3d4:	3fadde2d 	.word	0x3fadde2d
 800b3d8:	af749a6d 	.word	0xaf749a6d
 800b3dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b3e0:	fe231671 	.word	0xfe231671
 800b3e4:	3fbc71c6 	.word	0x3fbc71c6
 800b3e8:	9998ebc4 	.word	0x9998ebc4
 800b3ec:	3fc99999 	.word	0x3fc99999
 800b3f0:	54442d18 	.word	0x54442d18
 800b3f4:	bff921fb 	.word	0xbff921fb
 800b3f8:	440fffff 	.word	0x440fffff
 800b3fc:	7ff00000 	.word	0x7ff00000
 800b400:	3fdbffff 	.word	0x3fdbffff
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	3ff2ffff 	.word	0x3ff2ffff
 800b40c:	40038000 	.word	0x40038000
 800b410:	3ff80000 	.word	0x3ff80000
 800b414:	bff00000 	.word	0xbff00000
 800b418:	0800b8c0 	.word	0x0800b8c0
 800b41c:	0800b8e0 	.word	0x0800b8e0

0800b420 <fabs>:
 800b420:	ec51 0b10 	vmov	r0, r1, d0
 800b424:	4602      	mov	r2, r0
 800b426:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b42a:	ec43 2b10 	vmov	d0, r2, r3
 800b42e:	4770      	bx	lr

0800b430 <_init>:
 800b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b432:	bf00      	nop
 800b434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b436:	bc08      	pop	{r3}
 800b438:	469e      	mov	lr, r3
 800b43a:	4770      	bx	lr

0800b43c <_fini>:
 800b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43e:	bf00      	nop
 800b440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b442:	bc08      	pop	{r3}
 800b444:	469e      	mov	lr, r3
 800b446:	4770      	bx	lr


ACCE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afa0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800b130  0800b130  0000c130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5e8  0800b5e8  0000d200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5e8  0800b5e8  0000c5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f0  0800b5f0  0000d200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f0  0800b5f0  0000c5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f4  0800b5f4  0000c5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800b5f8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d200  2**0
                  CONTENTS
 10 .bss          000003f0  20000200  20000200  0000d200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005f0  200005f0  0000d200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbda  00000000  00000000  0000d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b2  00000000  00000000  0001ce0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  0001efc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd9  00000000  00000000  0001fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022535  00000000  00000000  00020ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d94  00000000  00000000  00042ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfcbe  00000000  00000000  00053d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123a48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000566c  00000000  00000000  00123a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  001290f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b118 	.word	0x0800b118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800b118 	.word	0x0800b118

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <HAL_TIM_IC_CaptureCallback>:

void stabilize_motor_output(void);

void motor_value_control(void);
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a94      	ldr	r2, [pc, #592]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	f040 8121 	bne.w	800123a <HAL_TIM_IC_CaptureCallback+0x256>
	{
		switch(htim->Channel)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7f1b      	ldrb	r3, [r3, #28]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	f200 811a 	bhi.w	8001238 <HAL_TIM_IC_CaptureCallback+0x254>
 8001004:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100a:	bf00      	nop
 800100c:	0800102d 	.word	0x0800102d
 8001010:	080010ad 	.word	0x080010ad
 8001014:	08001239 	.word	0x08001239
 8001018:	08001131 	.word	0x08001131
 800101c:	08001239 	.word	0x08001239
 8001020:	08001239 	.word	0x08001239
 8001024:	08001239 	.word	0x08001239
 8001028:	080011b5 	.word	0x080011b5
		{
		case HAL_TIM_ACTIVE_CHANNEL_1:
			if((TIM1->CCER & TIM_CCER_CC1P)==0)
 800102c:	4b85      	ldr	r3, [pc, #532]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10a      	bne.n	800104e <HAL_TIM_IC_CaptureCallback+0x6a>
			{
				ch1_rising = TIM1->CCR1;
 8001038:	4b82      	ldr	r3, [pc, #520]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 800103a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800103c:	4a82      	ldr	r2, [pc, #520]	@ (8001248 <HAL_TIM_IC_CaptureCallback+0x264>)
 800103e:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC1P;
 8001040:	4b80      	ldr	r3, [pc, #512]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a7f      	ldr	r2, [pc, #508]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	6213      	str	r3, [r2, #32]
				 * ch1 falling 570
				 * pre_ch1 = pre_ch1 falling - pre_ch1_rising = 570 - 65000 = -64430
				 * pre_ch1 +=0xFFFF(65536) --> 1106
				 */
			}
			break;
 800104c:	e0f5      	b.n	800123a <HAL_TIM_IC_CaptureCallback+0x256>
				ch1_falling = TIM1->CCR1;
 800104e:	4b7d      	ldr	r3, [pc, #500]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001052:	4a7e      	ldr	r2, [pc, #504]	@ (800124c <HAL_TIM_IC_CaptureCallback+0x268>)
 8001054:	6013      	str	r3, [r2, #0]
				pre_ch1 = ch1_falling - ch1_rising;
 8001056:	4b7d      	ldr	r3, [pc, #500]	@ (800124c <HAL_TIM_IC_CaptureCallback+0x268>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b7b      	ldr	r3, [pc, #492]	@ (8001248 <HAL_TIM_IC_CaptureCallback+0x264>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4a7b      	ldr	r2, [pc, #492]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001062:	6013      	str	r3, [r2, #0]
				pre_ch1 = degree_change_percentage(pre_ch1, 2140, 3862, 0,1000);
 8001064:	4b7a      	ldr	r3, [pc, #488]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	b298      	uxth	r0, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2300      	movs	r3, #0
 8001072:	f640 7216 	movw	r2, #3862	@ 0xf16
 8001076:	f640 015c 	movw	r1, #2140	@ 0x85c
 800107a:	f000 fddd 	bl	8001c38 <degree_change_percentage>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b73      	ldr	r3, [pc, #460]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001084:	601a      	str	r2, [r3, #0]
				if(pre_ch1 <= 1000 && pre_ch1 >= 0)rec_roll=pre_ch1;
 8001086:	4b72      	ldr	r3, [pc, #456]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800108e:	d806      	bhi.n	800109e <HAL_TIM_IC_CaptureCallback+0xba>
 8001090:	4b6f      	ldr	r3, [pc, #444]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4b6e      	ldr	r3, [pc, #440]	@ (8001250 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b6e      	ldr	r3, [pc, #440]	@ (8001254 <HAL_TIM_IC_CaptureCallback+0x270>)
 800109c:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC1P;
 800109e:	4b69      	ldr	r3, [pc, #420]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80010a0:	6a1b      	ldr	r3, [r3, #32]
 80010a2:	4a68      	ldr	r2, [pc, #416]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80010a4:	f023 0302 	bic.w	r3, r3, #2
 80010a8:	6213      	str	r3, [r2, #32]
			break;
 80010aa:	e0c6      	b.n	800123a <HAL_TIM_IC_CaptureCallback+0x256>
		case HAL_TIM_ACTIVE_CHANNEL_2:
			if((TIM1->CCER & TIM_CCER_CC2P)==0)
 80010ac:	4b65      	ldr	r3, [pc, #404]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	f003 0320 	and.w	r3, r3, #32
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10a      	bne.n	80010ce <HAL_TIM_IC_CaptureCallback+0xea>
			{
				ch2_rising = TIM1->CCR2;
 80010b8:	4b62      	ldr	r3, [pc, #392]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80010ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010bc:	4a66      	ldr	r2, [pc, #408]	@ (8001258 <HAL_TIM_IC_CaptureCallback+0x274>)
 80010be:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC2P;
 80010c0:	4b60      	ldr	r3, [pc, #384]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a5f      	ldr	r2, [pc, #380]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80010c6:	f043 0320 	orr.w	r3, r3, #32
 80010ca:	6213      	str	r3, [r2, #32]
				if(pre_ch2 < 0)pre_ch2 += 0xFFFF;
				pre_ch2 = degree_change_percentage(pre_ch2, 2140, 3862, 0, 1000);
				if(pre_ch2 <= 1000 && pre_ch2 >= 0)rec_pitch=pre_ch2;
				TIM1->CCER &= ~TIM_CCER_CC2P;
			}
			break;
 80010cc:	e0b5      	b.n	800123a <HAL_TIM_IC_CaptureCallback+0x256>
				ch2_falling = TIM1->CCR2;
 80010ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80010d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010d2:	4a62      	ldr	r2, [pc, #392]	@ (800125c <HAL_TIM_IC_CaptureCallback+0x278>)
 80010d4:	6013      	str	r3, [r2, #0]
				pre_ch2 = ch2_falling - ch2_rising;
 80010d6:	4b61      	ldr	r3, [pc, #388]	@ (800125c <HAL_TIM_IC_CaptureCallback+0x278>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4b5f      	ldr	r3, [pc, #380]	@ (8001258 <HAL_TIM_IC_CaptureCallback+0x274>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	4a5f      	ldr	r2, [pc, #380]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80010e2:	6013      	str	r3, [r2, #0]
				if(pre_ch2 < 0)pre_ch2 += 0xFFFF;
 80010e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
				pre_ch2 = degree_change_percentage(pre_ch2, 2140, 3862, 0, 1000);
 80010e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	b298      	uxth	r0, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2300      	movs	r3, #0
 80010f6:	f640 7216 	movw	r2, #3862	@ 0xf16
 80010fa:	f640 015c 	movw	r1, #2140	@ 0x85c
 80010fe:	f000 fd9b 	bl	8001c38 <degree_change_percentage>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b56      	ldr	r3, [pc, #344]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001108:	601a      	str	r2, [r3, #0]
				if(pre_ch2 <= 1000 && pre_ch2 >= 0)rec_pitch=pre_ch2;
 800110a:	4b55      	ldr	r3, [pc, #340]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001112:	d806      	bhi.n	8001122 <HAL_TIM_IC_CaptureCallback+0x13e>
 8001114:	4b52      	ldr	r3, [pc, #328]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4b51      	ldr	r3, [pc, #324]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b51      	ldr	r3, [pc, #324]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001120:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC2P;
 8001122:	4b48      	ldr	r3, [pc, #288]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4a47      	ldr	r2, [pc, #284]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001128:	f023 0320 	bic.w	r3, r3, #32
 800112c:	6213      	str	r3, [r2, #32]
			break;
 800112e:	e084      	b.n	800123a <HAL_TIM_IC_CaptureCallback+0x256>
		case HAL_TIM_ACTIVE_CHANNEL_3:
			if((TIM1->CCER & TIM_CCER_CC3P)==0)
 8001130:	4b44      	ldr	r3, [pc, #272]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10a      	bne.n	8001152 <HAL_TIM_IC_CaptureCallback+0x16e>
			{
				ch3_rising = TIM1->CCR3;
 800113c:	4b41      	ldr	r3, [pc, #260]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 800113e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001140:	4a49      	ldr	r2, [pc, #292]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001142:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC3P;
 8001144:	4b3f      	ldr	r3, [pc, #252]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4a3e      	ldr	r2, [pc, #248]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800114e:	6213      	str	r3, [r2, #32]
				if(pre_ch3 < 0)pre_ch3 += 0xFFFF;
				pre_ch3 = degree_change_percentage(pre_ch3, 2140, 3862, 0, 1000);
				if(pre_ch3 <= 1000 && pre_ch3 >= 0)rec_throttle=pre_ch3;
				TIM1->CCER &= ~TIM_CCER_CC3P;
			}
			break;
 8001150:	e073      	b.n	800123a <HAL_TIM_IC_CaptureCallback+0x256>
				ch3_falling = TIM1->CCR3;
 8001152:	4b3c      	ldr	r3, [pc, #240]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001156:	4a45      	ldr	r2, [pc, #276]	@ (800126c <HAL_TIM_IC_CaptureCallback+0x288>)
 8001158:	6013      	str	r3, [r2, #0]
				pre_ch3 = ch3_falling - ch3_rising;
 800115a:	4b44      	ldr	r3, [pc, #272]	@ (800126c <HAL_TIM_IC_CaptureCallback+0x288>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b42      	ldr	r3, [pc, #264]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	4a42      	ldr	r2, [pc, #264]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001166:	6013      	str	r3, [r2, #0]
				if(pre_ch3 < 0)pre_ch3 += 0xFFFF;
 8001168:	4b41      	ldr	r3, [pc, #260]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800116a:	681b      	ldr	r3, [r3, #0]
				pre_ch3 = degree_change_percentage(pre_ch3, 2140, 3862, 0, 1000);
 800116c:	4b40      	ldr	r3, [pc, #256]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b298      	uxth	r0, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	f640 7216 	movw	r2, #3862	@ 0xf16
 800117e:	f640 015c 	movw	r1, #2140	@ 0x85c
 8001182:	f000 fd59 	bl	8001c38 <degree_change_percentage>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b39      	ldr	r3, [pc, #228]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800118c:	601a      	str	r2, [r3, #0]
				if(pre_ch3 <= 1000 && pre_ch3 >= 0)rec_throttle=pre_ch3;
 800118e:	4b38      	ldr	r3, [pc, #224]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001196:	d806      	bhi.n	80011a6 <HAL_TIM_IC_CaptureCallback+0x1c2>
 8001198:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4b34      	ldr	r3, [pc, #208]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b34      	ldr	r3, [pc, #208]	@ (8001274 <HAL_TIM_IC_CaptureCallback+0x290>)
 80011a4:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC3P;
 80011a6:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80011b0:	6213      	str	r3, [r2, #32]
			break;
 80011b2:	e042      	b.n	800123a <HAL_TIM_IC_CaptureCallback+0x256>
		case HAL_TIM_ACTIVE_CHANNEL_4:
			if((TIM1->CCER & TIM_CCER_CC4P)==0)
 80011b4:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10a      	bne.n	80011d6 <HAL_TIM_IC_CaptureCallback+0x1f2>
			{
				ch4_rising = TIM1->CCR4;
 80011c0:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0x294>)
 80011c6:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC4P;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011d2:	6213      	str	r3, [r2, #32]
				if(pre_ch4 < 0)pre_ch4 += 0xFFFF;
				pre_ch4 = degree_change_percentage(pre_ch4, 2140, 3862, 0, 1000);
				if(pre_ch4 <= 1000 && pre_ch4 >= 0)rec_yaw=pre_ch4;
				TIM1->CCER &= ~TIM_CCER_CC4P;
			}
			break;
 80011d4:	e031      	b.n	800123a <HAL_TIM_IC_CaptureCallback+0x256>
				ch4_falling = TIM1->CCR4;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	4a28      	ldr	r2, [pc, #160]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x298>)
 80011dc:	6013      	str	r3, [r2, #0]
				pre_ch4 = ch4_falling - ch4_rising;
 80011de:	4b27      	ldr	r3, [pc, #156]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x298>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0x294>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	4a25      	ldr	r2, [pc, #148]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80011ea:	6013      	str	r3, [r2, #0]
				if(pre_ch4 < 0)pre_ch4 += 0xFFFF;
 80011ec:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
				pre_ch4 = degree_change_percentage(pre_ch4, 2140, 3862, 0, 1000);
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	b298      	uxth	r0, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	f640 7216 	movw	r2, #3862	@ 0xf16
 8001202:	f640 015c 	movw	r1, #2140	@ 0x85c
 8001206:	f000 fd17 	bl	8001c38 <degree_change_percentage>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001210:	601a      	str	r2, [r3, #0]
				if(pre_ch4 <= 1000 && pre_ch4 >= 0)rec_yaw=pre_ch4;
 8001212:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800121a:	d806      	bhi.n	800122a <HAL_TIM_IC_CaptureCallback+0x246>
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001228:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC4P;
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001234:	6213      	str	r3, [r2, #32]
			break;
 8001236:	e000      	b.n	800123a <HAL_TIM_IC_CaptureCallback+0x256>
		default:
			break;
 8001238:	bf00      	nop
		}
	}
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40010000 	.word	0x40010000
 8001248:	200003ac 	.word	0x200003ac
 800124c:	200003bc 	.word	0x200003bc
 8001250:	200003cc 	.word	0x200003cc
 8001254:	20000422 	.word	0x20000422
 8001258:	200003b0 	.word	0x200003b0
 800125c:	200003c0 	.word	0x200003c0
 8001260:	200003d0 	.word	0x200003d0
 8001264:	20000430 	.word	0x20000430
 8001268:	200003b4 	.word	0x200003b4
 800126c:	200003c4 	.word	0x200003c4
 8001270:	200003d4 	.word	0x200003d4
 8001274:	20000434 	.word	0x20000434
 8001278:	200003b8 	.word	0x200003b8
 800127c:	200003c8 	.word	0x200003c8
 8001280:	200003d8 	.word	0x200003d8
 8001284:	20000432 	.word	0x20000432

08001288 <acces_measure>:

void acces_measure(void)
{
 8001288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800128c:	af00      	add	r7, sp, #0
	if(drdyFlag == 1)
 800128e:	4b5c      	ldr	r3, [pc, #368]	@ (8001400 <acces_measure+0x178>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d173      	bne.n	800137e <acces_measure+0xf6>
	{

		drdyFlag = 0;
 8001296:	4b5a      	ldr	r3, [pc, #360]	@ (8001400 <acces_measure+0x178>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
		X = LIS3DSH_GetDataScaled();
 800129c:	f004 ff22 	bl	80060e4 <LIS3DSH_GetDataScaled>
 80012a0:	eeb0 7a40 	vmov.f32	s14, s0
 80012a4:	eef0 7a60 	vmov.f32	s15, s1
 80012a8:	4b56      	ldr	r3, [pc, #344]	@ (8001404 <acces_measure+0x17c>)
 80012aa:	ed83 7b00 	vstr	d7, [r3]
		Y = LIS3DSH_GetDataScaledY();
 80012ae:	f004 ff55 	bl	800615c <LIS3DSH_GetDataScaledY>
 80012b2:	eeb0 7a40 	vmov.f32	s14, s0
 80012b6:	eef0 7a60 	vmov.f32	s15, s1
 80012ba:	4b53      	ldr	r3, [pc, #332]	@ (8001408 <acces_measure+0x180>)
 80012bc:	ed83 7b00 	vstr	d7, [r3]
		Z = LIS3DSH_GetDataScaledZ();
 80012c0:	f004 ff88 	bl	80061d4 <LIS3DSH_GetDataScaledZ>
 80012c4:	eeb0 7a40 	vmov.f32	s14, s0
 80012c8:	eef0 7a60 	vmov.f32	s15, s1
 80012cc:	4b4f      	ldr	r3, [pc, #316]	@ (800140c <acces_measure+0x184>)
 80012ce:	ed83 7b00 	vstr	d7, [r3]

		measured_roll = (int)((((atan2((double)(-X.x) , sqrt((double)Y.y *(double) Y.y +(double) Z.z *(double) Z.z)) * 57.3)+1.5))* -1);
 80012d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001404 <acces_measure+0x17c>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	4692      	mov	sl, r2
 80012da:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80012de:	4b4a      	ldr	r3, [pc, #296]	@ (8001408 <acces_measure+0x180>)
 80012e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e4:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <acces_measure+0x180>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f985 	bl	80005f8 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4690      	mov	r8, r2
 80012f4:	4699      	mov	r9, r3
 80012f6:	4b45      	ldr	r3, [pc, #276]	@ (800140c <acces_measure+0x184>)
 80012f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fc:	4b43      	ldr	r3, [pc, #268]	@ (800140c <acces_measure+0x184>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f979 	bl	80005f8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4640      	mov	r0, r8
 800130c:	4649      	mov	r1, r9
 800130e:	f7fe ffbd 	bl	800028c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	ec43 2b17 	vmov	d7, r2, r3
 800131a:	eeb0 0a47 	vmov.f32	s0, s14
 800131e:	eef0 0a67 	vmov.f32	s1, s15
 8001322:	f009 fb89 	bl	800aa38 <sqrt>
 8001326:	eeb0 7a40 	vmov.f32	s14, s0
 800132a:	eef0 7a60 	vmov.f32	s15, s1
 800132e:	eeb0 1a47 	vmov.f32	s2, s14
 8001332:	eef0 1a67 	vmov.f32	s3, s15
 8001336:	ec4b ab10 	vmov	d0, sl, fp
 800133a:	f009 fb7b 	bl	800aa34 <atan2>
 800133e:	ec51 0b10 	vmov	r0, r1, d0
 8001342:	a32b      	add	r3, pc, #172	@ (adr r3, 80013f0 <acces_measure+0x168>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f956 	bl	80005f8 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b2d      	ldr	r3, [pc, #180]	@ (8001410 <acces_measure+0x188>)
 800135a:	f7fe ff97 	bl	800028c <__adddf3>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4614      	mov	r4, r2
 8001364:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7ff fbf4 	bl	8000b58 <__aeabi_d2iz>
 8001370:	ee07 0a90 	vmov	s15, r0
 8001374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001378:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <acces_measure+0x18c>)
 800137a:	edc3 7a00 	vstr	s15, [r3]
	}
		measured_pitch =(int)((atan2(Y.y, Z.z) * 180 / 3.14)+1.2);
 800137e:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <acces_measure+0x180>)
 8001380:	ed93 7b00 	vldr	d7, [r3]
 8001384:	4b21      	ldr	r3, [pc, #132]	@ (800140c <acces_measure+0x184>)
 8001386:	ed93 6b00 	vldr	d6, [r3]
 800138a:	eeb0 1a46 	vmov.f32	s2, s12
 800138e:	eef0 1a66 	vmov.f32	s3, s13
 8001392:	eeb0 0a47 	vmov.f32	s0, s14
 8001396:	eef0 0a67 	vmov.f32	s1, s15
 800139a:	f009 fb4b 	bl	800aa34 <atan2>
 800139e:	ec51 0b10 	vmov	r0, r1, d0
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <acces_measure+0x190>)
 80013a8:	f7ff f926 	bl	80005f8 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	a310      	add	r3, pc, #64	@ (adr r3, 80013f8 <acces_measure+0x170>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff fa47 	bl	800084c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <acces_measure+0x194>)
 80013cc:	f7fe ff5e 	bl	800028c <__adddf3>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f7ff fbbe 	bl	8000b58 <__aeabi_d2iz>
 80013dc:	ee07 0a90 	vmov	s15, r0
 80013e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <acces_measure+0x198>)
 80013e6:	edc3 7a00 	vstr	s15, [r3]
}
 80013ea:	bf00      	nop
 80013ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013f0:	66666666 	.word	0x66666666
 80013f4:	404ca666 	.word	0x404ca666
 80013f8:	51eb851f 	.word	0x51eb851f
 80013fc:	40091eb8 	.word	0x40091eb8
 8001400:	20000420 	.word	0x20000420
 8001404:	20000408 	.word	0x20000408
 8001408:	20000410 	.word	0x20000410
 800140c:	20000418 	.word	0x20000418
 8001410:	3ff80000 	.word	0x3ff80000
 8001414:	200003fc 	.word	0x200003fc
 8001418:	40668000 	.word	0x40668000
 800141c:	3ff33333 	.word	0x3ff33333
 8001420:	20000400 	.word	0x20000400

08001424 <pid_control>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,motor_pid_output.motor_speed[1]);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,motor_pid_output.motor_speed[2]);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,motor_pid_output.motor_speed[3]);
}

void pid_control(float measured_roll, float measured_pitch) {
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	ed87 0a01 	vstr	s0, [r7, #4]
 800142e:	edc7 0a00 	vstr	s1, [r7]
    // Roll PID calculate

    error_roll = desired_roll - measured_roll;
 8001432:	4b4a      	ldr	r3, [pc, #296]	@ (800155c <pid_control+0x138>)
 8001434:	ed93 7a00 	vldr	s14, [r3]
 8001438:	edd7 7a01 	vldr	s15, [r7, #4]
 800143c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001440:	4b47      	ldr	r3, [pc, #284]	@ (8001560 <pid_control+0x13c>)
 8001442:	edc3 7a00 	vstr	s15, [r3]
    integral_roll += error_roll;
 8001446:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <pid_control+0x140>)
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	4b44      	ldr	r3, [pc, #272]	@ (8001560 <pid_control+0x13c>)
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001456:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <pid_control+0x140>)
 8001458:	edc3 7a00 	vstr	s15, [r3]

     output_roll = kp * error_roll + ki * integral_roll + kd * (error_roll - last_error_roll);
 800145c:	4b42      	ldr	r3, [pc, #264]	@ (8001568 <pid_control+0x144>)
 800145e:	ed93 7a00 	vldr	s14, [r3]
 8001462:	4b3f      	ldr	r3, [pc, #252]	@ (8001560 <pid_control+0x13c>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146c:	4b3f      	ldr	r3, [pc, #252]	@ (800156c <pid_control+0x148>)
 800146e:	edd3 6a00 	vldr	s13, [r3]
 8001472:	4b3c      	ldr	r3, [pc, #240]	@ (8001564 <pid_control+0x140>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001480:	4b37      	ldr	r3, [pc, #220]	@ (8001560 <pid_control+0x13c>)
 8001482:	edd3 6a00 	vldr	s13, [r3]
 8001486:	4b3a      	ldr	r3, [pc, #232]	@ (8001570 <pid_control+0x14c>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001490:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <pid_control+0x150>)
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149e:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <pid_control+0x154>)
 80014a0:	edc3 7a00 	vstr	s15, [r3]
     output_roll /= 800;
 80014a4:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <pid_control+0x154>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800157c <pid_control+0x158>
 80014ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <pid_control+0x154>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]

    last_error_roll = error_roll;
 80014b8:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <pid_control+0x13c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001570 <pid_control+0x14c>)
 80014be:	6013      	str	r3, [r2, #0]

    // Pitch PID calculate
    error_pitch = desired_pitch - measured_pitch;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <pid_control+0x15c>)
 80014c2:	ed93 7a00 	vldr	s14, [r3]
 80014c6:	edd7 7a00 	vldr	s15, [r7]
 80014ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <pid_control+0x160>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]
    integral_pitch += error_pitch;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <pid_control+0x164>)
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <pid_control+0x160>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e4:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <pid_control+0x164>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]

    output_pitch = kp * error_pitch + ki * integral_pitch + kd * (error_pitch - last_error_pitch);
 80014ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <pid_control+0x144>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <pid_control+0x160>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <pid_control+0x148>)
 80014fc:	edd3 6a00 	vldr	s13, [r3]
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <pid_control+0x164>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <pid_control+0x160>)
 8001510:	edd3 6a00 	vldr	s13, [r3]
 8001514:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <pid_control+0x168>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <pid_control+0x150>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <pid_control+0x16c>)
 800152e:	edc3 7a00 	vstr	s15, [r3]
    output_pitch /= 800;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <pid_control+0x16c>)
 8001534:	ed93 7a00 	vldr	s14, [r3]
 8001538:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800157c <pid_control+0x158>
 800153c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <pid_control+0x16c>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
    last_error_pitch = error_pitch;
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <pid_control+0x160>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a10      	ldr	r2, [pc, #64]	@ (800158c <pid_control+0x168>)
 800154c:	6013      	str	r3, [r2, #0]

}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200003f4 	.word	0x200003f4
 8001560:	200003dc 	.word	0x200003dc
 8001564:	200003ec 	.word	0x200003ec
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004
 8001570:	200003e4 	.word	0x200003e4
 8001574:	20000008 	.word	0x20000008
 8001578:	200003a4 	.word	0x200003a4
 800157c:	44480000 	.word	0x44480000
 8001580:	200003f8 	.word	0x200003f8
 8001584:	200003e0 	.word	0x200003e0
 8001588:	200003f0 	.word	0x200003f0
 800158c:	200003e8 	.word	0x200003e8
 8001590:	200003a8 	.word	0x200003a8

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159a:	f000 ffff 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159e:	f000 f883 	bl	80016a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a2:	f000 fa85 	bl	8001ab0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015a6:	f000 f8e9 	bl	800177c <MX_SPI1_Init>
  MX_TIM1_Init();
 80015aa:	f000 f91d 	bl	80017e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80015ae:	f000 fa2b 	bl	8001a08 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80015b2:	f000 fa53 	bl	8001a5c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80015b6:	f000 f9ad 	bl	8001914 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80015ba:	4831      	ldr	r0, [pc, #196]	@ (8001680 <main+0xec>)
 80015bc:	f002 fe3c 	bl	8004238 <HAL_TIM_Base_Start>
  myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 80015c0:	2340      	movs	r3, #64	@ 0x40
 80015c2:	703b      	strb	r3, [r7, #0]
  myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 80015c4:	2308      	movs	r3, #8
 80015c6:	707b      	strb	r3, [r7, #1]
  myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 80015c8:	23c0      	movs	r3, #192	@ 0xc0
 80015ca:	70bb      	strb	r3, [r7, #2]
  myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 80015cc:	2307      	movs	r3, #7
 80015ce:	70fb      	strb	r3, [r7, #3]
  myAccConfigDef.interruptEnable = true;
 80015d0:	2301      	movs	r3, #1
 80015d2:	713b      	strb	r3, [r7, #4]
  LIS3DSH_Init(&hspi1, &myAccConfigDef);
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	482a      	ldr	r0, [pc, #168]	@ (8001684 <main+0xf0>)
 80015da:	f004 fc75 	bl	8005ec8 <LIS3DSH_Init>

  LIS3DSH_X_calibrate(-1000.0, 980.0);
 80015de:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8001688 <main+0xf4>
 80015e2:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800168c <main+0xf8>
 80015e6:	f004 fe31 	bl	800624c <LIS3DSH_X_calibrate>
  LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 80015ea:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001690 <main+0xfc>
 80015ee:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001694 <main+0x100>
 80015f2:	f004 fe59 	bl	80062a8 <LIS3DSH_Y_calibrate>
  LIS3DSH_Z_calibrate(-920.0, 1040.0);
 80015f6:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001690 <main+0xfc>
 80015fa:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001698 <main+0x104>
 80015fe:	f004 fe81 	bl	8006304 <LIS3DSH_Z_calibrate>

  /* HAL PWM START */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001602:	2100      	movs	r1, #0
 8001604:	4825      	ldr	r0, [pc, #148]	@ (800169c <main+0x108>)
 8001606:	f002 fecf 	bl	80043a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800160a:	2104      	movs	r1, #4
 800160c:	4823      	ldr	r0, [pc, #140]	@ (800169c <main+0x108>)
 800160e:	f002 fecb 	bl	80043a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001612:	2108      	movs	r1, #8
 8001614:	4821      	ldr	r0, [pc, #132]	@ (800169c <main+0x108>)
 8001616:	f002 fec7 	bl	80043a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800161a:	210c      	movs	r1, #12
 800161c:	481f      	ldr	r0, [pc, #124]	@ (800169c <main+0x108>)
 800161e:	f002 fec3 	bl	80043a8 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,1000);
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <main+0x108>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800162a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1000);
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <main+0x108>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001634:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,1000);
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <main+0x108>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,1000);
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <main+0x108>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_Delay(3000);
 800164a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800164e:	f001 f817 	bl	8002680 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Timer start htim1, input capture mode.
	  tim_start();
 8001652:	f000 fb17 	bl	8001c84 <tim_start>

	  // Roll and pitch angle measure
	  acces_measure();
 8001656:	f7ff fe17 	bl	8001288 <acces_measure>

	  // Roll and pitch  pid control
	  pid_control(measured_roll, measured_pitch);
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <main+0x10c>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <main+0x110>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	eef0 0a47 	vmov.f32	s1, s14
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	f7ff fed9 	bl	8001424 <pid_control>

	  // Motors output pid value
/* 		drone_motor_output_pid(); */
	  stabilize_drone_mode();
 8001672:	f000 fb1d 	bl	8001cb0 <stabilize_drone_mode>
	  // Motor output compare
/* 		motor_compare_pid();	 */

	  stabilize_motor_output();
 8001676:	f000 fbdf 	bl	8001e38 <stabilize_motor_output>
	  tim_start();
 800167a:	bf00      	nop
 800167c:	e7e9      	b.n	8001652 <main+0xbe>
 800167e:	bf00      	nop
 8001680:	20000284 	.word	0x20000284
 8001684:	2000022c 	.word	0x2000022c
 8001688:	44750000 	.word	0x44750000
 800168c:	c47a0000 	.word	0xc47a0000
 8001690:	44820000 	.word	0x44820000
 8001694:	c47f0000 	.word	0xc47f0000
 8001698:	c4660000 	.word	0xc4660000
 800169c:	200002cc 	.word	0x200002cc
 80016a0:	200003fc 	.word	0x200003fc
 80016a4:	20000400 	.word	0x20000400

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b094      	sub	sp, #80	@ 0x50
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0320 	add.w	r3, r7, #32
 80016b2:	2230      	movs	r2, #48	@ 0x30
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f005 fde3 	bl	8007282 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <SystemClock_Config+0xcc>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	4a27      	ldr	r2, [pc, #156]	@ (8001774 <SystemClock_Config+0xcc>)
 80016d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016da:	6413      	str	r3, [r2, #64]	@ 0x40
 80016dc:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <SystemClock_Config+0xcc>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <SystemClock_Config+0xd0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a21      	ldr	r2, [pc, #132]	@ (8001778 <SystemClock_Config+0xd0>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <SystemClock_Config+0xd0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001704:	2301      	movs	r3, #1
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170e:	2302      	movs	r3, #2
 8001710:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001712:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001718:	2308      	movs	r3, #8
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800171c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001720:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001722:	2302      	movs	r3, #2
 8001724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001726:	2307      	movs	r3, #7
 8001728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	4618      	mov	r0, r3
 8001730:	f001 fac4 	bl	8002cbc <HAL_RCC_OscConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800173a:	f000 fc49 	bl	8001fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173e:	230f      	movs	r3, #15
 8001740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001742:	2302      	movs	r3, #2
 8001744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800174a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800174e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001754:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	2105      	movs	r1, #5
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fd25 	bl	80031ac <HAL_RCC_ClockConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001768:	f000 fc32 	bl	8001fd0 <Error_Handler>
  }
}
 800176c:	bf00      	nop
 800176e:	3750      	adds	r7, #80	@ 0x50
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000

0800177c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <MX_SPI1_Init+0x64>)
 8001782:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <MX_SPI1_Init+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <MX_SPI1_Init+0x64>)
 8001788:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800178c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <MX_SPI1_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <MX_SPI1_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <MX_SPI1_Init+0x64>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <MX_SPI1_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_SPI1_Init+0x64>)
 80017a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <MX_SPI1_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <MX_SPI1_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <MX_SPI1_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <MX_SPI1_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <MX_SPI1_Init+0x64>)
 80017c8:	220a      	movs	r2, #10
 80017ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <MX_SPI1_Init+0x64>)
 80017ce:	f001 ff0d 	bl	80035ec <HAL_SPI_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017d8:	f000 fbfa 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000022c 	.word	0x2000022c
 80017e4:	40013000 	.word	0x40013000

080017e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0318 	add.w	r3, r7, #24
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001812:	4b3e      	ldr	r3, [pc, #248]	@ (800190c <MX_TIM1_Init+0x124>)
 8001814:	4a3e      	ldr	r2, [pc, #248]	@ (8001910 <MX_TIM1_Init+0x128>)
 8001816:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001818:	4b3c      	ldr	r3, [pc, #240]	@ (800190c <MX_TIM1_Init+0x124>)
 800181a:	2253      	movs	r2, #83	@ 0x53
 800181c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b3b      	ldr	r3, [pc, #236]	@ (800190c <MX_TIM1_Init+0x124>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 8001824:	4b39      	ldr	r3, [pc, #228]	@ (800190c <MX_TIM1_Init+0x124>)
 8001826:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800182a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b37      	ldr	r3, [pc, #220]	@ (800190c <MX_TIM1_Init+0x124>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001832:	4b36      	ldr	r3, [pc, #216]	@ (800190c <MX_TIM1_Init+0x124>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001838:	4b34      	ldr	r3, [pc, #208]	@ (800190c <MX_TIM1_Init+0x124>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800183e:	4833      	ldr	r0, [pc, #204]	@ (800190c <MX_TIM1_Init+0x124>)
 8001840:	f002 fcaa 	bl	8004198 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800184a:	f000 fbc1 	bl	8001fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001852:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	4619      	mov	r1, r3
 800185a:	482c      	ldr	r0, [pc, #176]	@ (800190c <MX_TIM1_Init+0x124>)
 800185c:	f003 fa3c 	bl	8004cd8 <HAL_TIM_ConfigClockSource>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001866:	f000 fbb3 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800186a:	4828      	ldr	r0, [pc, #160]	@ (800190c <MX_TIM1_Init+0x124>)
 800186c:	f002 fe64 	bl	8004538 <HAL_TIM_IC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001876:	f000 fbab 	bl	8001fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	4619      	mov	r1, r3
 8001888:	4820      	ldr	r0, [pc, #128]	@ (800190c <MX_TIM1_Init+0x124>)
 800188a:	f003 ff5b 	bl	8005744 <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001894:	f000 fb9c 	bl	8001fd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001898:	230a      	movs	r3, #10
 800189a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	2200      	movs	r2, #0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4817      	ldr	r0, [pc, #92]	@ (800190c <MX_TIM1_Init+0x124>)
 80018b0:	f003 f8b4 	bl	8004a1c <HAL_TIM_IC_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80018ba:	f000 fb89 	bl	8001fd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018c2:	463b      	mov	r3, r7
 80018c4:	2204      	movs	r2, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4810      	ldr	r0, [pc, #64]	@ (800190c <MX_TIM1_Init+0x124>)
 80018ca:	f003 f8a7 	bl	8004a1c <HAL_TIM_IC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80018d4:	f000 fb7c 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	2208      	movs	r2, #8
 80018dc:	4619      	mov	r1, r3
 80018de:	480b      	ldr	r0, [pc, #44]	@ (800190c <MX_TIM1_Init+0x124>)
 80018e0:	f003 f89c 	bl	8004a1c <HAL_TIM_IC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80018ea:	f000 fb71 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80018ee:	463b      	mov	r3, r7
 80018f0:	220c      	movs	r2, #12
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_TIM1_Init+0x124>)
 80018f6:	f003 f891 	bl	8004a1c <HAL_TIM_IC_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001900:	f000 fb66 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	@ 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000284 	.word	0x20000284
 8001910:	40010000 	.word	0x40010000

08001914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	@ 0x28
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001936:	4b33      	ldr	r3, [pc, #204]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 8001938:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800193c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800193e:	4b31      	ldr	r3, [pc, #196]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 8001940:	2253      	movs	r2, #83	@ 0x53
 8001942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b2f      	ldr	r3, [pc, #188]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800194a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 800194c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001950:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001958:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800195e:	4829      	ldr	r0, [pc, #164]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 8001960:	f002 fcd2 	bl	8004308 <HAL_TIM_PWM_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800196a:	f000 fb31 	bl	8001fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	4619      	mov	r1, r3
 800197c:	4821      	ldr	r0, [pc, #132]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 800197e:	f003 fee1 	bl	8005744 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001988:	f000 fb22 	bl	8001fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198c:	2360      	movs	r3, #96	@ 0x60
 800198e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	4818      	ldr	r0, [pc, #96]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 80019a4:	f003 f8d6 	bl	8004b54 <HAL_TIM_PWM_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80019ae:	f000 fb0f 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2204      	movs	r2, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4812      	ldr	r0, [pc, #72]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 80019ba:	f003 f8cb 	bl	8004b54 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019c4:	f000 fb04 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2208      	movs	r2, #8
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 80019d0:	f003 f8c0 	bl	8004b54 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80019da:	f000 faf9 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	220c      	movs	r2, #12
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 80019e6:	f003 f8b5 	bl	8004b54 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80019f0:	f000 faee 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019f4:	4803      	ldr	r0, [pc, #12]	@ (8001a04 <MX_TIM2_Init+0xf0>)
 80019f6:	f000 fbcf 	bl	8002198 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	@ 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002cc 	.word	0x200002cc

08001a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <MX_USART1_UART_Init+0x50>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_USART1_UART_Init+0x4c>)
 8001a40:	f003 ff10 	bl	8005864 <HAL_UART_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a4a:	f000 fac1 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000314 	.word	0x20000314
 8001a58:	40011000 	.word	0x40011000

08001a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <MX_USART3_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_USART3_UART_Init+0x4c>)
 8001a94:	f003 fee6 	bl	8005864 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f000 fa97 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000035c 	.word	0x2000035c
 8001aac:	40004800 	.word	0x40004800

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b4d      	ldr	r3, [pc, #308]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001ad0:	f043 0310 	orr.w	r3, r3, #16
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b46      	ldr	r3, [pc, #280]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a45      	ldr	r2, [pc, #276]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b43      	ldr	r3, [pc, #268]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b3f      	ldr	r3, [pc, #252]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a3e      	ldr	r2, [pc, #248]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b38      	ldr	r3, [pc, #224]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a37      	ldr	r2, [pc, #220]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b35      	ldr	r3, [pc, #212]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b31      	ldr	r3, [pc, #196]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a30      	ldr	r2, [pc, #192]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <MX_GPIO_Init+0x150>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2108      	movs	r1, #8
 8001b56:	482b      	ldr	r0, [pc, #172]	@ (8001c04 <MX_GPIO_Init+0x154>)
 8001b58:	f001 f864 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001b62:	4829      	ldr	r0, [pc, #164]	@ (8001c08 <MX_GPIO_Init+0x158>)
 8001b64:	f001 f85e 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4821      	ldr	r0, [pc, #132]	@ (8001c04 <MX_GPIO_Init+0x154>)
 8001b80:	f000 feb4 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001b84:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	481a      	ldr	r0, [pc, #104]	@ (8001c08 <MX_GPIO_Init+0x158>)
 8001b9e:	f000 fea5 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ba8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4813      	ldr	r0, [pc, #76]	@ (8001c08 <MX_GPIO_Init+0x158>)
 8001bba:	f000 fe97 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <MX_GPIO_Init+0x154>)
 8001bd4:	f000 fe8a 	bl	80028ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2006      	movs	r0, #6
 8001bde:	f000 fe4e 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001be2:	2006      	movs	r0, #6
 8001be4:	f000 fe67 	bl	80028b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	2028      	movs	r0, #40	@ 0x28
 8001bee:	f000 fe46 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bf2:	2028      	movs	r0, #40	@ 0x28
 8001bf4:	f000 fe5f 	bl	80028b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	@ 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40020c00 	.word	0x40020c00

08001c0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

	drdyFlag = 1;
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_GPIO_EXTI_Callback+0x24>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001c1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c20:	4804      	ldr	r0, [pc, #16]	@ (8001c34 <HAL_GPIO_EXTI_Callback+0x28>)
 8001c22:	f001 f818 	bl	8002c56 <HAL_GPIO_TogglePin>
};
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000420 	.word	0x20000420
 8001c34:	40020c00 	.word	0x40020c00

08001c38 <degree_change_percentage>:
};



uint16_t degree_change_percentage(uint16_t In, uint16_t Inmin, uint16_t Inmax, uint16_t Outmin, uint16_t Outmax)
{
 8001c38:	b490      	push	{r4, r7}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	80fb      	strh	r3, [r7, #6]
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80bb      	strh	r3, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	807b      	strh	r3, [r7, #2]
 8001c52:	4613      	mov	r3, r2
 8001c54:	803b      	strh	r3, [r7, #0]
	return (In- Inmin) * (Outmax- Outmin) / (Inmax -Inmin) + Outmin;
 8001c56:	88fa      	ldrh	r2, [r7, #6]
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	8a39      	ldrh	r1, [r7, #16]
 8001c5e:	883a      	ldrh	r2, [r7, #0]
 8001c60:	1a8a      	subs	r2, r1, r2
 8001c62:	fb03 f202 	mul.w	r2, r3, r2
 8001c66:	8879      	ldrh	r1, [r7, #2]
 8001c68:	88bb      	ldrh	r3, [r7, #4]
 8001c6a:	1acb      	subs	r3, r1, r3
 8001c6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	b29b      	uxth	r3, r3
};
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc90      	pop	{r4, r7}
 8001c80:	4770      	bx	lr
	...

08001c84 <tim_start>:

void tim_start(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4808      	ldr	r0, [pc, #32]	@ (8001cac <tim_start+0x28>)
 8001c8c:	f002 fcae 	bl	80045ec <HAL_TIM_IC_Start_IT>
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001c90:	2104      	movs	r1, #4
 8001c92:	4806      	ldr	r0, [pc, #24]	@ (8001cac <tim_start+0x28>)
 8001c94:	f002 fcaa 	bl	80045ec <HAL_TIM_IC_Start_IT>
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001c98:	2108      	movs	r1, #8
 8001c9a:	4804      	ldr	r0, [pc, #16]	@ (8001cac <tim_start+0x28>)
 8001c9c:	f002 fca6 	bl	80045ec <HAL_TIM_IC_Start_IT>
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8001ca0:	210c      	movs	r1, #12
 8001ca2:	4802      	ldr	r0, [pc, #8]	@ (8001cac <tim_start+0x28>)
 8001ca4:	f002 fca2 	bl	80045ec <HAL_TIM_IC_Start_IT>
};
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000284 	.word	0x20000284

08001cb0 <stabilize_drone_mode>:

void stabilize_drone_mode(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	motor_value_control();
 8001cb4:	f000 f8e0 	bl	8001e78 <motor_value_control>
	stabilize_mode.motor_speed[0] = 1000 + rec_throttle + roll_right - roll_left + pitch_back - pitch_forward + yaw_right - yaw_left;
 8001cb8:	4b57      	ldr	r3, [pc, #348]	@ (8001e18 <stabilize_drone_mode+0x168>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001cc0:	4a56      	ldr	r2, [pc, #344]	@ (8001e1c <stabilize_drone_mode+0x16c>)
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a56      	ldr	r2, [pc, #344]	@ (8001e20 <stabilize_drone_mode+0x170>)
 8001cc8:	8812      	ldrh	r2, [r2, #0]
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	4a55      	ldr	r2, [pc, #340]	@ (8001e24 <stabilize_drone_mode+0x174>)
 8001cce:	8812      	ldrh	r2, [r2, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a55      	ldr	r2, [pc, #340]	@ (8001e28 <stabilize_drone_mode+0x178>)
 8001cd4:	8812      	ldrh	r2, [r2, #0]
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	4a54      	ldr	r2, [pc, #336]	@ (8001e2c <stabilize_drone_mode+0x17c>)
 8001cda:	8812      	ldrh	r2, [r2, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a54      	ldr	r2, [pc, #336]	@ (8001e30 <stabilize_drone_mode+0x180>)
 8001ce0:	8812      	ldrh	r2, [r2, #0]
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b53      	ldr	r3, [pc, #332]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001ce8:	601a      	str	r2, [r3, #0]
	stabilize_mode.motor_speed[1] = 1000 + rec_throttle + roll_right - roll_left - pitch_back + pitch_forward + yaw_left - yaw_right;
 8001cea:	4b4b      	ldr	r3, [pc, #300]	@ (8001e18 <stabilize_drone_mode+0x168>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8001e1c <stabilize_drone_mode+0x16c>)
 8001cf4:	8812      	ldrh	r2, [r2, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a49      	ldr	r2, [pc, #292]	@ (8001e20 <stabilize_drone_mode+0x170>)
 8001cfa:	8812      	ldrh	r2, [r2, #0]
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	4a49      	ldr	r2, [pc, #292]	@ (8001e24 <stabilize_drone_mode+0x174>)
 8001d00:	8812      	ldrh	r2, [r2, #0]
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	4a48      	ldr	r2, [pc, #288]	@ (8001e28 <stabilize_drone_mode+0x178>)
 8001d06:	8812      	ldrh	r2, [r2, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a49      	ldr	r2, [pc, #292]	@ (8001e30 <stabilize_drone_mode+0x180>)
 8001d0c:	8812      	ldrh	r2, [r2, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a46      	ldr	r2, [pc, #280]	@ (8001e2c <stabilize_drone_mode+0x17c>)
 8001d12:	8812      	ldrh	r2, [r2, #0]
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b46      	ldr	r3, [pc, #280]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001d1a:	605a      	str	r2, [r3, #4]
	stabilize_mode.motor_speed[2] = 1000 + rec_throttle + roll_left - roll_right - pitch_back + pitch_forward + yaw_right - yaw_left;
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e18 <stabilize_drone_mode+0x168>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d24:	4a3e      	ldr	r2, [pc, #248]	@ (8001e20 <stabilize_drone_mode+0x170>)
 8001d26:	8812      	ldrh	r2, [r2, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e1c <stabilize_drone_mode+0x16c>)
 8001d2c:	8812      	ldrh	r2, [r2, #0]
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	4a3c      	ldr	r2, [pc, #240]	@ (8001e24 <stabilize_drone_mode+0x174>)
 8001d32:	8812      	ldrh	r2, [r2, #0]
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	4a3c      	ldr	r2, [pc, #240]	@ (8001e28 <stabilize_drone_mode+0x178>)
 8001d38:	8812      	ldrh	r2, [r2, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e2c <stabilize_drone_mode+0x17c>)
 8001d3e:	8812      	ldrh	r2, [r2, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a3b      	ldr	r2, [pc, #236]	@ (8001e30 <stabilize_drone_mode+0x180>)
 8001d44:	8812      	ldrh	r2, [r2, #0]
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001d4c:	609a      	str	r2, [r3, #8]
	stabilize_mode.motor_speed[3] = 1000 + rec_throttle + roll_left - roll_right + pitch_back - pitch_forward + yaw_left - yaw_right;
 8001d4e:	4b32      	ldr	r3, [pc, #200]	@ (8001e18 <stabilize_drone_mode+0x168>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d56:	4a32      	ldr	r2, [pc, #200]	@ (8001e20 <stabilize_drone_mode+0x170>)
 8001d58:	8812      	ldrh	r2, [r2, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e1c <stabilize_drone_mode+0x16c>)
 8001d5e:	8812      	ldrh	r2, [r2, #0]
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	4a30      	ldr	r2, [pc, #192]	@ (8001e24 <stabilize_drone_mode+0x174>)
 8001d64:	8812      	ldrh	r2, [r2, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a2f      	ldr	r2, [pc, #188]	@ (8001e28 <stabilize_drone_mode+0x178>)
 8001d6a:	8812      	ldrh	r2, [r2, #0]
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	4a30      	ldr	r2, [pc, #192]	@ (8001e30 <stabilize_drone_mode+0x180>)
 8001d70:	8812      	ldrh	r2, [r2, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a2d      	ldr	r2, [pc, #180]	@ (8001e2c <stabilize_drone_mode+0x17c>)
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001d7e:	60da      	str	r2, [r3, #12]


	if(stabilize_mode.motor_speed[0] >=2000 ) stabilize_mode.motor_speed[0] = 2000;
 8001d80:	4b2c      	ldr	r3, [pc, #176]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d88:	d303      	bcc.n	8001d92 <stabilize_drone_mode+0xe2>
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001d8c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d90:	601a      	str	r2, [r3, #0]
	if(stabilize_mode.motor_speed[1] >=2000 ) stabilize_mode.motor_speed[1] = 2000;
 8001d92:	4b28      	ldr	r3, [pc, #160]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d9a:	d303      	bcc.n	8001da4 <stabilize_drone_mode+0xf4>
 8001d9c:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001d9e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001da2:	605a      	str	r2, [r3, #4]
	if(stabilize_mode.motor_speed[2] >=2000 ) stabilize_mode.motor_speed[2] = 2000;
 8001da4:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001dac:	d303      	bcc.n	8001db6 <stabilize_drone_mode+0x106>
 8001dae:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001db0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001db4:	609a      	str	r2, [r3, #8]
	if(stabilize_mode.motor_speed[3] >=2000 ) stabilize_mode.motor_speed[3] = 2000;
 8001db6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001dbe:	d303      	bcc.n	8001dc8 <stabilize_drone_mode+0x118>
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001dc2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001dc6:	60da      	str	r2, [r3, #12]

	if(stabilize_mode.motor_speed[0] <=1000 ) stabilize_mode.motor_speed[0] = 1000;
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dd0:	d803      	bhi.n	8001dda <stabilize_drone_mode+0x12a>
 8001dd2:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001dd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dd8:	601a      	str	r2, [r3, #0]
	if(stabilize_mode.motor_speed[1] <=1000 ) stabilize_mode.motor_speed[1] = 1000;
 8001dda:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001de2:	d803      	bhi.n	8001dec <stabilize_drone_mode+0x13c>
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001de6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dea:	605a      	str	r2, [r3, #4]
	if(stabilize_mode.motor_speed[2] <=1000 ) stabilize_mode.motor_speed[2] = 1000;
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001df4:	d803      	bhi.n	8001dfe <stabilize_drone_mode+0x14e>
 8001df6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001df8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dfc:	609a      	str	r2, [r3, #8]
	if(stabilize_mode.motor_speed[3] <=1000 ) stabilize_mode.motor_speed[3] = 1000;
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e06:	d803      	bhi.n	8001e10 <stabilize_drone_mode+0x160>
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <stabilize_drone_mode+0x184>)
 8001e0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e0e:	60da      	str	r2, [r3, #12]

	stabilize_motor_output();
 8001e10:	f000 f812 	bl	8001e38 <stabilize_motor_output>

};
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000434 	.word	0x20000434
 8001e1c:	20000424 	.word	0x20000424
 8001e20:	20000426 	.word	0x20000426
 8001e24:	2000042a 	.word	0x2000042a
 8001e28:	20000428 	.word	0x20000428
 8001e2c:	2000042c 	.word	0x2000042c
 8001e30:	2000042e 	.word	0x2000042e
 8001e34:	2000021c 	.word	0x2000021c

08001e38 <stabilize_motor_output>:

void stabilize_motor_output(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0



	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,stabilize_mode.motor_speed[0]);
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <stabilize_motor_output+0x38>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0c      	ldr	r2, [pc, #48]	@ (8001e74 <stabilize_motor_output+0x3c>)
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,stabilize_mode.motor_speed[1]);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <stabilize_motor_output+0x38>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <stabilize_motor_output+0x3c>)
 8001e4c:	6852      	ldr	r2, [r2, #4]
 8001e4e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,stabilize_mode.motor_speed[2]);
 8001e50:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <stabilize_motor_output+0x38>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	@ (8001e74 <stabilize_motor_output+0x3c>)
 8001e56:	6892      	ldr	r2, [r2, #8]
 8001e58:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,stabilize_mode.motor_speed[3]);
 8001e5a:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <stabilize_motor_output+0x38>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a05      	ldr	r2, [pc, #20]	@ (8001e74 <stabilize_motor_output+0x3c>)
 8001e60:	68d2      	ldr	r2, [r2, #12]
 8001e62:	641a      	str	r2, [r3, #64]	@ 0x40
};
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	200002cc 	.word	0x200002cc
 8001e74:	2000021c 	.word	0x2000021c

08001e78 <motor_value_control>:
	return degree_change_percentage(channel, min_value, max_value, min_per_value, max_per_value);

}

void motor_value_control(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af02      	add	r7, sp, #8
	roll_right = degree_change_percentage(rec_roll, 500, 1000, 0, 500);
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fac <motor_value_control+0x134>)
 8001e80:	8818      	ldrh	r0, [r3, #0]
 8001e82:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e8e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e92:	f7ff fed1 	bl	8001c38 <degree_change_percentage>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b45      	ldr	r3, [pc, #276]	@ (8001fb0 <motor_value_control+0x138>)
 8001e9c:	801a      	strh	r2, [r3, #0]
	if(roll_right >=1050) roll_right = 0;
 8001e9e:	4b44      	ldr	r3, [pc, #272]	@ (8001fb0 <motor_value_control+0x138>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	f240 4219 	movw	r2, #1049	@ 0x419
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d902      	bls.n	8001eb0 <motor_value_control+0x38>
 8001eaa:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <motor_value_control+0x138>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	801a      	strh	r2, [r3, #0]
	roll_left = degree_change_percentage(rec_roll, 0, 500, 500, 0);
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fac <motor_value_control+0x134>)
 8001eb2:	8818      	ldrh	r0, [r3, #0]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ebc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	f7ff feb9 	bl	8001c38 <degree_change_percentage>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb4 <motor_value_control+0x13c>)
 8001ecc:	801a      	strh	r2, [r3, #0]
	if(roll_left >=1050) roll_left = 0;
 8001ece:	4b39      	ldr	r3, [pc, #228]	@ (8001fb4 <motor_value_control+0x13c>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	f240 4219 	movw	r2, #1049	@ 0x419
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d902      	bls.n	8001ee0 <motor_value_control+0x68>
 8001eda:	4b36      	ldr	r3, [pc, #216]	@ (8001fb4 <motor_value_control+0x13c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	801a      	strh	r2, [r3, #0]
	yaw_right = degree_change_percentage(rec_yaw, 500, 1000, 0, 500);
 8001ee0:	4b35      	ldr	r3, [pc, #212]	@ (8001fb8 <motor_value_control+0x140>)
 8001ee2:	8818      	ldrh	r0, [r3, #0]
 8001ee4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ef0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001ef4:	f7ff fea0 	bl	8001c38 <degree_change_percentage>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b2f      	ldr	r3, [pc, #188]	@ (8001fbc <motor_value_control+0x144>)
 8001efe:	801a      	strh	r2, [r3, #0]
	if(yaw_right >= 1050) yaw_right = 0;
 8001f00:	4b2e      	ldr	r3, [pc, #184]	@ (8001fbc <motor_value_control+0x144>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	f240 4219 	movw	r2, #1049	@ 0x419
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d902      	bls.n	8001f12 <motor_value_control+0x9a>
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fbc <motor_value_control+0x144>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	801a      	strh	r2, [r3, #0]
	yaw_left = degree_change_percentage(rec_yaw, 0, 500, 500, 0);
 8001f12:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <motor_value_control+0x140>)
 8001f14:	8818      	ldrh	r0, [r3, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f1e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f22:	2100      	movs	r1, #0
 8001f24:	f7ff fe88 	bl	8001c38 <degree_change_percentage>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <motor_value_control+0x148>)
 8001f2e:	801a      	strh	r2, [r3, #0]
	if(yaw_left >= 1050) yaw_left = 0;
 8001f30:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <motor_value_control+0x148>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	f240 4219 	movw	r2, #1049	@ 0x419
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d902      	bls.n	8001f42 <motor_value_control+0xca>
 8001f3c:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <motor_value_control+0x148>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	801a      	strh	r2, [r3, #0]
	pitch_forward = degree_change_percentage(rec_pitch,0 , 500, 500, 0);
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <motor_value_control+0x14c>)
 8001f44:	8818      	ldrh	r0, [r3, #0]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f4e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f52:	2100      	movs	r1, #0
 8001f54:	f7ff fe70 	bl	8001c38 <degree_change_percentage>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <motor_value_control+0x150>)
 8001f5e:	801a      	strh	r2, [r3, #0]
	if(pitch_forward >= 1050) pitch_forward = 0;
 8001f60:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <motor_value_control+0x150>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	f240 4219 	movw	r2, #1049	@ 0x419
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d902      	bls.n	8001f72 <motor_value_control+0xfa>
 8001f6c:	4b16      	ldr	r3, [pc, #88]	@ (8001fc8 <motor_value_control+0x150>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	801a      	strh	r2, [r3, #0]
	pitch_back = degree_change_percentage(rec_pitch,500 , 1000, 0, 500);
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <motor_value_control+0x14c>)
 8001f74:	8818      	ldrh	r0, [r3, #0]
 8001f76:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f82:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001f86:	f7ff fe57 	bl	8001c38 <degree_change_percentage>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <motor_value_control+0x154>)
 8001f90:	801a      	strh	r2, [r3, #0]
	if(pitch_back >= 1050) pitch_back = 0;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <motor_value_control+0x154>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	f240 4219 	movw	r2, #1049	@ 0x419
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d902      	bls.n	8001fa4 <motor_value_control+0x12c>
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <motor_value_control+0x154>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	801a      	strh	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000422 	.word	0x20000422
 8001fb0:	20000424 	.word	0x20000424
 8001fb4:	20000426 	.word	0x20000426
 8001fb8:	20000432 	.word	0x20000432
 8001fbc:	2000042c 	.word	0x2000042c
 8001fc0:	2000042e 	.word	0x2000042e
 8001fc4:	20000430 	.word	0x20000430
 8001fc8:	20000428 	.word	0x20000428
 8001fcc:	2000042a 	.word	0x2000042a

08001fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <Error_Handler+0x4>

08001fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <HAL_MspInit+0x4c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8002024 <HAL_MspInit+0x4c>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <HAL_MspInit+0x4c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	4a08      	ldr	r2, [pc, #32]	@ (8002024 <HAL_MspInit+0x4c>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	@ 0x40
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_MspInit+0x4c>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002016:	2007      	movs	r0, #7
 8002018:	f000 fc26 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_SPI_MspInit+0x84>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12b      	bne.n	80020a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	4a17      	ldr	r2, [pc, #92]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002058:	6453      	str	r3, [r2, #68]	@ 0x44
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a10      	ldr	r2, [pc, #64]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002082:	23e0      	movs	r3, #224	@ 0xe0
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002092:	2305      	movs	r3, #5
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <HAL_SPI_MspInit+0x8c>)
 800209e:	f000 fc25 	bl	80028ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	@ 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40013000 	.word	0x40013000
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020000 	.word	0x40020000

080020b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <HAL_TIM_Base_MspInit+0x94>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d134      	bne.n	8002144 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <HAL_TIM_Base_MspInit+0x98>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002150 <HAL_TIM_Base_MspInit+0x98>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ea:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_TIM_Base_MspInit+0x98>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_TIM_Base_MspInit+0x98>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <HAL_TIM_Base_MspInit+0x98>)
 8002100:	f043 0310 	orr.w	r3, r3, #16
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_TIM_Base_MspInit+0x98>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = AILERON_Pin|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002112:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002124:	2301      	movs	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	4809      	ldr	r0, [pc, #36]	@ (8002154 <HAL_TIM_Base_MspInit+0x9c>)
 8002130:	f000 fbdc 	bl	80028ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	201b      	movs	r0, #27
 800213a:	f000 fba0 	bl	800287e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800213e:	201b      	movs	r0, #27
 8002140:	f000 fbb9 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002144:	bf00      	nop
 8002146:	3728      	adds	r7, #40	@ 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40010000 	.word	0x40010000
 8002150:	40023800 	.word	0x40023800
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002168:	d10d      	bne.n	8002186 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <HAL_TIM_PWM_MspInit+0x3c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a08      	ldr	r2, [pc, #32]	@ (8002194 <HAL_TIM_PWM_MspInit+0x3c>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_TIM_PWM_MspInit+0x3c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b8:	d11d      	bne.n	80021f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <HAL_TIM_MspPostInit+0x68>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002200 <HAL_TIM_MspPostInit+0x68>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <HAL_TIM_MspPostInit+0x68>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin|MOTOR_3_Pin|MOTOR_4_Pin;
 80021d6:	230f      	movs	r3, #15
 80021d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	4619      	mov	r1, r3
 80021f0:	4804      	ldr	r0, [pc, #16]	@ (8002204 <HAL_TIM_MspPostInit+0x6c>)
 80021f2:	f000 fb7b 	bl	80028ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021f6:	bf00      	nop
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	40020000 	.word	0x40020000

08002208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	@ 0x30
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a33      	ldr	r2, [pc, #204]	@ (80022f4 <HAL_UART_MspInit+0xec>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d12d      	bne.n	8002286 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	4b32      	ldr	r3, [pc, #200]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	4a31      	ldr	r2, [pc, #196]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 8002234:	f043 0310 	orr.w	r3, r3, #16
 8002238:	6453      	str	r3, [r2, #68]	@ 0x44
 800223a:	4b2f      	ldr	r3, [pc, #188]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a2a      	ldr	r2, [pc, #168]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002262:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002274:	2307      	movs	r3, #7
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	481f      	ldr	r0, [pc, #124]	@ (80022fc <HAL_UART_MspInit+0xf4>)
 8002280:	f000 fb34 	bl	80028ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002284:	e031      	b.n	80022ea <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1d      	ldr	r2, [pc, #116]	@ (8002300 <HAL_UART_MspInit+0xf8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d12c      	bne.n	80022ea <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	4b18      	ldr	r3, [pc, #96]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 800229a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800229e:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a0:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	4a10      	ldr	r2, [pc, #64]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_UART_MspInit+0xf0>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022da:	2307      	movs	r3, #7
 80022dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	4807      	ldr	r0, [pc, #28]	@ (8002304 <HAL_UART_MspInit+0xfc>)
 80022e6:	f000 fb01 	bl	80028ec <HAL_GPIO_Init>
}
 80022ea:	bf00      	nop
 80022ec:	3730      	adds	r7, #48	@ 0x30
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40004800 	.word	0x40004800
 8002304:	40020400 	.word	0x40020400

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <NMI_Handler+0x4>

08002310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <MemManage_Handler+0x4>

08002320 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <UsageFault_Handler+0x4>

08002330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235e:	f000 f96f 	bl	8002640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}

08002366 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800236a:	2001      	movs	r0, #1
 800236c:	f000 fc8e 	bl	8002c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}

08002374 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <TIM1_CC_IRQHandler+0x10>)
 800237a:	f002 fa5f 	bl	800483c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000284 	.word	0x20000284

08002388 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800238c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002390:	f000 fc7c 	bl	8002c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return 1;
 800239c:	2301      	movs	r3, #1
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_kill>:

int _kill(int pid, int sig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023b2:	f004 ffb9 	bl	8007328 <__errno>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2216      	movs	r2, #22
 80023ba:	601a      	str	r2, [r3, #0]
  return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_exit>:

void _exit (int status)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ffe7 	bl	80023a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023da:	bf00      	nop
 80023dc:	e7fd      	b.n	80023da <_exit+0x12>

080023de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e00a      	b.n	8002406 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023f0:	f3af 8000 	nop.w
 80023f4:	4601      	mov	r1, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	60ba      	str	r2, [r7, #8]
 80023fc:	b2ca      	uxtb	r2, r1
 80023fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3301      	adds	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	dbf0      	blt.n	80023f0 <_read+0x12>
  }

  return len;
 800240e:	687b      	ldr	r3, [r7, #4]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	e009      	b.n	800243e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	60ba      	str	r2, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	dbf1      	blt.n	800242a <_write+0x12>
  }
  return len;
 8002446:	687b      	ldr	r3, [r7, #4]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_close>:

int _close(int file)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002478:	605a      	str	r2, [r3, #4]
  return 0;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_isatty>:

int _isatty(int file)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c0:	4a14      	ldr	r2, [pc, #80]	@ (8002514 <_sbrk+0x5c>)
 80024c2:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <_sbrk+0x60>)
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <_sbrk+0x64>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <_sbrk+0x68>)
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d207      	bcs.n	80024f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e8:	f004 ff1e 	bl	8007328 <__errno>
 80024ec:	4603      	mov	r3, r0
 80024ee:	220c      	movs	r2, #12
 80024f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	e009      	b.n	800250c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f8:	4b08      	ldr	r3, [pc, #32]	@ (800251c <_sbrk+0x64>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fe:	4b07      	ldr	r3, [pc, #28]	@ (800251c <_sbrk+0x64>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	4a05      	ldr	r2, [pc, #20]	@ (800251c <_sbrk+0x64>)
 8002508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20020000 	.word	0x20020000
 8002518:	00000400 	.word	0x00000400
 800251c:	20000438 	.word	0x20000438
 8002520:	200005f0 	.word	0x200005f0

08002524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <SystemInit+0x20>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252e:	4a05      	ldr	r2, [pc, #20]	@ (8002544 <SystemInit+0x20>)
 8002530:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002534:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002548:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002580 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800254c:	f7ff ffea 	bl	8002524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002550:	480c      	ldr	r0, [pc, #48]	@ (8002584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002552:	490d      	ldr	r1, [pc, #52]	@ (8002588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002554:	4a0d      	ldr	r2, [pc, #52]	@ (800258c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002558:	e002      	b.n	8002560 <LoopCopyDataInit>

0800255a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800255c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255e:	3304      	adds	r3, #4

08002560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002564:	d3f9      	bcc.n	800255a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002566:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002568:	4c0a      	ldr	r4, [pc, #40]	@ (8002594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800256c:	e001      	b.n	8002572 <LoopFillZerobss>

0800256e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002570:	3204      	adds	r2, #4

08002572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002574:	d3fb      	bcc.n	800256e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002576:	f004 fedd 	bl	8007334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257a:	f7ff f80b 	bl	8001594 <main>
  bx  lr    
 800257e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800258c:	0800b5f8 	.word	0x0800b5f8
  ldr r2, =_sbss
 8002590:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002594:	200005f0 	.word	0x200005f0

08002598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC_IRQHandler>
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a0:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <HAL_Init+0x40>)
 80025a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <HAL_Init+0x40>)
 80025b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b8:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a07      	ldr	r2, [pc, #28]	@ (80025dc <HAL_Init+0x40>)
 80025be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c4:	2003      	movs	r0, #3
 80025c6:	f000 f94f 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f000 f808 	bl	80025e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d0:	f7ff fd02 	bl	8001fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00

080025e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <HAL_InitTick+0x54>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_InitTick+0x58>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f967 	bl	80028d2 <HAL_SYSTICK_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e00e      	b.n	800262c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b0f      	cmp	r3, #15
 8002612:	d80a      	bhi.n	800262a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002614:	2200      	movs	r2, #0
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f000 f92f 	bl	800287e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002620:	4a06      	ldr	r2, [pc, #24]	@ (800263c <HAL_InitTick+0x5c>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	2000000c 	.word	0x2000000c
 8002638:	20000014 	.word	0x20000014
 800263c:	20000010 	.word	0x20000010

08002640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_IncTick+0x20>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_IncTick+0x24>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4413      	add	r3, r2
 8002650:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <HAL_IncTick+0x24>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000014 	.word	0x20000014
 8002664:	2000043c 	.word	0x2000043c

08002668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b03      	ldr	r3, [pc, #12]	@ (800267c <HAL_GetTick+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	2000043c 	.word	0x2000043c

08002680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff ffee 	bl	8002668 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d005      	beq.n	80026a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269a:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_Delay+0x44>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026a6:	bf00      	nop
 80026a8:	f7ff ffde 	bl	8002668 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d8f7      	bhi.n	80026a8 <HAL_Delay+0x28>
  {
  }
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000014 	.word	0x20000014

080026c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d8:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026e4:	4013      	ands	r3, r2
 80026e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fa:	4a04      	ldr	r2, [pc, #16]	@ (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	60d3      	str	r3, [r2, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002714:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <__NVIC_GetPriorityGrouping+0x18>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	f003 0307 	and.w	r3, r3, #7
}
 800271e:	4618      	mov	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	db0b      	blt.n	8002756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	4907      	ldr	r1, [pc, #28]	@ (8002764 <__NVIC_EnableIRQ+0x38>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2001      	movs	r0, #1
 800274e:	fa00 f202 	lsl.w	r2, r0, r2
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000e100 	.word	0xe000e100

08002768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	6039      	str	r1, [r7, #0]
 8002772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	2b00      	cmp	r3, #0
 800277a:	db0a      	blt.n	8002792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	490c      	ldr	r1, [pc, #48]	@ (80027b4 <__NVIC_SetPriority+0x4c>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	0112      	lsls	r2, r2, #4
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	440b      	add	r3, r1
 800278c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002790:	e00a      	b.n	80027a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4908      	ldr	r1, [pc, #32]	@ (80027b8 <__NVIC_SetPriority+0x50>)
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	3b04      	subs	r3, #4
 80027a0:	0112      	lsls	r2, r2, #4
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	440b      	add	r3, r1
 80027a6:	761a      	strb	r2, [r3, #24]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000e100 	.word	0xe000e100
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	@ 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f1c3 0307 	rsb	r3, r3, #7
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	bf28      	it	cs
 80027da:	2304      	movcs	r3, #4
 80027dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3304      	adds	r3, #4
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d902      	bls.n	80027ec <NVIC_EncodePriority+0x30>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3b03      	subs	r3, #3
 80027ea:	e000      	b.n	80027ee <NVIC_EncodePriority+0x32>
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	401a      	ands	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002804:	f04f 31ff 	mov.w	r1, #4294967295
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	43d9      	mvns	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	4313      	orrs	r3, r2
         );
}
 8002816:	4618      	mov	r0, r3
 8002818:	3724      	adds	r7, #36	@ 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002834:	d301      	bcc.n	800283a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002836:	2301      	movs	r3, #1
 8002838:	e00f      	b.n	800285a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283a:	4a0a      	ldr	r2, [pc, #40]	@ (8002864 <SysTick_Config+0x40>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002842:	210f      	movs	r1, #15
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f7ff ff8e 	bl	8002768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <SysTick_Config+0x40>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002852:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <SysTick_Config+0x40>)
 8002854:	2207      	movs	r2, #7
 8002856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	e000e010 	.word	0xe000e010

08002868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff29 	bl	80026c8 <__NVIC_SetPriorityGrouping>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002890:	f7ff ff3e 	bl	8002710 <__NVIC_GetPriorityGrouping>
 8002894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f7ff ff8e 	bl	80027bc <NVIC_EncodePriority>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff5d 	bl	8002768 <__NVIC_SetPriority>
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff31 	bl	800272c <__NVIC_EnableIRQ>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ffa2 	bl	8002824 <SysTick_Config>
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	@ 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e16b      	b.n	8002be0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 815a 	bne.w	8002bda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d005      	beq.n	800293e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	2b02      	cmp	r3, #2
 800293c:	d130      	bne.n	80029a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d017      	beq.n	80029dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80b4 	beq.w	8002bda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b60      	ldr	r3, [pc, #384]	@ (8002bf8 <HAL_GPIO_Init+0x30c>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf8 <HAL_GPIO_Init+0x30c>)
 8002a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a82:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf8 <HAL_GPIO_Init+0x30c>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bfc <HAL_GPIO_Init+0x310>)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	3302      	adds	r3, #2
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_GPIO_Init+0x314>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d02b      	beq.n	8002b12 <HAL_GPIO_Init+0x226>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a51      	ldr	r2, [pc, #324]	@ (8002c04 <HAL_GPIO_Init+0x318>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d025      	beq.n	8002b0e <HAL_GPIO_Init+0x222>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a50      	ldr	r2, [pc, #320]	@ (8002c08 <HAL_GPIO_Init+0x31c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_GPIO_Init+0x21e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4f      	ldr	r2, [pc, #316]	@ (8002c0c <HAL_GPIO_Init+0x320>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x21a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8002c10 <HAL_GPIO_Init+0x324>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x216>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4d      	ldr	r2, [pc, #308]	@ (8002c14 <HAL_GPIO_Init+0x328>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x212>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8002c18 <HAL_GPIO_Init+0x32c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x20e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4b      	ldr	r2, [pc, #300]	@ (8002c1c <HAL_GPIO_Init+0x330>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x20a>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e00e      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002af6:	2308      	movs	r3, #8
 8002af8:	e00c      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002afa:	2306      	movs	r3, #6
 8002afc:	e00a      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002afe:	2305      	movs	r3, #5
 8002b00:	e008      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b02:	2304      	movs	r3, #4
 8002b04:	e006      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e004      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e002      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_GPIO_Init+0x228>
 8002b12:	2300      	movs	r3, #0
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f002 0203 	and.w	r2, r2, #3
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	4093      	lsls	r3, r2
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b24:	4935      	ldr	r1, [pc, #212]	@ (8002bfc <HAL_GPIO_Init+0x310>)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b32:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b56:	4a32      	ldr	r2, [pc, #200]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b5c:	4b30      	ldr	r3, [pc, #192]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b80:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b86:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002baa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd4:	4a12      	ldr	r2, [pc, #72]	@ (8002c20 <HAL_GPIO_Init+0x334>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b0f      	cmp	r3, #15
 8002be4:	f67f ae90 	bls.w	8002908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3724      	adds	r7, #36	@ 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	40020c00 	.word	0x40020c00
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40021400 	.word	0x40021400
 8002c18:	40021800 	.word	0x40021800
 8002c1c:	40021c00 	.word	0x40021c00
 8002c20:	40013c00 	.word	0x40013c00

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c40:	e003      	b.n	8002c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	041a      	lsls	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	041a      	lsls	r2, r3, #16
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	400b      	ands	r3, r1
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	619a      	str	r2, [r3, #24]
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c96:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d006      	beq.n	8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ca2:	4a05      	ldr	r2, [pc, #20]	@ (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe ffae 	bl	8001c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e267      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	4b88      	ldr	r3, [pc, #544]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b85      	ldr	r3, [pc, #532]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b82      	ldr	r3, [pc, #520]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b7e      	ldr	r3, [pc, #504]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e242      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b76      	ldr	r3, [pc, #472]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a75      	ldr	r2, [pc, #468]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6f      	ldr	r2, [pc, #444]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b6d      	ldr	r3, [pc, #436]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6c      	ldr	r2, [pc, #432]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b69      	ldr	r3, [pc, #420]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a68      	ldr	r2, [pc, #416]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b66      	ldr	r3, [pc, #408]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a65      	ldr	r2, [pc, #404]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff fc78 	bl	8002668 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7ff fc74 	bl	8002668 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e207      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7ff fc64 	bl	8002668 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da4:	f7ff fc60 	bl	8002668 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1f3      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	4b51      	ldr	r3, [pc, #324]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d063      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d11c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b44      	ldr	r3, [pc, #272]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1c7      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4937      	ldr	r1, [pc, #220]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	e03a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2c:	4b34      	ldr	r3, [pc, #208]	@ (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7ff fc19 	bl	8002668 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7ff fc15 	bl	8002668 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1a8      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4925      	ldr	r1, [pc, #148]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6e:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff fbf8 	bl	8002668 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7ff fbf4 	bl	8002668 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e187      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d036      	beq.n	8002f14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7ff fbd8 	bl	8002668 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7ff fbd4 	bl	8002668 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e167      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
 8002eda:	e01b      	b.n	8002f14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7ff fbc1 	bl	8002668 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	e00e      	b.n	8002f08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eea:	f7ff fbbd 	bl	8002668 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d907      	bls.n	8002f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e150      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470000 	.word	0x42470000
 8002f04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	4b88      	ldr	r3, [pc, #544]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ea      	bne.n	8002eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8097 	beq.w	8003050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b81      	ldr	r3, [pc, #516]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b7d      	ldr	r3, [pc, #500]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f42:	4b7a      	ldr	r3, [pc, #488]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b77      	ldr	r3, [pc, #476]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d118      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4b74      	ldr	r3, [pc, #464]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fb7d 	bl	8002668 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7ff fb79 	bl	8002668 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e10c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2ea>
 8002f98:	4b64      	ldr	r3, [pc, #400]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a63      	ldr	r2, [pc, #396]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x30c>
 8002fae:	4b5f      	ldr	r3, [pc, #380]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	4a5e      	ldr	r2, [pc, #376]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fba:	4b5c      	ldr	r3, [pc, #368]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	4a5b      	ldr	r2, [pc, #364]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fc8:	4b58      	ldr	r3, [pc, #352]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a57      	ldr	r2, [pc, #348]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	4b55      	ldr	r3, [pc, #340]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	4a54      	ldr	r2, [pc, #336]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7ff fb3e 	bl	8002668 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7ff fb3a 	bl	8002668 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0cb      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	4b49      	ldr	r3, [pc, #292]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ee      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7ff fb28 	bl	8002668 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7ff fb24 	bl	8002668 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0b5      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003032:	4b3e      	ldr	r3, [pc, #248]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ee      	bne.n	800301c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b39      	ldr	r3, [pc, #228]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	4a38      	ldr	r2, [pc, #224]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a1 	beq.w	800319c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305a:	4b34      	ldr	r3, [pc, #208]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d05c      	beq.n	8003120 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d141      	bne.n	80030f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b31      	ldr	r3, [pc, #196]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7ff faf8 	bl	8002668 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307c:	f7ff faf4 	bl	8002668 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e087      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	4b27      	ldr	r3, [pc, #156]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	491b      	ldr	r1, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7ff facd 	bl	8002668 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7ff fac9 	bl	8002668 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e05c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x416>
 80030f0:	e054      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7ff fab6 	bl	8002668 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003100:	f7ff fab2 	bl	8002668 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e045      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
 800311e:	e03d      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e038      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 800312c:	40023800 	.word	0x40023800
 8003130:	40007000 	.word	0x40007000
 8003134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003138:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_RCC_OscConfig+0x4ec>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d028      	beq.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d121      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d11a      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800316e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	3b01      	subs	r3, #1
 8003182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0cc      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b68      	ldr	r3, [pc, #416]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d90c      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b65      	ldr	r3, [pc, #404]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a58      	ldr	r2, [pc, #352]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800320a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d119      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b3f      	ldr	r3, [pc, #252]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e067      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4934      	ldr	r1, [pc, #208]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7ff f9e4 	bl	8002668 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7ff f9e0 	bl	8002668 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	@ (800336c <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff f944 	bl	80025e0 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	0800b130 	.word	0x0800b130
 8003370:	2000000c 	.word	0x2000000c
 8003374:	20000010 	.word	0x20000010

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337c:	b094      	sub	sp, #80	@ 0x50
 800337e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	@ 0x44
 8003384:	2300      	movs	r3, #0
 8003386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003388:	2300      	movs	r3, #0
 800338a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003390:	4b79      	ldr	r3, [pc, #484]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d00d      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x40>
 800339c:	2b08      	cmp	r3, #8
 800339e:	f200 80e1 	bhi.w	8003564 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033aa:	e0db      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b73      	ldr	r3, [pc, #460]	@ (800357c <HAL_RCC_GetSysClockFreq+0x204>)
 80033ae:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80033b0:	e0db      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b2:	4b73      	ldr	r3, [pc, #460]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x208>)
 80033b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033b6:	e0d8      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d063      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	2200      	movs	r2, #0
 80033d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033ea:	4622      	mov	r2, r4
 80033ec:	462b      	mov	r3, r5
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	0159      	lsls	r1, r3, #5
 80033f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fc:	0150      	lsls	r0, r2, #5
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4621      	mov	r1, r4
 8003404:	1a51      	subs	r1, r2, r1
 8003406:	6139      	str	r1, [r7, #16]
 8003408:	4629      	mov	r1, r5
 800340a:	eb63 0301 	sbc.w	r3, r3, r1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800341c:	4659      	mov	r1, fp
 800341e:	018b      	lsls	r3, r1, #6
 8003420:	4651      	mov	r1, sl
 8003422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003426:	4651      	mov	r1, sl
 8003428:	018a      	lsls	r2, r1, #6
 800342a:	4651      	mov	r1, sl
 800342c:	ebb2 0801 	subs.w	r8, r2, r1
 8003430:	4659      	mov	r1, fp
 8003432:	eb63 0901 	sbc.w	r9, r3, r1
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800344a:	4690      	mov	r8, r2
 800344c:	4699      	mov	r9, r3
 800344e:	4623      	mov	r3, r4
 8003450:	eb18 0303 	adds.w	r3, r8, r3
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	462b      	mov	r3, r5
 8003458:	eb49 0303 	adc.w	r3, r9, r3
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800346a:	4629      	mov	r1, r5
 800346c:	024b      	lsls	r3, r1, #9
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003474:	4621      	mov	r1, r4
 8003476:	024a      	lsls	r2, r1, #9
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800347e:	2200      	movs	r2, #0
 8003480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003488:	f7fd fbfe 	bl	8000c88 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003494:	e058      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003496:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	2200      	movs	r2, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	4611      	mov	r1, r2
 80034a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	f04f 0000 	mov.w	r0, #0
 80034b8:	f04f 0100 	mov.w	r1, #0
 80034bc:	0159      	lsls	r1, r3, #5
 80034be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c2:	0150      	lsls	r0, r2, #5
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4641      	mov	r1, r8
 80034ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ce:	4649      	mov	r1, r9
 80034d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034e8:	ebb2 040a 	subs.w	r4, r2, sl
 80034ec:	eb63 050b 	sbc.w	r5, r3, fp
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	00eb      	lsls	r3, r5, #3
 80034fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	4614      	mov	r4, r2
 8003502:	461d      	mov	r5, r3
 8003504:	4643      	mov	r3, r8
 8003506:	18e3      	adds	r3, r4, r3
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	464b      	mov	r3, r9
 800350c:	eb45 0303 	adc.w	r3, r5, r3
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351e:	4629      	mov	r1, r5
 8003520:	028b      	lsls	r3, r1, #10
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003528:	4621      	mov	r1, r4
 800352a:	028a      	lsls	r2, r1, #10
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003532:	2200      	movs	r2, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	61fa      	str	r2, [r7, #28]
 8003538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353c:	f7fd fba4 	bl	8000c88 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x200>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003558:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800355a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCC_GetSysClockFreq+0x204>)
 8003566:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800356c:	4618      	mov	r0, r3
 800356e:	3750      	adds	r7, #80	@ 0x50
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	007a1200 	.word	0x007a1200

08003584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <HAL_RCC_GetHCLKFreq+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	2000000c 	.word	0x2000000c

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff0 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	0a9b      	lsrs	r3, r3, #10
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	@ (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	0800b140 	.word	0x0800b140

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffdc 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0b5b      	lsrs	r3, r3, #13
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	@ (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	0800b140 	.word	0x0800b140

080035ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07b      	b.n	80036f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800360e:	d009      	beq.n	8003624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
 8003616:	e005      	b.n	8003624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe fcf2 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800365a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	ea42 0103 	orr.w	r1, r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	f003 0104 	and.w	r1, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	f003 0210 	and.w	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_SPI_Transmit+0x22>
 800371c:	2302      	movs	r3, #2
 800371e:	e12d      	b.n	800397c <HAL_SPI_Transmit+0x27e>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003728:	f7fe ff9e 	bl	8002668 <HAL_GetTick>
 800372c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d002      	beq.n	8003744 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003742:	e116      	b.n	8003972 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_SPI_Transmit+0x52>
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003754:	e10d      	b.n	8003972 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2203      	movs	r2, #3
 800375a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800379c:	d10f      	bne.n	80037be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c8:	2b40      	cmp	r3, #64	@ 0x40
 80037ca:	d007      	beq.n	80037dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037e4:	d14f      	bne.n	8003886 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Transmit+0xf6>
 80037ee:	8afb      	ldrh	r3, [r7, #22]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d142      	bne.n	800387a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003818:	e02f      	b.n	800387a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b02      	cmp	r3, #2
 8003826:	d112      	bne.n	800384e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	1c9a      	adds	r2, r3, #2
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800384c:	e015      	b.n	800387a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384e:	f7fe ff0b 	bl	8002668 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d803      	bhi.n	8003866 <HAL_SPI_Transmit+0x168>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d102      	bne.n	800386c <HAL_SPI_Transmit+0x16e>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003878:	e07b      	b.n	8003972 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ca      	bne.n	800381a <HAL_SPI_Transmit+0x11c>
 8003884:	e050      	b.n	8003928 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_SPI_Transmit+0x196>
 800388e:	8afb      	ldrh	r3, [r7, #22]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d144      	bne.n	800391e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	7812      	ldrb	r2, [r2, #0]
 80038a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038ba:	e030      	b.n	800391e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d113      	bne.n	80038f2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038f0:	e015      	b.n	800391e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f2:	f7fe feb9 	bl	8002668 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d803      	bhi.n	800390a <HAL_SPI_Transmit+0x20c>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d102      	bne.n	8003910 <HAL_SPI_Transmit+0x212>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800391c:	e029      	b.n	8003972 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1c9      	bne.n	80038bc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	6839      	ldr	r1, [r7, #0]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fbdf 	bl	80040f0 <SPI_EndRxTxTransaction>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e003      	b.n	8003972 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800397a:	7ffb      	ldrb	r3, [r7, #31]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
 80039a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039a8:	e0fb      	b.n	8003ba2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039b2:	d112      	bne.n	80039da <HAL_SPI_Receive+0x56>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10e      	bne.n	80039da <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2204      	movs	r2, #4
 80039c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f8ef 	bl	8003bb4 <HAL_SPI_TransmitReceive>
 80039d6:	4603      	mov	r3, r0
 80039d8:	e0e8      	b.n	8003bac <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_SPI_Receive+0x64>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0e1      	b.n	8003bac <HAL_SPI_Receive+0x228>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039f0:	f7fe fe3a 	bl	8002668 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_SPI_Receive+0x7e>
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a06:	e0cc      	b.n	8003ba2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a4e:	d10f      	bne.n	8003a70 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7a:	2b40      	cmp	r3, #64	@ 0x40
 8003a7c:	d007      	beq.n	8003a8e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d16a      	bne.n	8003b6c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a96:	e032      	b.n	8003afe <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d115      	bne.n	8003ad2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f103 020c 	add.w	r2, r3, #12
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ad0:	e015      	b.n	8003afe <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad2:	f7fe fdc9 	bl	8002668 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d803      	bhi.n	8003aea <HAL_SPI_Receive+0x166>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d102      	bne.n	8003af0 <HAL_SPI_Receive+0x16c>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003afc:	e051      	b.n	8003ba2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1c7      	bne.n	8003a98 <HAL_SPI_Receive+0x114>
 8003b08:	e035      	b.n	8003b76 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d113      	bne.n	8003b40 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	b292      	uxth	r2, r2
 8003b24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2a:	1c9a      	adds	r2, r3, #2
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b3e:	e015      	b.n	8003b6c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b40:	f7fe fd92 	bl	8002668 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d803      	bhi.n	8003b58 <HAL_SPI_Receive+0x1d4>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d102      	bne.n	8003b5e <HAL_SPI_Receive+0x1da>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b6a:	e01a      	b.n	8003ba2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1c9      	bne.n	8003b0a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fa52 	bl	8004024 <SPI_EndRxTransaction>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
 8003b98:	e003      	b.n	8003ba2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	@ 0x30
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x26>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e198      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x358>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be2:	f7fe fd41 	bl	8002668 <HAL_GetTick>
 8003be6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bf8:	887b      	ldrh	r3, [r7, #2]
 8003bfa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d00f      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0x70>
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c0a:	d107      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x68>
 8003c14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d003      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c22:	e16d      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x82>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x82>
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c3c:	e160      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d003      	beq.n	8003c52 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2205      	movs	r2, #5
 8003c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	887a      	ldrh	r2, [r7, #2]
 8003c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	887a      	ldrh	r2, [r7, #2]
 8003c68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	887a      	ldrh	r2, [r7, #2]
 8003c7a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c92:	2b40      	cmp	r3, #64	@ 0x40
 8003c94:	d007      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cae:	d17c      	bne.n	8003daa <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x10a>
 8003cb8:	8b7b      	ldrh	r3, [r7, #26]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d16a      	bne.n	8003d94 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	1c9a      	adds	r2, r3, #2
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce2:	e057      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d11b      	bne.n	8003d2a <HAL_SPI_TransmitReceive+0x176>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d016      	beq.n	8003d2a <HAL_SPI_TransmitReceive+0x176>
 8003cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d113      	bne.n	8003d2a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	881a      	ldrh	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	1c9a      	adds	r2, r3, #2
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d119      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x1b8>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d014      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	b292      	uxth	r2, r2
 8003d4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d54:	1c9a      	adds	r2, r3, #2
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d6c:	f7fe fc7c 	bl	8002668 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d80b      	bhi.n	8003d94 <HAL_SPI_TransmitReceive+0x1e0>
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d007      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003d92:	e0b5      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1a2      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x130>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d19d      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x130>
 8003da8:	e080      	b.n	8003eac <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x204>
 8003db2:	8b7b      	ldrh	r3, [r7, #26]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d16f      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	7812      	ldrb	r2, [r2, #0]
 8003dc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dde:	e05b      	b.n	8003e98 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d11c      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x274>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d017      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x274>
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d114      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d119      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x2b6>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d014      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e66:	2301      	movs	r3, #1
 8003e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e6a:	f7fe fbfd 	bl	8002668 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d803      	bhi.n	8003e82 <HAL_SPI_TransmitReceive+0x2ce>
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d102      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x2d4>
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003e96:	e033      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d19e      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x22c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d199      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f91d 	bl	80040f0 <SPI_EndRxTxTransaction>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d006      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003ec8:	e01a      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef6:	e003      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3730      	adds	r7, #48	@ 0x30
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f24:	f7fe fba0 	bl	8002668 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4413      	add	r3, r2
 8003f32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f34:	f7fe fb98 	bl	8002668 <HAL_GetTick>
 8003f38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3a:	4b39      	ldr	r3, [pc, #228]	@ (8004020 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	015b      	lsls	r3, r3, #5
 8003f40:	0d1b      	lsrs	r3, r3, #20
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4a:	e054      	b.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d050      	beq.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f54:	f7fe fb88 	bl	8002668 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d902      	bls.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d13d      	bne.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f82:	d111      	bne.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f8c:	d004      	beq.n	8003f98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f96:	d107      	bne.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb0:	d10f      	bne.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e017      	b.n	8004016 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d19b      	bne.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c

08004024 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004038:	d111      	bne.n	800405e <SPI_EndRxTransaction+0x3a>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004042:	d004      	beq.n	800404e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404c:	d107      	bne.n	800405e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004066:	d12a      	bne.n	80040be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004070:	d012      	beq.n	8004098 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	@ 0x80
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff ff49 	bl	8003f14 <SPI_WaitFlagStateUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d02d      	beq.n	80040e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e026      	b.n	80040e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2200      	movs	r2, #0
 80040a0:	2101      	movs	r1, #1
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7ff ff36 	bl	8003f14 <SPI_WaitFlagStateUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01a      	beq.n	80040e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	f043 0220 	orr.w	r2, r3, #32
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e013      	b.n	80040e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2101      	movs	r1, #1
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff ff23 	bl	8003f14 <SPI_WaitFlagStateUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e000      	b.n	80040e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2201      	movs	r2, #1
 8004104:	2102      	movs	r1, #2
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff ff04 	bl	8003f14 <SPI_WaitFlagStateUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e032      	b.n	8004188 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004122:	4b1b      	ldr	r3, [pc, #108]	@ (8004190 <SPI_EndRxTxTransaction+0xa0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <SPI_EndRxTxTransaction+0xa4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	0d5b      	lsrs	r3, r3, #21
 800412e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004140:	d112      	bne.n	8004168 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2200      	movs	r2, #0
 800414a:	2180      	movs	r1, #128	@ 0x80
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7ff fee1 	bl	8003f14 <SPI_WaitFlagStateUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d016      	beq.n	8004186 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e00f      	b.n	8004188 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	3b01      	subs	r3, #1
 8004172:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417e:	2b80      	cmp	r3, #128	@ 0x80
 8004180:	d0f2      	beq.n	8004168 <SPI_EndRxTxTransaction+0x78>
 8004182:	e000      	b.n	8004186 <SPI_EndRxTxTransaction+0x96>
        break;
 8004184:	bf00      	nop
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	2000000c 	.word	0x2000000c
 8004194:	165e9f81 	.word	0x165e9f81

08004198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e041      	b.n	800422e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd ff7a 	bl	80020b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f000 fe6e 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d001      	beq.n	8004250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e046      	b.n	80042de <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a23      	ldr	r2, [pc, #140]	@ (80042ec <HAL_TIM_Base_Start+0xb4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d022      	beq.n	80042a8 <HAL_TIM_Base_Start+0x70>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426a:	d01d      	beq.n	80042a8 <HAL_TIM_Base_Start+0x70>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1f      	ldr	r2, [pc, #124]	@ (80042f0 <HAL_TIM_Base_Start+0xb8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d018      	beq.n	80042a8 <HAL_TIM_Base_Start+0x70>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1e      	ldr	r2, [pc, #120]	@ (80042f4 <HAL_TIM_Base_Start+0xbc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <HAL_TIM_Base_Start+0x70>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1c      	ldr	r2, [pc, #112]	@ (80042f8 <HAL_TIM_Base_Start+0xc0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00e      	beq.n	80042a8 <HAL_TIM_Base_Start+0x70>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1b      	ldr	r2, [pc, #108]	@ (80042fc <HAL_TIM_Base_Start+0xc4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d009      	beq.n	80042a8 <HAL_TIM_Base_Start+0x70>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a19      	ldr	r2, [pc, #100]	@ (8004300 <HAL_TIM_Base_Start+0xc8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_TIM_Base_Start+0x70>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a18      	ldr	r2, [pc, #96]	@ (8004304 <HAL_TIM_Base_Start+0xcc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d111      	bne.n	80042cc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b06      	cmp	r3, #6
 80042b8:	d010      	beq.n	80042dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ca:	e007      	b.n	80042dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40010400 	.word	0x40010400
 8004300:	40014000 	.word	0x40014000
 8004304:	40001800 	.word	0x40001800

08004308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e041      	b.n	800439e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd ff12 	bl	8002158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f000 fdb6 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_TIM_PWM_Start+0x24>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e022      	b.n	8004412 <HAL_TIM_PWM_Start+0x6a>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d109      	bne.n	80043e6 <HAL_TIM_PWM_Start+0x3e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b01      	cmp	r3, #1
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	e015      	b.n	8004412 <HAL_TIM_PWM_Start+0x6a>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d109      	bne.n	8004400 <HAL_TIM_PWM_Start+0x58>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e008      	b.n	8004412 <HAL_TIM_PWM_Start+0x6a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07c      	b.n	8004514 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Start+0x82>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004428:	e013      	b.n	8004452 <HAL_TIM_PWM_Start+0xaa>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Start+0x92>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004438:	e00b      	b.n	8004452 <HAL_TIM_PWM_Start+0xaa>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start+0xa2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004448:	e003      	b.n	8004452 <HAL_TIM_PWM_Start+0xaa>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	6839      	ldr	r1, [r7, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f001 f94c 	bl	80056f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2d      	ldr	r2, [pc, #180]	@ (800451c <HAL_TIM_PWM_Start+0x174>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_PWM_Start+0xcc>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2c      	ldr	r2, [pc, #176]	@ (8004520 <HAL_TIM_PWM_Start+0x178>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <HAL_TIM_PWM_Start+0xd0>
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <HAL_TIM_PWM_Start+0xd2>
 8004478:	2300      	movs	r3, #0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800448c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a22      	ldr	r2, [pc, #136]	@ (800451c <HAL_TIM_PWM_Start+0x174>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d022      	beq.n	80044de <HAL_TIM_PWM_Start+0x136>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a0:	d01d      	beq.n	80044de <HAL_TIM_PWM_Start+0x136>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004524 <HAL_TIM_PWM_Start+0x17c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d018      	beq.n	80044de <HAL_TIM_PWM_Start+0x136>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <HAL_TIM_PWM_Start+0x180>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_TIM_PWM_Start+0x136>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	@ (800452c <HAL_TIM_PWM_Start+0x184>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00e      	beq.n	80044de <HAL_TIM_PWM_Start+0x136>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a16      	ldr	r2, [pc, #88]	@ (8004520 <HAL_TIM_PWM_Start+0x178>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_TIM_PWM_Start+0x136>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a18      	ldr	r2, [pc, #96]	@ (8004530 <HAL_TIM_PWM_Start+0x188>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_TIM_PWM_Start+0x136>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <HAL_TIM_PWM_Start+0x18c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d111      	bne.n	8004502 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b06      	cmp	r3, #6
 80044ee:	d010      	beq.n	8004512 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004500:	e007      	b.n	8004512 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40010000 	.word	0x40010000
 8004520:	40010400 	.word	0x40010400
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00
 8004530:	40014000 	.word	0x40014000
 8004534:	40001800 	.word	0x40001800

08004538 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e041      	b.n	80045ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f839 	bl	80045d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3304      	adds	r3, #4
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f000 fc9e 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_TIM_IC_Start_IT+0x1e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004606:	b2db      	uxtb	r3, r3
 8004608:	e013      	b.n	8004632 <HAL_TIM_IC_Start_IT+0x46>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d104      	bne.n	800461a <HAL_TIM_IC_Start_IT+0x2e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e00b      	b.n	8004632 <HAL_TIM_IC_Start_IT+0x46>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d104      	bne.n	800462a <HAL_TIM_IC_Start_IT+0x3e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004626:	b2db      	uxtb	r3, r3
 8004628:	e003      	b.n	8004632 <HAL_TIM_IC_Start_IT+0x46>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <HAL_TIM_IC_Start_IT+0x58>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e013      	b.n	800466c <HAL_TIM_IC_Start_IT+0x80>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d104      	bne.n	8004654 <HAL_TIM_IC_Start_IT+0x68>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e00b      	b.n	800466c <HAL_TIM_IC_Start_IT+0x80>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b08      	cmp	r3, #8
 8004658:	d104      	bne.n	8004664 <HAL_TIM_IC_Start_IT+0x78>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e003      	b.n	800466c <HAL_TIM_IC_Start_IT+0x80>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800466a:	b2db      	uxtb	r3, r3
 800466c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800466e:	7bbb      	ldrb	r3, [r7, #14]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d102      	bne.n	800467a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004674:	7b7b      	ldrb	r3, [r7, #13]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d001      	beq.n	800467e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0cc      	b.n	8004818 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <HAL_TIM_IC_Start_IT+0xa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800468c:	e013      	b.n	80046b6 <HAL_TIM_IC_Start_IT+0xca>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d104      	bne.n	800469e <HAL_TIM_IC_Start_IT+0xb2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800469c:	e00b      	b.n	80046b6 <HAL_TIM_IC_Start_IT+0xca>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_IC_Start_IT+0xc2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ac:	e003      	b.n	80046b6 <HAL_TIM_IC_Start_IT+0xca>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_IC_Start_IT+0xda>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046c4:	e013      	b.n	80046ee <HAL_TIM_IC_Start_IT+0x102>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_IC_Start_IT+0xea>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046d4:	e00b      	b.n	80046ee <HAL_TIM_IC_Start_IT+0x102>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d104      	bne.n	80046e6 <HAL_TIM_IC_Start_IT+0xfa>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046e4:	e003      	b.n	80046ee <HAL_TIM_IC_Start_IT+0x102>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d841      	bhi.n	8004778 <HAL_TIM_IC_Start_IT+0x18c>
 80046f4:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <HAL_TIM_IC_Start_IT+0x110>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004731 	.word	0x08004731
 8004700:	08004779 	.word	0x08004779
 8004704:	08004779 	.word	0x08004779
 8004708:	08004779 	.word	0x08004779
 800470c:	08004743 	.word	0x08004743
 8004710:	08004779 	.word	0x08004779
 8004714:	08004779 	.word	0x08004779
 8004718:	08004779 	.word	0x08004779
 800471c:	08004755 	.word	0x08004755
 8004720:	08004779 	.word	0x08004779
 8004724:	08004779 	.word	0x08004779
 8004728:	08004779 	.word	0x08004779
 800472c:	08004767 	.word	0x08004767
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0202 	orr.w	r2, r2, #2
 800473e:	60da      	str	r2, [r3, #12]
      break;
 8004740:	e01d      	b.n	800477e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0204 	orr.w	r2, r2, #4
 8004750:	60da      	str	r2, [r3, #12]
      break;
 8004752:	e014      	b.n	800477e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0208 	orr.w	r2, r2, #8
 8004762:	60da      	str	r2, [r3, #12]
      break;
 8004764:	e00b      	b.n	800477e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0210 	orr.w	r2, r2, #16
 8004774:	60da      	str	r2, [r3, #12]
      break;
 8004776:	e002      	b.n	800477e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      break;
 800477c:	bf00      	nop
  }

  if (status == HAL_OK)
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d148      	bne.n	8004816 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2201      	movs	r2, #1
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 ffb3 	bl	80056f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a22      	ldr	r2, [pc, #136]	@ (8004820 <HAL_TIM_IC_Start_IT+0x234>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d022      	beq.n	80047e2 <HAL_TIM_IC_Start_IT+0x1f6>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a4:	d01d      	beq.n	80047e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004824 <HAL_TIM_IC_Start_IT+0x238>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d018      	beq.n	80047e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004828 <HAL_TIM_IC_Start_IT+0x23c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1b      	ldr	r2, [pc, #108]	@ (800482c <HAL_TIM_IC_Start_IT+0x240>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a19      	ldr	r2, [pc, #100]	@ (8004830 <HAL_TIM_IC_Start_IT+0x244>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a18      	ldr	r2, [pc, #96]	@ (8004834 <HAL_TIM_IC_Start_IT+0x248>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a16      	ldr	r2, [pc, #88]	@ (8004838 <HAL_TIM_IC_Start_IT+0x24c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d111      	bne.n	8004806 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d010      	beq.n	8004816 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004804:	e007      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40010400 	.word	0x40010400
 8004834:	40014000 	.word	0x40014000
 8004838:	40001800 	.word	0x40001800

0800483c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d020      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01b      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0202 	mvn.w	r2, #2
 8004870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fc fbac 	bl	8000fe4 <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 faf3 	bl	8004e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fafa 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d020      	beq.n	80048ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01b      	beq.n	80048ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0204 	mvn.w	r2, #4
 80048bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc fb86 	bl	8000fe4 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 facd 	bl	8004e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fad4 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d020      	beq.n	8004938 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01b      	beq.n	8004938 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0208 	mvn.w	r2, #8
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2204      	movs	r2, #4
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fb60 	bl	8000fe4 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 faa7 	bl	8004e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 faae 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d020      	beq.n	8004984 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01b      	beq.n	8004984 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0210 	mvn.w	r2, #16
 8004954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2208      	movs	r2, #8
 800495a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fb3a 	bl	8000fe4 <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa81 	bl	8004e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fa88 	bl	8004e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00c      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0201 	mvn.w	r2, #1
 80049a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa5f 	bl	8004e66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00c      	beq.n	80049cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 ff42 	bl	8005850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa59 	bl	8004ea2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00c      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0220 	mvn.w	r2, #32
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 ff14 	bl	800583c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e088      	b.n	8004b4c <HAL_TIM_IC_ConfigChannel+0x130>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004a58:	f000 fc8a 	bl	8005370 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 020c 	bic.w	r2, r2, #12
 8004a6a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6999      	ldr	r1, [r3, #24]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	619a      	str	r2, [r3, #24]
 8004a7e:	e060      	b.n	8004b42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d11c      	bne.n	8004ac0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004a96:	f000 fd0e 	bl	80054b6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004aa8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6999      	ldr	r1, [r3, #24]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	021a      	lsls	r2, r3, #8
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	619a      	str	r2, [r3, #24]
 8004abe:	e040      	b.n	8004b42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d11b      	bne.n	8004afe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004ad6:	f000 fd5b 	bl	8005590 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 020c 	bic.w	r2, r2, #12
 8004ae8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69d9      	ldr	r1, [r3, #28]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	61da      	str	r2, [r3, #28]
 8004afc:	e021      	b.n	8004b42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	d11c      	bne.n	8004b3e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004b14:	f000 fd78 	bl	8005608 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b26:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69d9      	ldr	r1, [r3, #28]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	021a      	lsls	r2, r3, #8
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	61da      	str	r2, [r3, #28]
 8004b3c:	e001      	b.n	8004b42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e0ae      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	f200 809f 	bhi.w	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b82:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004cc1 	.word	0x08004cc1
 8004b90:	08004cc1 	.word	0x08004cc1
 8004b94:	08004cc1 	.word	0x08004cc1
 8004b98:	08004bfd 	.word	0x08004bfd
 8004b9c:	08004cc1 	.word	0x08004cc1
 8004ba0:	08004cc1 	.word	0x08004cc1
 8004ba4:	08004cc1 	.word	0x08004cc1
 8004ba8:	08004c3f 	.word	0x08004c3f
 8004bac:	08004cc1 	.word	0x08004cc1
 8004bb0:	08004cc1 	.word	0x08004cc1
 8004bb4:	08004cc1 	.word	0x08004cc1
 8004bb8:	08004c7f 	.word	0x08004c7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fa24 	bl	8005010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0208 	orr.w	r2, r2, #8
 8004bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0204 	bic.w	r2, r2, #4
 8004be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6999      	ldr	r1, [r3, #24]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	619a      	str	r2, [r3, #24]
      break;
 8004bfa:	e064      	b.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fa74 	bl	80050f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6999      	ldr	r1, [r3, #24]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	021a      	lsls	r2, r3, #8
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	619a      	str	r2, [r3, #24]
      break;
 8004c3c:	e043      	b.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fac9 	bl	80051dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0208 	orr.w	r2, r2, #8
 8004c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0204 	bic.w	r2, r2, #4
 8004c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69d9      	ldr	r1, [r3, #28]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	61da      	str	r2, [r3, #28]
      break;
 8004c7c:	e023      	b.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fb1d 	bl	80052c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69d9      	ldr	r1, [r3, #28]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	021a      	lsls	r2, r3, #8
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	61da      	str	r2, [r3, #28]
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e0b4      	b.n	8004e5e <HAL_TIM_ConfigClockSource+0x186>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2c:	d03e      	beq.n	8004dac <HAL_TIM_ConfigClockSource+0xd4>
 8004d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d32:	f200 8087 	bhi.w	8004e44 <HAL_TIM_ConfigClockSource+0x16c>
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3a:	f000 8086 	beq.w	8004e4a <HAL_TIM_ConfigClockSource+0x172>
 8004d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d42:	d87f      	bhi.n	8004e44 <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b70      	cmp	r3, #112	@ 0x70
 8004d46:	d01a      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0xa6>
 8004d48:	2b70      	cmp	r3, #112	@ 0x70
 8004d4a:	d87b      	bhi.n	8004e44 <HAL_TIM_ConfigClockSource+0x16c>
 8004d4c:	2b60      	cmp	r3, #96	@ 0x60
 8004d4e:	d050      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d50:	2b60      	cmp	r3, #96	@ 0x60
 8004d52:	d877      	bhi.n	8004e44 <HAL_TIM_ConfigClockSource+0x16c>
 8004d54:	2b50      	cmp	r3, #80	@ 0x50
 8004d56:	d03c      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d58:	2b50      	cmp	r3, #80	@ 0x50
 8004d5a:	d873      	bhi.n	8004e44 <HAL_TIM_ConfigClockSource+0x16c>
 8004d5c:	2b40      	cmp	r3, #64	@ 0x40
 8004d5e:	d058      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x13a>
 8004d60:	2b40      	cmp	r3, #64	@ 0x40
 8004d62:	d86f      	bhi.n	8004e44 <HAL_TIM_ConfigClockSource+0x16c>
 8004d64:	2b30      	cmp	r3, #48	@ 0x30
 8004d66:	d064      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0x15a>
 8004d68:	2b30      	cmp	r3, #48	@ 0x30
 8004d6a:	d86b      	bhi.n	8004e44 <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d060      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0x15a>
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d867      	bhi.n	8004e44 <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d05c      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0x15a>
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d05a      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0x15a>
 8004d7c:	e062      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d8e:	f000 fc93 	bl	80056b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004da0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	609a      	str	r2, [r3, #8]
      break;
 8004daa:	e04f      	b.n	8004e4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dbc:	f000 fc7c 	bl	80056b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dce:	609a      	str	r2, [r3, #8]
      break;
 8004dd0:	e03c      	b.n	8004e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dde:	461a      	mov	r2, r3
 8004de0:	f000 fb3a 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2150      	movs	r1, #80	@ 0x50
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fc49 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004df0:	e02c      	b.n	8004e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f000 fb96 	bl	8005530 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2160      	movs	r1, #96	@ 0x60
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fc39 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004e10:	e01c      	b.n	8004e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f000 fb1a 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2140      	movs	r1, #64	@ 0x40
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fc29 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004e30:	e00c      	b.n	8004e4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	f000 fc20 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004e42:	e003      	b.n	8004e4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
      break;
 8004e48:	e000      	b.n	8004e4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a46      	ldr	r2, [pc, #280]	@ (8004fe4 <TIM_Base_SetConfig+0x12c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed6:	d00f      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a43      	ldr	r2, [pc, #268]	@ (8004fe8 <TIM_Base_SetConfig+0x130>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a42      	ldr	r2, [pc, #264]	@ (8004fec <TIM_Base_SetConfig+0x134>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a41      	ldr	r2, [pc, #260]	@ (8004ff0 <TIM_Base_SetConfig+0x138>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a40      	ldr	r2, [pc, #256]	@ (8004ff4 <TIM_Base_SetConfig+0x13c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d108      	bne.n	8004f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a35      	ldr	r2, [pc, #212]	@ (8004fe4 <TIM_Base_SetConfig+0x12c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d02b      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f18:	d027      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a32      	ldr	r2, [pc, #200]	@ (8004fe8 <TIM_Base_SetConfig+0x130>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d023      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a31      	ldr	r2, [pc, #196]	@ (8004fec <TIM_Base_SetConfig+0x134>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01f      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a30      	ldr	r2, [pc, #192]	@ (8004ff0 <TIM_Base_SetConfig+0x138>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01b      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2f      	ldr	r2, [pc, #188]	@ (8004ff4 <TIM_Base_SetConfig+0x13c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d017      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff8 <TIM_Base_SetConfig+0x140>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2d      	ldr	r2, [pc, #180]	@ (8004ffc <TIM_Base_SetConfig+0x144>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00f      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005000 <TIM_Base_SetConfig+0x148>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00b      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2b      	ldr	r2, [pc, #172]	@ (8005004 <TIM_Base_SetConfig+0x14c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005008 <TIM_Base_SetConfig+0x150>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a29      	ldr	r2, [pc, #164]	@ (800500c <TIM_Base_SetConfig+0x154>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d108      	bne.n	8004f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a10      	ldr	r2, [pc, #64]	@ (8004fe4 <TIM_Base_SetConfig+0x12c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_Base_SetConfig+0xf8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a12      	ldr	r2, [pc, #72]	@ (8004ff4 <TIM_Base_SetConfig+0x13c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d103      	bne.n	8004fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d105      	bne.n	8004fd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f023 0201 	bic.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	611a      	str	r2, [r3, #16]
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	40000400 	.word	0x40000400
 8004fec:	40000800 	.word	0x40000800
 8004ff0:	40000c00 	.word	0x40000c00
 8004ff4:	40010400 	.word	0x40010400
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40014400 	.word	0x40014400
 8005000:	40014800 	.word	0x40014800
 8005004:	40001800 	.word	0x40001800
 8005008:	40001c00 	.word	0x40001c00
 800500c:	40002000 	.word	0x40002000

08005010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	f023 0201 	bic.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f023 0302 	bic.w	r3, r3, #2
 8005058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a20      	ldr	r2, [pc, #128]	@ (80050e8 <TIM_OC1_SetConfig+0xd8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC1_SetConfig+0x64>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a1f      	ldr	r2, [pc, #124]	@ (80050ec <TIM_OC1_SetConfig+0xdc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10c      	bne.n	800508e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0308 	bic.w	r3, r3, #8
 800507a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f023 0304 	bic.w	r3, r3, #4
 800508c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a15      	ldr	r2, [pc, #84]	@ (80050e8 <TIM_OC1_SetConfig+0xd8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_OC1_SetConfig+0x8e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a14      	ldr	r2, [pc, #80]	@ (80050ec <TIM_OC1_SetConfig+0xdc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d111      	bne.n	80050c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	621a      	str	r2, [r3, #32]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010400 	.word	0x40010400

080050f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f023 0210 	bic.w	r2, r3, #16
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0320 	bic.w	r3, r3, #32
 800513a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a22      	ldr	r2, [pc, #136]	@ (80051d4 <TIM_OC2_SetConfig+0xe4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_OC2_SetConfig+0x68>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a21      	ldr	r2, [pc, #132]	@ (80051d8 <TIM_OC2_SetConfig+0xe8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d10d      	bne.n	8005174 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800515e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005172:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a17      	ldr	r2, [pc, #92]	@ (80051d4 <TIM_OC2_SetConfig+0xe4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC2_SetConfig+0x94>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a16      	ldr	r2, [pc, #88]	@ (80051d8 <TIM_OC2_SetConfig+0xe8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d113      	bne.n	80051ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800518a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a21      	ldr	r2, [pc, #132]	@ (80052bc <TIM_OC3_SetConfig+0xe0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC3_SetConfig+0x66>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a20      	ldr	r2, [pc, #128]	@ (80052c0 <TIM_OC3_SetConfig+0xe4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10d      	bne.n	800525e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800525c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a16      	ldr	r2, [pc, #88]	@ (80052bc <TIM_OC3_SetConfig+0xe0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_OC3_SetConfig+0x92>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a15      	ldr	r2, [pc, #84]	@ (80052c0 <TIM_OC3_SetConfig+0xe4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d113      	bne.n	8005296 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800527c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	621a      	str	r2, [r3, #32]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40010400 	.word	0x40010400

080052c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800530e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	031b      	lsls	r3, r3, #12
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a12      	ldr	r2, [pc, #72]	@ (8005368 <TIM_OC4_SetConfig+0xa4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_OC4_SetConfig+0x68>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a11      	ldr	r2, [pc, #68]	@ (800536c <TIM_OC4_SetConfig+0xa8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d109      	bne.n	8005340 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40010000 	.word	0x40010000
 800536c:	40010400 	.word	0x40010400

08005370 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f023 0201 	bic.w	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4a28      	ldr	r2, [pc, #160]	@ (800543c <TIM_TI1_SetConfig+0xcc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01b      	beq.n	80053d6 <TIM_TI1_SetConfig+0x66>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a4:	d017      	beq.n	80053d6 <TIM_TI1_SetConfig+0x66>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a25      	ldr	r2, [pc, #148]	@ (8005440 <TIM_TI1_SetConfig+0xd0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <TIM_TI1_SetConfig+0x66>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a24      	ldr	r2, [pc, #144]	@ (8005444 <TIM_TI1_SetConfig+0xd4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <TIM_TI1_SetConfig+0x66>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a23      	ldr	r2, [pc, #140]	@ (8005448 <TIM_TI1_SetConfig+0xd8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <TIM_TI1_SetConfig+0x66>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4a22      	ldr	r2, [pc, #136]	@ (800544c <TIM_TI1_SetConfig+0xdc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_TI1_SetConfig+0x66>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a21      	ldr	r2, [pc, #132]	@ (8005450 <TIM_TI1_SetConfig+0xe0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_TI1_SetConfig+0x66>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a20      	ldr	r2, [pc, #128]	@ (8005454 <TIM_TI1_SetConfig+0xe4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d101      	bne.n	80053da <TIM_TI1_SetConfig+0x6a>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <TIM_TI1_SetConfig+0x6c>
 80053da:	2300      	movs	r3, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e003      	b.n	80053fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	b2db      	uxtb	r3, r3
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f023 030a 	bic.w	r3, r3, #10
 8005414:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f003 030a 	and.w	r3, r3, #10
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40010400 	.word	0x40010400
 8005450:	40014000 	.word	0x40014000
 8005454:	40001800 	.word	0x40001800

08005458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0201 	bic.w	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 030a 	bic.w	r3, r3, #10
 8005494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b087      	sub	sp, #28
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0210 	bic.w	r2, r3, #16
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	031b      	lsls	r3, r3, #12
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005508:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f023 0210 	bic.w	r2, r3, #16
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800555a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	031b      	lsls	r3, r3, #12
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800556c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f023 0303 	bic.w	r3, r3, #3
 80055bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80055e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	621a      	str	r2, [r3, #32]
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005634:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005646:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	031b      	lsls	r3, r3, #12
 800564c:	b29b      	uxth	r3, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800565a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	031b      	lsls	r3, r3, #12
 8005660:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	f043 0307 	orr.w	r3, r3, #7
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	431a      	orrs	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4313      	orrs	r3, r2
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 031f 	and.w	r3, r3, #31
 800570a:	2201      	movs	r2, #1
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1a      	ldr	r2, [r3, #32]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	43db      	mvns	r3, r3
 800571a:	401a      	ands	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1a      	ldr	r2, [r3, #32]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	fa01 f303 	lsl.w	r3, r1, r3
 8005730:	431a      	orrs	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005758:	2302      	movs	r3, #2
 800575a:	e05a      	b.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a21      	ldr	r2, [pc, #132]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a8:	d01d      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a18      	ldr	r2, [pc, #96]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a17      	ldr	r2, [pc, #92]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a15      	ldr	r2, [pc, #84]	@ (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10c      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40010400 	.word	0x40010400
 8005834:	40014000 	.word	0x40014000
 8005838:	40001800 	.word	0x40001800

0800583c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e042      	b.n	80058fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fc fcbc 	bl	8002208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	@ 0x24
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f82b 	bl	8005904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695a      	ldr	r2, [r3, #20]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005908:	b0c0      	sub	sp, #256	@ 0x100
 800590a:	af00      	add	r7, sp, #0
 800590c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005920:	68d9      	ldr	r1, [r3, #12]
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	ea40 0301 	orr.w	r3, r0, r1
 800592c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	431a      	orrs	r2, r3
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	431a      	orrs	r2, r3
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800595c:	f021 010c 	bic.w	r1, r1, #12
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800596a:	430b      	orrs	r3, r1
 800596c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597e:	6999      	ldr	r1, [r3, #24]
 8005980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	ea40 0301 	orr.w	r3, r0, r1
 800598a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b8f      	ldr	r3, [pc, #572]	@ (8005bd0 <UART_SetConfig+0x2cc>)
 8005994:	429a      	cmp	r2, r3
 8005996:	d005      	beq.n	80059a4 <UART_SetConfig+0xa0>
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd4 <UART_SetConfig+0x2d0>)
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d104      	bne.n	80059ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059a4:	f7fd fe0e 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 80059a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059ac:	e003      	b.n	80059b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059ae:	f7fd fdf5 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 80059b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c0:	f040 810c 	bne.w	8005bdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059d6:	4622      	mov	r2, r4
 80059d8:	462b      	mov	r3, r5
 80059da:	1891      	adds	r1, r2, r2
 80059dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059de:	415b      	adcs	r3, r3
 80059e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059e6:	4621      	mov	r1, r4
 80059e8:	eb12 0801 	adds.w	r8, r2, r1
 80059ec:	4629      	mov	r1, r5
 80059ee:	eb43 0901 	adc.w	r9, r3, r1
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a06:	4690      	mov	r8, r2
 8005a08:	4699      	mov	r9, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	eb18 0303 	adds.w	r3, r8, r3
 8005a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a14:	462b      	mov	r3, r5
 8005a16:	eb49 0303 	adc.w	r3, r9, r3
 8005a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a32:	460b      	mov	r3, r1
 8005a34:	18db      	adds	r3, r3, r3
 8005a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a38:	4613      	mov	r3, r2
 8005a3a:	eb42 0303 	adc.w	r3, r2, r3
 8005a3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a48:	f7fb f91e 	bl	8000c88 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4b61      	ldr	r3, [pc, #388]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005a52:	fba3 2302 	umull	r2, r3, r3, r2
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	011c      	lsls	r4, r3, #4
 8005a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	1891      	adds	r1, r2, r2
 8005a72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a74:	415b      	adcs	r3, r3
 8005a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a82:	4649      	mov	r1, r9
 8005a84:	eb43 0b01 	adc.w	fp, r3, r1
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a9c:	4692      	mov	sl, r2
 8005a9e:	469b      	mov	fp, r3
 8005aa0:	4643      	mov	r3, r8
 8005aa2:	eb1a 0303 	adds.w	r3, sl, r3
 8005aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aaa:	464b      	mov	r3, r9
 8005aac:	eb4b 0303 	adc.w	r3, fp, r3
 8005ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ac0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ac4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	18db      	adds	r3, r3, r3
 8005acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ace:	4613      	mov	r3, r2
 8005ad0:	eb42 0303 	adc.w	r3, r2, r3
 8005ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ada:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ade:	f7fb f8d3 	bl	8000c88 <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005aea:	fba3 2301 	umull	r2, r3, r3, r1
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	2264      	movs	r2, #100	@ 0x64
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	1acb      	subs	r3, r1, r3
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005afe:	4b36      	ldr	r3, [pc, #216]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005b00:	fba3 2302 	umull	r2, r3, r3, r2
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b0c:	441c      	add	r4, r3
 8005b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b20:	4642      	mov	r2, r8
 8005b22:	464b      	mov	r3, r9
 8005b24:	1891      	adds	r1, r2, r2
 8005b26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b28:	415b      	adcs	r3, r3
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b30:	4641      	mov	r1, r8
 8005b32:	1851      	adds	r1, r2, r1
 8005b34:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b36:	4649      	mov	r1, r9
 8005b38:	414b      	adcs	r3, r1
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b48:	4659      	mov	r1, fp
 8005b4a:	00cb      	lsls	r3, r1, #3
 8005b4c:	4651      	mov	r1, sl
 8005b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b52:	4651      	mov	r1, sl
 8005b54:	00ca      	lsls	r2, r1, #3
 8005b56:	4610      	mov	r0, r2
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	189b      	adds	r3, r3, r2
 8005b60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b64:	464b      	mov	r3, r9
 8005b66:	460a      	mov	r2, r1
 8005b68:	eb42 0303 	adc.w	r3, r2, r3
 8005b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b84:	460b      	mov	r3, r1
 8005b86:	18db      	adds	r3, r3, r3
 8005b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	eb42 0303 	adc.w	r3, r2, r3
 8005b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b9a:	f7fb f875 	bl	8000c88 <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	2164      	movs	r1, #100	@ 0x64
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	3332      	adds	r3, #50	@ 0x32
 8005bb6:	4a08      	ldr	r2, [pc, #32]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	f003 0207 	and.w	r2, r3, #7
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4422      	add	r2, r4
 8005bca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bcc:	e106      	b.n	8005ddc <UART_SetConfig+0x4d8>
 8005bce:	bf00      	nop
 8005bd0:	40011000 	.word	0x40011000
 8005bd4:	40011400 	.word	0x40011400
 8005bd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005be6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bee:	4642      	mov	r2, r8
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	1891      	adds	r1, r2, r2
 8005bf4:	6239      	str	r1, [r7, #32]
 8005bf6:	415b      	adcs	r3, r3
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bfe:	4641      	mov	r1, r8
 8005c00:	1854      	adds	r4, r2, r1
 8005c02:	4649      	mov	r1, r9
 8005c04:	eb43 0501 	adc.w	r5, r3, r1
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	00eb      	lsls	r3, r5, #3
 8005c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c16:	00e2      	lsls	r2, r4, #3
 8005c18:	4614      	mov	r4, r2
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	4643      	mov	r3, r8
 8005c1e:	18e3      	adds	r3, r4, r3
 8005c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c24:	464b      	mov	r3, r9
 8005c26:	eb45 0303 	adc.w	r3, r5, r3
 8005c2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	008b      	lsls	r3, r1, #2
 8005c4e:	4621      	mov	r1, r4
 8005c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c54:	4621      	mov	r1, r4
 8005c56:	008a      	lsls	r2, r1, #2
 8005c58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c5c:	f7fb f814 	bl	8000c88 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4b60      	ldr	r3, [pc, #384]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005c66:	fba3 2302 	umull	r2, r3, r3, r2
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	011c      	lsls	r4, r3, #4
 8005c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	1891      	adds	r1, r2, r2
 8005c86:	61b9      	str	r1, [r7, #24]
 8005c88:	415b      	adcs	r3, r3
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c90:	4641      	mov	r1, r8
 8005c92:	1851      	adds	r1, r2, r1
 8005c94:	6139      	str	r1, [r7, #16]
 8005c96:	4649      	mov	r1, r9
 8005c98:	414b      	adcs	r3, r1
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca8:	4659      	mov	r1, fp
 8005caa:	00cb      	lsls	r3, r1, #3
 8005cac:	4651      	mov	r1, sl
 8005cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	00ca      	lsls	r2, r1, #3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	189b      	adds	r3, r3, r2
 8005cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	460a      	mov	r2, r1
 8005cc8:	eb42 0303 	adc.w	r3, r2, r3
 8005ccc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ce8:	4649      	mov	r1, r9
 8005cea:	008b      	lsls	r3, r1, #2
 8005cec:	4641      	mov	r1, r8
 8005cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	008a      	lsls	r2, r1, #2
 8005cf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cfa:	f7fa ffc5 	bl	8000c88 <__aeabi_uldivmod>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4611      	mov	r1, r2
 8005d04:	4b38      	ldr	r3, [pc, #224]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005d06:	fba3 2301 	umull	r2, r3, r3, r1
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2264      	movs	r2, #100	@ 0x64
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	1acb      	subs	r3, r1, r3
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	3332      	adds	r3, #50	@ 0x32
 8005d18:	4a33      	ldr	r2, [pc, #204]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d24:	441c      	add	r4, r3
 8005d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d34:	4642      	mov	r2, r8
 8005d36:	464b      	mov	r3, r9
 8005d38:	1891      	adds	r1, r2, r2
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	415b      	adcs	r3, r3
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d44:	4641      	mov	r1, r8
 8005d46:	1851      	adds	r1, r2, r1
 8005d48:	6039      	str	r1, [r7, #0]
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	414b      	adcs	r3, r1
 8005d4e:	607b      	str	r3, [r7, #4]
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	00cb      	lsls	r3, r1, #3
 8005d60:	4651      	mov	r1, sl
 8005d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d66:	4651      	mov	r1, sl
 8005d68:	00ca      	lsls	r2, r1, #3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4642      	mov	r2, r8
 8005d72:	189b      	adds	r3, r3, r2
 8005d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d76:	464b      	mov	r3, r9
 8005d78:	460a      	mov	r2, r1
 8005d7a:	eb42 0303 	adc.w	r3, r2, r3
 8005d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d98:	4649      	mov	r1, r9
 8005d9a:	008b      	lsls	r3, r1, #2
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da2:	4641      	mov	r1, r8
 8005da4:	008a      	lsls	r2, r1, #2
 8005da6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005daa:	f7fa ff6d 	bl	8000c88 <__aeabi_uldivmod>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4b0d      	ldr	r3, [pc, #52]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005db4:	fba3 1302 	umull	r1, r3, r3, r2
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	2164      	movs	r1, #100	@ 0x64
 8005dbc:	fb01 f303 	mul.w	r3, r1, r3
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	3332      	adds	r3, #50	@ 0x32
 8005dc6:	4a08      	ldr	r2, [pc, #32]	@ (8005de8 <UART_SetConfig+0x4e4>)
 8005dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	f003 020f 	and.w	r2, r3, #15
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4422      	add	r2, r4
 8005dda:	609a      	str	r2, [r3, #8]
}
 8005ddc:	bf00      	nop
 8005dde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005de2:	46bd      	mov	sp, r7
 8005de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de8:	51eb851f 	.word	0x51eb851f

08005dec <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	6039      	str	r1, [r7, #0]
 8005df6:	71fb      	strb	r3, [r7, #7]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8005e00:	2200      	movs	r2, #0
 8005e02:	2108      	movs	r1, #8
 8005e04:	480c      	ldr	r0, [pc, #48]	@ (8005e38 <LIS3DSH_WriteIO+0x4c>)
 8005e06:	f7fc ff0d 	bl	8002c24 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8005e0a:	f107 010f 	add.w	r1, r7, #15
 8005e0e:	230a      	movs	r3, #10
 8005e10:	2201      	movs	r2, #1
 8005e12:	480a      	ldr	r0, [pc, #40]	@ (8005e3c <LIS3DSH_WriteIO+0x50>)
 8005e14:	f7fd fc73 	bl	80036fe <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8005e18:	79bb      	ldrb	r3, [r7, #6]
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	230a      	movs	r3, #10
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	4806      	ldr	r0, [pc, #24]	@ (8005e3c <LIS3DSH_WriteIO+0x50>)
 8005e22:	f7fd fc6c 	bl	80036fe <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8005e26:	2201      	movs	r2, #1
 8005e28:	2108      	movs	r1, #8
 8005e2a:	4803      	ldr	r0, [pc, #12]	@ (8005e38 <LIS3DSH_WriteIO+0x4c>)
 8005e2c:	f7fc fefa 	bl	8002c24 <HAL_GPIO_WritePin>
}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	20000440 	.word	0x20000440

08005e40 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	6039      	str	r1, [r7, #0]
 8005e4a:	71fb      	strb	r3, [r7, #7]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2108      	movs	r1, #8
 8005e5e:	4818      	ldr	r0, [pc, #96]	@ (8005ec0 <LIS3DSH_ReadIO+0x80>)
 8005e60:	f7fc fee0 	bl	8002c24 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8005e64:	f107 0108 	add.w	r1, r7, #8
 8005e68:	230a      	movs	r3, #10
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4815      	ldr	r0, [pc, #84]	@ (8005ec4 <LIS3DSH_ReadIO+0x84>)
 8005e6e:	f7fd fc46 	bl	80036fe <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8005e72:	79bb      	ldrb	r3, [r7, #6]
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	f107 0108 	add.w	r1, r7, #8
 8005e7a:	230a      	movs	r3, #10
 8005e7c:	4811      	ldr	r0, [pc, #68]	@ (8005ec4 <LIS3DSH_ReadIO+0x84>)
 8005e7e:	f7fd fd81 	bl	8003984 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8005e82:	2201      	movs	r2, #1
 8005e84:	2108      	movs	r1, #8
 8005e86:	480e      	ldr	r0, [pc, #56]	@ (8005ec0 <LIS3DSH_ReadIO+0x80>)
 8005e88:	f7fc fecc 	bl	8002c24 <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
 8005e90:	e00b      	b.n	8005eaa <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8005e92:	7bfa      	ldrb	r2, [r7, #15]
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	440b      	add	r3, r1
 8005e9a:	3210      	adds	r2, #16
 8005e9c:	443a      	add	r2, r7
 8005e9e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8005ea2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]
 8005eaa:	7bfa      	ldrb	r2, [r7, #15]
 8005eac:	79bb      	ldrb	r3, [r7, #6]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	dbed      	blt.n	8005e92 <LIS3DSH_ReadIO+0x52>
	}
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	20000440 	.word	0x20000440

08005ec8 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8005ed6:	2258      	movs	r2, #88	@ 0x58
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	485b      	ldr	r0, [pc, #364]	@ (8006048 <LIS3DSH_Init+0x180>)
 8005edc:	f001 fa51 	bl	8007382 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	b25b      	sxtb	r3, r3
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	b25a      	sxtb	r2, r3
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	b25b      	sxtb	r3, r3
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	b25b      	sxtb	r3, r3
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	b25b      	sxtb	r3, r3
 8005efe:	f023 030f 	bic.w	r3, r3, #15
 8005f02:	b25a      	sxtb	r2, r3
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	b25b      	sxtb	r3, r3
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	b25b      	sxtb	r3, r3
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8005f10:	f107 030f 	add.w	r3, r7, #15
 8005f14:	2201      	movs	r2, #1
 8005f16:	4619      	mov	r1, r3
 8005f18:	2020      	movs	r0, #32
 8005f1a:	f7ff ff67 	bl	8005dec <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	789b      	ldrb	r3, [r3, #2]
 8005f26:	b25b      	sxtb	r3, r3
 8005f28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f2c:	b25a      	sxtb	r2, r3
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	b25b      	sxtb	r3, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b25b      	sxtb	r3, r3
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	785b      	ldrb	r3, [r3, #1]
 8005f3e:	b25b      	sxtb	r3, r3
 8005f40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f44:	b25a      	sxtb	r2, r3
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	b25b      	sxtb	r3, r3
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	b25b      	sxtb	r3, r3
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8005f52:	f107 030f 	add.w	r3, r7, #15
 8005f56:	2201      	movs	r2, #1
 8005f58:	4619      	mov	r1, r3
 8005f5a:	2024      	movs	r0, #36	@ 0x24
 8005f5c:	f7ff ff46 	bl	8005dec <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	791b      	ldrb	r3, [r3, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8005f68:	2388      	movs	r3, #136	@ 0x88
 8005f6a:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8005f6c:	f107 030f 	add.w	r3, r7, #15
 8005f70:	2201      	movs	r2, #1
 8005f72:	4619      	mov	r1, r3
 8005f74:	2023      	movs	r0, #35	@ 0x23
 8005f76:	f7ff ff39 	bl	8005dec <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d858      	bhi.n	8006034 <LIS3DSH_Init+0x16c>
 8005f82:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <LIS3DSH_Init+0xc0>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	0800600d 	.word	0x0800600d
 8005f8c:	08006035 	.word	0x08006035
 8005f90:	08006035 	.word	0x08006035
 8005f94:	08006035 	.word	0x08006035
 8005f98:	08006035 	.word	0x08006035
 8005f9c:	08006035 	.word	0x08006035
 8005fa0:	08006035 	.word	0x08006035
 8005fa4:	08006035 	.word	0x08006035
 8005fa8:	08006015 	.word	0x08006015
 8005fac:	08006035 	.word	0x08006035
 8005fb0:	08006035 	.word	0x08006035
 8005fb4:	08006035 	.word	0x08006035
 8005fb8:	08006035 	.word	0x08006035
 8005fbc:	08006035 	.word	0x08006035
 8005fc0:	08006035 	.word	0x08006035
 8005fc4:	08006035 	.word	0x08006035
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08006035 	.word	0x08006035
 8005fd0:	08006035 	.word	0x08006035
 8005fd4:	08006035 	.word	0x08006035
 8005fd8:	08006035 	.word	0x08006035
 8005fdc:	08006035 	.word	0x08006035
 8005fe0:	08006035 	.word	0x08006035
 8005fe4:	08006035 	.word	0x08006035
 8005fe8:	08006025 	.word	0x08006025
 8005fec:	08006035 	.word	0x08006035
 8005ff0:	08006035 	.word	0x08006035
 8005ff4:	08006035 	.word	0x08006035
 8005ff8:	08006035 	.word	0x08006035
 8005ffc:	08006035 	.word	0x08006035
 8006000:	08006035 	.word	0x08006035
 8006004:	08006035 	.word	0x08006035
 8006008:	0800602d 	.word	0x0800602d
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800600c:	4b0f      	ldr	r3, [pc, #60]	@ (800604c <LIS3DSH_Init+0x184>)
 800600e:	4a10      	ldr	r2, [pc, #64]	@ (8006050 <LIS3DSH_Init+0x188>)
 8006010:	601a      	str	r2, [r3, #0]
			break;
 8006012:	e00f      	b.n	8006034 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8006014:	4b0d      	ldr	r3, [pc, #52]	@ (800604c <LIS3DSH_Init+0x184>)
 8006016:	4a0f      	ldr	r2, [pc, #60]	@ (8006054 <LIS3DSH_Init+0x18c>)
 8006018:	601a      	str	r2, [r3, #0]
			break;
 800601a:	e00b      	b.n	8006034 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 800601c:	4b0b      	ldr	r3, [pc, #44]	@ (800604c <LIS3DSH_Init+0x184>)
 800601e:	4a0e      	ldr	r2, [pc, #56]	@ (8006058 <LIS3DSH_Init+0x190>)
 8006020:	601a      	str	r2, [r3, #0]
			break;
 8006022:	e007      	b.n	8006034 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8006024:	4b09      	ldr	r3, [pc, #36]	@ (800604c <LIS3DSH_Init+0x184>)
 8006026:	4a0d      	ldr	r2, [pc, #52]	@ (800605c <LIS3DSH_Init+0x194>)
 8006028:	601a      	str	r2, [r3, #0]
			break;
 800602a:	e003      	b.n	8006034 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 800602c:	4b07      	ldr	r3, [pc, #28]	@ (800604c <LIS3DSH_Init+0x184>)
 800602e:	4a0c      	ldr	r2, [pc, #48]	@ (8006060 <LIS3DSH_Init+0x198>)
 8006030:	601a      	str	r2, [r3, #0]
			break;
 8006032:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8006034:	2201      	movs	r2, #1
 8006036:	2108      	movs	r1, #8
 8006038:	480a      	ldr	r0, [pc, #40]	@ (8006064 <LIS3DSH_Init+0x19c>)
 800603a:	f7fc fdf3 	bl	8002c24 <HAL_GPIO_WritePin>
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000440 	.word	0x20000440
 800604c:	20000018 	.word	0x20000018
 8006050:	3d75c28f 	.word	0x3d75c28f
 8006054:	3df5c28f 	.word	0x3df5c28f
 8006058:	3e3851ec 	.word	0x3e3851ec
 800605c:	3e75c28f 	.word	0x3e75c28f
 8006060:	3f3ae148 	.word	0x3f3ae148
 8006064:	40021000 	.word	0x40021000

08006068 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8006070:	f107 0314 	add.w	r3, r7, #20
 8006074:	2202      	movs	r2, #2
 8006076:	4619      	mov	r1, r3
 8006078:	2028      	movs	r0, #40	@ 0x28
 800607a:	f7ff fee1 	bl	8005e40 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 800607e:	7d7b      	ldrb	r3, [r7, #21]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	b29b      	uxth	r3, r3
 8006084:	7d3a      	ldrb	r2, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	b29b      	uxth	r3, r3
 800608a:	b21b      	sxth	r3, r3
 800608c:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	2202      	movs	r2, #2
 8006094:	4619      	mov	r1, r3
 8006096:	202a      	movs	r0, #42	@ 0x2a
 8006098:	f7ff fed2 	bl	8005e40 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800609c:	7d7b      	ldrb	r3, [r7, #21]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	7d3a      	ldrb	r2, [r7, #20]
 80060a4:	4413      	add	r3, r2
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	b21b      	sxth	r3, r3
 80060aa:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 80060ac:	f107 0314 	add.w	r3, r7, #20
 80060b0:	2202      	movs	r2, #2
 80060b2:	4619      	mov	r1, r3
 80060b4:	202c      	movs	r0, #44	@ 0x2c
 80060b6:	f7ff fec3 	bl	8005e40 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 80060ba:	7d7b      	ldrb	r3, [r7, #21]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	b29b      	uxth	r3, r3
 80060c0:	7d3a      	ldrb	r2, [r7, #20]
 80060c2:	4413      	add	r3, r2
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	b21b      	sxth	r3, r3
 80060c8:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	461a      	mov	r2, r3
 80060ce:	f107 030c 	add.w	r3, r7, #12
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	6010      	str	r0, [r2, #0]
 80060d6:	889b      	ldrh	r3, [r3, #4]
 80060d8:	8093      	strh	r3, [r2, #4]
	
}
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80060ea:	f107 0308 	add.w	r3, r7, #8
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff ffba 	bl	8006068 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80060f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006100:	4b12      	ldr	r3, [pc, #72]	@ (800614c <LIS3DSH_GetDataScaled+0x68>)
 8006102:	edd3 7a00 	vldr	s15, [r3]
 8006106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800610a:	4b11      	ldr	r3, [pc, #68]	@ (8006150 <LIS3DSH_GetDataScaled+0x6c>)
 800610c:	edd3 7a00 	vldr	s15, [r3]
 8006110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006114:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006154 <LIS3DSH_GetDataScaled+0x70>
 8006118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800611c:	4b0e      	ldr	r3, [pc, #56]	@ (8006158 <LIS3DSH_GetDataScaled+0x74>)
 800611e:	edd3 7a00 	vldr	s15, [r3]
 8006122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006126:	ee17 0a90 	vmov	r0, s15
 800612a:	f7fa fa0d 	bl	8000548 <__aeabi_f2d>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	e9c7 2300 	strd	r2, r3, [r7]
	//tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
	//tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
	
	return tempScaledData;
 8006136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800613a:	ec43 2b17 	vmov	d7, r2, r3
}
 800613e:	eeb0 0a47 	vmov.f32	s0, s14
 8006142:	eef0 0a67 	vmov.f32	s1, s15
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000018 	.word	0x20000018
 8006150:	2000001c 	.word	0x2000001c
 8006154:	00000000 	.word	0x00000000
 8006158:	20000498 	.word	0x20000498

0800615c <LIS3DSH_GetDataScaledY>:


LIS3DSH_DataScaledY LIS3DSH_GetDataScaledY(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff ff7e 	bl	8006068 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaledY tempScaledData;
	//tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 800616c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006178:	4b12      	ldr	r3, [pc, #72]	@ (80061c4 <LIS3DSH_GetDataScaledY+0x68>)
 800617a:	edd3 7a00 	vldr	s15, [r3]
 800617e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006182:	4b11      	ldr	r3, [pc, #68]	@ (80061c8 <LIS3DSH_GetDataScaledY+0x6c>)
 8006184:	edd3 7a00 	vldr	s15, [r3]
 8006188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80061cc <LIS3DSH_GetDataScaledY+0x70>
 8006190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006194:	4b0e      	ldr	r3, [pc, #56]	@ (80061d0 <LIS3DSH_GetDataScaledY+0x74>)
 8006196:	edd3 7a00 	vldr	s15, [r3]
 800619a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800619e:	ee17 0a90 	vmov	r0, s15
 80061a2:	f7fa f9d1 	bl	8000548 <__aeabi_f2d>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	e9c7 2300 	strd	r2, r3, [r7]
	//tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;

	return tempScaledData;
 80061ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80061b6:	eeb0 0a47 	vmov.f32	s0, s14
 80061ba:	eef0 0a67 	vmov.f32	s1, s15
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000018 	.word	0x20000018
 80061c8:	20000020 	.word	0x20000020
 80061cc:	00000000 	.word	0x00000000
 80061d0:	2000049c 	.word	0x2000049c

080061d4 <LIS3DSH_GetDataScaledZ>:

LIS3DSH_DataScaledZ LIS3DSH_GetDataScaledZ(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff ff42 	bl	8006068 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaledZ tempScaledData;
	//tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
	 //tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 80061e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80061e8:	ee07 3a90 	vmov	s15, r3
 80061ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061f0:	4b12      	ldr	r3, [pc, #72]	@ (800623c <LIS3DSH_GetDataScaledZ+0x68>)
 80061f2:	edd3 7a00 	vldr	s15, [r3]
 80061f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061fa:	4b11      	ldr	r3, [pc, #68]	@ (8006240 <LIS3DSH_GetDataScaledZ+0x6c>)
 80061fc:	edd3 7a00 	vldr	s15, [r3]
 8006200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006204:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006244 <LIS3DSH_GetDataScaledZ+0x70>
 8006208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800620c:	4b0e      	ldr	r3, [pc, #56]	@ (8006248 <LIS3DSH_GetDataScaledZ+0x74>)
 800620e:	edd3 7a00 	vldr	s15, [r3]
 8006212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006216:	ee17 0a90 	vmov	r0, s15
 800621a:	f7fa f995 	bl	8000548 <__aeabi_f2d>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	e9c7 2300 	strd	r2, r3, [r7]

	return tempScaledData;
 8006226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800622a:	ec43 2b17 	vmov	d7, r2, r3
}
 800622e:	eeb0 0a47 	vmov.f32	s0, s14
 8006232:	eef0 0a67 	vmov.f32	s1, s15
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20000018 	.word	0x20000018
 8006240:	20000024 	.word	0x20000024
 8006244:	00000000 	.word	0x00000000
 8006248:	200004a0 	.word	0x200004a0

0800624c <LIS3DSH_X_calibrate>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	ed87 0a01 	vstr	s0, [r7, #4]
 8006256:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 800625a:	ed97 7a00 	vldr	s14, [r7]
 800625e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006266:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800626a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800626e:	4b0b      	ldr	r3, [pc, #44]	@ (800629c <LIS3DSH_X_calibrate+0x50>)
 8006270:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 8006274:	ed97 7a00 	vldr	s14, [r7]
 8006278:	edd7 7a01 	vldr	s15, [r7, #4]
 800627c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006280:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80062a0 <LIS3DSH_X_calibrate+0x54>
 8006284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006288:	4b06      	ldr	r3, [pc, #24]	@ (80062a4 <LIS3DSH_X_calibrate+0x58>)
 800628a:	edc3 7a00 	vstr	s15, [r3]
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000498 	.word	0x20000498
 80062a0:	44fa0000 	.word	0x44fa0000
 80062a4:	2000001c 	.word	0x2000001c

080062a8 <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80062b2:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80062b6:	ed97 7a00 	vldr	s14, [r7]
 80062ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80062be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80062c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062ca:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <LIS3DSH_Y_calibrate+0x50>)
 80062cc:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 80062d0:	ed97 7a00 	vldr	s14, [r7]
 80062d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80062d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062dc:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80062fc <LIS3DSH_Y_calibrate+0x54>
 80062e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062e4:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <LIS3DSH_Y_calibrate+0x58>)
 80062e6:	edc3 7a00 	vstr	s15, [r3]
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	2000049c 	.word	0x2000049c
 80062fc:	44fa0000 	.word	0x44fa0000
 8006300:	20000020 	.word	0x20000020

08006304 <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	ed87 0a01 	vstr	s0, [r7, #4]
 800630e:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 8006312:	ed97 7a00 	vldr	s14, [r7]
 8006316:	edd7 7a01 	vldr	s15, [r7, #4]
 800631a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800631e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006326:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <LIS3DSH_Z_calibrate+0x50>)
 8006328:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 800632c:	ed97 7a00 	vldr	s14, [r7]
 8006330:	edd7 7a01 	vldr	s15, [r7, #4]
 8006334:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006338:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8006358 <LIS3DSH_Z_calibrate+0x54>
 800633c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006340:	4b06      	ldr	r3, [pc, #24]	@ (800635c <LIS3DSH_Z_calibrate+0x58>)
 8006342:	edc3 7a00 	vstr	s15, [r3]
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	200004a0 	.word	0x200004a0
 8006358:	44fa0000 	.word	0x44fa0000
 800635c:	20000024 	.word	0x20000024

08006360 <__cvt>:
 8006360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	ec57 6b10 	vmov	r6, r7, d0
 8006368:	2f00      	cmp	r7, #0
 800636a:	460c      	mov	r4, r1
 800636c:	4619      	mov	r1, r3
 800636e:	463b      	mov	r3, r7
 8006370:	bfbb      	ittet	lt
 8006372:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006376:	461f      	movlt	r7, r3
 8006378:	2300      	movge	r3, #0
 800637a:	232d      	movlt	r3, #45	@ 0x2d
 800637c:	700b      	strb	r3, [r1, #0]
 800637e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006380:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006384:	4691      	mov	r9, r2
 8006386:	f023 0820 	bic.w	r8, r3, #32
 800638a:	bfbc      	itt	lt
 800638c:	4632      	movlt	r2, r6
 800638e:	4616      	movlt	r6, r2
 8006390:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006394:	d005      	beq.n	80063a2 <__cvt+0x42>
 8006396:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800639a:	d100      	bne.n	800639e <__cvt+0x3e>
 800639c:	3401      	adds	r4, #1
 800639e:	2102      	movs	r1, #2
 80063a0:	e000      	b.n	80063a4 <__cvt+0x44>
 80063a2:	2103      	movs	r1, #3
 80063a4:	ab03      	add	r3, sp, #12
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	ab02      	add	r3, sp, #8
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	ec47 6b10 	vmov	d0, r6, r7
 80063b0:	4653      	mov	r3, sl
 80063b2:	4622      	mov	r2, r4
 80063b4:	f001 f884 	bl	80074c0 <_dtoa_r>
 80063b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063bc:	4605      	mov	r5, r0
 80063be:	d119      	bne.n	80063f4 <__cvt+0x94>
 80063c0:	f019 0f01 	tst.w	r9, #1
 80063c4:	d00e      	beq.n	80063e4 <__cvt+0x84>
 80063c6:	eb00 0904 	add.w	r9, r0, r4
 80063ca:	2200      	movs	r2, #0
 80063cc:	2300      	movs	r3, #0
 80063ce:	4630      	mov	r0, r6
 80063d0:	4639      	mov	r1, r7
 80063d2:	f7fa fb79 	bl	8000ac8 <__aeabi_dcmpeq>
 80063d6:	b108      	cbz	r0, 80063dc <__cvt+0x7c>
 80063d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80063dc:	2230      	movs	r2, #48	@ 0x30
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	454b      	cmp	r3, r9
 80063e2:	d31e      	bcc.n	8006422 <__cvt+0xc2>
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063e8:	1b5b      	subs	r3, r3, r5
 80063ea:	4628      	mov	r0, r5
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	b004      	add	sp, #16
 80063f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063f8:	eb00 0904 	add.w	r9, r0, r4
 80063fc:	d1e5      	bne.n	80063ca <__cvt+0x6a>
 80063fe:	7803      	ldrb	r3, [r0, #0]
 8006400:	2b30      	cmp	r3, #48	@ 0x30
 8006402:	d10a      	bne.n	800641a <__cvt+0xba>
 8006404:	2200      	movs	r2, #0
 8006406:	2300      	movs	r3, #0
 8006408:	4630      	mov	r0, r6
 800640a:	4639      	mov	r1, r7
 800640c:	f7fa fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006410:	b918      	cbnz	r0, 800641a <__cvt+0xba>
 8006412:	f1c4 0401 	rsb	r4, r4, #1
 8006416:	f8ca 4000 	str.w	r4, [sl]
 800641a:	f8da 3000 	ldr.w	r3, [sl]
 800641e:	4499      	add	r9, r3
 8006420:	e7d3      	b.n	80063ca <__cvt+0x6a>
 8006422:	1c59      	adds	r1, r3, #1
 8006424:	9103      	str	r1, [sp, #12]
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	e7d9      	b.n	80063de <__cvt+0x7e>

0800642a <__exponent>:
 800642a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800642c:	2900      	cmp	r1, #0
 800642e:	bfba      	itte	lt
 8006430:	4249      	neglt	r1, r1
 8006432:	232d      	movlt	r3, #45	@ 0x2d
 8006434:	232b      	movge	r3, #43	@ 0x2b
 8006436:	2909      	cmp	r1, #9
 8006438:	7002      	strb	r2, [r0, #0]
 800643a:	7043      	strb	r3, [r0, #1]
 800643c:	dd29      	ble.n	8006492 <__exponent+0x68>
 800643e:	f10d 0307 	add.w	r3, sp, #7
 8006442:	461d      	mov	r5, r3
 8006444:	270a      	movs	r7, #10
 8006446:	461a      	mov	r2, r3
 8006448:	fbb1 f6f7 	udiv	r6, r1, r7
 800644c:	fb07 1416 	mls	r4, r7, r6, r1
 8006450:	3430      	adds	r4, #48	@ 0x30
 8006452:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006456:	460c      	mov	r4, r1
 8006458:	2c63      	cmp	r4, #99	@ 0x63
 800645a:	f103 33ff 	add.w	r3, r3, #4294967295
 800645e:	4631      	mov	r1, r6
 8006460:	dcf1      	bgt.n	8006446 <__exponent+0x1c>
 8006462:	3130      	adds	r1, #48	@ 0x30
 8006464:	1e94      	subs	r4, r2, #2
 8006466:	f803 1c01 	strb.w	r1, [r3, #-1]
 800646a:	1c41      	adds	r1, r0, #1
 800646c:	4623      	mov	r3, r4
 800646e:	42ab      	cmp	r3, r5
 8006470:	d30a      	bcc.n	8006488 <__exponent+0x5e>
 8006472:	f10d 0309 	add.w	r3, sp, #9
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	42ac      	cmp	r4, r5
 800647a:	bf88      	it	hi
 800647c:	2300      	movhi	r3, #0
 800647e:	3302      	adds	r3, #2
 8006480:	4403      	add	r3, r0
 8006482:	1a18      	subs	r0, r3, r0
 8006484:	b003      	add	sp, #12
 8006486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006488:	f813 6b01 	ldrb.w	r6, [r3], #1
 800648c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006490:	e7ed      	b.n	800646e <__exponent+0x44>
 8006492:	2330      	movs	r3, #48	@ 0x30
 8006494:	3130      	adds	r1, #48	@ 0x30
 8006496:	7083      	strb	r3, [r0, #2]
 8006498:	70c1      	strb	r1, [r0, #3]
 800649a:	1d03      	adds	r3, r0, #4
 800649c:	e7f1      	b.n	8006482 <__exponent+0x58>
	...

080064a0 <_printf_float>:
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	b08d      	sub	sp, #52	@ 0x34
 80064a6:	460c      	mov	r4, r1
 80064a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064ac:	4616      	mov	r6, r2
 80064ae:	461f      	mov	r7, r3
 80064b0:	4605      	mov	r5, r0
 80064b2:	f000 feef 	bl	8007294 <_localeconv_r>
 80064b6:	6803      	ldr	r3, [r0, #0]
 80064b8:	9304      	str	r3, [sp, #16]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7f9 fed8 	bl	8000270 <strlen>
 80064c0:	2300      	movs	r3, #0
 80064c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80064c4:	f8d8 3000 	ldr.w	r3, [r8]
 80064c8:	9005      	str	r0, [sp, #20]
 80064ca:	3307      	adds	r3, #7
 80064cc:	f023 0307 	bic.w	r3, r3, #7
 80064d0:	f103 0208 	add.w	r2, r3, #8
 80064d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064d8:	f8d4 b000 	ldr.w	fp, [r4]
 80064dc:	f8c8 2000 	str.w	r2, [r8]
 80064e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80064e8:	9307      	str	r3, [sp, #28]
 80064ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80064ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80064f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064f6:	4b9c      	ldr	r3, [pc, #624]	@ (8006768 <_printf_float+0x2c8>)
 80064f8:	f04f 32ff 	mov.w	r2, #4294967295
 80064fc:	f7fa fb16 	bl	8000b2c <__aeabi_dcmpun>
 8006500:	bb70      	cbnz	r0, 8006560 <_printf_float+0xc0>
 8006502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006506:	4b98      	ldr	r3, [pc, #608]	@ (8006768 <_printf_float+0x2c8>)
 8006508:	f04f 32ff 	mov.w	r2, #4294967295
 800650c:	f7fa faf0 	bl	8000af0 <__aeabi_dcmple>
 8006510:	bb30      	cbnz	r0, 8006560 <_printf_float+0xc0>
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7fa fadf 	bl	8000adc <__aeabi_dcmplt>
 800651e:	b110      	cbz	r0, 8006526 <_printf_float+0x86>
 8006520:	232d      	movs	r3, #45	@ 0x2d
 8006522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006526:	4a91      	ldr	r2, [pc, #580]	@ (800676c <_printf_float+0x2cc>)
 8006528:	4b91      	ldr	r3, [pc, #580]	@ (8006770 <_printf_float+0x2d0>)
 800652a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800652e:	bf94      	ite	ls
 8006530:	4690      	movls	r8, r2
 8006532:	4698      	movhi	r8, r3
 8006534:	2303      	movs	r3, #3
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	f02b 0304 	bic.w	r3, fp, #4
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	9700      	str	r7, [sp, #0]
 8006544:	4633      	mov	r3, r6
 8006546:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006548:	4621      	mov	r1, r4
 800654a:	4628      	mov	r0, r5
 800654c:	f000 f9d2 	bl	80068f4 <_printf_common>
 8006550:	3001      	adds	r0, #1
 8006552:	f040 808d 	bne.w	8006670 <_printf_float+0x1d0>
 8006556:	f04f 30ff 	mov.w	r0, #4294967295
 800655a:	b00d      	add	sp, #52	@ 0x34
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	4640      	mov	r0, r8
 8006566:	4649      	mov	r1, r9
 8006568:	f7fa fae0 	bl	8000b2c <__aeabi_dcmpun>
 800656c:	b140      	cbz	r0, 8006580 <_printf_float+0xe0>
 800656e:	464b      	mov	r3, r9
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfbc      	itt	lt
 8006574:	232d      	movlt	r3, #45	@ 0x2d
 8006576:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800657a:	4a7e      	ldr	r2, [pc, #504]	@ (8006774 <_printf_float+0x2d4>)
 800657c:	4b7e      	ldr	r3, [pc, #504]	@ (8006778 <_printf_float+0x2d8>)
 800657e:	e7d4      	b.n	800652a <_printf_float+0x8a>
 8006580:	6863      	ldr	r3, [r4, #4]
 8006582:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006586:	9206      	str	r2, [sp, #24]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	d13b      	bne.n	8006604 <_printf_float+0x164>
 800658c:	2306      	movs	r3, #6
 800658e:	6063      	str	r3, [r4, #4]
 8006590:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006594:	2300      	movs	r3, #0
 8006596:	6022      	str	r2, [r4, #0]
 8006598:	9303      	str	r3, [sp, #12]
 800659a:	ab0a      	add	r3, sp, #40	@ 0x28
 800659c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80065a0:	ab09      	add	r3, sp, #36	@ 0x24
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	6861      	ldr	r1, [r4, #4]
 80065a6:	ec49 8b10 	vmov	d0, r8, r9
 80065aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065ae:	4628      	mov	r0, r5
 80065b0:	f7ff fed6 	bl	8006360 <__cvt>
 80065b4:	9b06      	ldr	r3, [sp, #24]
 80065b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065b8:	2b47      	cmp	r3, #71	@ 0x47
 80065ba:	4680      	mov	r8, r0
 80065bc:	d129      	bne.n	8006612 <_printf_float+0x172>
 80065be:	1cc8      	adds	r0, r1, #3
 80065c0:	db02      	blt.n	80065c8 <_printf_float+0x128>
 80065c2:	6863      	ldr	r3, [r4, #4]
 80065c4:	4299      	cmp	r1, r3
 80065c6:	dd41      	ble.n	800664c <_printf_float+0x1ac>
 80065c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80065cc:	fa5f fa8a 	uxtb.w	sl, sl
 80065d0:	3901      	subs	r1, #1
 80065d2:	4652      	mov	r2, sl
 80065d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80065da:	f7ff ff26 	bl	800642a <__exponent>
 80065de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065e0:	1813      	adds	r3, r2, r0
 80065e2:	2a01      	cmp	r2, #1
 80065e4:	4681      	mov	r9, r0
 80065e6:	6123      	str	r3, [r4, #16]
 80065e8:	dc02      	bgt.n	80065f0 <_printf_float+0x150>
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	07d2      	lsls	r2, r2, #31
 80065ee:	d501      	bpl.n	80065f4 <_printf_float+0x154>
 80065f0:	3301      	adds	r3, #1
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0a2      	beq.n	8006542 <_printf_float+0xa2>
 80065fc:	232d      	movs	r3, #45	@ 0x2d
 80065fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006602:	e79e      	b.n	8006542 <_printf_float+0xa2>
 8006604:	9a06      	ldr	r2, [sp, #24]
 8006606:	2a47      	cmp	r2, #71	@ 0x47
 8006608:	d1c2      	bne.n	8006590 <_printf_float+0xf0>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1c0      	bne.n	8006590 <_printf_float+0xf0>
 800660e:	2301      	movs	r3, #1
 8006610:	e7bd      	b.n	800658e <_printf_float+0xee>
 8006612:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006616:	d9db      	bls.n	80065d0 <_printf_float+0x130>
 8006618:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800661c:	d118      	bne.n	8006650 <_printf_float+0x1b0>
 800661e:	2900      	cmp	r1, #0
 8006620:	6863      	ldr	r3, [r4, #4]
 8006622:	dd0b      	ble.n	800663c <_printf_float+0x19c>
 8006624:	6121      	str	r1, [r4, #16]
 8006626:	b913      	cbnz	r3, 800662e <_printf_float+0x18e>
 8006628:	6822      	ldr	r2, [r4, #0]
 800662a:	07d0      	lsls	r0, r2, #31
 800662c:	d502      	bpl.n	8006634 <_printf_float+0x194>
 800662e:	3301      	adds	r3, #1
 8006630:	440b      	add	r3, r1
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006636:	f04f 0900 	mov.w	r9, #0
 800663a:	e7db      	b.n	80065f4 <_printf_float+0x154>
 800663c:	b913      	cbnz	r3, 8006644 <_printf_float+0x1a4>
 800663e:	6822      	ldr	r2, [r4, #0]
 8006640:	07d2      	lsls	r2, r2, #31
 8006642:	d501      	bpl.n	8006648 <_printf_float+0x1a8>
 8006644:	3302      	adds	r3, #2
 8006646:	e7f4      	b.n	8006632 <_printf_float+0x192>
 8006648:	2301      	movs	r3, #1
 800664a:	e7f2      	b.n	8006632 <_printf_float+0x192>
 800664c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006652:	4299      	cmp	r1, r3
 8006654:	db05      	blt.n	8006662 <_printf_float+0x1c2>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	6121      	str	r1, [r4, #16]
 800665a:	07d8      	lsls	r0, r3, #31
 800665c:	d5ea      	bpl.n	8006634 <_printf_float+0x194>
 800665e:	1c4b      	adds	r3, r1, #1
 8006660:	e7e7      	b.n	8006632 <_printf_float+0x192>
 8006662:	2900      	cmp	r1, #0
 8006664:	bfd4      	ite	le
 8006666:	f1c1 0202 	rsble	r2, r1, #2
 800666a:	2201      	movgt	r2, #1
 800666c:	4413      	add	r3, r2
 800666e:	e7e0      	b.n	8006632 <_printf_float+0x192>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	055a      	lsls	r2, r3, #21
 8006674:	d407      	bmi.n	8006686 <_printf_float+0x1e6>
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	4642      	mov	r2, r8
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	d12b      	bne.n	80066dc <_printf_float+0x23c>
 8006684:	e767      	b.n	8006556 <_printf_float+0xb6>
 8006686:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800668a:	f240 80dd 	bls.w	8006848 <_printf_float+0x3a8>
 800668e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006692:	2200      	movs	r2, #0
 8006694:	2300      	movs	r3, #0
 8006696:	f7fa fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800669a:	2800      	cmp	r0, #0
 800669c:	d033      	beq.n	8006706 <_printf_float+0x266>
 800669e:	4a37      	ldr	r2, [pc, #220]	@ (800677c <_printf_float+0x2dc>)
 80066a0:	2301      	movs	r3, #1
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	f43f af54 	beq.w	8006556 <_printf_float+0xb6>
 80066ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066b2:	4543      	cmp	r3, r8
 80066b4:	db02      	blt.n	80066bc <_printf_float+0x21c>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	07d8      	lsls	r0, r3, #31
 80066ba:	d50f      	bpl.n	80066dc <_printf_float+0x23c>
 80066bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	f43f af45 	beq.w	8006556 <_printf_float+0xb6>
 80066cc:	f04f 0900 	mov.w	r9, #0
 80066d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80066d4:	f104 0a1a 	add.w	sl, r4, #26
 80066d8:	45c8      	cmp	r8, r9
 80066da:	dc09      	bgt.n	80066f0 <_printf_float+0x250>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	079b      	lsls	r3, r3, #30
 80066e0:	f100 8103 	bmi.w	80068ea <_printf_float+0x44a>
 80066e4:	68e0      	ldr	r0, [r4, #12]
 80066e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066e8:	4298      	cmp	r0, r3
 80066ea:	bfb8      	it	lt
 80066ec:	4618      	movlt	r0, r3
 80066ee:	e734      	b.n	800655a <_printf_float+0xba>
 80066f0:	2301      	movs	r3, #1
 80066f2:	4652      	mov	r2, sl
 80066f4:	4631      	mov	r1, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b8      	blx	r7
 80066fa:	3001      	adds	r0, #1
 80066fc:	f43f af2b 	beq.w	8006556 <_printf_float+0xb6>
 8006700:	f109 0901 	add.w	r9, r9, #1
 8006704:	e7e8      	b.n	80066d8 <_printf_float+0x238>
 8006706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	dc39      	bgt.n	8006780 <_printf_float+0x2e0>
 800670c:	4a1b      	ldr	r2, [pc, #108]	@ (800677c <_printf_float+0x2dc>)
 800670e:	2301      	movs	r3, #1
 8006710:	4631      	mov	r1, r6
 8006712:	4628      	mov	r0, r5
 8006714:	47b8      	blx	r7
 8006716:	3001      	adds	r0, #1
 8006718:	f43f af1d 	beq.w	8006556 <_printf_float+0xb6>
 800671c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006720:	ea59 0303 	orrs.w	r3, r9, r3
 8006724:	d102      	bne.n	800672c <_printf_float+0x28c>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	07d9      	lsls	r1, r3, #31
 800672a:	d5d7      	bpl.n	80066dc <_printf_float+0x23c>
 800672c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f af0d 	beq.w	8006556 <_printf_float+0xb6>
 800673c:	f04f 0a00 	mov.w	sl, #0
 8006740:	f104 0b1a 	add.w	fp, r4, #26
 8006744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006746:	425b      	negs	r3, r3
 8006748:	4553      	cmp	r3, sl
 800674a:	dc01      	bgt.n	8006750 <_printf_float+0x2b0>
 800674c:	464b      	mov	r3, r9
 800674e:	e793      	b.n	8006678 <_printf_float+0x1d8>
 8006750:	2301      	movs	r3, #1
 8006752:	465a      	mov	r2, fp
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	f43f aefb 	beq.w	8006556 <_printf_float+0xb6>
 8006760:	f10a 0a01 	add.w	sl, sl, #1
 8006764:	e7ee      	b.n	8006744 <_printf_float+0x2a4>
 8006766:	bf00      	nop
 8006768:	7fefffff 	.word	0x7fefffff
 800676c:	0800b148 	.word	0x0800b148
 8006770:	0800b14c 	.word	0x0800b14c
 8006774:	0800b150 	.word	0x0800b150
 8006778:	0800b154 	.word	0x0800b154
 800677c:	0800b158 	.word	0x0800b158
 8006780:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006782:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006786:	4553      	cmp	r3, sl
 8006788:	bfa8      	it	ge
 800678a:	4653      	movge	r3, sl
 800678c:	2b00      	cmp	r3, #0
 800678e:	4699      	mov	r9, r3
 8006790:	dc36      	bgt.n	8006800 <_printf_float+0x360>
 8006792:	f04f 0b00 	mov.w	fp, #0
 8006796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800679a:	f104 021a 	add.w	r2, r4, #26
 800679e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067a0:	9306      	str	r3, [sp, #24]
 80067a2:	eba3 0309 	sub.w	r3, r3, r9
 80067a6:	455b      	cmp	r3, fp
 80067a8:	dc31      	bgt.n	800680e <_printf_float+0x36e>
 80067aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ac:	459a      	cmp	sl, r3
 80067ae:	dc3a      	bgt.n	8006826 <_printf_float+0x386>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	07da      	lsls	r2, r3, #31
 80067b4:	d437      	bmi.n	8006826 <_printf_float+0x386>
 80067b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b8:	ebaa 0903 	sub.w	r9, sl, r3
 80067bc:	9b06      	ldr	r3, [sp, #24]
 80067be:	ebaa 0303 	sub.w	r3, sl, r3
 80067c2:	4599      	cmp	r9, r3
 80067c4:	bfa8      	it	ge
 80067c6:	4699      	movge	r9, r3
 80067c8:	f1b9 0f00 	cmp.w	r9, #0
 80067cc:	dc33      	bgt.n	8006836 <_printf_float+0x396>
 80067ce:	f04f 0800 	mov.w	r8, #0
 80067d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067d6:	f104 0b1a 	add.w	fp, r4, #26
 80067da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067dc:	ebaa 0303 	sub.w	r3, sl, r3
 80067e0:	eba3 0309 	sub.w	r3, r3, r9
 80067e4:	4543      	cmp	r3, r8
 80067e6:	f77f af79 	ble.w	80066dc <_printf_float+0x23c>
 80067ea:	2301      	movs	r3, #1
 80067ec:	465a      	mov	r2, fp
 80067ee:	4631      	mov	r1, r6
 80067f0:	4628      	mov	r0, r5
 80067f2:	47b8      	blx	r7
 80067f4:	3001      	adds	r0, #1
 80067f6:	f43f aeae 	beq.w	8006556 <_printf_float+0xb6>
 80067fa:	f108 0801 	add.w	r8, r8, #1
 80067fe:	e7ec      	b.n	80067da <_printf_float+0x33a>
 8006800:	4642      	mov	r2, r8
 8006802:	4631      	mov	r1, r6
 8006804:	4628      	mov	r0, r5
 8006806:	47b8      	blx	r7
 8006808:	3001      	adds	r0, #1
 800680a:	d1c2      	bne.n	8006792 <_printf_float+0x2f2>
 800680c:	e6a3      	b.n	8006556 <_printf_float+0xb6>
 800680e:	2301      	movs	r3, #1
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	9206      	str	r2, [sp, #24]
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	f43f ae9c 	beq.w	8006556 <_printf_float+0xb6>
 800681e:	9a06      	ldr	r2, [sp, #24]
 8006820:	f10b 0b01 	add.w	fp, fp, #1
 8006824:	e7bb      	b.n	800679e <_printf_float+0x2fe>
 8006826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	d1c0      	bne.n	80067b6 <_printf_float+0x316>
 8006834:	e68f      	b.n	8006556 <_printf_float+0xb6>
 8006836:	9a06      	ldr	r2, [sp, #24]
 8006838:	464b      	mov	r3, r9
 800683a:	4442      	add	r2, r8
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	d1c3      	bne.n	80067ce <_printf_float+0x32e>
 8006846:	e686      	b.n	8006556 <_printf_float+0xb6>
 8006848:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800684c:	f1ba 0f01 	cmp.w	sl, #1
 8006850:	dc01      	bgt.n	8006856 <_printf_float+0x3b6>
 8006852:	07db      	lsls	r3, r3, #31
 8006854:	d536      	bpl.n	80068c4 <_printf_float+0x424>
 8006856:	2301      	movs	r3, #1
 8006858:	4642      	mov	r2, r8
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	47b8      	blx	r7
 8006860:	3001      	adds	r0, #1
 8006862:	f43f ae78 	beq.w	8006556 <_printf_float+0xb6>
 8006866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	f43f ae70 	beq.w	8006556 <_printf_float+0xb6>
 8006876:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800687a:	2200      	movs	r2, #0
 800687c:	2300      	movs	r3, #0
 800687e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006882:	f7fa f921 	bl	8000ac8 <__aeabi_dcmpeq>
 8006886:	b9c0      	cbnz	r0, 80068ba <_printf_float+0x41a>
 8006888:	4653      	mov	r3, sl
 800688a:	f108 0201 	add.w	r2, r8, #1
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	d10c      	bne.n	80068b2 <_printf_float+0x412>
 8006898:	e65d      	b.n	8006556 <_printf_float+0xb6>
 800689a:	2301      	movs	r3, #1
 800689c:	465a      	mov	r2, fp
 800689e:	4631      	mov	r1, r6
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b8      	blx	r7
 80068a4:	3001      	adds	r0, #1
 80068a6:	f43f ae56 	beq.w	8006556 <_printf_float+0xb6>
 80068aa:	f108 0801 	add.w	r8, r8, #1
 80068ae:	45d0      	cmp	r8, sl
 80068b0:	dbf3      	blt.n	800689a <_printf_float+0x3fa>
 80068b2:	464b      	mov	r3, r9
 80068b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068b8:	e6df      	b.n	800667a <_printf_float+0x1da>
 80068ba:	f04f 0800 	mov.w	r8, #0
 80068be:	f104 0b1a 	add.w	fp, r4, #26
 80068c2:	e7f4      	b.n	80068ae <_printf_float+0x40e>
 80068c4:	2301      	movs	r3, #1
 80068c6:	4642      	mov	r2, r8
 80068c8:	e7e1      	b.n	800688e <_printf_float+0x3ee>
 80068ca:	2301      	movs	r3, #1
 80068cc:	464a      	mov	r2, r9
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f ae3e 	beq.w	8006556 <_printf_float+0xb6>
 80068da:	f108 0801 	add.w	r8, r8, #1
 80068de:	68e3      	ldr	r3, [r4, #12]
 80068e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068e2:	1a5b      	subs	r3, r3, r1
 80068e4:	4543      	cmp	r3, r8
 80068e6:	dcf0      	bgt.n	80068ca <_printf_float+0x42a>
 80068e8:	e6fc      	b.n	80066e4 <_printf_float+0x244>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	f104 0919 	add.w	r9, r4, #25
 80068f2:	e7f4      	b.n	80068de <_printf_float+0x43e>

080068f4 <_printf_common>:
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	4616      	mov	r6, r2
 80068fa:	4698      	mov	r8, r3
 80068fc:	688a      	ldr	r2, [r1, #8]
 80068fe:	690b      	ldr	r3, [r1, #16]
 8006900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006904:	4293      	cmp	r3, r2
 8006906:	bfb8      	it	lt
 8006908:	4613      	movlt	r3, r2
 800690a:	6033      	str	r3, [r6, #0]
 800690c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006910:	4607      	mov	r7, r0
 8006912:	460c      	mov	r4, r1
 8006914:	b10a      	cbz	r2, 800691a <_printf_common+0x26>
 8006916:	3301      	adds	r3, #1
 8006918:	6033      	str	r3, [r6, #0]
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	0699      	lsls	r1, r3, #26
 800691e:	bf42      	ittt	mi
 8006920:	6833      	ldrmi	r3, [r6, #0]
 8006922:	3302      	addmi	r3, #2
 8006924:	6033      	strmi	r3, [r6, #0]
 8006926:	6825      	ldr	r5, [r4, #0]
 8006928:	f015 0506 	ands.w	r5, r5, #6
 800692c:	d106      	bne.n	800693c <_printf_common+0x48>
 800692e:	f104 0a19 	add.w	sl, r4, #25
 8006932:	68e3      	ldr	r3, [r4, #12]
 8006934:	6832      	ldr	r2, [r6, #0]
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	42ab      	cmp	r3, r5
 800693a:	dc26      	bgt.n	800698a <_printf_common+0x96>
 800693c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	3b00      	subs	r3, #0
 8006944:	bf18      	it	ne
 8006946:	2301      	movne	r3, #1
 8006948:	0692      	lsls	r2, r2, #26
 800694a:	d42b      	bmi.n	80069a4 <_printf_common+0xb0>
 800694c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006950:	4641      	mov	r1, r8
 8006952:	4638      	mov	r0, r7
 8006954:	47c8      	blx	r9
 8006956:	3001      	adds	r0, #1
 8006958:	d01e      	beq.n	8006998 <_printf_common+0xa4>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	6922      	ldr	r2, [r4, #16]
 800695e:	f003 0306 	and.w	r3, r3, #6
 8006962:	2b04      	cmp	r3, #4
 8006964:	bf02      	ittt	eq
 8006966:	68e5      	ldreq	r5, [r4, #12]
 8006968:	6833      	ldreq	r3, [r6, #0]
 800696a:	1aed      	subeq	r5, r5, r3
 800696c:	68a3      	ldr	r3, [r4, #8]
 800696e:	bf0c      	ite	eq
 8006970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006974:	2500      	movne	r5, #0
 8006976:	4293      	cmp	r3, r2
 8006978:	bfc4      	itt	gt
 800697a:	1a9b      	subgt	r3, r3, r2
 800697c:	18ed      	addgt	r5, r5, r3
 800697e:	2600      	movs	r6, #0
 8006980:	341a      	adds	r4, #26
 8006982:	42b5      	cmp	r5, r6
 8006984:	d11a      	bne.n	80069bc <_printf_common+0xc8>
 8006986:	2000      	movs	r0, #0
 8006988:	e008      	b.n	800699c <_printf_common+0xa8>
 800698a:	2301      	movs	r3, #1
 800698c:	4652      	mov	r2, sl
 800698e:	4641      	mov	r1, r8
 8006990:	4638      	mov	r0, r7
 8006992:	47c8      	blx	r9
 8006994:	3001      	adds	r0, #1
 8006996:	d103      	bne.n	80069a0 <_printf_common+0xac>
 8006998:	f04f 30ff 	mov.w	r0, #4294967295
 800699c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a0:	3501      	adds	r5, #1
 80069a2:	e7c6      	b.n	8006932 <_printf_common+0x3e>
 80069a4:	18e1      	adds	r1, r4, r3
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	2030      	movs	r0, #48	@ 0x30
 80069aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069ae:	4422      	add	r2, r4
 80069b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069b8:	3302      	adds	r3, #2
 80069ba:	e7c7      	b.n	800694c <_printf_common+0x58>
 80069bc:	2301      	movs	r3, #1
 80069be:	4622      	mov	r2, r4
 80069c0:	4641      	mov	r1, r8
 80069c2:	4638      	mov	r0, r7
 80069c4:	47c8      	blx	r9
 80069c6:	3001      	adds	r0, #1
 80069c8:	d0e6      	beq.n	8006998 <_printf_common+0xa4>
 80069ca:	3601      	adds	r6, #1
 80069cc:	e7d9      	b.n	8006982 <_printf_common+0x8e>
	...

080069d0 <_printf_i>:
 80069d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	7e0f      	ldrb	r7, [r1, #24]
 80069d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069d8:	2f78      	cmp	r7, #120	@ 0x78
 80069da:	4691      	mov	r9, r2
 80069dc:	4680      	mov	r8, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	469a      	mov	sl, r3
 80069e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069e6:	d807      	bhi.n	80069f8 <_printf_i+0x28>
 80069e8:	2f62      	cmp	r7, #98	@ 0x62
 80069ea:	d80a      	bhi.n	8006a02 <_printf_i+0x32>
 80069ec:	2f00      	cmp	r7, #0
 80069ee:	f000 80d2 	beq.w	8006b96 <_printf_i+0x1c6>
 80069f2:	2f58      	cmp	r7, #88	@ 0x58
 80069f4:	f000 80b9 	beq.w	8006b6a <_printf_i+0x19a>
 80069f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a00:	e03a      	b.n	8006a78 <_printf_i+0xa8>
 8006a02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a06:	2b15      	cmp	r3, #21
 8006a08:	d8f6      	bhi.n	80069f8 <_printf_i+0x28>
 8006a0a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a10 <_printf_i+0x40>)
 8006a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a10:	08006a69 	.word	0x08006a69
 8006a14:	08006a7d 	.word	0x08006a7d
 8006a18:	080069f9 	.word	0x080069f9
 8006a1c:	080069f9 	.word	0x080069f9
 8006a20:	080069f9 	.word	0x080069f9
 8006a24:	080069f9 	.word	0x080069f9
 8006a28:	08006a7d 	.word	0x08006a7d
 8006a2c:	080069f9 	.word	0x080069f9
 8006a30:	080069f9 	.word	0x080069f9
 8006a34:	080069f9 	.word	0x080069f9
 8006a38:	080069f9 	.word	0x080069f9
 8006a3c:	08006b7d 	.word	0x08006b7d
 8006a40:	08006aa7 	.word	0x08006aa7
 8006a44:	08006b37 	.word	0x08006b37
 8006a48:	080069f9 	.word	0x080069f9
 8006a4c:	080069f9 	.word	0x080069f9
 8006a50:	08006b9f 	.word	0x08006b9f
 8006a54:	080069f9 	.word	0x080069f9
 8006a58:	08006aa7 	.word	0x08006aa7
 8006a5c:	080069f9 	.word	0x080069f9
 8006a60:	080069f9 	.word	0x080069f9
 8006a64:	08006b3f 	.word	0x08006b3f
 8006a68:	6833      	ldr	r3, [r6, #0]
 8006a6a:	1d1a      	adds	r2, r3, #4
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6032      	str	r2, [r6, #0]
 8006a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e09d      	b.n	8006bb8 <_printf_i+0x1e8>
 8006a7c:	6833      	ldr	r3, [r6, #0]
 8006a7e:	6820      	ldr	r0, [r4, #0]
 8006a80:	1d19      	adds	r1, r3, #4
 8006a82:	6031      	str	r1, [r6, #0]
 8006a84:	0606      	lsls	r6, r0, #24
 8006a86:	d501      	bpl.n	8006a8c <_printf_i+0xbc>
 8006a88:	681d      	ldr	r5, [r3, #0]
 8006a8a:	e003      	b.n	8006a94 <_printf_i+0xc4>
 8006a8c:	0645      	lsls	r5, r0, #25
 8006a8e:	d5fb      	bpl.n	8006a88 <_printf_i+0xb8>
 8006a90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	da03      	bge.n	8006aa0 <_printf_i+0xd0>
 8006a98:	232d      	movs	r3, #45	@ 0x2d
 8006a9a:	426d      	negs	r5, r5
 8006a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aa0:	4859      	ldr	r0, [pc, #356]	@ (8006c08 <_printf_i+0x238>)
 8006aa2:	230a      	movs	r3, #10
 8006aa4:	e011      	b.n	8006aca <_printf_i+0xfa>
 8006aa6:	6821      	ldr	r1, [r4, #0]
 8006aa8:	6833      	ldr	r3, [r6, #0]
 8006aaa:	0608      	lsls	r0, r1, #24
 8006aac:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ab0:	d402      	bmi.n	8006ab8 <_printf_i+0xe8>
 8006ab2:	0649      	lsls	r1, r1, #25
 8006ab4:	bf48      	it	mi
 8006ab6:	b2ad      	uxthmi	r5, r5
 8006ab8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006aba:	4853      	ldr	r0, [pc, #332]	@ (8006c08 <_printf_i+0x238>)
 8006abc:	6033      	str	r3, [r6, #0]
 8006abe:	bf14      	ite	ne
 8006ac0:	230a      	movne	r3, #10
 8006ac2:	2308      	moveq	r3, #8
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006aca:	6866      	ldr	r6, [r4, #4]
 8006acc:	60a6      	str	r6, [r4, #8]
 8006ace:	2e00      	cmp	r6, #0
 8006ad0:	bfa2      	ittt	ge
 8006ad2:	6821      	ldrge	r1, [r4, #0]
 8006ad4:	f021 0104 	bicge.w	r1, r1, #4
 8006ad8:	6021      	strge	r1, [r4, #0]
 8006ada:	b90d      	cbnz	r5, 8006ae0 <_printf_i+0x110>
 8006adc:	2e00      	cmp	r6, #0
 8006ade:	d04b      	beq.n	8006b78 <_printf_i+0x1a8>
 8006ae0:	4616      	mov	r6, r2
 8006ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8006aea:	5dc7      	ldrb	r7, [r0, r7]
 8006aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006af0:	462f      	mov	r7, r5
 8006af2:	42bb      	cmp	r3, r7
 8006af4:	460d      	mov	r5, r1
 8006af6:	d9f4      	bls.n	8006ae2 <_printf_i+0x112>
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d10b      	bne.n	8006b14 <_printf_i+0x144>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	07df      	lsls	r7, r3, #31
 8006b00:	d508      	bpl.n	8006b14 <_printf_i+0x144>
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	6861      	ldr	r1, [r4, #4]
 8006b06:	4299      	cmp	r1, r3
 8006b08:	bfde      	ittt	le
 8006b0a:	2330      	movle	r3, #48	@ 0x30
 8006b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b14:	1b92      	subs	r2, r2, r6
 8006b16:	6122      	str	r2, [r4, #16]
 8006b18:	f8cd a000 	str.w	sl, [sp]
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	aa03      	add	r2, sp, #12
 8006b20:	4621      	mov	r1, r4
 8006b22:	4640      	mov	r0, r8
 8006b24:	f7ff fee6 	bl	80068f4 <_printf_common>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d14a      	bne.n	8006bc2 <_printf_i+0x1f2>
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b30:	b004      	add	sp, #16
 8006b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	f043 0320 	orr.w	r3, r3, #32
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	4833      	ldr	r0, [pc, #204]	@ (8006c0c <_printf_i+0x23c>)
 8006b40:	2778      	movs	r7, #120	@ 0x78
 8006b42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	6831      	ldr	r1, [r6, #0]
 8006b4a:	061f      	lsls	r7, r3, #24
 8006b4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b50:	d402      	bmi.n	8006b58 <_printf_i+0x188>
 8006b52:	065f      	lsls	r7, r3, #25
 8006b54:	bf48      	it	mi
 8006b56:	b2ad      	uxthmi	r5, r5
 8006b58:	6031      	str	r1, [r6, #0]
 8006b5a:	07d9      	lsls	r1, r3, #31
 8006b5c:	bf44      	itt	mi
 8006b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b62:	6023      	strmi	r3, [r4, #0]
 8006b64:	b11d      	cbz	r5, 8006b6e <_printf_i+0x19e>
 8006b66:	2310      	movs	r3, #16
 8006b68:	e7ac      	b.n	8006ac4 <_printf_i+0xf4>
 8006b6a:	4827      	ldr	r0, [pc, #156]	@ (8006c08 <_printf_i+0x238>)
 8006b6c:	e7e9      	b.n	8006b42 <_printf_i+0x172>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	f023 0320 	bic.w	r3, r3, #32
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	e7f6      	b.n	8006b66 <_printf_i+0x196>
 8006b78:	4616      	mov	r6, r2
 8006b7a:	e7bd      	b.n	8006af8 <_printf_i+0x128>
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	6825      	ldr	r5, [r4, #0]
 8006b80:	6961      	ldr	r1, [r4, #20]
 8006b82:	1d18      	adds	r0, r3, #4
 8006b84:	6030      	str	r0, [r6, #0]
 8006b86:	062e      	lsls	r6, r5, #24
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	d501      	bpl.n	8006b90 <_printf_i+0x1c0>
 8006b8c:	6019      	str	r1, [r3, #0]
 8006b8e:	e002      	b.n	8006b96 <_printf_i+0x1c6>
 8006b90:	0668      	lsls	r0, r5, #25
 8006b92:	d5fb      	bpl.n	8006b8c <_printf_i+0x1bc>
 8006b94:	8019      	strh	r1, [r3, #0]
 8006b96:	2300      	movs	r3, #0
 8006b98:	6123      	str	r3, [r4, #16]
 8006b9a:	4616      	mov	r6, r2
 8006b9c:	e7bc      	b.n	8006b18 <_printf_i+0x148>
 8006b9e:	6833      	ldr	r3, [r6, #0]
 8006ba0:	1d1a      	adds	r2, r3, #4
 8006ba2:	6032      	str	r2, [r6, #0]
 8006ba4:	681e      	ldr	r6, [r3, #0]
 8006ba6:	6862      	ldr	r2, [r4, #4]
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4630      	mov	r0, r6
 8006bac:	f7f9 fb10 	bl	80001d0 <memchr>
 8006bb0:	b108      	cbz	r0, 8006bb6 <_printf_i+0x1e6>
 8006bb2:	1b80      	subs	r0, r0, r6
 8006bb4:	6060      	str	r0, [r4, #4]
 8006bb6:	6863      	ldr	r3, [r4, #4]
 8006bb8:	6123      	str	r3, [r4, #16]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bc0:	e7aa      	b.n	8006b18 <_printf_i+0x148>
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	4640      	mov	r0, r8
 8006bca:	47d0      	blx	sl
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d0ad      	beq.n	8006b2c <_printf_i+0x15c>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	079b      	lsls	r3, r3, #30
 8006bd4:	d413      	bmi.n	8006bfe <_printf_i+0x22e>
 8006bd6:	68e0      	ldr	r0, [r4, #12]
 8006bd8:	9b03      	ldr	r3, [sp, #12]
 8006bda:	4298      	cmp	r0, r3
 8006bdc:	bfb8      	it	lt
 8006bde:	4618      	movlt	r0, r3
 8006be0:	e7a6      	b.n	8006b30 <_printf_i+0x160>
 8006be2:	2301      	movs	r3, #1
 8006be4:	4632      	mov	r2, r6
 8006be6:	4649      	mov	r1, r9
 8006be8:	4640      	mov	r0, r8
 8006bea:	47d0      	blx	sl
 8006bec:	3001      	adds	r0, #1
 8006bee:	d09d      	beq.n	8006b2c <_printf_i+0x15c>
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	68e3      	ldr	r3, [r4, #12]
 8006bf4:	9903      	ldr	r1, [sp, #12]
 8006bf6:	1a5b      	subs	r3, r3, r1
 8006bf8:	42ab      	cmp	r3, r5
 8006bfa:	dcf2      	bgt.n	8006be2 <_printf_i+0x212>
 8006bfc:	e7eb      	b.n	8006bd6 <_printf_i+0x206>
 8006bfe:	2500      	movs	r5, #0
 8006c00:	f104 0619 	add.w	r6, r4, #25
 8006c04:	e7f5      	b.n	8006bf2 <_printf_i+0x222>
 8006c06:	bf00      	nop
 8006c08:	0800b15a 	.word	0x0800b15a
 8006c0c:	0800b16b 	.word	0x0800b16b

08006c10 <_scanf_float>:
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	b087      	sub	sp, #28
 8006c16:	4617      	mov	r7, r2
 8006c18:	9303      	str	r3, [sp, #12]
 8006c1a:	688b      	ldr	r3, [r1, #8]
 8006c1c:	1e5a      	subs	r2, r3, #1
 8006c1e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c22:	bf81      	itttt	hi
 8006c24:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c28:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c2c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c30:	608b      	strhi	r3, [r1, #8]
 8006c32:	680b      	ldr	r3, [r1, #0]
 8006c34:	460a      	mov	r2, r1
 8006c36:	f04f 0500 	mov.w	r5, #0
 8006c3a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c3e:	f842 3b1c 	str.w	r3, [r2], #28
 8006c42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c46:	4680      	mov	r8, r0
 8006c48:	460c      	mov	r4, r1
 8006c4a:	bf98      	it	ls
 8006c4c:	f04f 0b00 	movls.w	fp, #0
 8006c50:	9201      	str	r2, [sp, #4]
 8006c52:	4616      	mov	r6, r2
 8006c54:	46aa      	mov	sl, r5
 8006c56:	46a9      	mov	r9, r5
 8006c58:	9502      	str	r5, [sp, #8]
 8006c5a:	68a2      	ldr	r2, [r4, #8]
 8006c5c:	b152      	cbz	r2, 8006c74 <_scanf_float+0x64>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c64:	d864      	bhi.n	8006d30 <_scanf_float+0x120>
 8006c66:	2b40      	cmp	r3, #64	@ 0x40
 8006c68:	d83c      	bhi.n	8006ce4 <_scanf_float+0xd4>
 8006c6a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006c6e:	b2c8      	uxtb	r0, r1
 8006c70:	280e      	cmp	r0, #14
 8006c72:	d93a      	bls.n	8006cea <_scanf_float+0xda>
 8006c74:	f1b9 0f00 	cmp.w	r9, #0
 8006c78:	d003      	beq.n	8006c82 <_scanf_float+0x72>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c86:	f1ba 0f01 	cmp.w	sl, #1
 8006c8a:	f200 8117 	bhi.w	8006ebc <_scanf_float+0x2ac>
 8006c8e:	9b01      	ldr	r3, [sp, #4]
 8006c90:	429e      	cmp	r6, r3
 8006c92:	f200 8108 	bhi.w	8006ea6 <_scanf_float+0x296>
 8006c96:	2001      	movs	r0, #1
 8006c98:	b007      	add	sp, #28
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006ca2:	2a0d      	cmp	r2, #13
 8006ca4:	d8e6      	bhi.n	8006c74 <_scanf_float+0x64>
 8006ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8006cac <_scanf_float+0x9c>)
 8006ca8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cac:	08006df3 	.word	0x08006df3
 8006cb0:	08006c75 	.word	0x08006c75
 8006cb4:	08006c75 	.word	0x08006c75
 8006cb8:	08006c75 	.word	0x08006c75
 8006cbc:	08006e53 	.word	0x08006e53
 8006cc0:	08006e2b 	.word	0x08006e2b
 8006cc4:	08006c75 	.word	0x08006c75
 8006cc8:	08006c75 	.word	0x08006c75
 8006ccc:	08006e01 	.word	0x08006e01
 8006cd0:	08006c75 	.word	0x08006c75
 8006cd4:	08006c75 	.word	0x08006c75
 8006cd8:	08006c75 	.word	0x08006c75
 8006cdc:	08006c75 	.word	0x08006c75
 8006ce0:	08006db9 	.word	0x08006db9
 8006ce4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006ce8:	e7db      	b.n	8006ca2 <_scanf_float+0x92>
 8006cea:	290e      	cmp	r1, #14
 8006cec:	d8c2      	bhi.n	8006c74 <_scanf_float+0x64>
 8006cee:	a001      	add	r0, pc, #4	@ (adr r0, 8006cf4 <_scanf_float+0xe4>)
 8006cf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006cf4:	08006da9 	.word	0x08006da9
 8006cf8:	08006c75 	.word	0x08006c75
 8006cfc:	08006da9 	.word	0x08006da9
 8006d00:	08006e3f 	.word	0x08006e3f
 8006d04:	08006c75 	.word	0x08006c75
 8006d08:	08006d51 	.word	0x08006d51
 8006d0c:	08006d8f 	.word	0x08006d8f
 8006d10:	08006d8f 	.word	0x08006d8f
 8006d14:	08006d8f 	.word	0x08006d8f
 8006d18:	08006d8f 	.word	0x08006d8f
 8006d1c:	08006d8f 	.word	0x08006d8f
 8006d20:	08006d8f 	.word	0x08006d8f
 8006d24:	08006d8f 	.word	0x08006d8f
 8006d28:	08006d8f 	.word	0x08006d8f
 8006d2c:	08006d8f 	.word	0x08006d8f
 8006d30:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d32:	d809      	bhi.n	8006d48 <_scanf_float+0x138>
 8006d34:	2b60      	cmp	r3, #96	@ 0x60
 8006d36:	d8b2      	bhi.n	8006c9e <_scanf_float+0x8e>
 8006d38:	2b54      	cmp	r3, #84	@ 0x54
 8006d3a:	d07b      	beq.n	8006e34 <_scanf_float+0x224>
 8006d3c:	2b59      	cmp	r3, #89	@ 0x59
 8006d3e:	d199      	bne.n	8006c74 <_scanf_float+0x64>
 8006d40:	2d07      	cmp	r5, #7
 8006d42:	d197      	bne.n	8006c74 <_scanf_float+0x64>
 8006d44:	2508      	movs	r5, #8
 8006d46:	e02c      	b.n	8006da2 <_scanf_float+0x192>
 8006d48:	2b74      	cmp	r3, #116	@ 0x74
 8006d4a:	d073      	beq.n	8006e34 <_scanf_float+0x224>
 8006d4c:	2b79      	cmp	r3, #121	@ 0x79
 8006d4e:	e7f6      	b.n	8006d3e <_scanf_float+0x12e>
 8006d50:	6821      	ldr	r1, [r4, #0]
 8006d52:	05c8      	lsls	r0, r1, #23
 8006d54:	d51b      	bpl.n	8006d8e <_scanf_float+0x17e>
 8006d56:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d5a:	6021      	str	r1, [r4, #0]
 8006d5c:	f109 0901 	add.w	r9, r9, #1
 8006d60:	f1bb 0f00 	cmp.w	fp, #0
 8006d64:	d003      	beq.n	8006d6e <_scanf_float+0x15e>
 8006d66:	3201      	adds	r2, #1
 8006d68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d6c:	60a2      	str	r2, [r4, #8]
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	60a3      	str	r3, [r4, #8]
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	3301      	adds	r3, #1
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	607b      	str	r3, [r7, #4]
 8006d82:	f340 8087 	ble.w	8006e94 <_scanf_float+0x284>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	e765      	b.n	8006c5a <_scanf_float+0x4a>
 8006d8e:	eb1a 0105 	adds.w	r1, sl, r5
 8006d92:	f47f af6f 	bne.w	8006c74 <_scanf_float+0x64>
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006d9c:	6022      	str	r2, [r4, #0]
 8006d9e:	460d      	mov	r5, r1
 8006da0:	468a      	mov	sl, r1
 8006da2:	f806 3b01 	strb.w	r3, [r6], #1
 8006da6:	e7e2      	b.n	8006d6e <_scanf_float+0x15e>
 8006da8:	6822      	ldr	r2, [r4, #0]
 8006daa:	0610      	lsls	r0, r2, #24
 8006dac:	f57f af62 	bpl.w	8006c74 <_scanf_float+0x64>
 8006db0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006db4:	6022      	str	r2, [r4, #0]
 8006db6:	e7f4      	b.n	8006da2 <_scanf_float+0x192>
 8006db8:	f1ba 0f00 	cmp.w	sl, #0
 8006dbc:	d10e      	bne.n	8006ddc <_scanf_float+0x1cc>
 8006dbe:	f1b9 0f00 	cmp.w	r9, #0
 8006dc2:	d10e      	bne.n	8006de2 <_scanf_float+0x1d2>
 8006dc4:	6822      	ldr	r2, [r4, #0]
 8006dc6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006dca:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006dce:	d108      	bne.n	8006de2 <_scanf_float+0x1d2>
 8006dd0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006dd4:	6022      	str	r2, [r4, #0]
 8006dd6:	f04f 0a01 	mov.w	sl, #1
 8006dda:	e7e2      	b.n	8006da2 <_scanf_float+0x192>
 8006ddc:	f1ba 0f02 	cmp.w	sl, #2
 8006de0:	d055      	beq.n	8006e8e <_scanf_float+0x27e>
 8006de2:	2d01      	cmp	r5, #1
 8006de4:	d002      	beq.n	8006dec <_scanf_float+0x1dc>
 8006de6:	2d04      	cmp	r5, #4
 8006de8:	f47f af44 	bne.w	8006c74 <_scanf_float+0x64>
 8006dec:	3501      	adds	r5, #1
 8006dee:	b2ed      	uxtb	r5, r5
 8006df0:	e7d7      	b.n	8006da2 <_scanf_float+0x192>
 8006df2:	f1ba 0f01 	cmp.w	sl, #1
 8006df6:	f47f af3d 	bne.w	8006c74 <_scanf_float+0x64>
 8006dfa:	f04f 0a02 	mov.w	sl, #2
 8006dfe:	e7d0      	b.n	8006da2 <_scanf_float+0x192>
 8006e00:	b97d      	cbnz	r5, 8006e22 <_scanf_float+0x212>
 8006e02:	f1b9 0f00 	cmp.w	r9, #0
 8006e06:	f47f af38 	bne.w	8006c7a <_scanf_float+0x6a>
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e10:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e14:	f040 8108 	bne.w	8007028 <_scanf_float+0x418>
 8006e18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e1c:	6022      	str	r2, [r4, #0]
 8006e1e:	2501      	movs	r5, #1
 8006e20:	e7bf      	b.n	8006da2 <_scanf_float+0x192>
 8006e22:	2d03      	cmp	r5, #3
 8006e24:	d0e2      	beq.n	8006dec <_scanf_float+0x1dc>
 8006e26:	2d05      	cmp	r5, #5
 8006e28:	e7de      	b.n	8006de8 <_scanf_float+0x1d8>
 8006e2a:	2d02      	cmp	r5, #2
 8006e2c:	f47f af22 	bne.w	8006c74 <_scanf_float+0x64>
 8006e30:	2503      	movs	r5, #3
 8006e32:	e7b6      	b.n	8006da2 <_scanf_float+0x192>
 8006e34:	2d06      	cmp	r5, #6
 8006e36:	f47f af1d 	bne.w	8006c74 <_scanf_float+0x64>
 8006e3a:	2507      	movs	r5, #7
 8006e3c:	e7b1      	b.n	8006da2 <_scanf_float+0x192>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	0591      	lsls	r1, r2, #22
 8006e42:	f57f af17 	bpl.w	8006c74 <_scanf_float+0x64>
 8006e46:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e4a:	6022      	str	r2, [r4, #0]
 8006e4c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e50:	e7a7      	b.n	8006da2 <_scanf_float+0x192>
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e58:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e5c:	d006      	beq.n	8006e6c <_scanf_float+0x25c>
 8006e5e:	0550      	lsls	r0, r2, #21
 8006e60:	f57f af08 	bpl.w	8006c74 <_scanf_float+0x64>
 8006e64:	f1b9 0f00 	cmp.w	r9, #0
 8006e68:	f000 80de 	beq.w	8007028 <_scanf_float+0x418>
 8006e6c:	0591      	lsls	r1, r2, #22
 8006e6e:	bf58      	it	pl
 8006e70:	9902      	ldrpl	r1, [sp, #8]
 8006e72:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e76:	bf58      	it	pl
 8006e78:	eba9 0101 	subpl.w	r1, r9, r1
 8006e7c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006e80:	bf58      	it	pl
 8006e82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e86:	6022      	str	r2, [r4, #0]
 8006e88:	f04f 0900 	mov.w	r9, #0
 8006e8c:	e789      	b.n	8006da2 <_scanf_float+0x192>
 8006e8e:	f04f 0a03 	mov.w	sl, #3
 8006e92:	e786      	b.n	8006da2 <_scanf_float+0x192>
 8006e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006e98:	4639      	mov	r1, r7
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4798      	blx	r3
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f43f aedb 	beq.w	8006c5a <_scanf_float+0x4a>
 8006ea4:	e6e6      	b.n	8006c74 <_scanf_float+0x64>
 8006ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eae:	463a      	mov	r2, r7
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4798      	blx	r3
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	6123      	str	r3, [r4, #16]
 8006eba:	e6e8      	b.n	8006c8e <_scanf_float+0x7e>
 8006ebc:	1e6b      	subs	r3, r5, #1
 8006ebe:	2b06      	cmp	r3, #6
 8006ec0:	d824      	bhi.n	8006f0c <_scanf_float+0x2fc>
 8006ec2:	2d02      	cmp	r5, #2
 8006ec4:	d836      	bhi.n	8006f34 <_scanf_float+0x324>
 8006ec6:	9b01      	ldr	r3, [sp, #4]
 8006ec8:	429e      	cmp	r6, r3
 8006eca:	f67f aee4 	bls.w	8006c96 <_scanf_float+0x86>
 8006ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ed2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	4640      	mov	r0, r8
 8006eda:	4798      	blx	r3
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	6123      	str	r3, [r4, #16]
 8006ee2:	e7f0      	b.n	8006ec6 <_scanf_float+0x2b6>
 8006ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ee8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006eec:	463a      	mov	r2, r7
 8006eee:	4640      	mov	r0, r8
 8006ef0:	4798      	blx	r3
 8006ef2:	6923      	ldr	r3, [r4, #16]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	6123      	str	r3, [r4, #16]
 8006ef8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006efc:	fa5f fa8a 	uxtb.w	sl, sl
 8006f00:	f1ba 0f02 	cmp.w	sl, #2
 8006f04:	d1ee      	bne.n	8006ee4 <_scanf_float+0x2d4>
 8006f06:	3d03      	subs	r5, #3
 8006f08:	b2ed      	uxtb	r5, r5
 8006f0a:	1b76      	subs	r6, r6, r5
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	05da      	lsls	r2, r3, #23
 8006f10:	d530      	bpl.n	8006f74 <_scanf_float+0x364>
 8006f12:	055b      	lsls	r3, r3, #21
 8006f14:	d511      	bpl.n	8006f3a <_scanf_float+0x32a>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	429e      	cmp	r6, r3
 8006f1a:	f67f aebc 	bls.w	8006c96 <_scanf_float+0x86>
 8006f1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f26:	463a      	mov	r2, r7
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4798      	blx	r3
 8006f2c:	6923      	ldr	r3, [r4, #16]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	6123      	str	r3, [r4, #16]
 8006f32:	e7f0      	b.n	8006f16 <_scanf_float+0x306>
 8006f34:	46aa      	mov	sl, r5
 8006f36:	46b3      	mov	fp, r6
 8006f38:	e7de      	b.n	8006ef8 <_scanf_float+0x2e8>
 8006f3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	2965      	cmp	r1, #101	@ 0x65
 8006f42:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f46:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f4a:	6123      	str	r3, [r4, #16]
 8006f4c:	d00c      	beq.n	8006f68 <_scanf_float+0x358>
 8006f4e:	2945      	cmp	r1, #69	@ 0x45
 8006f50:	d00a      	beq.n	8006f68 <_scanf_float+0x358>
 8006f52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f56:	463a      	mov	r2, r7
 8006f58:	4640      	mov	r0, r8
 8006f5a:	4798      	blx	r3
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	1eb5      	subs	r5, r6, #2
 8006f66:	6123      	str	r3, [r4, #16]
 8006f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f6c:	463a      	mov	r2, r7
 8006f6e:	4640      	mov	r0, r8
 8006f70:	4798      	blx	r3
 8006f72:	462e      	mov	r6, r5
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	f012 0210 	ands.w	r2, r2, #16
 8006f7a:	d001      	beq.n	8006f80 <_scanf_float+0x370>
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	e68b      	b.n	8006c98 <_scanf_float+0x88>
 8006f80:	7032      	strb	r2, [r6, #0]
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f8c:	d11c      	bne.n	8006fc8 <_scanf_float+0x3b8>
 8006f8e:	9b02      	ldr	r3, [sp, #8]
 8006f90:	454b      	cmp	r3, r9
 8006f92:	eba3 0209 	sub.w	r2, r3, r9
 8006f96:	d123      	bne.n	8006fe0 <_scanf_float+0x3d0>
 8006f98:	9901      	ldr	r1, [sp, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	f002 fc07 	bl	80097b0 <_strtod_r>
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	6821      	ldr	r1, [r4, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f011 0f02 	tst.w	r1, #2
 8006fac:	ec57 6b10 	vmov	r6, r7, d0
 8006fb0:	f103 0204 	add.w	r2, r3, #4
 8006fb4:	d01f      	beq.n	8006ff6 <_scanf_float+0x3e6>
 8006fb6:	9903      	ldr	r1, [sp, #12]
 8006fb8:	600a      	str	r2, [r1, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	e9c3 6700 	strd	r6, r7, [r3]
 8006fc0:	68e3      	ldr	r3, [r4, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60e3      	str	r3, [r4, #12]
 8006fc6:	e7d9      	b.n	8006f7c <_scanf_float+0x36c>
 8006fc8:	9b04      	ldr	r3, [sp, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0e4      	beq.n	8006f98 <_scanf_float+0x388>
 8006fce:	9905      	ldr	r1, [sp, #20]
 8006fd0:	230a      	movs	r3, #10
 8006fd2:	3101      	adds	r1, #1
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	f002 fc6b 	bl	80098b0 <_strtol_r>
 8006fda:	9b04      	ldr	r3, [sp, #16]
 8006fdc:	9e05      	ldr	r6, [sp, #20]
 8006fde:	1ac2      	subs	r2, r0, r3
 8006fe0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006fe4:	429e      	cmp	r6, r3
 8006fe6:	bf28      	it	cs
 8006fe8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006fec:	4910      	ldr	r1, [pc, #64]	@ (8007030 <_scanf_float+0x420>)
 8006fee:	4630      	mov	r0, r6
 8006ff0:	f000 f8e4 	bl	80071bc <siprintf>
 8006ff4:	e7d0      	b.n	8006f98 <_scanf_float+0x388>
 8006ff6:	f011 0f04 	tst.w	r1, #4
 8006ffa:	9903      	ldr	r1, [sp, #12]
 8006ffc:	600a      	str	r2, [r1, #0]
 8006ffe:	d1dc      	bne.n	8006fba <_scanf_float+0x3aa>
 8007000:	681d      	ldr	r5, [r3, #0]
 8007002:	4632      	mov	r2, r6
 8007004:	463b      	mov	r3, r7
 8007006:	4630      	mov	r0, r6
 8007008:	4639      	mov	r1, r7
 800700a:	f7f9 fd8f 	bl	8000b2c <__aeabi_dcmpun>
 800700e:	b128      	cbz	r0, 800701c <_scanf_float+0x40c>
 8007010:	4808      	ldr	r0, [pc, #32]	@ (8007034 <_scanf_float+0x424>)
 8007012:	f000 f9c5 	bl	80073a0 <nanf>
 8007016:	ed85 0a00 	vstr	s0, [r5]
 800701a:	e7d1      	b.n	8006fc0 <_scanf_float+0x3b0>
 800701c:	4630      	mov	r0, r6
 800701e:	4639      	mov	r1, r7
 8007020:	f7f9 fde2 	bl	8000be8 <__aeabi_d2f>
 8007024:	6028      	str	r0, [r5, #0]
 8007026:	e7cb      	b.n	8006fc0 <_scanf_float+0x3b0>
 8007028:	f04f 0900 	mov.w	r9, #0
 800702c:	e629      	b.n	8006c82 <_scanf_float+0x72>
 800702e:	bf00      	nop
 8007030:	0800b17c 	.word	0x0800b17c
 8007034:	0800b515 	.word	0x0800b515

08007038 <std>:
 8007038:	2300      	movs	r3, #0
 800703a:	b510      	push	{r4, lr}
 800703c:	4604      	mov	r4, r0
 800703e:	e9c0 3300 	strd	r3, r3, [r0]
 8007042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007046:	6083      	str	r3, [r0, #8]
 8007048:	8181      	strh	r1, [r0, #12]
 800704a:	6643      	str	r3, [r0, #100]	@ 0x64
 800704c:	81c2      	strh	r2, [r0, #14]
 800704e:	6183      	str	r3, [r0, #24]
 8007050:	4619      	mov	r1, r3
 8007052:	2208      	movs	r2, #8
 8007054:	305c      	adds	r0, #92	@ 0x5c
 8007056:	f000 f914 	bl	8007282 <memset>
 800705a:	4b0d      	ldr	r3, [pc, #52]	@ (8007090 <std+0x58>)
 800705c:	6263      	str	r3, [r4, #36]	@ 0x24
 800705e:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <std+0x5c>)
 8007060:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007062:	4b0d      	ldr	r3, [pc, #52]	@ (8007098 <std+0x60>)
 8007064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <std+0x64>)
 8007068:	6323      	str	r3, [r4, #48]	@ 0x30
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <std+0x68>)
 800706c:	6224      	str	r4, [r4, #32]
 800706e:	429c      	cmp	r4, r3
 8007070:	d006      	beq.n	8007080 <std+0x48>
 8007072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007076:	4294      	cmp	r4, r2
 8007078:	d002      	beq.n	8007080 <std+0x48>
 800707a:	33d0      	adds	r3, #208	@ 0xd0
 800707c:	429c      	cmp	r4, r3
 800707e:	d105      	bne.n	800708c <std+0x54>
 8007080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007088:	f000 b978 	b.w	800737c <__retarget_lock_init_recursive>
 800708c:	bd10      	pop	{r4, pc}
 800708e:	bf00      	nop
 8007090:	080071fd 	.word	0x080071fd
 8007094:	0800721f 	.word	0x0800721f
 8007098:	08007257 	.word	0x08007257
 800709c:	0800727b 	.word	0x0800727b
 80070a0:	200004a4 	.word	0x200004a4

080070a4 <stdio_exit_handler>:
 80070a4:	4a02      	ldr	r2, [pc, #8]	@ (80070b0 <stdio_exit_handler+0xc>)
 80070a6:	4903      	ldr	r1, [pc, #12]	@ (80070b4 <stdio_exit_handler+0x10>)
 80070a8:	4803      	ldr	r0, [pc, #12]	@ (80070b8 <stdio_exit_handler+0x14>)
 80070aa:	f000 b869 	b.w	8007180 <_fwalk_sglue>
 80070ae:	bf00      	nop
 80070b0:	20000028 	.word	0x20000028
 80070b4:	08009c6d 	.word	0x08009c6d
 80070b8:	20000038 	.word	0x20000038

080070bc <cleanup_stdio>:
 80070bc:	6841      	ldr	r1, [r0, #4]
 80070be:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <cleanup_stdio+0x34>)
 80070c0:	4299      	cmp	r1, r3
 80070c2:	b510      	push	{r4, lr}
 80070c4:	4604      	mov	r4, r0
 80070c6:	d001      	beq.n	80070cc <cleanup_stdio+0x10>
 80070c8:	f002 fdd0 	bl	8009c6c <_fflush_r>
 80070cc:	68a1      	ldr	r1, [r4, #8]
 80070ce:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <cleanup_stdio+0x38>)
 80070d0:	4299      	cmp	r1, r3
 80070d2:	d002      	beq.n	80070da <cleanup_stdio+0x1e>
 80070d4:	4620      	mov	r0, r4
 80070d6:	f002 fdc9 	bl	8009c6c <_fflush_r>
 80070da:	68e1      	ldr	r1, [r4, #12]
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <cleanup_stdio+0x3c>)
 80070de:	4299      	cmp	r1, r3
 80070e0:	d004      	beq.n	80070ec <cleanup_stdio+0x30>
 80070e2:	4620      	mov	r0, r4
 80070e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e8:	f002 bdc0 	b.w	8009c6c <_fflush_r>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	bf00      	nop
 80070f0:	200004a4 	.word	0x200004a4
 80070f4:	2000050c 	.word	0x2000050c
 80070f8:	20000574 	.word	0x20000574

080070fc <global_stdio_init.part.0>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	4b0b      	ldr	r3, [pc, #44]	@ (800712c <global_stdio_init.part.0+0x30>)
 8007100:	4c0b      	ldr	r4, [pc, #44]	@ (8007130 <global_stdio_init.part.0+0x34>)
 8007102:	4a0c      	ldr	r2, [pc, #48]	@ (8007134 <global_stdio_init.part.0+0x38>)
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	4620      	mov	r0, r4
 8007108:	2200      	movs	r2, #0
 800710a:	2104      	movs	r1, #4
 800710c:	f7ff ff94 	bl	8007038 <std>
 8007110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007114:	2201      	movs	r2, #1
 8007116:	2109      	movs	r1, #9
 8007118:	f7ff ff8e 	bl	8007038 <std>
 800711c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007120:	2202      	movs	r2, #2
 8007122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007126:	2112      	movs	r1, #18
 8007128:	f7ff bf86 	b.w	8007038 <std>
 800712c:	200005dc 	.word	0x200005dc
 8007130:	200004a4 	.word	0x200004a4
 8007134:	080070a5 	.word	0x080070a5

08007138 <__sfp_lock_acquire>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__sfp_lock_acquire+0x8>)
 800713a:	f000 b920 	b.w	800737e <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	200005e5 	.word	0x200005e5

08007144 <__sfp_lock_release>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__sfp_lock_release+0x8>)
 8007146:	f000 b91b 	b.w	8007380 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	200005e5 	.word	0x200005e5

08007150 <__sinit>:
 8007150:	b510      	push	{r4, lr}
 8007152:	4604      	mov	r4, r0
 8007154:	f7ff fff0 	bl	8007138 <__sfp_lock_acquire>
 8007158:	6a23      	ldr	r3, [r4, #32]
 800715a:	b11b      	cbz	r3, 8007164 <__sinit+0x14>
 800715c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007160:	f7ff bff0 	b.w	8007144 <__sfp_lock_release>
 8007164:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <__sinit+0x28>)
 8007166:	6223      	str	r3, [r4, #32]
 8007168:	4b04      	ldr	r3, [pc, #16]	@ (800717c <__sinit+0x2c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1f5      	bne.n	800715c <__sinit+0xc>
 8007170:	f7ff ffc4 	bl	80070fc <global_stdio_init.part.0>
 8007174:	e7f2      	b.n	800715c <__sinit+0xc>
 8007176:	bf00      	nop
 8007178:	080070bd 	.word	0x080070bd
 800717c:	200005dc 	.word	0x200005dc

08007180 <_fwalk_sglue>:
 8007180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007184:	4607      	mov	r7, r0
 8007186:	4688      	mov	r8, r1
 8007188:	4614      	mov	r4, r2
 800718a:	2600      	movs	r6, #0
 800718c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007190:	f1b9 0901 	subs.w	r9, r9, #1
 8007194:	d505      	bpl.n	80071a2 <_fwalk_sglue+0x22>
 8007196:	6824      	ldr	r4, [r4, #0]
 8007198:	2c00      	cmp	r4, #0
 800719a:	d1f7      	bne.n	800718c <_fwalk_sglue+0xc>
 800719c:	4630      	mov	r0, r6
 800719e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d907      	bls.n	80071b8 <_fwalk_sglue+0x38>
 80071a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071ac:	3301      	adds	r3, #1
 80071ae:	d003      	beq.n	80071b8 <_fwalk_sglue+0x38>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4638      	mov	r0, r7
 80071b4:	47c0      	blx	r8
 80071b6:	4306      	orrs	r6, r0
 80071b8:	3568      	adds	r5, #104	@ 0x68
 80071ba:	e7e9      	b.n	8007190 <_fwalk_sglue+0x10>

080071bc <siprintf>:
 80071bc:	b40e      	push	{r1, r2, r3}
 80071be:	b500      	push	{lr}
 80071c0:	b09c      	sub	sp, #112	@ 0x70
 80071c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80071c4:	9002      	str	r0, [sp, #8]
 80071c6:	9006      	str	r0, [sp, #24]
 80071c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071cc:	4809      	ldr	r0, [pc, #36]	@ (80071f4 <siprintf+0x38>)
 80071ce:	9107      	str	r1, [sp, #28]
 80071d0:	9104      	str	r1, [sp, #16]
 80071d2:	4909      	ldr	r1, [pc, #36]	@ (80071f8 <siprintf+0x3c>)
 80071d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d8:	9105      	str	r1, [sp, #20]
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	a902      	add	r1, sp, #8
 80071e0:	f002 fbc4 	bl	800996c <_svfiprintf_r>
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	b01c      	add	sp, #112	@ 0x70
 80071ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f0:	b003      	add	sp, #12
 80071f2:	4770      	bx	lr
 80071f4:	20000034 	.word	0x20000034
 80071f8:	ffff0208 	.word	0xffff0208

080071fc <__sread>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	460c      	mov	r4, r1
 8007200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007204:	f000 f86c 	bl	80072e0 <_read_r>
 8007208:	2800      	cmp	r0, #0
 800720a:	bfab      	itete	ge
 800720c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800720e:	89a3      	ldrhlt	r3, [r4, #12]
 8007210:	181b      	addge	r3, r3, r0
 8007212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007216:	bfac      	ite	ge
 8007218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800721a:	81a3      	strhlt	r3, [r4, #12]
 800721c:	bd10      	pop	{r4, pc}

0800721e <__swrite>:
 800721e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007222:	461f      	mov	r7, r3
 8007224:	898b      	ldrh	r3, [r1, #12]
 8007226:	05db      	lsls	r3, r3, #23
 8007228:	4605      	mov	r5, r0
 800722a:	460c      	mov	r4, r1
 800722c:	4616      	mov	r6, r2
 800722e:	d505      	bpl.n	800723c <__swrite+0x1e>
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	2302      	movs	r3, #2
 8007236:	2200      	movs	r2, #0
 8007238:	f000 f840 	bl	80072bc <_lseek_r>
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007246:	81a3      	strh	r3, [r4, #12]
 8007248:	4632      	mov	r2, r6
 800724a:	463b      	mov	r3, r7
 800724c:	4628      	mov	r0, r5
 800724e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007252:	f000 b857 	b.w	8007304 <_write_r>

08007256 <__sseek>:
 8007256:	b510      	push	{r4, lr}
 8007258:	460c      	mov	r4, r1
 800725a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725e:	f000 f82d 	bl	80072bc <_lseek_r>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	bf15      	itete	ne
 8007268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800726a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800726e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007272:	81a3      	strheq	r3, [r4, #12]
 8007274:	bf18      	it	ne
 8007276:	81a3      	strhne	r3, [r4, #12]
 8007278:	bd10      	pop	{r4, pc}

0800727a <__sclose>:
 800727a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727e:	f000 b80d 	b.w	800729c <_close_r>

08007282 <memset>:
 8007282:	4402      	add	r2, r0
 8007284:	4603      	mov	r3, r0
 8007286:	4293      	cmp	r3, r2
 8007288:	d100      	bne.n	800728c <memset+0xa>
 800728a:	4770      	bx	lr
 800728c:	f803 1b01 	strb.w	r1, [r3], #1
 8007290:	e7f9      	b.n	8007286 <memset+0x4>
	...

08007294 <_localeconv_r>:
 8007294:	4800      	ldr	r0, [pc, #0]	@ (8007298 <_localeconv_r+0x4>)
 8007296:	4770      	bx	lr
 8007298:	20000174 	.word	0x20000174

0800729c <_close_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d06      	ldr	r5, [pc, #24]	@ (80072b8 <_close_r+0x1c>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	f7fb f8d2 	bl	8002450 <_close>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_close_r+0x1a>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_close_r+0x1a>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	200005e0 	.word	0x200005e0

080072bc <_lseek_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	@ (80072dc <_lseek_r+0x20>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7fb f8e7 	bl	800249e <_lseek>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_lseek_r+0x1e>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_lseek_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	200005e0 	.word	0x200005e0

080072e0 <_read_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d07      	ldr	r5, [pc, #28]	@ (8007300 <_read_r+0x20>)
 80072e4:	4604      	mov	r4, r0
 80072e6:	4608      	mov	r0, r1
 80072e8:	4611      	mov	r1, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	602a      	str	r2, [r5, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f7fb f875 	bl	80023de <_read>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d102      	bne.n	80072fe <_read_r+0x1e>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b103      	cbz	r3, 80072fe <_read_r+0x1e>
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	200005e0 	.word	0x200005e0

08007304 <_write_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4d07      	ldr	r5, [pc, #28]	@ (8007324 <_write_r+0x20>)
 8007308:	4604      	mov	r4, r0
 800730a:	4608      	mov	r0, r1
 800730c:	4611      	mov	r1, r2
 800730e:	2200      	movs	r2, #0
 8007310:	602a      	str	r2, [r5, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	f7fb f880 	bl	8002418 <_write>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d102      	bne.n	8007322 <_write_r+0x1e>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	b103      	cbz	r3, 8007322 <_write_r+0x1e>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	200005e0 	.word	0x200005e0

08007328 <__errno>:
 8007328:	4b01      	ldr	r3, [pc, #4]	@ (8007330 <__errno+0x8>)
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000034 	.word	0x20000034

08007334 <__libc_init_array>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4d0d      	ldr	r5, [pc, #52]	@ (800736c <__libc_init_array+0x38>)
 8007338:	4c0d      	ldr	r4, [pc, #52]	@ (8007370 <__libc_init_array+0x3c>)
 800733a:	1b64      	subs	r4, r4, r5
 800733c:	10a4      	asrs	r4, r4, #2
 800733e:	2600      	movs	r6, #0
 8007340:	42a6      	cmp	r6, r4
 8007342:	d109      	bne.n	8007358 <__libc_init_array+0x24>
 8007344:	4d0b      	ldr	r5, [pc, #44]	@ (8007374 <__libc_init_array+0x40>)
 8007346:	4c0c      	ldr	r4, [pc, #48]	@ (8007378 <__libc_init_array+0x44>)
 8007348:	f003 fee6 	bl	800b118 <_init>
 800734c:	1b64      	subs	r4, r4, r5
 800734e:	10a4      	asrs	r4, r4, #2
 8007350:	2600      	movs	r6, #0
 8007352:	42a6      	cmp	r6, r4
 8007354:	d105      	bne.n	8007362 <__libc_init_array+0x2e>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	f855 3b04 	ldr.w	r3, [r5], #4
 800735c:	4798      	blx	r3
 800735e:	3601      	adds	r6, #1
 8007360:	e7ee      	b.n	8007340 <__libc_init_array+0xc>
 8007362:	f855 3b04 	ldr.w	r3, [r5], #4
 8007366:	4798      	blx	r3
 8007368:	3601      	adds	r6, #1
 800736a:	e7f2      	b.n	8007352 <__libc_init_array+0x1e>
 800736c:	0800b5f0 	.word	0x0800b5f0
 8007370:	0800b5f0 	.word	0x0800b5f0
 8007374:	0800b5f0 	.word	0x0800b5f0
 8007378:	0800b5f4 	.word	0x0800b5f4

0800737c <__retarget_lock_init_recursive>:
 800737c:	4770      	bx	lr

0800737e <__retarget_lock_acquire_recursive>:
 800737e:	4770      	bx	lr

08007380 <__retarget_lock_release_recursive>:
 8007380:	4770      	bx	lr

08007382 <memcpy>:
 8007382:	440a      	add	r2, r1
 8007384:	4291      	cmp	r1, r2
 8007386:	f100 33ff 	add.w	r3, r0, #4294967295
 800738a:	d100      	bne.n	800738e <memcpy+0xc>
 800738c:	4770      	bx	lr
 800738e:	b510      	push	{r4, lr}
 8007390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007398:	4291      	cmp	r1, r2
 800739a:	d1f9      	bne.n	8007390 <memcpy+0xe>
 800739c:	bd10      	pop	{r4, pc}
	...

080073a0 <nanf>:
 80073a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80073a8 <nanf+0x8>
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	7fc00000 	.word	0x7fc00000

080073ac <quorem>:
 80073ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	6903      	ldr	r3, [r0, #16]
 80073b2:	690c      	ldr	r4, [r1, #16]
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	4607      	mov	r7, r0
 80073b8:	db7e      	blt.n	80074b8 <quorem+0x10c>
 80073ba:	3c01      	subs	r4, #1
 80073bc:	f101 0814 	add.w	r8, r1, #20
 80073c0:	00a3      	lsls	r3, r4, #2
 80073c2:	f100 0514 	add.w	r5, r0, #20
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073d6:	3301      	adds	r3, #1
 80073d8:	429a      	cmp	r2, r3
 80073da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073de:	fbb2 f6f3 	udiv	r6, r2, r3
 80073e2:	d32e      	bcc.n	8007442 <quorem+0x96>
 80073e4:	f04f 0a00 	mov.w	sl, #0
 80073e8:	46c4      	mov	ip, r8
 80073ea:	46ae      	mov	lr, r5
 80073ec:	46d3      	mov	fp, sl
 80073ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073f2:	b298      	uxth	r0, r3
 80073f4:	fb06 a000 	mla	r0, r6, r0, sl
 80073f8:	0c02      	lsrs	r2, r0, #16
 80073fa:	0c1b      	lsrs	r3, r3, #16
 80073fc:	fb06 2303 	mla	r3, r6, r3, r2
 8007400:	f8de 2000 	ldr.w	r2, [lr]
 8007404:	b280      	uxth	r0, r0
 8007406:	b292      	uxth	r2, r2
 8007408:	1a12      	subs	r2, r2, r0
 800740a:	445a      	add	r2, fp
 800740c:	f8de 0000 	ldr.w	r0, [lr]
 8007410:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007414:	b29b      	uxth	r3, r3
 8007416:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800741a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800741e:	b292      	uxth	r2, r2
 8007420:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007424:	45e1      	cmp	r9, ip
 8007426:	f84e 2b04 	str.w	r2, [lr], #4
 800742a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800742e:	d2de      	bcs.n	80073ee <quorem+0x42>
 8007430:	9b00      	ldr	r3, [sp, #0]
 8007432:	58eb      	ldr	r3, [r5, r3]
 8007434:	b92b      	cbnz	r3, 8007442 <quorem+0x96>
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	3b04      	subs	r3, #4
 800743a:	429d      	cmp	r5, r3
 800743c:	461a      	mov	r2, r3
 800743e:	d32f      	bcc.n	80074a0 <quorem+0xf4>
 8007440:	613c      	str	r4, [r7, #16]
 8007442:	4638      	mov	r0, r7
 8007444:	f001 f9c4 	bl	80087d0 <__mcmp>
 8007448:	2800      	cmp	r0, #0
 800744a:	db25      	blt.n	8007498 <quorem+0xec>
 800744c:	4629      	mov	r1, r5
 800744e:	2000      	movs	r0, #0
 8007450:	f858 2b04 	ldr.w	r2, [r8], #4
 8007454:	f8d1 c000 	ldr.w	ip, [r1]
 8007458:	fa1f fe82 	uxth.w	lr, r2
 800745c:	fa1f f38c 	uxth.w	r3, ip
 8007460:	eba3 030e 	sub.w	r3, r3, lr
 8007464:	4403      	add	r3, r0
 8007466:	0c12      	lsrs	r2, r2, #16
 8007468:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800746c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007470:	b29b      	uxth	r3, r3
 8007472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007476:	45c1      	cmp	r9, r8
 8007478:	f841 3b04 	str.w	r3, [r1], #4
 800747c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007480:	d2e6      	bcs.n	8007450 <quorem+0xa4>
 8007482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800748a:	b922      	cbnz	r2, 8007496 <quorem+0xea>
 800748c:	3b04      	subs	r3, #4
 800748e:	429d      	cmp	r5, r3
 8007490:	461a      	mov	r2, r3
 8007492:	d30b      	bcc.n	80074ac <quorem+0x100>
 8007494:	613c      	str	r4, [r7, #16]
 8007496:	3601      	adds	r6, #1
 8007498:	4630      	mov	r0, r6
 800749a:	b003      	add	sp, #12
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	3b04      	subs	r3, #4
 80074a4:	2a00      	cmp	r2, #0
 80074a6:	d1cb      	bne.n	8007440 <quorem+0x94>
 80074a8:	3c01      	subs	r4, #1
 80074aa:	e7c6      	b.n	800743a <quorem+0x8e>
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	3b04      	subs	r3, #4
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	d1ef      	bne.n	8007494 <quorem+0xe8>
 80074b4:	3c01      	subs	r4, #1
 80074b6:	e7ea      	b.n	800748e <quorem+0xe2>
 80074b8:	2000      	movs	r0, #0
 80074ba:	e7ee      	b.n	800749a <quorem+0xee>
 80074bc:	0000      	movs	r0, r0
	...

080074c0 <_dtoa_r>:
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	69c7      	ldr	r7, [r0, #28]
 80074c6:	b099      	sub	sp, #100	@ 0x64
 80074c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80074cc:	ec55 4b10 	vmov	r4, r5, d0
 80074d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80074d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80074d4:	4683      	mov	fp, r0
 80074d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80074d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074da:	b97f      	cbnz	r7, 80074fc <_dtoa_r+0x3c>
 80074dc:	2010      	movs	r0, #16
 80074de:	f000 fdfd 	bl	80080dc <malloc>
 80074e2:	4602      	mov	r2, r0
 80074e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80074e8:	b920      	cbnz	r0, 80074f4 <_dtoa_r+0x34>
 80074ea:	4ba7      	ldr	r3, [pc, #668]	@ (8007788 <_dtoa_r+0x2c8>)
 80074ec:	21ef      	movs	r1, #239	@ 0xef
 80074ee:	48a7      	ldr	r0, [pc, #668]	@ (800778c <_dtoa_r+0x2cc>)
 80074f0:	f002 fc2a 	bl	8009d48 <__assert_func>
 80074f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80074f8:	6007      	str	r7, [r0, #0]
 80074fa:	60c7      	str	r7, [r0, #12]
 80074fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	b159      	cbz	r1, 800751c <_dtoa_r+0x5c>
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	604a      	str	r2, [r1, #4]
 8007508:	2301      	movs	r3, #1
 800750a:	4093      	lsls	r3, r2
 800750c:	608b      	str	r3, [r1, #8]
 800750e:	4658      	mov	r0, fp
 8007510:	f000 feda 	bl	80082c8 <_Bfree>
 8007514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	1e2b      	subs	r3, r5, #0
 800751e:	bfb9      	ittee	lt
 8007520:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007524:	9303      	strlt	r3, [sp, #12]
 8007526:	2300      	movge	r3, #0
 8007528:	6033      	strge	r3, [r6, #0]
 800752a:	9f03      	ldr	r7, [sp, #12]
 800752c:	4b98      	ldr	r3, [pc, #608]	@ (8007790 <_dtoa_r+0x2d0>)
 800752e:	bfbc      	itt	lt
 8007530:	2201      	movlt	r2, #1
 8007532:	6032      	strlt	r2, [r6, #0]
 8007534:	43bb      	bics	r3, r7
 8007536:	d112      	bne.n	800755e <_dtoa_r+0x9e>
 8007538:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800753a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007544:	4323      	orrs	r3, r4
 8007546:	f000 854d 	beq.w	8007fe4 <_dtoa_r+0xb24>
 800754a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800754c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80077a4 <_dtoa_r+0x2e4>
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 854f 	beq.w	8007ff4 <_dtoa_r+0xb34>
 8007556:	f10a 0303 	add.w	r3, sl, #3
 800755a:	f000 bd49 	b.w	8007ff0 <_dtoa_r+0xb30>
 800755e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007562:	2200      	movs	r2, #0
 8007564:	ec51 0b17 	vmov	r0, r1, d7
 8007568:	2300      	movs	r3, #0
 800756a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800756e:	f7f9 faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8007572:	4680      	mov	r8, r0
 8007574:	b158      	cbz	r0, 800758e <_dtoa_r+0xce>
 8007576:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007578:	2301      	movs	r3, #1
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800757e:	b113      	cbz	r3, 8007586 <_dtoa_r+0xc6>
 8007580:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007582:	4b84      	ldr	r3, [pc, #528]	@ (8007794 <_dtoa_r+0x2d4>)
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80077a8 <_dtoa_r+0x2e8>
 800758a:	f000 bd33 	b.w	8007ff4 <_dtoa_r+0xb34>
 800758e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007592:	aa16      	add	r2, sp, #88	@ 0x58
 8007594:	a917      	add	r1, sp, #92	@ 0x5c
 8007596:	4658      	mov	r0, fp
 8007598:	f001 fa3a 	bl	8008a10 <__d2b>
 800759c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80075a0:	4681      	mov	r9, r0
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	d077      	beq.n	8007696 <_dtoa_r+0x1d6>
 80075a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80075ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80075b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80075bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80075c0:	4619      	mov	r1, r3
 80075c2:	2200      	movs	r2, #0
 80075c4:	4b74      	ldr	r3, [pc, #464]	@ (8007798 <_dtoa_r+0x2d8>)
 80075c6:	f7f8 fe5f 	bl	8000288 <__aeabi_dsub>
 80075ca:	a369      	add	r3, pc, #420	@ (adr r3, 8007770 <_dtoa_r+0x2b0>)
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	f7f9 f812 	bl	80005f8 <__aeabi_dmul>
 80075d4:	a368      	add	r3, pc, #416	@ (adr r3, 8007778 <_dtoa_r+0x2b8>)
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f7f8 fe57 	bl	800028c <__adddf3>
 80075de:	4604      	mov	r4, r0
 80075e0:	4630      	mov	r0, r6
 80075e2:	460d      	mov	r5, r1
 80075e4:	f7f8 ff9e 	bl	8000524 <__aeabi_i2d>
 80075e8:	a365      	add	r3, pc, #404	@ (adr r3, 8007780 <_dtoa_r+0x2c0>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f7f9 f803 	bl	80005f8 <__aeabi_dmul>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f8 fe47 	bl	800028c <__adddf3>
 80075fe:	4604      	mov	r4, r0
 8007600:	460d      	mov	r5, r1
 8007602:	f7f9 faa9 	bl	8000b58 <__aeabi_d2iz>
 8007606:	2200      	movs	r2, #0
 8007608:	4607      	mov	r7, r0
 800760a:	2300      	movs	r3, #0
 800760c:	4620      	mov	r0, r4
 800760e:	4629      	mov	r1, r5
 8007610:	f7f9 fa64 	bl	8000adc <__aeabi_dcmplt>
 8007614:	b140      	cbz	r0, 8007628 <_dtoa_r+0x168>
 8007616:	4638      	mov	r0, r7
 8007618:	f7f8 ff84 	bl	8000524 <__aeabi_i2d>
 800761c:	4622      	mov	r2, r4
 800761e:	462b      	mov	r3, r5
 8007620:	f7f9 fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8007624:	b900      	cbnz	r0, 8007628 <_dtoa_r+0x168>
 8007626:	3f01      	subs	r7, #1
 8007628:	2f16      	cmp	r7, #22
 800762a:	d851      	bhi.n	80076d0 <_dtoa_r+0x210>
 800762c:	4b5b      	ldr	r3, [pc, #364]	@ (800779c <_dtoa_r+0x2dc>)
 800762e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800763a:	f7f9 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800763e:	2800      	cmp	r0, #0
 8007640:	d048      	beq.n	80076d4 <_dtoa_r+0x214>
 8007642:	3f01      	subs	r7, #1
 8007644:	2300      	movs	r3, #0
 8007646:	9312      	str	r3, [sp, #72]	@ 0x48
 8007648:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800764a:	1b9b      	subs	r3, r3, r6
 800764c:	1e5a      	subs	r2, r3, #1
 800764e:	bf44      	itt	mi
 8007650:	f1c3 0801 	rsbmi	r8, r3, #1
 8007654:	2300      	movmi	r3, #0
 8007656:	9208      	str	r2, [sp, #32]
 8007658:	bf54      	ite	pl
 800765a:	f04f 0800 	movpl.w	r8, #0
 800765e:	9308      	strmi	r3, [sp, #32]
 8007660:	2f00      	cmp	r7, #0
 8007662:	db39      	blt.n	80076d8 <_dtoa_r+0x218>
 8007664:	9b08      	ldr	r3, [sp, #32]
 8007666:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007668:	443b      	add	r3, r7
 800766a:	9308      	str	r3, [sp, #32]
 800766c:	2300      	movs	r3, #0
 800766e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007672:	2b09      	cmp	r3, #9
 8007674:	d864      	bhi.n	8007740 <_dtoa_r+0x280>
 8007676:	2b05      	cmp	r3, #5
 8007678:	bfc4      	itt	gt
 800767a:	3b04      	subgt	r3, #4
 800767c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800767e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007680:	f1a3 0302 	sub.w	r3, r3, #2
 8007684:	bfcc      	ite	gt
 8007686:	2400      	movgt	r4, #0
 8007688:	2401      	movle	r4, #1
 800768a:	2b03      	cmp	r3, #3
 800768c:	d863      	bhi.n	8007756 <_dtoa_r+0x296>
 800768e:	e8df f003 	tbb	[pc, r3]
 8007692:	372a      	.short	0x372a
 8007694:	5535      	.short	0x5535
 8007696:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800769a:	441e      	add	r6, r3
 800769c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	bfc1      	itttt	gt
 80076a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80076a8:	409f      	lslgt	r7, r3
 80076aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80076ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80076b2:	bfd6      	itet	le
 80076b4:	f1c3 0320 	rsble	r3, r3, #32
 80076b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80076bc:	fa04 f003 	lslle.w	r0, r4, r3
 80076c0:	f7f8 ff20 	bl	8000504 <__aeabi_ui2d>
 80076c4:	2201      	movs	r2, #1
 80076c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80076ca:	3e01      	subs	r6, #1
 80076cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80076ce:	e777      	b.n	80075c0 <_dtoa_r+0x100>
 80076d0:	2301      	movs	r3, #1
 80076d2:	e7b8      	b.n	8007646 <_dtoa_r+0x186>
 80076d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80076d6:	e7b7      	b.n	8007648 <_dtoa_r+0x188>
 80076d8:	427b      	negs	r3, r7
 80076da:	930a      	str	r3, [sp, #40]	@ 0x28
 80076dc:	2300      	movs	r3, #0
 80076de:	eba8 0807 	sub.w	r8, r8, r7
 80076e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076e4:	e7c4      	b.n	8007670 <_dtoa_r+0x1b0>
 80076e6:	2300      	movs	r3, #0
 80076e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dc35      	bgt.n	800775c <_dtoa_r+0x29c>
 80076f0:	2301      	movs	r3, #1
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	9307      	str	r3, [sp, #28]
 80076f6:	461a      	mov	r2, r3
 80076f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80076fa:	e00b      	b.n	8007714 <_dtoa_r+0x254>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e7f3      	b.n	80076e8 <_dtoa_r+0x228>
 8007700:	2300      	movs	r3, #0
 8007702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	3301      	adds	r3, #1
 800770c:	2b01      	cmp	r3, #1
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	bfb8      	it	lt
 8007712:	2301      	movlt	r3, #1
 8007714:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007718:	2100      	movs	r1, #0
 800771a:	2204      	movs	r2, #4
 800771c:	f102 0514 	add.w	r5, r2, #20
 8007720:	429d      	cmp	r5, r3
 8007722:	d91f      	bls.n	8007764 <_dtoa_r+0x2a4>
 8007724:	6041      	str	r1, [r0, #4]
 8007726:	4658      	mov	r0, fp
 8007728:	f000 fd8e 	bl	8008248 <_Balloc>
 800772c:	4682      	mov	sl, r0
 800772e:	2800      	cmp	r0, #0
 8007730:	d13c      	bne.n	80077ac <_dtoa_r+0x2ec>
 8007732:	4b1b      	ldr	r3, [pc, #108]	@ (80077a0 <_dtoa_r+0x2e0>)
 8007734:	4602      	mov	r2, r0
 8007736:	f240 11af 	movw	r1, #431	@ 0x1af
 800773a:	e6d8      	b.n	80074ee <_dtoa_r+0x2e>
 800773c:	2301      	movs	r3, #1
 800773e:	e7e0      	b.n	8007702 <_dtoa_r+0x242>
 8007740:	2401      	movs	r4, #1
 8007742:	2300      	movs	r3, #0
 8007744:	9309      	str	r3, [sp, #36]	@ 0x24
 8007746:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007748:	f04f 33ff 	mov.w	r3, #4294967295
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	9307      	str	r3, [sp, #28]
 8007750:	2200      	movs	r2, #0
 8007752:	2312      	movs	r3, #18
 8007754:	e7d0      	b.n	80076f8 <_dtoa_r+0x238>
 8007756:	2301      	movs	r3, #1
 8007758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800775a:	e7f5      	b.n	8007748 <_dtoa_r+0x288>
 800775c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	9307      	str	r3, [sp, #28]
 8007762:	e7d7      	b.n	8007714 <_dtoa_r+0x254>
 8007764:	3101      	adds	r1, #1
 8007766:	0052      	lsls	r2, r2, #1
 8007768:	e7d8      	b.n	800771c <_dtoa_r+0x25c>
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w
 8007770:	636f4361 	.word	0x636f4361
 8007774:	3fd287a7 	.word	0x3fd287a7
 8007778:	8b60c8b3 	.word	0x8b60c8b3
 800777c:	3fc68a28 	.word	0x3fc68a28
 8007780:	509f79fb 	.word	0x509f79fb
 8007784:	3fd34413 	.word	0x3fd34413
 8007788:	0800b18e 	.word	0x0800b18e
 800778c:	0800b1a5 	.word	0x0800b1a5
 8007790:	7ff00000 	.word	0x7ff00000
 8007794:	0800b159 	.word	0x0800b159
 8007798:	3ff80000 	.word	0x3ff80000
 800779c:	0800b2a0 	.word	0x0800b2a0
 80077a0:	0800b1fd 	.word	0x0800b1fd
 80077a4:	0800b18a 	.word	0x0800b18a
 80077a8:	0800b158 	.word	0x0800b158
 80077ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077b0:	6018      	str	r0, [r3, #0]
 80077b2:	9b07      	ldr	r3, [sp, #28]
 80077b4:	2b0e      	cmp	r3, #14
 80077b6:	f200 80a4 	bhi.w	8007902 <_dtoa_r+0x442>
 80077ba:	2c00      	cmp	r4, #0
 80077bc:	f000 80a1 	beq.w	8007902 <_dtoa_r+0x442>
 80077c0:	2f00      	cmp	r7, #0
 80077c2:	dd33      	ble.n	800782c <_dtoa_r+0x36c>
 80077c4:	4bad      	ldr	r3, [pc, #692]	@ (8007a7c <_dtoa_r+0x5bc>)
 80077c6:	f007 020f 	and.w	r2, r7, #15
 80077ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ce:	ed93 7b00 	vldr	d7, [r3]
 80077d2:	05f8      	lsls	r0, r7, #23
 80077d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80077d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80077dc:	d516      	bpl.n	800780c <_dtoa_r+0x34c>
 80077de:	4ba8      	ldr	r3, [pc, #672]	@ (8007a80 <_dtoa_r+0x5c0>)
 80077e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077e8:	f7f9 f830 	bl	800084c <__aeabi_ddiv>
 80077ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077f0:	f004 040f 	and.w	r4, r4, #15
 80077f4:	2603      	movs	r6, #3
 80077f6:	4da2      	ldr	r5, [pc, #648]	@ (8007a80 <_dtoa_r+0x5c0>)
 80077f8:	b954      	cbnz	r4, 8007810 <_dtoa_r+0x350>
 80077fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007802:	f7f9 f823 	bl	800084c <__aeabi_ddiv>
 8007806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800780a:	e028      	b.n	800785e <_dtoa_r+0x39e>
 800780c:	2602      	movs	r6, #2
 800780e:	e7f2      	b.n	80077f6 <_dtoa_r+0x336>
 8007810:	07e1      	lsls	r1, r4, #31
 8007812:	d508      	bpl.n	8007826 <_dtoa_r+0x366>
 8007814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800781c:	f7f8 feec 	bl	80005f8 <__aeabi_dmul>
 8007820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007824:	3601      	adds	r6, #1
 8007826:	1064      	asrs	r4, r4, #1
 8007828:	3508      	adds	r5, #8
 800782a:	e7e5      	b.n	80077f8 <_dtoa_r+0x338>
 800782c:	f000 80d2 	beq.w	80079d4 <_dtoa_r+0x514>
 8007830:	427c      	negs	r4, r7
 8007832:	4b92      	ldr	r3, [pc, #584]	@ (8007a7c <_dtoa_r+0x5bc>)
 8007834:	4d92      	ldr	r5, [pc, #584]	@ (8007a80 <_dtoa_r+0x5c0>)
 8007836:	f004 020f 	and.w	r2, r4, #15
 800783a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007846:	f7f8 fed7 	bl	80005f8 <__aeabi_dmul>
 800784a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800784e:	1124      	asrs	r4, r4, #4
 8007850:	2300      	movs	r3, #0
 8007852:	2602      	movs	r6, #2
 8007854:	2c00      	cmp	r4, #0
 8007856:	f040 80b2 	bne.w	80079be <_dtoa_r+0x4fe>
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1d3      	bne.n	8007806 <_dtoa_r+0x346>
 800785e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007860:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 80b7 	beq.w	80079d8 <_dtoa_r+0x518>
 800786a:	4b86      	ldr	r3, [pc, #536]	@ (8007a84 <_dtoa_r+0x5c4>)
 800786c:	2200      	movs	r2, #0
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f9 f933 	bl	8000adc <__aeabi_dcmplt>
 8007876:	2800      	cmp	r0, #0
 8007878:	f000 80ae 	beq.w	80079d8 <_dtoa_r+0x518>
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 80aa 	beq.w	80079d8 <_dtoa_r+0x518>
 8007884:	9b00      	ldr	r3, [sp, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	dd37      	ble.n	80078fa <_dtoa_r+0x43a>
 800788a:	1e7b      	subs	r3, r7, #1
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	4620      	mov	r0, r4
 8007890:	4b7d      	ldr	r3, [pc, #500]	@ (8007a88 <_dtoa_r+0x5c8>)
 8007892:	2200      	movs	r2, #0
 8007894:	4629      	mov	r1, r5
 8007896:	f7f8 feaf 	bl	80005f8 <__aeabi_dmul>
 800789a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800789e:	9c00      	ldr	r4, [sp, #0]
 80078a0:	3601      	adds	r6, #1
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7f8 fe3e 	bl	8000524 <__aeabi_i2d>
 80078a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ac:	f7f8 fea4 	bl	80005f8 <__aeabi_dmul>
 80078b0:	4b76      	ldr	r3, [pc, #472]	@ (8007a8c <_dtoa_r+0x5cc>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	f7f8 fcea 	bl	800028c <__adddf3>
 80078b8:	4605      	mov	r5, r0
 80078ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80078be:	2c00      	cmp	r4, #0
 80078c0:	f040 808d 	bne.w	80079de <_dtoa_r+0x51e>
 80078c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c8:	4b71      	ldr	r3, [pc, #452]	@ (8007a90 <_dtoa_r+0x5d0>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	f7f8 fcdc 	bl	8000288 <__aeabi_dsub>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078d8:	462a      	mov	r2, r5
 80078da:	4633      	mov	r3, r6
 80078dc:	f7f9 f91c 	bl	8000b18 <__aeabi_dcmpgt>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f040 828b 	bne.w	8007dfc <_dtoa_r+0x93c>
 80078e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ea:	462a      	mov	r2, r5
 80078ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80078f0:	f7f9 f8f4 	bl	8000adc <__aeabi_dcmplt>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	f040 8128 	bne.w	8007b4a <_dtoa_r+0x68a>
 80078fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80078fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007902:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f2c0 815a 	blt.w	8007bbe <_dtoa_r+0x6fe>
 800790a:	2f0e      	cmp	r7, #14
 800790c:	f300 8157 	bgt.w	8007bbe <_dtoa_r+0x6fe>
 8007910:	4b5a      	ldr	r3, [pc, #360]	@ (8007a7c <_dtoa_r+0x5bc>)
 8007912:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007916:	ed93 7b00 	vldr	d7, [r3]
 800791a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800791c:	2b00      	cmp	r3, #0
 800791e:	ed8d 7b00 	vstr	d7, [sp]
 8007922:	da03      	bge.n	800792c <_dtoa_r+0x46c>
 8007924:	9b07      	ldr	r3, [sp, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f340 8101 	ble.w	8007b2e <_dtoa_r+0x66e>
 800792c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007930:	4656      	mov	r6, sl
 8007932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007936:	4620      	mov	r0, r4
 8007938:	4629      	mov	r1, r5
 800793a:	f7f8 ff87 	bl	800084c <__aeabi_ddiv>
 800793e:	f7f9 f90b 	bl	8000b58 <__aeabi_d2iz>
 8007942:	4680      	mov	r8, r0
 8007944:	f7f8 fdee 	bl	8000524 <__aeabi_i2d>
 8007948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800794c:	f7f8 fe54 	bl	80005f8 <__aeabi_dmul>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4620      	mov	r0, r4
 8007956:	4629      	mov	r1, r5
 8007958:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800795c:	f7f8 fc94 	bl	8000288 <__aeabi_dsub>
 8007960:	f806 4b01 	strb.w	r4, [r6], #1
 8007964:	9d07      	ldr	r5, [sp, #28]
 8007966:	eba6 040a 	sub.w	r4, r6, sl
 800796a:	42a5      	cmp	r5, r4
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	f040 8117 	bne.w	8007ba2 <_dtoa_r+0x6e2>
 8007974:	f7f8 fc8a 	bl	800028c <__adddf3>
 8007978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800797c:	4604      	mov	r4, r0
 800797e:	460d      	mov	r5, r1
 8007980:	f7f9 f8ca 	bl	8000b18 <__aeabi_dcmpgt>
 8007984:	2800      	cmp	r0, #0
 8007986:	f040 80f9 	bne.w	8007b7c <_dtoa_r+0x6bc>
 800798a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f9 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8007996:	b118      	cbz	r0, 80079a0 <_dtoa_r+0x4e0>
 8007998:	f018 0f01 	tst.w	r8, #1
 800799c:	f040 80ee 	bne.w	8007b7c <_dtoa_r+0x6bc>
 80079a0:	4649      	mov	r1, r9
 80079a2:	4658      	mov	r0, fp
 80079a4:	f000 fc90 	bl	80082c8 <_Bfree>
 80079a8:	2300      	movs	r3, #0
 80079aa:	7033      	strb	r3, [r6, #0]
 80079ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079ae:	3701      	adds	r7, #1
 80079b0:	601f      	str	r7, [r3, #0]
 80079b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 831d 	beq.w	8007ff4 <_dtoa_r+0xb34>
 80079ba:	601e      	str	r6, [r3, #0]
 80079bc:	e31a      	b.n	8007ff4 <_dtoa_r+0xb34>
 80079be:	07e2      	lsls	r2, r4, #31
 80079c0:	d505      	bpl.n	80079ce <_dtoa_r+0x50e>
 80079c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079c6:	f7f8 fe17 	bl	80005f8 <__aeabi_dmul>
 80079ca:	3601      	adds	r6, #1
 80079cc:	2301      	movs	r3, #1
 80079ce:	1064      	asrs	r4, r4, #1
 80079d0:	3508      	adds	r5, #8
 80079d2:	e73f      	b.n	8007854 <_dtoa_r+0x394>
 80079d4:	2602      	movs	r6, #2
 80079d6:	e742      	b.n	800785e <_dtoa_r+0x39e>
 80079d8:	9c07      	ldr	r4, [sp, #28]
 80079da:	9704      	str	r7, [sp, #16]
 80079dc:	e761      	b.n	80078a2 <_dtoa_r+0x3e2>
 80079de:	4b27      	ldr	r3, [pc, #156]	@ (8007a7c <_dtoa_r+0x5bc>)
 80079e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079ea:	4454      	add	r4, sl
 80079ec:	2900      	cmp	r1, #0
 80079ee:	d053      	beq.n	8007a98 <_dtoa_r+0x5d8>
 80079f0:	4928      	ldr	r1, [pc, #160]	@ (8007a94 <_dtoa_r+0x5d4>)
 80079f2:	2000      	movs	r0, #0
 80079f4:	f7f8 ff2a 	bl	800084c <__aeabi_ddiv>
 80079f8:	4633      	mov	r3, r6
 80079fa:	462a      	mov	r2, r5
 80079fc:	f7f8 fc44 	bl	8000288 <__aeabi_dsub>
 8007a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a04:	4656      	mov	r6, sl
 8007a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0a:	f7f9 f8a5 	bl	8000b58 <__aeabi_d2iz>
 8007a0e:	4605      	mov	r5, r0
 8007a10:	f7f8 fd88 	bl	8000524 <__aeabi_i2d>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a1c:	f7f8 fc34 	bl	8000288 <__aeabi_dsub>
 8007a20:	3530      	adds	r5, #48	@ 0x30
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a2a:	f806 5b01 	strb.w	r5, [r6], #1
 8007a2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a32:	f7f9 f853 	bl	8000adc <__aeabi_dcmplt>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d171      	bne.n	8007b1e <_dtoa_r+0x65e>
 8007a3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a3e:	4911      	ldr	r1, [pc, #68]	@ (8007a84 <_dtoa_r+0x5c4>)
 8007a40:	2000      	movs	r0, #0
 8007a42:	f7f8 fc21 	bl	8000288 <__aeabi_dsub>
 8007a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a4a:	f7f9 f847 	bl	8000adc <__aeabi_dcmplt>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f040 8095 	bne.w	8007b7e <_dtoa_r+0x6be>
 8007a54:	42a6      	cmp	r6, r4
 8007a56:	f43f af50 	beq.w	80078fa <_dtoa_r+0x43a>
 8007a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <_dtoa_r+0x5c8>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	f7f8 fdc9 	bl	80005f8 <__aeabi_dmul>
 8007a66:	4b08      	ldr	r3, [pc, #32]	@ (8007a88 <_dtoa_r+0x5c8>)
 8007a68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a72:	f7f8 fdc1 	bl	80005f8 <__aeabi_dmul>
 8007a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a7a:	e7c4      	b.n	8007a06 <_dtoa_r+0x546>
 8007a7c:	0800b2a0 	.word	0x0800b2a0
 8007a80:	0800b278 	.word	0x0800b278
 8007a84:	3ff00000 	.word	0x3ff00000
 8007a88:	40240000 	.word	0x40240000
 8007a8c:	401c0000 	.word	0x401c0000
 8007a90:	40140000 	.word	0x40140000
 8007a94:	3fe00000 	.word	0x3fe00000
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f7f8 fdac 	bl	80005f8 <__aeabi_dmul>
 8007aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007aa4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007aa6:	4656      	mov	r6, sl
 8007aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aac:	f7f9 f854 	bl	8000b58 <__aeabi_d2iz>
 8007ab0:	4605      	mov	r5, r0
 8007ab2:	f7f8 fd37 	bl	8000524 <__aeabi_i2d>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007abe:	f7f8 fbe3 	bl	8000288 <__aeabi_dsub>
 8007ac2:	3530      	adds	r5, #48	@ 0x30
 8007ac4:	f806 5b01 	strb.w	r5, [r6], #1
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	42a6      	cmp	r6, r4
 8007ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	d124      	bne.n	8007b22 <_dtoa_r+0x662>
 8007ad8:	4bac      	ldr	r3, [pc, #688]	@ (8007d8c <_dtoa_r+0x8cc>)
 8007ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ade:	f7f8 fbd5 	bl	800028c <__adddf3>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aea:	f7f9 f815 	bl	8000b18 <__aeabi_dcmpgt>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d145      	bne.n	8007b7e <_dtoa_r+0x6be>
 8007af2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007af6:	49a5      	ldr	r1, [pc, #660]	@ (8007d8c <_dtoa_r+0x8cc>)
 8007af8:	2000      	movs	r0, #0
 8007afa:	f7f8 fbc5 	bl	8000288 <__aeabi_dsub>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b06:	f7f8 ffe9 	bl	8000adc <__aeabi_dcmplt>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	f43f aef5 	beq.w	80078fa <_dtoa_r+0x43a>
 8007b10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007b12:	1e73      	subs	r3, r6, #1
 8007b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b1a:	2b30      	cmp	r3, #48	@ 0x30
 8007b1c:	d0f8      	beq.n	8007b10 <_dtoa_r+0x650>
 8007b1e:	9f04      	ldr	r7, [sp, #16]
 8007b20:	e73e      	b.n	80079a0 <_dtoa_r+0x4e0>
 8007b22:	4b9b      	ldr	r3, [pc, #620]	@ (8007d90 <_dtoa_r+0x8d0>)
 8007b24:	f7f8 fd68 	bl	80005f8 <__aeabi_dmul>
 8007b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b2c:	e7bc      	b.n	8007aa8 <_dtoa_r+0x5e8>
 8007b2e:	d10c      	bne.n	8007b4a <_dtoa_r+0x68a>
 8007b30:	4b98      	ldr	r3, [pc, #608]	@ (8007d94 <_dtoa_r+0x8d4>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b38:	f7f8 fd5e 	bl	80005f8 <__aeabi_dmul>
 8007b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b40:	f7f8 ffe0 	bl	8000b04 <__aeabi_dcmpge>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f000 8157 	beq.w	8007df8 <_dtoa_r+0x938>
 8007b4a:	2400      	movs	r4, #0
 8007b4c:	4625      	mov	r5, r4
 8007b4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b50:	43db      	mvns	r3, r3
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	4656      	mov	r6, sl
 8007b56:	2700      	movs	r7, #0
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4658      	mov	r0, fp
 8007b5c:	f000 fbb4 	bl	80082c8 <_Bfree>
 8007b60:	2d00      	cmp	r5, #0
 8007b62:	d0dc      	beq.n	8007b1e <_dtoa_r+0x65e>
 8007b64:	b12f      	cbz	r7, 8007b72 <_dtoa_r+0x6b2>
 8007b66:	42af      	cmp	r7, r5
 8007b68:	d003      	beq.n	8007b72 <_dtoa_r+0x6b2>
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	4658      	mov	r0, fp
 8007b6e:	f000 fbab 	bl	80082c8 <_Bfree>
 8007b72:	4629      	mov	r1, r5
 8007b74:	4658      	mov	r0, fp
 8007b76:	f000 fba7 	bl	80082c8 <_Bfree>
 8007b7a:	e7d0      	b.n	8007b1e <_dtoa_r+0x65e>
 8007b7c:	9704      	str	r7, [sp, #16]
 8007b7e:	4633      	mov	r3, r6
 8007b80:	461e      	mov	r6, r3
 8007b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b86:	2a39      	cmp	r2, #57	@ 0x39
 8007b88:	d107      	bne.n	8007b9a <_dtoa_r+0x6da>
 8007b8a:	459a      	cmp	sl, r3
 8007b8c:	d1f8      	bne.n	8007b80 <_dtoa_r+0x6c0>
 8007b8e:	9a04      	ldr	r2, [sp, #16]
 8007b90:	3201      	adds	r2, #1
 8007b92:	9204      	str	r2, [sp, #16]
 8007b94:	2230      	movs	r2, #48	@ 0x30
 8007b96:	f88a 2000 	strb.w	r2, [sl]
 8007b9a:	781a      	ldrb	r2, [r3, #0]
 8007b9c:	3201      	adds	r2, #1
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	e7bd      	b.n	8007b1e <_dtoa_r+0x65e>
 8007ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8007d90 <_dtoa_r+0x8d0>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f7f8 fd27 	bl	80005f8 <__aeabi_dmul>
 8007baa:	2200      	movs	r2, #0
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	460d      	mov	r5, r1
 8007bb2:	f7f8 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f43f aebb 	beq.w	8007932 <_dtoa_r+0x472>
 8007bbc:	e6f0      	b.n	80079a0 <_dtoa_r+0x4e0>
 8007bbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007bc0:	2a00      	cmp	r2, #0
 8007bc2:	f000 80db 	beq.w	8007d7c <_dtoa_r+0x8bc>
 8007bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bc8:	2a01      	cmp	r2, #1
 8007bca:	f300 80bf 	bgt.w	8007d4c <_dtoa_r+0x88c>
 8007bce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	f000 80b7 	beq.w	8007d44 <_dtoa_r+0x884>
 8007bd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007bda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007bdc:	4646      	mov	r6, r8
 8007bde:	9a08      	ldr	r2, [sp, #32]
 8007be0:	2101      	movs	r1, #1
 8007be2:	441a      	add	r2, r3
 8007be4:	4658      	mov	r0, fp
 8007be6:	4498      	add	r8, r3
 8007be8:	9208      	str	r2, [sp, #32]
 8007bea:	f000 fc6b 	bl	80084c4 <__i2b>
 8007bee:	4605      	mov	r5, r0
 8007bf0:	b15e      	cbz	r6, 8007c0a <_dtoa_r+0x74a>
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dd08      	ble.n	8007c0a <_dtoa_r+0x74a>
 8007bf8:	42b3      	cmp	r3, r6
 8007bfa:	9a08      	ldr	r2, [sp, #32]
 8007bfc:	bfa8      	it	ge
 8007bfe:	4633      	movge	r3, r6
 8007c00:	eba8 0803 	sub.w	r8, r8, r3
 8007c04:	1af6      	subs	r6, r6, r3
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	9308      	str	r3, [sp, #32]
 8007c0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c0c:	b1f3      	cbz	r3, 8007c4c <_dtoa_r+0x78c>
 8007c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80b7 	beq.w	8007d84 <_dtoa_r+0x8c4>
 8007c16:	b18c      	cbz	r4, 8007c3c <_dtoa_r+0x77c>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4622      	mov	r2, r4
 8007c1c:	4658      	mov	r0, fp
 8007c1e:	f000 fd11 	bl	8008644 <__pow5mult>
 8007c22:	464a      	mov	r2, r9
 8007c24:	4601      	mov	r1, r0
 8007c26:	4605      	mov	r5, r0
 8007c28:	4658      	mov	r0, fp
 8007c2a:	f000 fc61 	bl	80084f0 <__multiply>
 8007c2e:	4649      	mov	r1, r9
 8007c30:	9004      	str	r0, [sp, #16]
 8007c32:	4658      	mov	r0, fp
 8007c34:	f000 fb48 	bl	80082c8 <_Bfree>
 8007c38:	9b04      	ldr	r3, [sp, #16]
 8007c3a:	4699      	mov	r9, r3
 8007c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c3e:	1b1a      	subs	r2, r3, r4
 8007c40:	d004      	beq.n	8007c4c <_dtoa_r+0x78c>
 8007c42:	4649      	mov	r1, r9
 8007c44:	4658      	mov	r0, fp
 8007c46:	f000 fcfd 	bl	8008644 <__pow5mult>
 8007c4a:	4681      	mov	r9, r0
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	4658      	mov	r0, fp
 8007c50:	f000 fc38 	bl	80084c4 <__i2b>
 8007c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c56:	4604      	mov	r4, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 81cf 	beq.w	8007ffc <_dtoa_r+0xb3c>
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4601      	mov	r1, r0
 8007c62:	4658      	mov	r0, fp
 8007c64:	f000 fcee 	bl	8008644 <__pow5mult>
 8007c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	f300 8095 	bgt.w	8007d9c <_dtoa_r+0x8dc>
 8007c72:	9b02      	ldr	r3, [sp, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f040 8087 	bne.w	8007d88 <_dtoa_r+0x8c8>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f040 8089 	bne.w	8007d98 <_dtoa_r+0x8d8>
 8007c86:	9b03      	ldr	r3, [sp, #12]
 8007c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c8c:	0d1b      	lsrs	r3, r3, #20
 8007c8e:	051b      	lsls	r3, r3, #20
 8007c90:	b12b      	cbz	r3, 8007c9e <_dtoa_r+0x7de>
 8007c92:	9b08      	ldr	r3, [sp, #32]
 8007c94:	3301      	adds	r3, #1
 8007c96:	9308      	str	r3, [sp, #32]
 8007c98:	f108 0801 	add.w	r8, r8, #1
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 81b0 	beq.w	8008008 <_dtoa_r+0xb48>
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cae:	6918      	ldr	r0, [r3, #16]
 8007cb0:	f000 fbbc 	bl	800842c <__hi0bits>
 8007cb4:	f1c0 0020 	rsb	r0, r0, #32
 8007cb8:	9b08      	ldr	r3, [sp, #32]
 8007cba:	4418      	add	r0, r3
 8007cbc:	f010 001f 	ands.w	r0, r0, #31
 8007cc0:	d077      	beq.n	8007db2 <_dtoa_r+0x8f2>
 8007cc2:	f1c0 0320 	rsb	r3, r0, #32
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	dd6b      	ble.n	8007da2 <_dtoa_r+0x8e2>
 8007cca:	9b08      	ldr	r3, [sp, #32]
 8007ccc:	f1c0 001c 	rsb	r0, r0, #28
 8007cd0:	4403      	add	r3, r0
 8007cd2:	4480      	add	r8, r0
 8007cd4:	4406      	add	r6, r0
 8007cd6:	9308      	str	r3, [sp, #32]
 8007cd8:	f1b8 0f00 	cmp.w	r8, #0
 8007cdc:	dd05      	ble.n	8007cea <_dtoa_r+0x82a>
 8007cde:	4649      	mov	r1, r9
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	4658      	mov	r0, fp
 8007ce4:	f000 fd08 	bl	80086f8 <__lshift>
 8007ce8:	4681      	mov	r9, r0
 8007cea:	9b08      	ldr	r3, [sp, #32]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	dd05      	ble.n	8007cfc <_dtoa_r+0x83c>
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	4658      	mov	r0, fp
 8007cf6:	f000 fcff 	bl	80086f8 <__lshift>
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d059      	beq.n	8007db6 <_dtoa_r+0x8f6>
 8007d02:	4621      	mov	r1, r4
 8007d04:	4648      	mov	r0, r9
 8007d06:	f000 fd63 	bl	80087d0 <__mcmp>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	da53      	bge.n	8007db6 <_dtoa_r+0x8f6>
 8007d0e:	1e7b      	subs	r3, r7, #1
 8007d10:	9304      	str	r3, [sp, #16]
 8007d12:	4649      	mov	r1, r9
 8007d14:	2300      	movs	r3, #0
 8007d16:	220a      	movs	r2, #10
 8007d18:	4658      	mov	r0, fp
 8007d1a:	f000 faf7 	bl	800830c <__multadd>
 8007d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d20:	4681      	mov	r9, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8172 	beq.w	800800c <_dtoa_r+0xb4c>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	220a      	movs	r2, #10
 8007d2e:	4658      	mov	r0, fp
 8007d30:	f000 faec 	bl	800830c <__multadd>
 8007d34:	9b00      	ldr	r3, [sp, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	4605      	mov	r5, r0
 8007d3a:	dc67      	bgt.n	8007e0c <_dtoa_r+0x94c>
 8007d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	dc41      	bgt.n	8007dc6 <_dtoa_r+0x906>
 8007d42:	e063      	b.n	8007e0c <_dtoa_r+0x94c>
 8007d44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007d4a:	e746      	b.n	8007bda <_dtoa_r+0x71a>
 8007d4c:	9b07      	ldr	r3, [sp, #28]
 8007d4e:	1e5c      	subs	r4, r3, #1
 8007d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d52:	42a3      	cmp	r3, r4
 8007d54:	bfbf      	itttt	lt
 8007d56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007d58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007d5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007d5c:	1ae3      	sublt	r3, r4, r3
 8007d5e:	bfb4      	ite	lt
 8007d60:	18d2      	addlt	r2, r2, r3
 8007d62:	1b1c      	subge	r4, r3, r4
 8007d64:	9b07      	ldr	r3, [sp, #28]
 8007d66:	bfbc      	itt	lt
 8007d68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007d6a:	2400      	movlt	r4, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfb5      	itete	lt
 8007d70:	eba8 0603 	sublt.w	r6, r8, r3
 8007d74:	9b07      	ldrge	r3, [sp, #28]
 8007d76:	2300      	movlt	r3, #0
 8007d78:	4646      	movge	r6, r8
 8007d7a:	e730      	b.n	8007bde <_dtoa_r+0x71e>
 8007d7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007d80:	4646      	mov	r6, r8
 8007d82:	e735      	b.n	8007bf0 <_dtoa_r+0x730>
 8007d84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d86:	e75c      	b.n	8007c42 <_dtoa_r+0x782>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e788      	b.n	8007c9e <_dtoa_r+0x7de>
 8007d8c:	3fe00000 	.word	0x3fe00000
 8007d90:	40240000 	.word	0x40240000
 8007d94:	40140000 	.word	0x40140000
 8007d98:	9b02      	ldr	r3, [sp, #8]
 8007d9a:	e780      	b.n	8007c9e <_dtoa_r+0x7de>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007da0:	e782      	b.n	8007ca8 <_dtoa_r+0x7e8>
 8007da2:	d099      	beq.n	8007cd8 <_dtoa_r+0x818>
 8007da4:	9a08      	ldr	r2, [sp, #32]
 8007da6:	331c      	adds	r3, #28
 8007da8:	441a      	add	r2, r3
 8007daa:	4498      	add	r8, r3
 8007dac:	441e      	add	r6, r3
 8007dae:	9208      	str	r2, [sp, #32]
 8007db0:	e792      	b.n	8007cd8 <_dtoa_r+0x818>
 8007db2:	4603      	mov	r3, r0
 8007db4:	e7f6      	b.n	8007da4 <_dtoa_r+0x8e4>
 8007db6:	9b07      	ldr	r3, [sp, #28]
 8007db8:	9704      	str	r7, [sp, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	dc20      	bgt.n	8007e00 <_dtoa_r+0x940>
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	dd1e      	ble.n	8007e04 <_dtoa_r+0x944>
 8007dc6:	9b00      	ldr	r3, [sp, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f47f aec0 	bne.w	8007b4e <_dtoa_r+0x68e>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	2205      	movs	r2, #5
 8007dd2:	4658      	mov	r0, fp
 8007dd4:	f000 fa9a 	bl	800830c <__multadd>
 8007dd8:	4601      	mov	r1, r0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4648      	mov	r0, r9
 8007dde:	f000 fcf7 	bl	80087d0 <__mcmp>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	f77f aeb3 	ble.w	8007b4e <_dtoa_r+0x68e>
 8007de8:	4656      	mov	r6, sl
 8007dea:	2331      	movs	r3, #49	@ 0x31
 8007dec:	f806 3b01 	strb.w	r3, [r6], #1
 8007df0:	9b04      	ldr	r3, [sp, #16]
 8007df2:	3301      	adds	r3, #1
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	e6ae      	b.n	8007b56 <_dtoa_r+0x696>
 8007df8:	9c07      	ldr	r4, [sp, #28]
 8007dfa:	9704      	str	r7, [sp, #16]
 8007dfc:	4625      	mov	r5, r4
 8007dfe:	e7f3      	b.n	8007de8 <_dtoa_r+0x928>
 8007e00:	9b07      	ldr	r3, [sp, #28]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 8104 	beq.w	8008014 <_dtoa_r+0xb54>
 8007e0c:	2e00      	cmp	r6, #0
 8007e0e:	dd05      	ble.n	8007e1c <_dtoa_r+0x95c>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4632      	mov	r2, r6
 8007e14:	4658      	mov	r0, fp
 8007e16:	f000 fc6f 	bl	80086f8 <__lshift>
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d05a      	beq.n	8007ed8 <_dtoa_r+0xa18>
 8007e22:	6869      	ldr	r1, [r5, #4]
 8007e24:	4658      	mov	r0, fp
 8007e26:	f000 fa0f 	bl	8008248 <_Balloc>
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	b928      	cbnz	r0, 8007e3a <_dtoa_r+0x97a>
 8007e2e:	4b84      	ldr	r3, [pc, #528]	@ (8008040 <_dtoa_r+0xb80>)
 8007e30:	4602      	mov	r2, r0
 8007e32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007e36:	f7ff bb5a 	b.w	80074ee <_dtoa_r+0x2e>
 8007e3a:	692a      	ldr	r2, [r5, #16]
 8007e3c:	3202      	adds	r2, #2
 8007e3e:	0092      	lsls	r2, r2, #2
 8007e40:	f105 010c 	add.w	r1, r5, #12
 8007e44:	300c      	adds	r0, #12
 8007e46:	f7ff fa9c 	bl	8007382 <memcpy>
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4658      	mov	r0, fp
 8007e50:	f000 fc52 	bl	80086f8 <__lshift>
 8007e54:	f10a 0301 	add.w	r3, sl, #1
 8007e58:	9307      	str	r3, [sp, #28]
 8007e5a:	9b00      	ldr	r3, [sp, #0]
 8007e5c:	4453      	add	r3, sl
 8007e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e60:	9b02      	ldr	r3, [sp, #8]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	462f      	mov	r7, r5
 8007e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	9b07      	ldr	r3, [sp, #28]
 8007e6e:	4621      	mov	r1, r4
 8007e70:	3b01      	subs	r3, #1
 8007e72:	4648      	mov	r0, r9
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	f7ff fa99 	bl	80073ac <quorem>
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	9002      	str	r0, [sp, #8]
 8007e7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e82:	4648      	mov	r0, r9
 8007e84:	f000 fca4 	bl	80087d0 <__mcmp>
 8007e88:	462a      	mov	r2, r5
 8007e8a:	9008      	str	r0, [sp, #32]
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4658      	mov	r0, fp
 8007e90:	f000 fcba 	bl	8008808 <__mdiff>
 8007e94:	68c2      	ldr	r2, [r0, #12]
 8007e96:	4606      	mov	r6, r0
 8007e98:	bb02      	cbnz	r2, 8007edc <_dtoa_r+0xa1c>
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	4648      	mov	r0, r9
 8007e9e:	f000 fc97 	bl	80087d0 <__mcmp>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4658      	mov	r0, fp
 8007ea8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eaa:	f000 fa0d 	bl	80082c8 <_Bfree>
 8007eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007eb2:	9e07      	ldr	r6, [sp, #28]
 8007eb4:	ea43 0102 	orr.w	r1, r3, r2
 8007eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eba:	4319      	orrs	r1, r3
 8007ebc:	d110      	bne.n	8007ee0 <_dtoa_r+0xa20>
 8007ebe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ec2:	d029      	beq.n	8007f18 <_dtoa_r+0xa58>
 8007ec4:	9b08      	ldr	r3, [sp, #32]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dd02      	ble.n	8007ed0 <_dtoa_r+0xa10>
 8007eca:	9b02      	ldr	r3, [sp, #8]
 8007ecc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ed0:	9b00      	ldr	r3, [sp, #0]
 8007ed2:	f883 8000 	strb.w	r8, [r3]
 8007ed6:	e63f      	b.n	8007b58 <_dtoa_r+0x698>
 8007ed8:	4628      	mov	r0, r5
 8007eda:	e7bb      	b.n	8007e54 <_dtoa_r+0x994>
 8007edc:	2201      	movs	r2, #1
 8007ede:	e7e1      	b.n	8007ea4 <_dtoa_r+0x9e4>
 8007ee0:	9b08      	ldr	r3, [sp, #32]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	db04      	blt.n	8007ef0 <_dtoa_r+0xa30>
 8007ee6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007eec:	430b      	orrs	r3, r1
 8007eee:	d120      	bne.n	8007f32 <_dtoa_r+0xa72>
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	dded      	ble.n	8007ed0 <_dtoa_r+0xa10>
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	4658      	mov	r0, fp
 8007efa:	f000 fbfd 	bl	80086f8 <__lshift>
 8007efe:	4621      	mov	r1, r4
 8007f00:	4681      	mov	r9, r0
 8007f02:	f000 fc65 	bl	80087d0 <__mcmp>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	dc03      	bgt.n	8007f12 <_dtoa_r+0xa52>
 8007f0a:	d1e1      	bne.n	8007ed0 <_dtoa_r+0xa10>
 8007f0c:	f018 0f01 	tst.w	r8, #1
 8007f10:	d0de      	beq.n	8007ed0 <_dtoa_r+0xa10>
 8007f12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f16:	d1d8      	bne.n	8007eca <_dtoa_r+0xa0a>
 8007f18:	9a00      	ldr	r2, [sp, #0]
 8007f1a:	2339      	movs	r3, #57	@ 0x39
 8007f1c:	7013      	strb	r3, [r2, #0]
 8007f1e:	4633      	mov	r3, r6
 8007f20:	461e      	mov	r6, r3
 8007f22:	3b01      	subs	r3, #1
 8007f24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f28:	2a39      	cmp	r2, #57	@ 0x39
 8007f2a:	d052      	beq.n	8007fd2 <_dtoa_r+0xb12>
 8007f2c:	3201      	adds	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e612      	b.n	8007b58 <_dtoa_r+0x698>
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	dd07      	ble.n	8007f46 <_dtoa_r+0xa86>
 8007f36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f3a:	d0ed      	beq.n	8007f18 <_dtoa_r+0xa58>
 8007f3c:	9a00      	ldr	r2, [sp, #0]
 8007f3e:	f108 0301 	add.w	r3, r8, #1
 8007f42:	7013      	strb	r3, [r2, #0]
 8007f44:	e608      	b.n	8007b58 <_dtoa_r+0x698>
 8007f46:	9b07      	ldr	r3, [sp, #28]
 8007f48:	9a07      	ldr	r2, [sp, #28]
 8007f4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007f4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d028      	beq.n	8007fa6 <_dtoa_r+0xae6>
 8007f54:	4649      	mov	r1, r9
 8007f56:	2300      	movs	r3, #0
 8007f58:	220a      	movs	r2, #10
 8007f5a:	4658      	mov	r0, fp
 8007f5c:	f000 f9d6 	bl	800830c <__multadd>
 8007f60:	42af      	cmp	r7, r5
 8007f62:	4681      	mov	r9, r0
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	f04f 020a 	mov.w	r2, #10
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	4658      	mov	r0, fp
 8007f70:	d107      	bne.n	8007f82 <_dtoa_r+0xac2>
 8007f72:	f000 f9cb 	bl	800830c <__multadd>
 8007f76:	4607      	mov	r7, r0
 8007f78:	4605      	mov	r5, r0
 8007f7a:	9b07      	ldr	r3, [sp, #28]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	9307      	str	r3, [sp, #28]
 8007f80:	e774      	b.n	8007e6c <_dtoa_r+0x9ac>
 8007f82:	f000 f9c3 	bl	800830c <__multadd>
 8007f86:	4629      	mov	r1, r5
 8007f88:	4607      	mov	r7, r0
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	220a      	movs	r2, #10
 8007f8e:	4658      	mov	r0, fp
 8007f90:	f000 f9bc 	bl	800830c <__multadd>
 8007f94:	4605      	mov	r5, r0
 8007f96:	e7f0      	b.n	8007f7a <_dtoa_r+0xaba>
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bfcc      	ite	gt
 8007f9e:	461e      	movgt	r6, r3
 8007fa0:	2601      	movle	r6, #1
 8007fa2:	4456      	add	r6, sl
 8007fa4:	2700      	movs	r7, #0
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	2201      	movs	r2, #1
 8007faa:	4658      	mov	r0, fp
 8007fac:	f000 fba4 	bl	80086f8 <__lshift>
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	4681      	mov	r9, r0
 8007fb4:	f000 fc0c 	bl	80087d0 <__mcmp>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	dcb0      	bgt.n	8007f1e <_dtoa_r+0xa5e>
 8007fbc:	d102      	bne.n	8007fc4 <_dtoa_r+0xb04>
 8007fbe:	f018 0f01 	tst.w	r8, #1
 8007fc2:	d1ac      	bne.n	8007f1e <_dtoa_r+0xa5e>
 8007fc4:	4633      	mov	r3, r6
 8007fc6:	461e      	mov	r6, r3
 8007fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fcc:	2a30      	cmp	r2, #48	@ 0x30
 8007fce:	d0fa      	beq.n	8007fc6 <_dtoa_r+0xb06>
 8007fd0:	e5c2      	b.n	8007b58 <_dtoa_r+0x698>
 8007fd2:	459a      	cmp	sl, r3
 8007fd4:	d1a4      	bne.n	8007f20 <_dtoa_r+0xa60>
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	2331      	movs	r3, #49	@ 0x31
 8007fde:	f88a 3000 	strb.w	r3, [sl]
 8007fe2:	e5b9      	b.n	8007b58 <_dtoa_r+0x698>
 8007fe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fe6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008044 <_dtoa_r+0xb84>
 8007fea:	b11b      	cbz	r3, 8007ff4 <_dtoa_r+0xb34>
 8007fec:	f10a 0308 	add.w	r3, sl, #8
 8007ff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	4650      	mov	r0, sl
 8007ff6:	b019      	add	sp, #100	@ 0x64
 8007ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	f77f ae37 	ble.w	8007c72 <_dtoa_r+0x7b2>
 8008004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008006:	930a      	str	r3, [sp, #40]	@ 0x28
 8008008:	2001      	movs	r0, #1
 800800a:	e655      	b.n	8007cb8 <_dtoa_r+0x7f8>
 800800c:	9b00      	ldr	r3, [sp, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f77f aed6 	ble.w	8007dc0 <_dtoa_r+0x900>
 8008014:	4656      	mov	r6, sl
 8008016:	4621      	mov	r1, r4
 8008018:	4648      	mov	r0, r9
 800801a:	f7ff f9c7 	bl	80073ac <quorem>
 800801e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008022:	f806 8b01 	strb.w	r8, [r6], #1
 8008026:	9b00      	ldr	r3, [sp, #0]
 8008028:	eba6 020a 	sub.w	r2, r6, sl
 800802c:	4293      	cmp	r3, r2
 800802e:	ddb3      	ble.n	8007f98 <_dtoa_r+0xad8>
 8008030:	4649      	mov	r1, r9
 8008032:	2300      	movs	r3, #0
 8008034:	220a      	movs	r2, #10
 8008036:	4658      	mov	r0, fp
 8008038:	f000 f968 	bl	800830c <__multadd>
 800803c:	4681      	mov	r9, r0
 800803e:	e7ea      	b.n	8008016 <_dtoa_r+0xb56>
 8008040:	0800b1fd 	.word	0x0800b1fd
 8008044:	0800b181 	.word	0x0800b181

08008048 <_free_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4605      	mov	r5, r0
 800804c:	2900      	cmp	r1, #0
 800804e:	d041      	beq.n	80080d4 <_free_r+0x8c>
 8008050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008054:	1f0c      	subs	r4, r1, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfb8      	it	lt
 800805a:	18e4      	addlt	r4, r4, r3
 800805c:	f000 f8e8 	bl	8008230 <__malloc_lock>
 8008060:	4a1d      	ldr	r2, [pc, #116]	@ (80080d8 <_free_r+0x90>)
 8008062:	6813      	ldr	r3, [r2, #0]
 8008064:	b933      	cbnz	r3, 8008074 <_free_r+0x2c>
 8008066:	6063      	str	r3, [r4, #4]
 8008068:	6014      	str	r4, [r2, #0]
 800806a:	4628      	mov	r0, r5
 800806c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008070:	f000 b8e4 	b.w	800823c <__malloc_unlock>
 8008074:	42a3      	cmp	r3, r4
 8008076:	d908      	bls.n	800808a <_free_r+0x42>
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	1821      	adds	r1, r4, r0
 800807c:	428b      	cmp	r3, r1
 800807e:	bf01      	itttt	eq
 8008080:	6819      	ldreq	r1, [r3, #0]
 8008082:	685b      	ldreq	r3, [r3, #4]
 8008084:	1809      	addeq	r1, r1, r0
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	e7ed      	b.n	8008066 <_free_r+0x1e>
 800808a:	461a      	mov	r2, r3
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	b10b      	cbz	r3, 8008094 <_free_r+0x4c>
 8008090:	42a3      	cmp	r3, r4
 8008092:	d9fa      	bls.n	800808a <_free_r+0x42>
 8008094:	6811      	ldr	r1, [r2, #0]
 8008096:	1850      	adds	r0, r2, r1
 8008098:	42a0      	cmp	r0, r4
 800809a:	d10b      	bne.n	80080b4 <_free_r+0x6c>
 800809c:	6820      	ldr	r0, [r4, #0]
 800809e:	4401      	add	r1, r0
 80080a0:	1850      	adds	r0, r2, r1
 80080a2:	4283      	cmp	r3, r0
 80080a4:	6011      	str	r1, [r2, #0]
 80080a6:	d1e0      	bne.n	800806a <_free_r+0x22>
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	6053      	str	r3, [r2, #4]
 80080ae:	4408      	add	r0, r1
 80080b0:	6010      	str	r0, [r2, #0]
 80080b2:	e7da      	b.n	800806a <_free_r+0x22>
 80080b4:	d902      	bls.n	80080bc <_free_r+0x74>
 80080b6:	230c      	movs	r3, #12
 80080b8:	602b      	str	r3, [r5, #0]
 80080ba:	e7d6      	b.n	800806a <_free_r+0x22>
 80080bc:	6820      	ldr	r0, [r4, #0]
 80080be:	1821      	adds	r1, r4, r0
 80080c0:	428b      	cmp	r3, r1
 80080c2:	bf04      	itt	eq
 80080c4:	6819      	ldreq	r1, [r3, #0]
 80080c6:	685b      	ldreq	r3, [r3, #4]
 80080c8:	6063      	str	r3, [r4, #4]
 80080ca:	bf04      	itt	eq
 80080cc:	1809      	addeq	r1, r1, r0
 80080ce:	6021      	streq	r1, [r4, #0]
 80080d0:	6054      	str	r4, [r2, #4]
 80080d2:	e7ca      	b.n	800806a <_free_r+0x22>
 80080d4:	bd38      	pop	{r3, r4, r5, pc}
 80080d6:	bf00      	nop
 80080d8:	200005ec 	.word	0x200005ec

080080dc <malloc>:
 80080dc:	4b02      	ldr	r3, [pc, #8]	@ (80080e8 <malloc+0xc>)
 80080de:	4601      	mov	r1, r0
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	f000 b825 	b.w	8008130 <_malloc_r>
 80080e6:	bf00      	nop
 80080e8:	20000034 	.word	0x20000034

080080ec <sbrk_aligned>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	4e0f      	ldr	r6, [pc, #60]	@ (800812c <sbrk_aligned+0x40>)
 80080f0:	460c      	mov	r4, r1
 80080f2:	6831      	ldr	r1, [r6, #0]
 80080f4:	4605      	mov	r5, r0
 80080f6:	b911      	cbnz	r1, 80080fe <sbrk_aligned+0x12>
 80080f8:	f001 fe0c 	bl	8009d14 <_sbrk_r>
 80080fc:	6030      	str	r0, [r6, #0]
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f001 fe07 	bl	8009d14 <_sbrk_r>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d103      	bne.n	8008112 <sbrk_aligned+0x26>
 800810a:	f04f 34ff 	mov.w	r4, #4294967295
 800810e:	4620      	mov	r0, r4
 8008110:	bd70      	pop	{r4, r5, r6, pc}
 8008112:	1cc4      	adds	r4, r0, #3
 8008114:	f024 0403 	bic.w	r4, r4, #3
 8008118:	42a0      	cmp	r0, r4
 800811a:	d0f8      	beq.n	800810e <sbrk_aligned+0x22>
 800811c:	1a21      	subs	r1, r4, r0
 800811e:	4628      	mov	r0, r5
 8008120:	f001 fdf8 	bl	8009d14 <_sbrk_r>
 8008124:	3001      	adds	r0, #1
 8008126:	d1f2      	bne.n	800810e <sbrk_aligned+0x22>
 8008128:	e7ef      	b.n	800810a <sbrk_aligned+0x1e>
 800812a:	bf00      	nop
 800812c:	200005e8 	.word	0x200005e8

08008130 <_malloc_r>:
 8008130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008134:	1ccd      	adds	r5, r1, #3
 8008136:	f025 0503 	bic.w	r5, r5, #3
 800813a:	3508      	adds	r5, #8
 800813c:	2d0c      	cmp	r5, #12
 800813e:	bf38      	it	cc
 8008140:	250c      	movcc	r5, #12
 8008142:	2d00      	cmp	r5, #0
 8008144:	4606      	mov	r6, r0
 8008146:	db01      	blt.n	800814c <_malloc_r+0x1c>
 8008148:	42a9      	cmp	r1, r5
 800814a:	d904      	bls.n	8008156 <_malloc_r+0x26>
 800814c:	230c      	movs	r3, #12
 800814e:	6033      	str	r3, [r6, #0]
 8008150:	2000      	movs	r0, #0
 8008152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800822c <_malloc_r+0xfc>
 800815a:	f000 f869 	bl	8008230 <__malloc_lock>
 800815e:	f8d8 3000 	ldr.w	r3, [r8]
 8008162:	461c      	mov	r4, r3
 8008164:	bb44      	cbnz	r4, 80081b8 <_malloc_r+0x88>
 8008166:	4629      	mov	r1, r5
 8008168:	4630      	mov	r0, r6
 800816a:	f7ff ffbf 	bl	80080ec <sbrk_aligned>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	4604      	mov	r4, r0
 8008172:	d158      	bne.n	8008226 <_malloc_r+0xf6>
 8008174:	f8d8 4000 	ldr.w	r4, [r8]
 8008178:	4627      	mov	r7, r4
 800817a:	2f00      	cmp	r7, #0
 800817c:	d143      	bne.n	8008206 <_malloc_r+0xd6>
 800817e:	2c00      	cmp	r4, #0
 8008180:	d04b      	beq.n	800821a <_malloc_r+0xea>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	4639      	mov	r1, r7
 8008186:	4630      	mov	r0, r6
 8008188:	eb04 0903 	add.w	r9, r4, r3
 800818c:	f001 fdc2 	bl	8009d14 <_sbrk_r>
 8008190:	4581      	cmp	r9, r0
 8008192:	d142      	bne.n	800821a <_malloc_r+0xea>
 8008194:	6821      	ldr	r1, [r4, #0]
 8008196:	1a6d      	subs	r5, r5, r1
 8008198:	4629      	mov	r1, r5
 800819a:	4630      	mov	r0, r6
 800819c:	f7ff ffa6 	bl	80080ec <sbrk_aligned>
 80081a0:	3001      	adds	r0, #1
 80081a2:	d03a      	beq.n	800821a <_malloc_r+0xea>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	442b      	add	r3, r5
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	f8d8 3000 	ldr.w	r3, [r8]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	bb62      	cbnz	r2, 800820c <_malloc_r+0xdc>
 80081b2:	f8c8 7000 	str.w	r7, [r8]
 80081b6:	e00f      	b.n	80081d8 <_malloc_r+0xa8>
 80081b8:	6822      	ldr	r2, [r4, #0]
 80081ba:	1b52      	subs	r2, r2, r5
 80081bc:	d420      	bmi.n	8008200 <_malloc_r+0xd0>
 80081be:	2a0b      	cmp	r2, #11
 80081c0:	d917      	bls.n	80081f2 <_malloc_r+0xc2>
 80081c2:	1961      	adds	r1, r4, r5
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	6025      	str	r5, [r4, #0]
 80081c8:	bf18      	it	ne
 80081ca:	6059      	strne	r1, [r3, #4]
 80081cc:	6863      	ldr	r3, [r4, #4]
 80081ce:	bf08      	it	eq
 80081d0:	f8c8 1000 	streq.w	r1, [r8]
 80081d4:	5162      	str	r2, [r4, r5]
 80081d6:	604b      	str	r3, [r1, #4]
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 f82f 	bl	800823c <__malloc_unlock>
 80081de:	f104 000b 	add.w	r0, r4, #11
 80081e2:	1d23      	adds	r3, r4, #4
 80081e4:	f020 0007 	bic.w	r0, r0, #7
 80081e8:	1ac2      	subs	r2, r0, r3
 80081ea:	bf1c      	itt	ne
 80081ec:	1a1b      	subne	r3, r3, r0
 80081ee:	50a3      	strne	r3, [r4, r2]
 80081f0:	e7af      	b.n	8008152 <_malloc_r+0x22>
 80081f2:	6862      	ldr	r2, [r4, #4]
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	bf0c      	ite	eq
 80081f8:	f8c8 2000 	streq.w	r2, [r8]
 80081fc:	605a      	strne	r2, [r3, #4]
 80081fe:	e7eb      	b.n	80081d8 <_malloc_r+0xa8>
 8008200:	4623      	mov	r3, r4
 8008202:	6864      	ldr	r4, [r4, #4]
 8008204:	e7ae      	b.n	8008164 <_malloc_r+0x34>
 8008206:	463c      	mov	r4, r7
 8008208:	687f      	ldr	r7, [r7, #4]
 800820a:	e7b6      	b.n	800817a <_malloc_r+0x4a>
 800820c:	461a      	mov	r2, r3
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	42a3      	cmp	r3, r4
 8008212:	d1fb      	bne.n	800820c <_malloc_r+0xdc>
 8008214:	2300      	movs	r3, #0
 8008216:	6053      	str	r3, [r2, #4]
 8008218:	e7de      	b.n	80081d8 <_malloc_r+0xa8>
 800821a:	230c      	movs	r3, #12
 800821c:	6033      	str	r3, [r6, #0]
 800821e:	4630      	mov	r0, r6
 8008220:	f000 f80c 	bl	800823c <__malloc_unlock>
 8008224:	e794      	b.n	8008150 <_malloc_r+0x20>
 8008226:	6005      	str	r5, [r0, #0]
 8008228:	e7d6      	b.n	80081d8 <_malloc_r+0xa8>
 800822a:	bf00      	nop
 800822c:	200005ec 	.word	0x200005ec

08008230 <__malloc_lock>:
 8008230:	4801      	ldr	r0, [pc, #4]	@ (8008238 <__malloc_lock+0x8>)
 8008232:	f7ff b8a4 	b.w	800737e <__retarget_lock_acquire_recursive>
 8008236:	bf00      	nop
 8008238:	200005e4 	.word	0x200005e4

0800823c <__malloc_unlock>:
 800823c:	4801      	ldr	r0, [pc, #4]	@ (8008244 <__malloc_unlock+0x8>)
 800823e:	f7ff b89f 	b.w	8007380 <__retarget_lock_release_recursive>
 8008242:	bf00      	nop
 8008244:	200005e4 	.word	0x200005e4

08008248 <_Balloc>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	69c6      	ldr	r6, [r0, #28]
 800824c:	4604      	mov	r4, r0
 800824e:	460d      	mov	r5, r1
 8008250:	b976      	cbnz	r6, 8008270 <_Balloc+0x28>
 8008252:	2010      	movs	r0, #16
 8008254:	f7ff ff42 	bl	80080dc <malloc>
 8008258:	4602      	mov	r2, r0
 800825a:	61e0      	str	r0, [r4, #28]
 800825c:	b920      	cbnz	r0, 8008268 <_Balloc+0x20>
 800825e:	4b18      	ldr	r3, [pc, #96]	@ (80082c0 <_Balloc+0x78>)
 8008260:	4818      	ldr	r0, [pc, #96]	@ (80082c4 <_Balloc+0x7c>)
 8008262:	216b      	movs	r1, #107	@ 0x6b
 8008264:	f001 fd70 	bl	8009d48 <__assert_func>
 8008268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800826c:	6006      	str	r6, [r0, #0]
 800826e:	60c6      	str	r6, [r0, #12]
 8008270:	69e6      	ldr	r6, [r4, #28]
 8008272:	68f3      	ldr	r3, [r6, #12]
 8008274:	b183      	cbz	r3, 8008298 <_Balloc+0x50>
 8008276:	69e3      	ldr	r3, [r4, #28]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800827e:	b9b8      	cbnz	r0, 80082b0 <_Balloc+0x68>
 8008280:	2101      	movs	r1, #1
 8008282:	fa01 f605 	lsl.w	r6, r1, r5
 8008286:	1d72      	adds	r2, r6, #5
 8008288:	0092      	lsls	r2, r2, #2
 800828a:	4620      	mov	r0, r4
 800828c:	f001 fd7a 	bl	8009d84 <_calloc_r>
 8008290:	b160      	cbz	r0, 80082ac <_Balloc+0x64>
 8008292:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008296:	e00e      	b.n	80082b6 <_Balloc+0x6e>
 8008298:	2221      	movs	r2, #33	@ 0x21
 800829a:	2104      	movs	r1, #4
 800829c:	4620      	mov	r0, r4
 800829e:	f001 fd71 	bl	8009d84 <_calloc_r>
 80082a2:	69e3      	ldr	r3, [r4, #28]
 80082a4:	60f0      	str	r0, [r6, #12]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e4      	bne.n	8008276 <_Balloc+0x2e>
 80082ac:	2000      	movs	r0, #0
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
 80082b0:	6802      	ldr	r2, [r0, #0]
 80082b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082b6:	2300      	movs	r3, #0
 80082b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082bc:	e7f7      	b.n	80082ae <_Balloc+0x66>
 80082be:	bf00      	nop
 80082c0:	0800b18e 	.word	0x0800b18e
 80082c4:	0800b20e 	.word	0x0800b20e

080082c8 <_Bfree>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	69c6      	ldr	r6, [r0, #28]
 80082cc:	4605      	mov	r5, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	b976      	cbnz	r6, 80082f0 <_Bfree+0x28>
 80082d2:	2010      	movs	r0, #16
 80082d4:	f7ff ff02 	bl	80080dc <malloc>
 80082d8:	4602      	mov	r2, r0
 80082da:	61e8      	str	r0, [r5, #28]
 80082dc:	b920      	cbnz	r0, 80082e8 <_Bfree+0x20>
 80082de:	4b09      	ldr	r3, [pc, #36]	@ (8008304 <_Bfree+0x3c>)
 80082e0:	4809      	ldr	r0, [pc, #36]	@ (8008308 <_Bfree+0x40>)
 80082e2:	218f      	movs	r1, #143	@ 0x8f
 80082e4:	f001 fd30 	bl	8009d48 <__assert_func>
 80082e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082ec:	6006      	str	r6, [r0, #0]
 80082ee:	60c6      	str	r6, [r0, #12]
 80082f0:	b13c      	cbz	r4, 8008302 <_Bfree+0x3a>
 80082f2:	69eb      	ldr	r3, [r5, #28]
 80082f4:	6862      	ldr	r2, [r4, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082fc:	6021      	str	r1, [r4, #0]
 80082fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008302:	bd70      	pop	{r4, r5, r6, pc}
 8008304:	0800b18e 	.word	0x0800b18e
 8008308:	0800b20e 	.word	0x0800b20e

0800830c <__multadd>:
 800830c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008310:	690d      	ldr	r5, [r1, #16]
 8008312:	4607      	mov	r7, r0
 8008314:	460c      	mov	r4, r1
 8008316:	461e      	mov	r6, r3
 8008318:	f101 0c14 	add.w	ip, r1, #20
 800831c:	2000      	movs	r0, #0
 800831e:	f8dc 3000 	ldr.w	r3, [ip]
 8008322:	b299      	uxth	r1, r3
 8008324:	fb02 6101 	mla	r1, r2, r1, r6
 8008328:	0c1e      	lsrs	r6, r3, #16
 800832a:	0c0b      	lsrs	r3, r1, #16
 800832c:	fb02 3306 	mla	r3, r2, r6, r3
 8008330:	b289      	uxth	r1, r1
 8008332:	3001      	adds	r0, #1
 8008334:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008338:	4285      	cmp	r5, r0
 800833a:	f84c 1b04 	str.w	r1, [ip], #4
 800833e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008342:	dcec      	bgt.n	800831e <__multadd+0x12>
 8008344:	b30e      	cbz	r6, 800838a <__multadd+0x7e>
 8008346:	68a3      	ldr	r3, [r4, #8]
 8008348:	42ab      	cmp	r3, r5
 800834a:	dc19      	bgt.n	8008380 <__multadd+0x74>
 800834c:	6861      	ldr	r1, [r4, #4]
 800834e:	4638      	mov	r0, r7
 8008350:	3101      	adds	r1, #1
 8008352:	f7ff ff79 	bl	8008248 <_Balloc>
 8008356:	4680      	mov	r8, r0
 8008358:	b928      	cbnz	r0, 8008366 <__multadd+0x5a>
 800835a:	4602      	mov	r2, r0
 800835c:	4b0c      	ldr	r3, [pc, #48]	@ (8008390 <__multadd+0x84>)
 800835e:	480d      	ldr	r0, [pc, #52]	@ (8008394 <__multadd+0x88>)
 8008360:	21ba      	movs	r1, #186	@ 0xba
 8008362:	f001 fcf1 	bl	8009d48 <__assert_func>
 8008366:	6922      	ldr	r2, [r4, #16]
 8008368:	3202      	adds	r2, #2
 800836a:	f104 010c 	add.w	r1, r4, #12
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	300c      	adds	r0, #12
 8008372:	f7ff f806 	bl	8007382 <memcpy>
 8008376:	4621      	mov	r1, r4
 8008378:	4638      	mov	r0, r7
 800837a:	f7ff ffa5 	bl	80082c8 <_Bfree>
 800837e:	4644      	mov	r4, r8
 8008380:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008384:	3501      	adds	r5, #1
 8008386:	615e      	str	r6, [r3, #20]
 8008388:	6125      	str	r5, [r4, #16]
 800838a:	4620      	mov	r0, r4
 800838c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008390:	0800b1fd 	.word	0x0800b1fd
 8008394:	0800b20e 	.word	0x0800b20e

08008398 <__s2b>:
 8008398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800839c:	460c      	mov	r4, r1
 800839e:	4615      	mov	r5, r2
 80083a0:	461f      	mov	r7, r3
 80083a2:	2209      	movs	r2, #9
 80083a4:	3308      	adds	r3, #8
 80083a6:	4606      	mov	r6, r0
 80083a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ac:	2100      	movs	r1, #0
 80083ae:	2201      	movs	r2, #1
 80083b0:	429a      	cmp	r2, r3
 80083b2:	db09      	blt.n	80083c8 <__s2b+0x30>
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7ff ff47 	bl	8008248 <_Balloc>
 80083ba:	b940      	cbnz	r0, 80083ce <__s2b+0x36>
 80083bc:	4602      	mov	r2, r0
 80083be:	4b19      	ldr	r3, [pc, #100]	@ (8008424 <__s2b+0x8c>)
 80083c0:	4819      	ldr	r0, [pc, #100]	@ (8008428 <__s2b+0x90>)
 80083c2:	21d3      	movs	r1, #211	@ 0xd3
 80083c4:	f001 fcc0 	bl	8009d48 <__assert_func>
 80083c8:	0052      	lsls	r2, r2, #1
 80083ca:	3101      	adds	r1, #1
 80083cc:	e7f0      	b.n	80083b0 <__s2b+0x18>
 80083ce:	9b08      	ldr	r3, [sp, #32]
 80083d0:	6143      	str	r3, [r0, #20]
 80083d2:	2d09      	cmp	r5, #9
 80083d4:	f04f 0301 	mov.w	r3, #1
 80083d8:	6103      	str	r3, [r0, #16]
 80083da:	dd16      	ble.n	800840a <__s2b+0x72>
 80083dc:	f104 0909 	add.w	r9, r4, #9
 80083e0:	46c8      	mov	r8, r9
 80083e2:	442c      	add	r4, r5
 80083e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80083e8:	4601      	mov	r1, r0
 80083ea:	3b30      	subs	r3, #48	@ 0x30
 80083ec:	220a      	movs	r2, #10
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7ff ff8c 	bl	800830c <__multadd>
 80083f4:	45a0      	cmp	r8, r4
 80083f6:	d1f5      	bne.n	80083e4 <__s2b+0x4c>
 80083f8:	f1a5 0408 	sub.w	r4, r5, #8
 80083fc:	444c      	add	r4, r9
 80083fe:	1b2d      	subs	r5, r5, r4
 8008400:	1963      	adds	r3, r4, r5
 8008402:	42bb      	cmp	r3, r7
 8008404:	db04      	blt.n	8008410 <__s2b+0x78>
 8008406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840a:	340a      	adds	r4, #10
 800840c:	2509      	movs	r5, #9
 800840e:	e7f6      	b.n	80083fe <__s2b+0x66>
 8008410:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008414:	4601      	mov	r1, r0
 8008416:	3b30      	subs	r3, #48	@ 0x30
 8008418:	220a      	movs	r2, #10
 800841a:	4630      	mov	r0, r6
 800841c:	f7ff ff76 	bl	800830c <__multadd>
 8008420:	e7ee      	b.n	8008400 <__s2b+0x68>
 8008422:	bf00      	nop
 8008424:	0800b1fd 	.word	0x0800b1fd
 8008428:	0800b20e 	.word	0x0800b20e

0800842c <__hi0bits>:
 800842c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008430:	4603      	mov	r3, r0
 8008432:	bf36      	itet	cc
 8008434:	0403      	lslcc	r3, r0, #16
 8008436:	2000      	movcs	r0, #0
 8008438:	2010      	movcc	r0, #16
 800843a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800843e:	bf3c      	itt	cc
 8008440:	021b      	lslcc	r3, r3, #8
 8008442:	3008      	addcc	r0, #8
 8008444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008448:	bf3c      	itt	cc
 800844a:	011b      	lslcc	r3, r3, #4
 800844c:	3004      	addcc	r0, #4
 800844e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008452:	bf3c      	itt	cc
 8008454:	009b      	lslcc	r3, r3, #2
 8008456:	3002      	addcc	r0, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	db05      	blt.n	8008468 <__hi0bits+0x3c>
 800845c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008460:	f100 0001 	add.w	r0, r0, #1
 8008464:	bf08      	it	eq
 8008466:	2020      	moveq	r0, #32
 8008468:	4770      	bx	lr

0800846a <__lo0bits>:
 800846a:	6803      	ldr	r3, [r0, #0]
 800846c:	4602      	mov	r2, r0
 800846e:	f013 0007 	ands.w	r0, r3, #7
 8008472:	d00b      	beq.n	800848c <__lo0bits+0x22>
 8008474:	07d9      	lsls	r1, r3, #31
 8008476:	d421      	bmi.n	80084bc <__lo0bits+0x52>
 8008478:	0798      	lsls	r0, r3, #30
 800847a:	bf49      	itett	mi
 800847c:	085b      	lsrmi	r3, r3, #1
 800847e:	089b      	lsrpl	r3, r3, #2
 8008480:	2001      	movmi	r0, #1
 8008482:	6013      	strmi	r3, [r2, #0]
 8008484:	bf5c      	itt	pl
 8008486:	6013      	strpl	r3, [r2, #0]
 8008488:	2002      	movpl	r0, #2
 800848a:	4770      	bx	lr
 800848c:	b299      	uxth	r1, r3
 800848e:	b909      	cbnz	r1, 8008494 <__lo0bits+0x2a>
 8008490:	0c1b      	lsrs	r3, r3, #16
 8008492:	2010      	movs	r0, #16
 8008494:	b2d9      	uxtb	r1, r3
 8008496:	b909      	cbnz	r1, 800849c <__lo0bits+0x32>
 8008498:	3008      	adds	r0, #8
 800849a:	0a1b      	lsrs	r3, r3, #8
 800849c:	0719      	lsls	r1, r3, #28
 800849e:	bf04      	itt	eq
 80084a0:	091b      	lsreq	r3, r3, #4
 80084a2:	3004      	addeq	r0, #4
 80084a4:	0799      	lsls	r1, r3, #30
 80084a6:	bf04      	itt	eq
 80084a8:	089b      	lsreq	r3, r3, #2
 80084aa:	3002      	addeq	r0, #2
 80084ac:	07d9      	lsls	r1, r3, #31
 80084ae:	d403      	bmi.n	80084b8 <__lo0bits+0x4e>
 80084b0:	085b      	lsrs	r3, r3, #1
 80084b2:	f100 0001 	add.w	r0, r0, #1
 80084b6:	d003      	beq.n	80084c0 <__lo0bits+0x56>
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	4770      	bx	lr
 80084bc:	2000      	movs	r0, #0
 80084be:	4770      	bx	lr
 80084c0:	2020      	movs	r0, #32
 80084c2:	4770      	bx	lr

080084c4 <__i2b>:
 80084c4:	b510      	push	{r4, lr}
 80084c6:	460c      	mov	r4, r1
 80084c8:	2101      	movs	r1, #1
 80084ca:	f7ff febd 	bl	8008248 <_Balloc>
 80084ce:	4602      	mov	r2, r0
 80084d0:	b928      	cbnz	r0, 80084de <__i2b+0x1a>
 80084d2:	4b05      	ldr	r3, [pc, #20]	@ (80084e8 <__i2b+0x24>)
 80084d4:	4805      	ldr	r0, [pc, #20]	@ (80084ec <__i2b+0x28>)
 80084d6:	f240 1145 	movw	r1, #325	@ 0x145
 80084da:	f001 fc35 	bl	8009d48 <__assert_func>
 80084de:	2301      	movs	r3, #1
 80084e0:	6144      	str	r4, [r0, #20]
 80084e2:	6103      	str	r3, [r0, #16]
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	bf00      	nop
 80084e8:	0800b1fd 	.word	0x0800b1fd
 80084ec:	0800b20e 	.word	0x0800b20e

080084f0 <__multiply>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	4614      	mov	r4, r2
 80084f6:	690a      	ldr	r2, [r1, #16]
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	bfa8      	it	ge
 80084fe:	4623      	movge	r3, r4
 8008500:	460f      	mov	r7, r1
 8008502:	bfa4      	itt	ge
 8008504:	460c      	movge	r4, r1
 8008506:	461f      	movge	r7, r3
 8008508:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800850c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008510:	68a3      	ldr	r3, [r4, #8]
 8008512:	6861      	ldr	r1, [r4, #4]
 8008514:	eb0a 0609 	add.w	r6, sl, r9
 8008518:	42b3      	cmp	r3, r6
 800851a:	b085      	sub	sp, #20
 800851c:	bfb8      	it	lt
 800851e:	3101      	addlt	r1, #1
 8008520:	f7ff fe92 	bl	8008248 <_Balloc>
 8008524:	b930      	cbnz	r0, 8008534 <__multiply+0x44>
 8008526:	4602      	mov	r2, r0
 8008528:	4b44      	ldr	r3, [pc, #272]	@ (800863c <__multiply+0x14c>)
 800852a:	4845      	ldr	r0, [pc, #276]	@ (8008640 <__multiply+0x150>)
 800852c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008530:	f001 fc0a 	bl	8009d48 <__assert_func>
 8008534:	f100 0514 	add.w	r5, r0, #20
 8008538:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800853c:	462b      	mov	r3, r5
 800853e:	2200      	movs	r2, #0
 8008540:	4543      	cmp	r3, r8
 8008542:	d321      	bcc.n	8008588 <__multiply+0x98>
 8008544:	f107 0114 	add.w	r1, r7, #20
 8008548:	f104 0214 	add.w	r2, r4, #20
 800854c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008550:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008554:	9302      	str	r3, [sp, #8]
 8008556:	1b13      	subs	r3, r2, r4
 8008558:	3b15      	subs	r3, #21
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	3304      	adds	r3, #4
 8008560:	f104 0715 	add.w	r7, r4, #21
 8008564:	42ba      	cmp	r2, r7
 8008566:	bf38      	it	cc
 8008568:	2304      	movcc	r3, #4
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	9b02      	ldr	r3, [sp, #8]
 800856e:	9103      	str	r1, [sp, #12]
 8008570:	428b      	cmp	r3, r1
 8008572:	d80c      	bhi.n	800858e <__multiply+0x9e>
 8008574:	2e00      	cmp	r6, #0
 8008576:	dd03      	ble.n	8008580 <__multiply+0x90>
 8008578:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800857c:	2b00      	cmp	r3, #0
 800857e:	d05b      	beq.n	8008638 <__multiply+0x148>
 8008580:	6106      	str	r6, [r0, #16]
 8008582:	b005      	add	sp, #20
 8008584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008588:	f843 2b04 	str.w	r2, [r3], #4
 800858c:	e7d8      	b.n	8008540 <__multiply+0x50>
 800858e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008592:	f1ba 0f00 	cmp.w	sl, #0
 8008596:	d024      	beq.n	80085e2 <__multiply+0xf2>
 8008598:	f104 0e14 	add.w	lr, r4, #20
 800859c:	46a9      	mov	r9, r5
 800859e:	f04f 0c00 	mov.w	ip, #0
 80085a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085a6:	f8d9 3000 	ldr.w	r3, [r9]
 80085aa:	fa1f fb87 	uxth.w	fp, r7
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80085b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80085b8:	f8d9 7000 	ldr.w	r7, [r9]
 80085bc:	4463      	add	r3, ip
 80085be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80085c2:	fb0a c70b 	mla	r7, sl, fp, ip
 80085c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085d0:	4572      	cmp	r2, lr
 80085d2:	f849 3b04 	str.w	r3, [r9], #4
 80085d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80085da:	d8e2      	bhi.n	80085a2 <__multiply+0xb2>
 80085dc:	9b01      	ldr	r3, [sp, #4]
 80085de:	f845 c003 	str.w	ip, [r5, r3]
 80085e2:	9b03      	ldr	r3, [sp, #12]
 80085e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80085e8:	3104      	adds	r1, #4
 80085ea:	f1b9 0f00 	cmp.w	r9, #0
 80085ee:	d021      	beq.n	8008634 <__multiply+0x144>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	f104 0c14 	add.w	ip, r4, #20
 80085f6:	46ae      	mov	lr, r5
 80085f8:	f04f 0a00 	mov.w	sl, #0
 80085fc:	f8bc b000 	ldrh.w	fp, [ip]
 8008600:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008604:	fb09 770b 	mla	r7, r9, fp, r7
 8008608:	4457      	add	r7, sl
 800860a:	b29b      	uxth	r3, r3
 800860c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008610:	f84e 3b04 	str.w	r3, [lr], #4
 8008614:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008618:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800861c:	f8be 3000 	ldrh.w	r3, [lr]
 8008620:	fb09 330a 	mla	r3, r9, sl, r3
 8008624:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008628:	4562      	cmp	r2, ip
 800862a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800862e:	d8e5      	bhi.n	80085fc <__multiply+0x10c>
 8008630:	9f01      	ldr	r7, [sp, #4]
 8008632:	51eb      	str	r3, [r5, r7]
 8008634:	3504      	adds	r5, #4
 8008636:	e799      	b.n	800856c <__multiply+0x7c>
 8008638:	3e01      	subs	r6, #1
 800863a:	e79b      	b.n	8008574 <__multiply+0x84>
 800863c:	0800b1fd 	.word	0x0800b1fd
 8008640:	0800b20e 	.word	0x0800b20e

08008644 <__pow5mult>:
 8008644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008648:	4615      	mov	r5, r2
 800864a:	f012 0203 	ands.w	r2, r2, #3
 800864e:	4607      	mov	r7, r0
 8008650:	460e      	mov	r6, r1
 8008652:	d007      	beq.n	8008664 <__pow5mult+0x20>
 8008654:	4c25      	ldr	r4, [pc, #148]	@ (80086ec <__pow5mult+0xa8>)
 8008656:	3a01      	subs	r2, #1
 8008658:	2300      	movs	r3, #0
 800865a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800865e:	f7ff fe55 	bl	800830c <__multadd>
 8008662:	4606      	mov	r6, r0
 8008664:	10ad      	asrs	r5, r5, #2
 8008666:	d03d      	beq.n	80086e4 <__pow5mult+0xa0>
 8008668:	69fc      	ldr	r4, [r7, #28]
 800866a:	b97c      	cbnz	r4, 800868c <__pow5mult+0x48>
 800866c:	2010      	movs	r0, #16
 800866e:	f7ff fd35 	bl	80080dc <malloc>
 8008672:	4602      	mov	r2, r0
 8008674:	61f8      	str	r0, [r7, #28]
 8008676:	b928      	cbnz	r0, 8008684 <__pow5mult+0x40>
 8008678:	4b1d      	ldr	r3, [pc, #116]	@ (80086f0 <__pow5mult+0xac>)
 800867a:	481e      	ldr	r0, [pc, #120]	@ (80086f4 <__pow5mult+0xb0>)
 800867c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008680:	f001 fb62 	bl	8009d48 <__assert_func>
 8008684:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008688:	6004      	str	r4, [r0, #0]
 800868a:	60c4      	str	r4, [r0, #12]
 800868c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008690:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008694:	b94c      	cbnz	r4, 80086aa <__pow5mult+0x66>
 8008696:	f240 2171 	movw	r1, #625	@ 0x271
 800869a:	4638      	mov	r0, r7
 800869c:	f7ff ff12 	bl	80084c4 <__i2b>
 80086a0:	2300      	movs	r3, #0
 80086a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80086a6:	4604      	mov	r4, r0
 80086a8:	6003      	str	r3, [r0, #0]
 80086aa:	f04f 0900 	mov.w	r9, #0
 80086ae:	07eb      	lsls	r3, r5, #31
 80086b0:	d50a      	bpl.n	80086c8 <__pow5mult+0x84>
 80086b2:	4631      	mov	r1, r6
 80086b4:	4622      	mov	r2, r4
 80086b6:	4638      	mov	r0, r7
 80086b8:	f7ff ff1a 	bl	80084f0 <__multiply>
 80086bc:	4631      	mov	r1, r6
 80086be:	4680      	mov	r8, r0
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7ff fe01 	bl	80082c8 <_Bfree>
 80086c6:	4646      	mov	r6, r8
 80086c8:	106d      	asrs	r5, r5, #1
 80086ca:	d00b      	beq.n	80086e4 <__pow5mult+0xa0>
 80086cc:	6820      	ldr	r0, [r4, #0]
 80086ce:	b938      	cbnz	r0, 80086e0 <__pow5mult+0x9c>
 80086d0:	4622      	mov	r2, r4
 80086d2:	4621      	mov	r1, r4
 80086d4:	4638      	mov	r0, r7
 80086d6:	f7ff ff0b 	bl	80084f0 <__multiply>
 80086da:	6020      	str	r0, [r4, #0]
 80086dc:	f8c0 9000 	str.w	r9, [r0]
 80086e0:	4604      	mov	r4, r0
 80086e2:	e7e4      	b.n	80086ae <__pow5mult+0x6a>
 80086e4:	4630      	mov	r0, r6
 80086e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ea:	bf00      	nop
 80086ec:	0800b268 	.word	0x0800b268
 80086f0:	0800b18e 	.word	0x0800b18e
 80086f4:	0800b20e 	.word	0x0800b20e

080086f8 <__lshift>:
 80086f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086fc:	460c      	mov	r4, r1
 80086fe:	6849      	ldr	r1, [r1, #4]
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008706:	68a3      	ldr	r3, [r4, #8]
 8008708:	4607      	mov	r7, r0
 800870a:	4691      	mov	r9, r2
 800870c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008710:	f108 0601 	add.w	r6, r8, #1
 8008714:	42b3      	cmp	r3, r6
 8008716:	db0b      	blt.n	8008730 <__lshift+0x38>
 8008718:	4638      	mov	r0, r7
 800871a:	f7ff fd95 	bl	8008248 <_Balloc>
 800871e:	4605      	mov	r5, r0
 8008720:	b948      	cbnz	r0, 8008736 <__lshift+0x3e>
 8008722:	4602      	mov	r2, r0
 8008724:	4b28      	ldr	r3, [pc, #160]	@ (80087c8 <__lshift+0xd0>)
 8008726:	4829      	ldr	r0, [pc, #164]	@ (80087cc <__lshift+0xd4>)
 8008728:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800872c:	f001 fb0c 	bl	8009d48 <__assert_func>
 8008730:	3101      	adds	r1, #1
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	e7ee      	b.n	8008714 <__lshift+0x1c>
 8008736:	2300      	movs	r3, #0
 8008738:	f100 0114 	add.w	r1, r0, #20
 800873c:	f100 0210 	add.w	r2, r0, #16
 8008740:	4618      	mov	r0, r3
 8008742:	4553      	cmp	r3, sl
 8008744:	db33      	blt.n	80087ae <__lshift+0xb6>
 8008746:	6920      	ldr	r0, [r4, #16]
 8008748:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800874c:	f104 0314 	add.w	r3, r4, #20
 8008750:	f019 091f 	ands.w	r9, r9, #31
 8008754:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008758:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800875c:	d02b      	beq.n	80087b6 <__lshift+0xbe>
 800875e:	f1c9 0e20 	rsb	lr, r9, #32
 8008762:	468a      	mov	sl, r1
 8008764:	2200      	movs	r2, #0
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	fa00 f009 	lsl.w	r0, r0, r9
 800876c:	4310      	orrs	r0, r2
 800876e:	f84a 0b04 	str.w	r0, [sl], #4
 8008772:	f853 2b04 	ldr.w	r2, [r3], #4
 8008776:	459c      	cmp	ip, r3
 8008778:	fa22 f20e 	lsr.w	r2, r2, lr
 800877c:	d8f3      	bhi.n	8008766 <__lshift+0x6e>
 800877e:	ebac 0304 	sub.w	r3, ip, r4
 8008782:	3b15      	subs	r3, #21
 8008784:	f023 0303 	bic.w	r3, r3, #3
 8008788:	3304      	adds	r3, #4
 800878a:	f104 0015 	add.w	r0, r4, #21
 800878e:	4584      	cmp	ip, r0
 8008790:	bf38      	it	cc
 8008792:	2304      	movcc	r3, #4
 8008794:	50ca      	str	r2, [r1, r3]
 8008796:	b10a      	cbz	r2, 800879c <__lshift+0xa4>
 8008798:	f108 0602 	add.w	r6, r8, #2
 800879c:	3e01      	subs	r6, #1
 800879e:	4638      	mov	r0, r7
 80087a0:	612e      	str	r6, [r5, #16]
 80087a2:	4621      	mov	r1, r4
 80087a4:	f7ff fd90 	bl	80082c8 <_Bfree>
 80087a8:	4628      	mov	r0, r5
 80087aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80087b2:	3301      	adds	r3, #1
 80087b4:	e7c5      	b.n	8008742 <__lshift+0x4a>
 80087b6:	3904      	subs	r1, #4
 80087b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80087c0:	459c      	cmp	ip, r3
 80087c2:	d8f9      	bhi.n	80087b8 <__lshift+0xc0>
 80087c4:	e7ea      	b.n	800879c <__lshift+0xa4>
 80087c6:	bf00      	nop
 80087c8:	0800b1fd 	.word	0x0800b1fd
 80087cc:	0800b20e 	.word	0x0800b20e

080087d0 <__mcmp>:
 80087d0:	690a      	ldr	r2, [r1, #16]
 80087d2:	4603      	mov	r3, r0
 80087d4:	6900      	ldr	r0, [r0, #16]
 80087d6:	1a80      	subs	r0, r0, r2
 80087d8:	b530      	push	{r4, r5, lr}
 80087da:	d10e      	bne.n	80087fa <__mcmp+0x2a>
 80087dc:	3314      	adds	r3, #20
 80087de:	3114      	adds	r1, #20
 80087e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087f0:	4295      	cmp	r5, r2
 80087f2:	d003      	beq.n	80087fc <__mcmp+0x2c>
 80087f4:	d205      	bcs.n	8008802 <__mcmp+0x32>
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295
 80087fa:	bd30      	pop	{r4, r5, pc}
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	d3f3      	bcc.n	80087e8 <__mcmp+0x18>
 8008800:	e7fb      	b.n	80087fa <__mcmp+0x2a>
 8008802:	2001      	movs	r0, #1
 8008804:	e7f9      	b.n	80087fa <__mcmp+0x2a>
	...

08008808 <__mdiff>:
 8008808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	4689      	mov	r9, r1
 800880e:	4606      	mov	r6, r0
 8008810:	4611      	mov	r1, r2
 8008812:	4648      	mov	r0, r9
 8008814:	4614      	mov	r4, r2
 8008816:	f7ff ffdb 	bl	80087d0 <__mcmp>
 800881a:	1e05      	subs	r5, r0, #0
 800881c:	d112      	bne.n	8008844 <__mdiff+0x3c>
 800881e:	4629      	mov	r1, r5
 8008820:	4630      	mov	r0, r6
 8008822:	f7ff fd11 	bl	8008248 <_Balloc>
 8008826:	4602      	mov	r2, r0
 8008828:	b928      	cbnz	r0, 8008836 <__mdiff+0x2e>
 800882a:	4b3f      	ldr	r3, [pc, #252]	@ (8008928 <__mdiff+0x120>)
 800882c:	f240 2137 	movw	r1, #567	@ 0x237
 8008830:	483e      	ldr	r0, [pc, #248]	@ (800892c <__mdiff+0x124>)
 8008832:	f001 fa89 	bl	8009d48 <__assert_func>
 8008836:	2301      	movs	r3, #1
 8008838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800883c:	4610      	mov	r0, r2
 800883e:	b003      	add	sp, #12
 8008840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	bfbc      	itt	lt
 8008846:	464b      	movlt	r3, r9
 8008848:	46a1      	movlt	r9, r4
 800884a:	4630      	mov	r0, r6
 800884c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008850:	bfba      	itte	lt
 8008852:	461c      	movlt	r4, r3
 8008854:	2501      	movlt	r5, #1
 8008856:	2500      	movge	r5, #0
 8008858:	f7ff fcf6 	bl	8008248 <_Balloc>
 800885c:	4602      	mov	r2, r0
 800885e:	b918      	cbnz	r0, 8008868 <__mdiff+0x60>
 8008860:	4b31      	ldr	r3, [pc, #196]	@ (8008928 <__mdiff+0x120>)
 8008862:	f240 2145 	movw	r1, #581	@ 0x245
 8008866:	e7e3      	b.n	8008830 <__mdiff+0x28>
 8008868:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800886c:	6926      	ldr	r6, [r4, #16]
 800886e:	60c5      	str	r5, [r0, #12]
 8008870:	f109 0310 	add.w	r3, r9, #16
 8008874:	f109 0514 	add.w	r5, r9, #20
 8008878:	f104 0e14 	add.w	lr, r4, #20
 800887c:	f100 0b14 	add.w	fp, r0, #20
 8008880:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008884:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	46d9      	mov	r9, fp
 800888c:	f04f 0c00 	mov.w	ip, #0
 8008890:	9b01      	ldr	r3, [sp, #4]
 8008892:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008896:	f853 af04 	ldr.w	sl, [r3, #4]!
 800889a:	9301      	str	r3, [sp, #4]
 800889c:	fa1f f38a 	uxth.w	r3, sl
 80088a0:	4619      	mov	r1, r3
 80088a2:	b283      	uxth	r3, r0
 80088a4:	1acb      	subs	r3, r1, r3
 80088a6:	0c00      	lsrs	r0, r0, #16
 80088a8:	4463      	add	r3, ip
 80088aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80088ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80088b8:	4576      	cmp	r6, lr
 80088ba:	f849 3b04 	str.w	r3, [r9], #4
 80088be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088c2:	d8e5      	bhi.n	8008890 <__mdiff+0x88>
 80088c4:	1b33      	subs	r3, r6, r4
 80088c6:	3b15      	subs	r3, #21
 80088c8:	f023 0303 	bic.w	r3, r3, #3
 80088cc:	3415      	adds	r4, #21
 80088ce:	3304      	adds	r3, #4
 80088d0:	42a6      	cmp	r6, r4
 80088d2:	bf38      	it	cc
 80088d4:	2304      	movcc	r3, #4
 80088d6:	441d      	add	r5, r3
 80088d8:	445b      	add	r3, fp
 80088da:	461e      	mov	r6, r3
 80088dc:	462c      	mov	r4, r5
 80088de:	4544      	cmp	r4, r8
 80088e0:	d30e      	bcc.n	8008900 <__mdiff+0xf8>
 80088e2:	f108 0103 	add.w	r1, r8, #3
 80088e6:	1b49      	subs	r1, r1, r5
 80088e8:	f021 0103 	bic.w	r1, r1, #3
 80088ec:	3d03      	subs	r5, #3
 80088ee:	45a8      	cmp	r8, r5
 80088f0:	bf38      	it	cc
 80088f2:	2100      	movcc	r1, #0
 80088f4:	440b      	add	r3, r1
 80088f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088fa:	b191      	cbz	r1, 8008922 <__mdiff+0x11a>
 80088fc:	6117      	str	r7, [r2, #16]
 80088fe:	e79d      	b.n	800883c <__mdiff+0x34>
 8008900:	f854 1b04 	ldr.w	r1, [r4], #4
 8008904:	46e6      	mov	lr, ip
 8008906:	0c08      	lsrs	r0, r1, #16
 8008908:	fa1c fc81 	uxtah	ip, ip, r1
 800890c:	4471      	add	r1, lr
 800890e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008912:	b289      	uxth	r1, r1
 8008914:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008918:	f846 1b04 	str.w	r1, [r6], #4
 800891c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008920:	e7dd      	b.n	80088de <__mdiff+0xd6>
 8008922:	3f01      	subs	r7, #1
 8008924:	e7e7      	b.n	80088f6 <__mdiff+0xee>
 8008926:	bf00      	nop
 8008928:	0800b1fd 	.word	0x0800b1fd
 800892c:	0800b20e 	.word	0x0800b20e

08008930 <__ulp>:
 8008930:	b082      	sub	sp, #8
 8008932:	ed8d 0b00 	vstr	d0, [sp]
 8008936:	9a01      	ldr	r2, [sp, #4]
 8008938:	4b0f      	ldr	r3, [pc, #60]	@ (8008978 <__ulp+0x48>)
 800893a:	4013      	ands	r3, r2
 800893c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008940:	2b00      	cmp	r3, #0
 8008942:	dc08      	bgt.n	8008956 <__ulp+0x26>
 8008944:	425b      	negs	r3, r3
 8008946:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800894a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800894e:	da04      	bge.n	800895a <__ulp+0x2a>
 8008950:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008954:	4113      	asrs	r3, r2
 8008956:	2200      	movs	r2, #0
 8008958:	e008      	b.n	800896c <__ulp+0x3c>
 800895a:	f1a2 0314 	sub.w	r3, r2, #20
 800895e:	2b1e      	cmp	r3, #30
 8008960:	bfda      	itte	le
 8008962:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008966:	40da      	lsrle	r2, r3
 8008968:	2201      	movgt	r2, #1
 800896a:	2300      	movs	r3, #0
 800896c:	4619      	mov	r1, r3
 800896e:	4610      	mov	r0, r2
 8008970:	ec41 0b10 	vmov	d0, r0, r1
 8008974:	b002      	add	sp, #8
 8008976:	4770      	bx	lr
 8008978:	7ff00000 	.word	0x7ff00000

0800897c <__b2d>:
 800897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008980:	6906      	ldr	r6, [r0, #16]
 8008982:	f100 0814 	add.w	r8, r0, #20
 8008986:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800898a:	1f37      	subs	r7, r6, #4
 800898c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008990:	4610      	mov	r0, r2
 8008992:	f7ff fd4b 	bl	800842c <__hi0bits>
 8008996:	f1c0 0320 	rsb	r3, r0, #32
 800899a:	280a      	cmp	r0, #10
 800899c:	600b      	str	r3, [r1, #0]
 800899e:	491b      	ldr	r1, [pc, #108]	@ (8008a0c <__b2d+0x90>)
 80089a0:	dc15      	bgt.n	80089ce <__b2d+0x52>
 80089a2:	f1c0 0c0b 	rsb	ip, r0, #11
 80089a6:	fa22 f30c 	lsr.w	r3, r2, ip
 80089aa:	45b8      	cmp	r8, r7
 80089ac:	ea43 0501 	orr.w	r5, r3, r1
 80089b0:	bf34      	ite	cc
 80089b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089b6:	2300      	movcs	r3, #0
 80089b8:	3015      	adds	r0, #21
 80089ba:	fa02 f000 	lsl.w	r0, r2, r0
 80089be:	fa23 f30c 	lsr.w	r3, r3, ip
 80089c2:	4303      	orrs	r3, r0
 80089c4:	461c      	mov	r4, r3
 80089c6:	ec45 4b10 	vmov	d0, r4, r5
 80089ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ce:	45b8      	cmp	r8, r7
 80089d0:	bf3a      	itte	cc
 80089d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089d6:	f1a6 0708 	subcc.w	r7, r6, #8
 80089da:	2300      	movcs	r3, #0
 80089dc:	380b      	subs	r0, #11
 80089de:	d012      	beq.n	8008a06 <__b2d+0x8a>
 80089e0:	f1c0 0120 	rsb	r1, r0, #32
 80089e4:	fa23 f401 	lsr.w	r4, r3, r1
 80089e8:	4082      	lsls	r2, r0
 80089ea:	4322      	orrs	r2, r4
 80089ec:	4547      	cmp	r7, r8
 80089ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80089f2:	bf8c      	ite	hi
 80089f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80089f8:	2200      	movls	r2, #0
 80089fa:	4083      	lsls	r3, r0
 80089fc:	40ca      	lsrs	r2, r1
 80089fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008a02:	4313      	orrs	r3, r2
 8008a04:	e7de      	b.n	80089c4 <__b2d+0x48>
 8008a06:	ea42 0501 	orr.w	r5, r2, r1
 8008a0a:	e7db      	b.n	80089c4 <__b2d+0x48>
 8008a0c:	3ff00000 	.word	0x3ff00000

08008a10 <__d2b>:
 8008a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a14:	460f      	mov	r7, r1
 8008a16:	2101      	movs	r1, #1
 8008a18:	ec59 8b10 	vmov	r8, r9, d0
 8008a1c:	4616      	mov	r6, r2
 8008a1e:	f7ff fc13 	bl	8008248 <_Balloc>
 8008a22:	4604      	mov	r4, r0
 8008a24:	b930      	cbnz	r0, 8008a34 <__d2b+0x24>
 8008a26:	4602      	mov	r2, r0
 8008a28:	4b23      	ldr	r3, [pc, #140]	@ (8008ab8 <__d2b+0xa8>)
 8008a2a:	4824      	ldr	r0, [pc, #144]	@ (8008abc <__d2b+0xac>)
 8008a2c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a30:	f001 f98a 	bl	8009d48 <__assert_func>
 8008a34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a3c:	b10d      	cbz	r5, 8008a42 <__d2b+0x32>
 8008a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	f1b8 0300 	subs.w	r3, r8, #0
 8008a48:	d023      	beq.n	8008a92 <__d2b+0x82>
 8008a4a:	4668      	mov	r0, sp
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	f7ff fd0c 	bl	800846a <__lo0bits>
 8008a52:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a56:	b1d0      	cbz	r0, 8008a8e <__d2b+0x7e>
 8008a58:	f1c0 0320 	rsb	r3, r0, #32
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	430b      	orrs	r3, r1
 8008a62:	40c2      	lsrs	r2, r0
 8008a64:	6163      	str	r3, [r4, #20]
 8008a66:	9201      	str	r2, [sp, #4]
 8008a68:	9b01      	ldr	r3, [sp, #4]
 8008a6a:	61a3      	str	r3, [r4, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bf0c      	ite	eq
 8008a70:	2201      	moveq	r2, #1
 8008a72:	2202      	movne	r2, #2
 8008a74:	6122      	str	r2, [r4, #16]
 8008a76:	b1a5      	cbz	r5, 8008aa2 <__d2b+0x92>
 8008a78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a7c:	4405      	add	r5, r0
 8008a7e:	603d      	str	r5, [r7, #0]
 8008a80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a84:	6030      	str	r0, [r6, #0]
 8008a86:	4620      	mov	r0, r4
 8008a88:	b003      	add	sp, #12
 8008a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	6161      	str	r1, [r4, #20]
 8008a90:	e7ea      	b.n	8008a68 <__d2b+0x58>
 8008a92:	a801      	add	r0, sp, #4
 8008a94:	f7ff fce9 	bl	800846a <__lo0bits>
 8008a98:	9b01      	ldr	r3, [sp, #4]
 8008a9a:	6163      	str	r3, [r4, #20]
 8008a9c:	3020      	adds	r0, #32
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	e7e8      	b.n	8008a74 <__d2b+0x64>
 8008aa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008aa6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008aaa:	6038      	str	r0, [r7, #0]
 8008aac:	6918      	ldr	r0, [r3, #16]
 8008aae:	f7ff fcbd 	bl	800842c <__hi0bits>
 8008ab2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ab6:	e7e5      	b.n	8008a84 <__d2b+0x74>
 8008ab8:	0800b1fd 	.word	0x0800b1fd
 8008abc:	0800b20e 	.word	0x0800b20e

08008ac0 <__ratio>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	e9cd 1000 	strd	r1, r0, [sp]
 8008aca:	a902      	add	r1, sp, #8
 8008acc:	f7ff ff56 	bl	800897c <__b2d>
 8008ad0:	9800      	ldr	r0, [sp, #0]
 8008ad2:	a903      	add	r1, sp, #12
 8008ad4:	ec55 4b10 	vmov	r4, r5, d0
 8008ad8:	f7ff ff50 	bl	800897c <__b2d>
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	6919      	ldr	r1, [r3, #16]
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	1ac9      	subs	r1, r1, r3
 8008ae6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	ec5b ab10 	vmov	sl, fp, d0
 8008af0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bfce      	itee	gt
 8008af8:	462a      	movgt	r2, r5
 8008afa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008afe:	465a      	movle	r2, fp
 8008b00:	462f      	mov	r7, r5
 8008b02:	46d9      	mov	r9, fp
 8008b04:	bfcc      	ite	gt
 8008b06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b0a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008b0e:	464b      	mov	r3, r9
 8008b10:	4652      	mov	r2, sl
 8008b12:	4620      	mov	r0, r4
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7f7 fe99 	bl	800084c <__aeabi_ddiv>
 8008b1a:	ec41 0b10 	vmov	d0, r0, r1
 8008b1e:	b005      	add	sp, #20
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b24 <__copybits>:
 8008b24:	3901      	subs	r1, #1
 8008b26:	b570      	push	{r4, r5, r6, lr}
 8008b28:	1149      	asrs	r1, r1, #5
 8008b2a:	6914      	ldr	r4, [r2, #16]
 8008b2c:	3101      	adds	r1, #1
 8008b2e:	f102 0314 	add.w	r3, r2, #20
 8008b32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b3a:	1f05      	subs	r5, r0, #4
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	d30c      	bcc.n	8008b5a <__copybits+0x36>
 8008b40:	1aa3      	subs	r3, r4, r2
 8008b42:	3b11      	subs	r3, #17
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	3211      	adds	r2, #17
 8008b4a:	42a2      	cmp	r2, r4
 8008b4c:	bf88      	it	hi
 8008b4e:	2300      	movhi	r3, #0
 8008b50:	4418      	add	r0, r3
 8008b52:	2300      	movs	r3, #0
 8008b54:	4288      	cmp	r0, r1
 8008b56:	d305      	bcc.n	8008b64 <__copybits+0x40>
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
 8008b5a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b5e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b62:	e7eb      	b.n	8008b3c <__copybits+0x18>
 8008b64:	f840 3b04 	str.w	r3, [r0], #4
 8008b68:	e7f4      	b.n	8008b54 <__copybits+0x30>

08008b6a <__any_on>:
 8008b6a:	f100 0214 	add.w	r2, r0, #20
 8008b6e:	6900      	ldr	r0, [r0, #16]
 8008b70:	114b      	asrs	r3, r1, #5
 8008b72:	4298      	cmp	r0, r3
 8008b74:	b510      	push	{r4, lr}
 8008b76:	db11      	blt.n	8008b9c <__any_on+0x32>
 8008b78:	dd0a      	ble.n	8008b90 <__any_on+0x26>
 8008b7a:	f011 011f 	ands.w	r1, r1, #31
 8008b7e:	d007      	beq.n	8008b90 <__any_on+0x26>
 8008b80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b84:	fa24 f001 	lsr.w	r0, r4, r1
 8008b88:	fa00 f101 	lsl.w	r1, r0, r1
 8008b8c:	428c      	cmp	r4, r1
 8008b8e:	d10b      	bne.n	8008ba8 <__any_on+0x3e>
 8008b90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d803      	bhi.n	8008ba0 <__any_on+0x36>
 8008b98:	2000      	movs	r0, #0
 8008b9a:	bd10      	pop	{r4, pc}
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	e7f7      	b.n	8008b90 <__any_on+0x26>
 8008ba0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ba4:	2900      	cmp	r1, #0
 8008ba6:	d0f5      	beq.n	8008b94 <__any_on+0x2a>
 8008ba8:	2001      	movs	r0, #1
 8008baa:	e7f6      	b.n	8008b9a <__any_on+0x30>

08008bac <sulp>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4604      	mov	r4, r0
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	ec45 4b10 	vmov	d0, r4, r5
 8008bb6:	4616      	mov	r6, r2
 8008bb8:	f7ff feba 	bl	8008930 <__ulp>
 8008bbc:	ec51 0b10 	vmov	r0, r1, d0
 8008bc0:	b17e      	cbz	r6, 8008be2 <sulp+0x36>
 8008bc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bc6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	dd09      	ble.n	8008be2 <sulp+0x36>
 8008bce:	051b      	lsls	r3, r3, #20
 8008bd0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008bd4:	2400      	movs	r4, #0
 8008bd6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	f7f7 fd0b 	bl	80005f8 <__aeabi_dmul>
 8008be2:	ec41 0b10 	vmov	d0, r0, r1
 8008be6:	bd70      	pop	{r4, r5, r6, pc}

08008be8 <_strtod_l>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	b09f      	sub	sp, #124	@ 0x7c
 8008bee:	460c      	mov	r4, r1
 8008bf0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008bf6:	9005      	str	r0, [sp, #20]
 8008bf8:	f04f 0a00 	mov.w	sl, #0
 8008bfc:	f04f 0b00 	mov.w	fp, #0
 8008c00:	460a      	mov	r2, r1
 8008c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c04:	7811      	ldrb	r1, [r2, #0]
 8008c06:	292b      	cmp	r1, #43	@ 0x2b
 8008c08:	d04a      	beq.n	8008ca0 <_strtod_l+0xb8>
 8008c0a:	d838      	bhi.n	8008c7e <_strtod_l+0x96>
 8008c0c:	290d      	cmp	r1, #13
 8008c0e:	d832      	bhi.n	8008c76 <_strtod_l+0x8e>
 8008c10:	2908      	cmp	r1, #8
 8008c12:	d832      	bhi.n	8008c7a <_strtod_l+0x92>
 8008c14:	2900      	cmp	r1, #0
 8008c16:	d03b      	beq.n	8008c90 <_strtod_l+0xa8>
 8008c18:	2200      	movs	r2, #0
 8008c1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008c1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c1e:	782a      	ldrb	r2, [r5, #0]
 8008c20:	2a30      	cmp	r2, #48	@ 0x30
 8008c22:	f040 80b3 	bne.w	8008d8c <_strtod_l+0x1a4>
 8008c26:	786a      	ldrb	r2, [r5, #1]
 8008c28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c2c:	2a58      	cmp	r2, #88	@ 0x58
 8008c2e:	d16e      	bne.n	8008d0e <_strtod_l+0x126>
 8008c30:	9302      	str	r3, [sp, #8]
 8008c32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	4a8e      	ldr	r2, [pc, #568]	@ (8008e74 <_strtod_l+0x28c>)
 8008c3c:	9805      	ldr	r0, [sp, #20]
 8008c3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c40:	a919      	add	r1, sp, #100	@ 0x64
 8008c42:	f001 f91b 	bl	8009e7c <__gethex>
 8008c46:	f010 060f 	ands.w	r6, r0, #15
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	d005      	beq.n	8008c5a <_strtod_l+0x72>
 8008c4e:	2e06      	cmp	r6, #6
 8008c50:	d128      	bne.n	8008ca4 <_strtod_l+0xbc>
 8008c52:	3501      	adds	r5, #1
 8008c54:	2300      	movs	r3, #0
 8008c56:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 858e 	bne.w	800977e <_strtod_l+0xb96>
 8008c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c64:	b1cb      	cbz	r3, 8008c9a <_strtod_l+0xb2>
 8008c66:	4652      	mov	r2, sl
 8008c68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008c6c:	ec43 2b10 	vmov	d0, r2, r3
 8008c70:	b01f      	add	sp, #124	@ 0x7c
 8008c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	2920      	cmp	r1, #32
 8008c78:	d1ce      	bne.n	8008c18 <_strtod_l+0x30>
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	e7c1      	b.n	8008c02 <_strtod_l+0x1a>
 8008c7e:	292d      	cmp	r1, #45	@ 0x2d
 8008c80:	d1ca      	bne.n	8008c18 <_strtod_l+0x30>
 8008c82:	2101      	movs	r1, #1
 8008c84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c86:	1c51      	adds	r1, r2, #1
 8008c88:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c8a:	7852      	ldrb	r2, [r2, #1]
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	d1c5      	bne.n	8008c1c <_strtod_l+0x34>
 8008c90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c92:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f040 8570 	bne.w	800977a <_strtod_l+0xb92>
 8008c9a:	4652      	mov	r2, sl
 8008c9c:	465b      	mov	r3, fp
 8008c9e:	e7e5      	b.n	8008c6c <_strtod_l+0x84>
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	e7ef      	b.n	8008c84 <_strtod_l+0x9c>
 8008ca4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ca6:	b13a      	cbz	r2, 8008cb8 <_strtod_l+0xd0>
 8008ca8:	2135      	movs	r1, #53	@ 0x35
 8008caa:	a81c      	add	r0, sp, #112	@ 0x70
 8008cac:	f7ff ff3a 	bl	8008b24 <__copybits>
 8008cb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cb2:	9805      	ldr	r0, [sp, #20]
 8008cb4:	f7ff fb08 	bl	80082c8 <_Bfree>
 8008cb8:	3e01      	subs	r6, #1
 8008cba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008cbc:	2e04      	cmp	r6, #4
 8008cbe:	d806      	bhi.n	8008cce <_strtod_l+0xe6>
 8008cc0:	e8df f006 	tbb	[pc, r6]
 8008cc4:	201d0314 	.word	0x201d0314
 8008cc8:	14          	.byte	0x14
 8008cc9:	00          	.byte	0x00
 8008cca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008cce:	05e1      	lsls	r1, r4, #23
 8008cd0:	bf48      	it	mi
 8008cd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008cd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cda:	0d1b      	lsrs	r3, r3, #20
 8008cdc:	051b      	lsls	r3, r3, #20
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1bb      	bne.n	8008c5a <_strtod_l+0x72>
 8008ce2:	f7fe fb21 	bl	8007328 <__errno>
 8008ce6:	2322      	movs	r3, #34	@ 0x22
 8008ce8:	6003      	str	r3, [r0, #0]
 8008cea:	e7b6      	b.n	8008c5a <_strtod_l+0x72>
 8008cec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008cf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008cf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008cf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008cfc:	e7e7      	b.n	8008cce <_strtod_l+0xe6>
 8008cfe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008e7c <_strtod_l+0x294>
 8008d02:	e7e4      	b.n	8008cce <_strtod_l+0xe6>
 8008d04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d08:	f04f 3aff 	mov.w	sl, #4294967295
 8008d0c:	e7df      	b.n	8008cce <_strtod_l+0xe6>
 8008d0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d14:	785b      	ldrb	r3, [r3, #1]
 8008d16:	2b30      	cmp	r3, #48	@ 0x30
 8008d18:	d0f9      	beq.n	8008d0e <_strtod_l+0x126>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d09d      	beq.n	8008c5a <_strtod_l+0x72>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d24:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d26:	2300      	movs	r3, #0
 8008d28:	9308      	str	r3, [sp, #32]
 8008d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d2c:	461f      	mov	r7, r3
 8008d2e:	220a      	movs	r2, #10
 8008d30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d32:	7805      	ldrb	r5, [r0, #0]
 8008d34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d38:	b2d9      	uxtb	r1, r3
 8008d3a:	2909      	cmp	r1, #9
 8008d3c:	d928      	bls.n	8008d90 <_strtod_l+0x1a8>
 8008d3e:	494e      	ldr	r1, [pc, #312]	@ (8008e78 <_strtod_l+0x290>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	f000 ffd5 	bl	8009cf0 <strncmp>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d032      	beq.n	8008db0 <_strtod_l+0x1c8>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	4681      	mov	r9, r0
 8008d50:	463d      	mov	r5, r7
 8008d52:	4603      	mov	r3, r0
 8008d54:	2a65      	cmp	r2, #101	@ 0x65
 8008d56:	d001      	beq.n	8008d5c <_strtod_l+0x174>
 8008d58:	2a45      	cmp	r2, #69	@ 0x45
 8008d5a:	d114      	bne.n	8008d86 <_strtod_l+0x19e>
 8008d5c:	b91d      	cbnz	r5, 8008d66 <_strtod_l+0x17e>
 8008d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d60:	4302      	orrs	r2, r0
 8008d62:	d095      	beq.n	8008c90 <_strtod_l+0xa8>
 8008d64:	2500      	movs	r5, #0
 8008d66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d68:	1c62      	adds	r2, r4, #1
 8008d6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d6c:	7862      	ldrb	r2, [r4, #1]
 8008d6e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d70:	d077      	beq.n	8008e62 <_strtod_l+0x27a>
 8008d72:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d74:	d07b      	beq.n	8008e6e <_strtod_l+0x286>
 8008d76:	f04f 0c00 	mov.w	ip, #0
 8008d7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d7e:	2909      	cmp	r1, #9
 8008d80:	f240 8082 	bls.w	8008e88 <_strtod_l+0x2a0>
 8008d84:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d86:	f04f 0800 	mov.w	r8, #0
 8008d8a:	e0a2      	b.n	8008ed2 <_strtod_l+0x2ea>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e7c7      	b.n	8008d20 <_strtod_l+0x138>
 8008d90:	2f08      	cmp	r7, #8
 8008d92:	bfd5      	itete	le
 8008d94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008d96:	9908      	ldrgt	r1, [sp, #32]
 8008d98:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008da0:	f100 0001 	add.w	r0, r0, #1
 8008da4:	bfd4      	ite	le
 8008da6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008da8:	9308      	strgt	r3, [sp, #32]
 8008daa:	3701      	adds	r7, #1
 8008dac:	9019      	str	r0, [sp, #100]	@ 0x64
 8008dae:	e7bf      	b.n	8008d30 <_strtod_l+0x148>
 8008db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008db6:	785a      	ldrb	r2, [r3, #1]
 8008db8:	b37f      	cbz	r7, 8008e1a <_strtod_l+0x232>
 8008dba:	4681      	mov	r9, r0
 8008dbc:	463d      	mov	r5, r7
 8008dbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008dc2:	2b09      	cmp	r3, #9
 8008dc4:	d912      	bls.n	8008dec <_strtod_l+0x204>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e7c4      	b.n	8008d54 <_strtod_l+0x16c>
 8008dca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dd0:	785a      	ldrb	r2, [r3, #1]
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	2a30      	cmp	r2, #48	@ 0x30
 8008dd6:	d0f8      	beq.n	8008dca <_strtod_l+0x1e2>
 8008dd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	f200 84d3 	bhi.w	8009788 <_strtod_l+0xba0>
 8008de2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008de4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008de6:	4681      	mov	r9, r0
 8008de8:	2000      	movs	r0, #0
 8008dea:	4605      	mov	r5, r0
 8008dec:	3a30      	subs	r2, #48	@ 0x30
 8008dee:	f100 0301 	add.w	r3, r0, #1
 8008df2:	d02a      	beq.n	8008e4a <_strtod_l+0x262>
 8008df4:	4499      	add	r9, r3
 8008df6:	eb00 0c05 	add.w	ip, r0, r5
 8008dfa:	462b      	mov	r3, r5
 8008dfc:	210a      	movs	r1, #10
 8008dfe:	4563      	cmp	r3, ip
 8008e00:	d10d      	bne.n	8008e1e <_strtod_l+0x236>
 8008e02:	1c69      	adds	r1, r5, #1
 8008e04:	4401      	add	r1, r0
 8008e06:	4428      	add	r0, r5
 8008e08:	2808      	cmp	r0, #8
 8008e0a:	dc16      	bgt.n	8008e3a <_strtod_l+0x252>
 8008e0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e0e:	230a      	movs	r3, #10
 8008e10:	fb03 2300 	mla	r3, r3, r0, r2
 8008e14:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e16:	2300      	movs	r3, #0
 8008e18:	e018      	b.n	8008e4c <_strtod_l+0x264>
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	e7da      	b.n	8008dd4 <_strtod_l+0x1ec>
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	f103 0301 	add.w	r3, r3, #1
 8008e24:	dc03      	bgt.n	8008e2e <_strtod_l+0x246>
 8008e26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008e28:	434e      	muls	r6, r1
 8008e2a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008e2c:	e7e7      	b.n	8008dfe <_strtod_l+0x216>
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	bfde      	ittt	le
 8008e32:	9e08      	ldrle	r6, [sp, #32]
 8008e34:	434e      	mulle	r6, r1
 8008e36:	9608      	strle	r6, [sp, #32]
 8008e38:	e7e1      	b.n	8008dfe <_strtod_l+0x216>
 8008e3a:	280f      	cmp	r0, #15
 8008e3c:	dceb      	bgt.n	8008e16 <_strtod_l+0x22e>
 8008e3e:	9808      	ldr	r0, [sp, #32]
 8008e40:	230a      	movs	r3, #10
 8008e42:	fb03 2300 	mla	r3, r3, r0, r2
 8008e46:	9308      	str	r3, [sp, #32]
 8008e48:	e7e5      	b.n	8008e16 <_strtod_l+0x22e>
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e4e:	1c50      	adds	r0, r2, #1
 8008e50:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e52:	7852      	ldrb	r2, [r2, #1]
 8008e54:	4618      	mov	r0, r3
 8008e56:	460d      	mov	r5, r1
 8008e58:	e7b1      	b.n	8008dbe <_strtod_l+0x1d6>
 8008e5a:	f04f 0900 	mov.w	r9, #0
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e77d      	b.n	8008d5e <_strtod_l+0x176>
 8008e62:	f04f 0c00 	mov.w	ip, #0
 8008e66:	1ca2      	adds	r2, r4, #2
 8008e68:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e6a:	78a2      	ldrb	r2, [r4, #2]
 8008e6c:	e785      	b.n	8008d7a <_strtod_l+0x192>
 8008e6e:	f04f 0c01 	mov.w	ip, #1
 8008e72:	e7f8      	b.n	8008e66 <_strtod_l+0x27e>
 8008e74:	0800b380 	.word	0x0800b380
 8008e78:	0800b368 	.word	0x0800b368
 8008e7c:	7ff00000 	.word	0x7ff00000
 8008e80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e82:	1c51      	adds	r1, r2, #1
 8008e84:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e86:	7852      	ldrb	r2, [r2, #1]
 8008e88:	2a30      	cmp	r2, #48	@ 0x30
 8008e8a:	d0f9      	beq.n	8008e80 <_strtod_l+0x298>
 8008e8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008e90:	2908      	cmp	r1, #8
 8008e92:	f63f af78 	bhi.w	8008d86 <_strtod_l+0x19e>
 8008e96:	3a30      	subs	r2, #48	@ 0x30
 8008e98:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008e9e:	f04f 080a 	mov.w	r8, #10
 8008ea2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ea4:	1c56      	adds	r6, r2, #1
 8008ea6:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ea8:	7852      	ldrb	r2, [r2, #1]
 8008eaa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008eae:	f1be 0f09 	cmp.w	lr, #9
 8008eb2:	d939      	bls.n	8008f28 <_strtod_l+0x340>
 8008eb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008eb6:	1a76      	subs	r6, r6, r1
 8008eb8:	2e08      	cmp	r6, #8
 8008eba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008ebe:	dc03      	bgt.n	8008ec8 <_strtod_l+0x2e0>
 8008ec0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008ec2:	4588      	cmp	r8, r1
 8008ec4:	bfa8      	it	ge
 8008ec6:	4688      	movge	r8, r1
 8008ec8:	f1bc 0f00 	cmp.w	ip, #0
 8008ecc:	d001      	beq.n	8008ed2 <_strtod_l+0x2ea>
 8008ece:	f1c8 0800 	rsb	r8, r8, #0
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	d14e      	bne.n	8008f74 <_strtod_l+0x38c>
 8008ed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ed8:	4308      	orrs	r0, r1
 8008eda:	f47f aebe 	bne.w	8008c5a <_strtod_l+0x72>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f47f aed6 	bne.w	8008c90 <_strtod_l+0xa8>
 8008ee4:	2a69      	cmp	r2, #105	@ 0x69
 8008ee6:	d028      	beq.n	8008f3a <_strtod_l+0x352>
 8008ee8:	dc25      	bgt.n	8008f36 <_strtod_l+0x34e>
 8008eea:	2a49      	cmp	r2, #73	@ 0x49
 8008eec:	d025      	beq.n	8008f3a <_strtod_l+0x352>
 8008eee:	2a4e      	cmp	r2, #78	@ 0x4e
 8008ef0:	f47f aece 	bne.w	8008c90 <_strtod_l+0xa8>
 8008ef4:	499b      	ldr	r1, [pc, #620]	@ (8009164 <_strtod_l+0x57c>)
 8008ef6:	a819      	add	r0, sp, #100	@ 0x64
 8008ef8:	f001 f9e2 	bl	800a2c0 <__match>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f43f aec7 	beq.w	8008c90 <_strtod_l+0xa8>
 8008f02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b28      	cmp	r3, #40	@ 0x28
 8008f08:	d12e      	bne.n	8008f68 <_strtod_l+0x380>
 8008f0a:	4997      	ldr	r1, [pc, #604]	@ (8009168 <_strtod_l+0x580>)
 8008f0c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f0e:	a819      	add	r0, sp, #100	@ 0x64
 8008f10:	f001 f9ea 	bl	800a2e8 <__hexnan>
 8008f14:	2805      	cmp	r0, #5
 8008f16:	d127      	bne.n	8008f68 <_strtod_l+0x380>
 8008f18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f26:	e698      	b.n	8008c5a <_strtod_l+0x72>
 8008f28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f2a:	fb08 2101 	mla	r1, r8, r1, r2
 8008f2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f32:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f34:	e7b5      	b.n	8008ea2 <_strtod_l+0x2ba>
 8008f36:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f38:	e7da      	b.n	8008ef0 <_strtod_l+0x308>
 8008f3a:	498c      	ldr	r1, [pc, #560]	@ (800916c <_strtod_l+0x584>)
 8008f3c:	a819      	add	r0, sp, #100	@ 0x64
 8008f3e:	f001 f9bf 	bl	800a2c0 <__match>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f43f aea4 	beq.w	8008c90 <_strtod_l+0xa8>
 8008f48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f4a:	4989      	ldr	r1, [pc, #548]	@ (8009170 <_strtod_l+0x588>)
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	a819      	add	r0, sp, #100	@ 0x64
 8008f50:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f52:	f001 f9b5 	bl	800a2c0 <__match>
 8008f56:	b910      	cbnz	r0, 8008f5e <_strtod_l+0x376>
 8008f58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009180 <_strtod_l+0x598>
 8008f62:	f04f 0a00 	mov.w	sl, #0
 8008f66:	e678      	b.n	8008c5a <_strtod_l+0x72>
 8008f68:	4882      	ldr	r0, [pc, #520]	@ (8009174 <_strtod_l+0x58c>)
 8008f6a:	f000 fee5 	bl	8009d38 <nan>
 8008f6e:	ec5b ab10 	vmov	sl, fp, d0
 8008f72:	e672      	b.n	8008c5a <_strtod_l+0x72>
 8008f74:	eba8 0309 	sub.w	r3, r8, r9
 8008f78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f7c:	2f00      	cmp	r7, #0
 8008f7e:	bf08      	it	eq
 8008f80:	462f      	moveq	r7, r5
 8008f82:	2d10      	cmp	r5, #16
 8008f84:	462c      	mov	r4, r5
 8008f86:	bfa8      	it	ge
 8008f88:	2410      	movge	r4, #16
 8008f8a:	f7f7 fabb 	bl	8000504 <__aeabi_ui2d>
 8008f8e:	2d09      	cmp	r5, #9
 8008f90:	4682      	mov	sl, r0
 8008f92:	468b      	mov	fp, r1
 8008f94:	dc13      	bgt.n	8008fbe <_strtod_l+0x3d6>
 8008f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f43f ae5e 	beq.w	8008c5a <_strtod_l+0x72>
 8008f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa0:	dd78      	ble.n	8009094 <_strtod_l+0x4ac>
 8008fa2:	2b16      	cmp	r3, #22
 8008fa4:	dc5f      	bgt.n	8009066 <_strtod_l+0x47e>
 8008fa6:	4974      	ldr	r1, [pc, #464]	@ (8009178 <_strtod_l+0x590>)
 8008fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb0:	4652      	mov	r2, sl
 8008fb2:	465b      	mov	r3, fp
 8008fb4:	f7f7 fb20 	bl	80005f8 <__aeabi_dmul>
 8008fb8:	4682      	mov	sl, r0
 8008fba:	468b      	mov	fp, r1
 8008fbc:	e64d      	b.n	8008c5a <_strtod_l+0x72>
 8008fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8009178 <_strtod_l+0x590>)
 8008fc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008fc8:	f7f7 fb16 	bl	80005f8 <__aeabi_dmul>
 8008fcc:	4682      	mov	sl, r0
 8008fce:	9808      	ldr	r0, [sp, #32]
 8008fd0:	468b      	mov	fp, r1
 8008fd2:	f7f7 fa97 	bl	8000504 <__aeabi_ui2d>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4650      	mov	r0, sl
 8008fdc:	4659      	mov	r1, fp
 8008fde:	f7f7 f955 	bl	800028c <__adddf3>
 8008fe2:	2d0f      	cmp	r5, #15
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	468b      	mov	fp, r1
 8008fe8:	ddd5      	ble.n	8008f96 <_strtod_l+0x3ae>
 8008fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fec:	1b2c      	subs	r4, r5, r4
 8008fee:	441c      	add	r4, r3
 8008ff0:	2c00      	cmp	r4, #0
 8008ff2:	f340 8096 	ble.w	8009122 <_strtod_l+0x53a>
 8008ff6:	f014 030f 	ands.w	r3, r4, #15
 8008ffa:	d00a      	beq.n	8009012 <_strtod_l+0x42a>
 8008ffc:	495e      	ldr	r1, [pc, #376]	@ (8009178 <_strtod_l+0x590>)
 8008ffe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009002:	4652      	mov	r2, sl
 8009004:	465b      	mov	r3, fp
 8009006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800900a:	f7f7 faf5 	bl	80005f8 <__aeabi_dmul>
 800900e:	4682      	mov	sl, r0
 8009010:	468b      	mov	fp, r1
 8009012:	f034 040f 	bics.w	r4, r4, #15
 8009016:	d073      	beq.n	8009100 <_strtod_l+0x518>
 8009018:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800901c:	dd48      	ble.n	80090b0 <_strtod_l+0x4c8>
 800901e:	2400      	movs	r4, #0
 8009020:	46a0      	mov	r8, r4
 8009022:	940a      	str	r4, [sp, #40]	@ 0x28
 8009024:	46a1      	mov	r9, r4
 8009026:	9a05      	ldr	r2, [sp, #20]
 8009028:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009180 <_strtod_l+0x598>
 800902c:	2322      	movs	r3, #34	@ 0x22
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009036:	2b00      	cmp	r3, #0
 8009038:	f43f ae0f 	beq.w	8008c5a <_strtod_l+0x72>
 800903c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800903e:	9805      	ldr	r0, [sp, #20]
 8009040:	f7ff f942 	bl	80082c8 <_Bfree>
 8009044:	9805      	ldr	r0, [sp, #20]
 8009046:	4649      	mov	r1, r9
 8009048:	f7ff f93e 	bl	80082c8 <_Bfree>
 800904c:	9805      	ldr	r0, [sp, #20]
 800904e:	4641      	mov	r1, r8
 8009050:	f7ff f93a 	bl	80082c8 <_Bfree>
 8009054:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009056:	9805      	ldr	r0, [sp, #20]
 8009058:	f7ff f936 	bl	80082c8 <_Bfree>
 800905c:	9805      	ldr	r0, [sp, #20]
 800905e:	4621      	mov	r1, r4
 8009060:	f7ff f932 	bl	80082c8 <_Bfree>
 8009064:	e5f9      	b.n	8008c5a <_strtod_l+0x72>
 8009066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009068:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800906c:	4293      	cmp	r3, r2
 800906e:	dbbc      	blt.n	8008fea <_strtod_l+0x402>
 8009070:	4c41      	ldr	r4, [pc, #260]	@ (8009178 <_strtod_l+0x590>)
 8009072:	f1c5 050f 	rsb	r5, r5, #15
 8009076:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800907a:	4652      	mov	r2, sl
 800907c:	465b      	mov	r3, fp
 800907e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009082:	f7f7 fab9 	bl	80005f8 <__aeabi_dmul>
 8009086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009088:	1b5d      	subs	r5, r3, r5
 800908a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800908e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009092:	e78f      	b.n	8008fb4 <_strtod_l+0x3cc>
 8009094:	3316      	adds	r3, #22
 8009096:	dba8      	blt.n	8008fea <_strtod_l+0x402>
 8009098:	4b37      	ldr	r3, [pc, #220]	@ (8009178 <_strtod_l+0x590>)
 800909a:	eba9 0808 	sub.w	r8, r9, r8
 800909e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80090a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80090a6:	4650      	mov	r0, sl
 80090a8:	4659      	mov	r1, fp
 80090aa:	f7f7 fbcf 	bl	800084c <__aeabi_ddiv>
 80090ae:	e783      	b.n	8008fb8 <_strtod_l+0x3d0>
 80090b0:	4b32      	ldr	r3, [pc, #200]	@ (800917c <_strtod_l+0x594>)
 80090b2:	9308      	str	r3, [sp, #32]
 80090b4:	2300      	movs	r3, #0
 80090b6:	1124      	asrs	r4, r4, #4
 80090b8:	4650      	mov	r0, sl
 80090ba:	4659      	mov	r1, fp
 80090bc:	461e      	mov	r6, r3
 80090be:	2c01      	cmp	r4, #1
 80090c0:	dc21      	bgt.n	8009106 <_strtod_l+0x51e>
 80090c2:	b10b      	cbz	r3, 80090c8 <_strtod_l+0x4e0>
 80090c4:	4682      	mov	sl, r0
 80090c6:	468b      	mov	fp, r1
 80090c8:	492c      	ldr	r1, [pc, #176]	@ (800917c <_strtod_l+0x594>)
 80090ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80090d2:	4652      	mov	r2, sl
 80090d4:	465b      	mov	r3, fp
 80090d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090da:	f7f7 fa8d 	bl	80005f8 <__aeabi_dmul>
 80090de:	4b28      	ldr	r3, [pc, #160]	@ (8009180 <_strtod_l+0x598>)
 80090e0:	460a      	mov	r2, r1
 80090e2:	400b      	ands	r3, r1
 80090e4:	4927      	ldr	r1, [pc, #156]	@ (8009184 <_strtod_l+0x59c>)
 80090e6:	428b      	cmp	r3, r1
 80090e8:	4682      	mov	sl, r0
 80090ea:	d898      	bhi.n	800901e <_strtod_l+0x436>
 80090ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80090f0:	428b      	cmp	r3, r1
 80090f2:	bf86      	itte	hi
 80090f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009188 <_strtod_l+0x5a0>
 80090f8:	f04f 3aff 	movhi.w	sl, #4294967295
 80090fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009100:	2300      	movs	r3, #0
 8009102:	9308      	str	r3, [sp, #32]
 8009104:	e07a      	b.n	80091fc <_strtod_l+0x614>
 8009106:	07e2      	lsls	r2, r4, #31
 8009108:	d505      	bpl.n	8009116 <_strtod_l+0x52e>
 800910a:	9b08      	ldr	r3, [sp, #32]
 800910c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009110:	f7f7 fa72 	bl	80005f8 <__aeabi_dmul>
 8009114:	2301      	movs	r3, #1
 8009116:	9a08      	ldr	r2, [sp, #32]
 8009118:	3208      	adds	r2, #8
 800911a:	3601      	adds	r6, #1
 800911c:	1064      	asrs	r4, r4, #1
 800911e:	9208      	str	r2, [sp, #32]
 8009120:	e7cd      	b.n	80090be <_strtod_l+0x4d6>
 8009122:	d0ed      	beq.n	8009100 <_strtod_l+0x518>
 8009124:	4264      	negs	r4, r4
 8009126:	f014 020f 	ands.w	r2, r4, #15
 800912a:	d00a      	beq.n	8009142 <_strtod_l+0x55a>
 800912c:	4b12      	ldr	r3, [pc, #72]	@ (8009178 <_strtod_l+0x590>)
 800912e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f7f7 fb87 	bl	800084c <__aeabi_ddiv>
 800913e:	4682      	mov	sl, r0
 8009140:	468b      	mov	fp, r1
 8009142:	1124      	asrs	r4, r4, #4
 8009144:	d0dc      	beq.n	8009100 <_strtod_l+0x518>
 8009146:	2c1f      	cmp	r4, #31
 8009148:	dd20      	ble.n	800918c <_strtod_l+0x5a4>
 800914a:	2400      	movs	r4, #0
 800914c:	46a0      	mov	r8, r4
 800914e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009150:	46a1      	mov	r9, r4
 8009152:	9a05      	ldr	r2, [sp, #20]
 8009154:	2322      	movs	r3, #34	@ 0x22
 8009156:	f04f 0a00 	mov.w	sl, #0
 800915a:	f04f 0b00 	mov.w	fp, #0
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	e768      	b.n	8009034 <_strtod_l+0x44c>
 8009162:	bf00      	nop
 8009164:	0800b155 	.word	0x0800b155
 8009168:	0800b36c 	.word	0x0800b36c
 800916c:	0800b14d 	.word	0x0800b14d
 8009170:	0800b184 	.word	0x0800b184
 8009174:	0800b515 	.word	0x0800b515
 8009178:	0800b2a0 	.word	0x0800b2a0
 800917c:	0800b278 	.word	0x0800b278
 8009180:	7ff00000 	.word	0x7ff00000
 8009184:	7ca00000 	.word	0x7ca00000
 8009188:	7fefffff 	.word	0x7fefffff
 800918c:	f014 0310 	ands.w	r3, r4, #16
 8009190:	bf18      	it	ne
 8009192:	236a      	movne	r3, #106	@ 0x6a
 8009194:	4ea9      	ldr	r6, [pc, #676]	@ (800943c <_strtod_l+0x854>)
 8009196:	9308      	str	r3, [sp, #32]
 8009198:	4650      	mov	r0, sl
 800919a:	4659      	mov	r1, fp
 800919c:	2300      	movs	r3, #0
 800919e:	07e2      	lsls	r2, r4, #31
 80091a0:	d504      	bpl.n	80091ac <_strtod_l+0x5c4>
 80091a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091a6:	f7f7 fa27 	bl	80005f8 <__aeabi_dmul>
 80091aa:	2301      	movs	r3, #1
 80091ac:	1064      	asrs	r4, r4, #1
 80091ae:	f106 0608 	add.w	r6, r6, #8
 80091b2:	d1f4      	bne.n	800919e <_strtod_l+0x5b6>
 80091b4:	b10b      	cbz	r3, 80091ba <_strtod_l+0x5d2>
 80091b6:	4682      	mov	sl, r0
 80091b8:	468b      	mov	fp, r1
 80091ba:	9b08      	ldr	r3, [sp, #32]
 80091bc:	b1b3      	cbz	r3, 80091ec <_strtod_l+0x604>
 80091be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	4659      	mov	r1, fp
 80091ca:	dd0f      	ble.n	80091ec <_strtod_l+0x604>
 80091cc:	2b1f      	cmp	r3, #31
 80091ce:	dd55      	ble.n	800927c <_strtod_l+0x694>
 80091d0:	2b34      	cmp	r3, #52	@ 0x34
 80091d2:	bfde      	ittt	le
 80091d4:	f04f 33ff 	movle.w	r3, #4294967295
 80091d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80091dc:	4093      	lslle	r3, r2
 80091de:	f04f 0a00 	mov.w	sl, #0
 80091e2:	bfcc      	ite	gt
 80091e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80091e8:	ea03 0b01 	andle.w	fp, r3, r1
 80091ec:	2200      	movs	r2, #0
 80091ee:	2300      	movs	r3, #0
 80091f0:	4650      	mov	r0, sl
 80091f2:	4659      	mov	r1, fp
 80091f4:	f7f7 fc68 	bl	8000ac8 <__aeabi_dcmpeq>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d1a6      	bne.n	800914a <_strtod_l+0x562>
 80091fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009202:	9805      	ldr	r0, [sp, #20]
 8009204:	462b      	mov	r3, r5
 8009206:	463a      	mov	r2, r7
 8009208:	f7ff f8c6 	bl	8008398 <__s2b>
 800920c:	900a      	str	r0, [sp, #40]	@ 0x28
 800920e:	2800      	cmp	r0, #0
 8009210:	f43f af05 	beq.w	800901e <_strtod_l+0x436>
 8009214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009216:	2a00      	cmp	r2, #0
 8009218:	eba9 0308 	sub.w	r3, r9, r8
 800921c:	bfa8      	it	ge
 800921e:	2300      	movge	r3, #0
 8009220:	9312      	str	r3, [sp, #72]	@ 0x48
 8009222:	2400      	movs	r4, #0
 8009224:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009228:	9316      	str	r3, [sp, #88]	@ 0x58
 800922a:	46a0      	mov	r8, r4
 800922c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922e:	9805      	ldr	r0, [sp, #20]
 8009230:	6859      	ldr	r1, [r3, #4]
 8009232:	f7ff f809 	bl	8008248 <_Balloc>
 8009236:	4681      	mov	r9, r0
 8009238:	2800      	cmp	r0, #0
 800923a:	f43f aef4 	beq.w	8009026 <_strtod_l+0x43e>
 800923e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009240:	691a      	ldr	r2, [r3, #16]
 8009242:	3202      	adds	r2, #2
 8009244:	f103 010c 	add.w	r1, r3, #12
 8009248:	0092      	lsls	r2, r2, #2
 800924a:	300c      	adds	r0, #12
 800924c:	f7fe f899 	bl	8007382 <memcpy>
 8009250:	ec4b ab10 	vmov	d0, sl, fp
 8009254:	9805      	ldr	r0, [sp, #20]
 8009256:	aa1c      	add	r2, sp, #112	@ 0x70
 8009258:	a91b      	add	r1, sp, #108	@ 0x6c
 800925a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800925e:	f7ff fbd7 	bl	8008a10 <__d2b>
 8009262:	901a      	str	r0, [sp, #104]	@ 0x68
 8009264:	2800      	cmp	r0, #0
 8009266:	f43f aede 	beq.w	8009026 <_strtod_l+0x43e>
 800926a:	9805      	ldr	r0, [sp, #20]
 800926c:	2101      	movs	r1, #1
 800926e:	f7ff f929 	bl	80084c4 <__i2b>
 8009272:	4680      	mov	r8, r0
 8009274:	b948      	cbnz	r0, 800928a <_strtod_l+0x6a2>
 8009276:	f04f 0800 	mov.w	r8, #0
 800927a:	e6d4      	b.n	8009026 <_strtod_l+0x43e>
 800927c:	f04f 32ff 	mov.w	r2, #4294967295
 8009280:	fa02 f303 	lsl.w	r3, r2, r3
 8009284:	ea03 0a0a 	and.w	sl, r3, sl
 8009288:	e7b0      	b.n	80091ec <_strtod_l+0x604>
 800928a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800928c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800928e:	2d00      	cmp	r5, #0
 8009290:	bfab      	itete	ge
 8009292:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009294:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009296:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009298:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800929a:	bfac      	ite	ge
 800929c:	18ef      	addge	r7, r5, r3
 800929e:	1b5e      	sublt	r6, r3, r5
 80092a0:	9b08      	ldr	r3, [sp, #32]
 80092a2:	1aed      	subs	r5, r5, r3
 80092a4:	4415      	add	r5, r2
 80092a6:	4b66      	ldr	r3, [pc, #408]	@ (8009440 <_strtod_l+0x858>)
 80092a8:	3d01      	subs	r5, #1
 80092aa:	429d      	cmp	r5, r3
 80092ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80092b0:	da50      	bge.n	8009354 <_strtod_l+0x76c>
 80092b2:	1b5b      	subs	r3, r3, r5
 80092b4:	2b1f      	cmp	r3, #31
 80092b6:	eba2 0203 	sub.w	r2, r2, r3
 80092ba:	f04f 0101 	mov.w	r1, #1
 80092be:	dc3d      	bgt.n	800933c <_strtod_l+0x754>
 80092c0:	fa01 f303 	lsl.w	r3, r1, r3
 80092c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092c6:	2300      	movs	r3, #0
 80092c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80092ca:	18bd      	adds	r5, r7, r2
 80092cc:	9b08      	ldr	r3, [sp, #32]
 80092ce:	42af      	cmp	r7, r5
 80092d0:	4416      	add	r6, r2
 80092d2:	441e      	add	r6, r3
 80092d4:	463b      	mov	r3, r7
 80092d6:	bfa8      	it	ge
 80092d8:	462b      	movge	r3, r5
 80092da:	42b3      	cmp	r3, r6
 80092dc:	bfa8      	it	ge
 80092de:	4633      	movge	r3, r6
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bfc2      	ittt	gt
 80092e4:	1aed      	subgt	r5, r5, r3
 80092e6:	1af6      	subgt	r6, r6, r3
 80092e8:	1aff      	subgt	r7, r7, r3
 80092ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dd16      	ble.n	800931e <_strtod_l+0x736>
 80092f0:	4641      	mov	r1, r8
 80092f2:	9805      	ldr	r0, [sp, #20]
 80092f4:	461a      	mov	r2, r3
 80092f6:	f7ff f9a5 	bl	8008644 <__pow5mult>
 80092fa:	4680      	mov	r8, r0
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d0ba      	beq.n	8009276 <_strtod_l+0x68e>
 8009300:	4601      	mov	r1, r0
 8009302:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009304:	9805      	ldr	r0, [sp, #20]
 8009306:	f7ff f8f3 	bl	80084f0 <__multiply>
 800930a:	900e      	str	r0, [sp, #56]	@ 0x38
 800930c:	2800      	cmp	r0, #0
 800930e:	f43f ae8a 	beq.w	8009026 <_strtod_l+0x43e>
 8009312:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009314:	9805      	ldr	r0, [sp, #20]
 8009316:	f7fe ffd7 	bl	80082c8 <_Bfree>
 800931a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800931c:	931a      	str	r3, [sp, #104]	@ 0x68
 800931e:	2d00      	cmp	r5, #0
 8009320:	dc1d      	bgt.n	800935e <_strtod_l+0x776>
 8009322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	dd23      	ble.n	8009370 <_strtod_l+0x788>
 8009328:	4649      	mov	r1, r9
 800932a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800932c:	9805      	ldr	r0, [sp, #20]
 800932e:	f7ff f989 	bl	8008644 <__pow5mult>
 8009332:	4681      	mov	r9, r0
 8009334:	b9e0      	cbnz	r0, 8009370 <_strtod_l+0x788>
 8009336:	f04f 0900 	mov.w	r9, #0
 800933a:	e674      	b.n	8009026 <_strtod_l+0x43e>
 800933c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009340:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009344:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009348:	35e2      	adds	r5, #226	@ 0xe2
 800934a:	fa01 f305 	lsl.w	r3, r1, r5
 800934e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009350:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009352:	e7ba      	b.n	80092ca <_strtod_l+0x6e2>
 8009354:	2300      	movs	r3, #0
 8009356:	9310      	str	r3, [sp, #64]	@ 0x40
 8009358:	2301      	movs	r3, #1
 800935a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800935c:	e7b5      	b.n	80092ca <_strtod_l+0x6e2>
 800935e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	462a      	mov	r2, r5
 8009364:	f7ff f9c8 	bl	80086f8 <__lshift>
 8009368:	901a      	str	r0, [sp, #104]	@ 0x68
 800936a:	2800      	cmp	r0, #0
 800936c:	d1d9      	bne.n	8009322 <_strtod_l+0x73a>
 800936e:	e65a      	b.n	8009026 <_strtod_l+0x43e>
 8009370:	2e00      	cmp	r6, #0
 8009372:	dd07      	ble.n	8009384 <_strtod_l+0x79c>
 8009374:	4649      	mov	r1, r9
 8009376:	9805      	ldr	r0, [sp, #20]
 8009378:	4632      	mov	r2, r6
 800937a:	f7ff f9bd 	bl	80086f8 <__lshift>
 800937e:	4681      	mov	r9, r0
 8009380:	2800      	cmp	r0, #0
 8009382:	d0d8      	beq.n	8009336 <_strtod_l+0x74e>
 8009384:	2f00      	cmp	r7, #0
 8009386:	dd08      	ble.n	800939a <_strtod_l+0x7b2>
 8009388:	4641      	mov	r1, r8
 800938a:	9805      	ldr	r0, [sp, #20]
 800938c:	463a      	mov	r2, r7
 800938e:	f7ff f9b3 	bl	80086f8 <__lshift>
 8009392:	4680      	mov	r8, r0
 8009394:	2800      	cmp	r0, #0
 8009396:	f43f ae46 	beq.w	8009026 <_strtod_l+0x43e>
 800939a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800939c:	9805      	ldr	r0, [sp, #20]
 800939e:	464a      	mov	r2, r9
 80093a0:	f7ff fa32 	bl	8008808 <__mdiff>
 80093a4:	4604      	mov	r4, r0
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f43f ae3d 	beq.w	8009026 <_strtod_l+0x43e>
 80093ac:	68c3      	ldr	r3, [r0, #12]
 80093ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093b0:	2300      	movs	r3, #0
 80093b2:	60c3      	str	r3, [r0, #12]
 80093b4:	4641      	mov	r1, r8
 80093b6:	f7ff fa0b 	bl	80087d0 <__mcmp>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	da46      	bge.n	800944c <_strtod_l+0x864>
 80093be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093c0:	ea53 030a 	orrs.w	r3, r3, sl
 80093c4:	d16c      	bne.n	80094a0 <_strtod_l+0x8b8>
 80093c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d168      	bne.n	80094a0 <_strtod_l+0x8b8>
 80093ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093d2:	0d1b      	lsrs	r3, r3, #20
 80093d4:	051b      	lsls	r3, r3, #20
 80093d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093da:	d961      	bls.n	80094a0 <_strtod_l+0x8b8>
 80093dc:	6963      	ldr	r3, [r4, #20]
 80093de:	b913      	cbnz	r3, 80093e6 <_strtod_l+0x7fe>
 80093e0:	6923      	ldr	r3, [r4, #16]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	dd5c      	ble.n	80094a0 <_strtod_l+0x8b8>
 80093e6:	4621      	mov	r1, r4
 80093e8:	2201      	movs	r2, #1
 80093ea:	9805      	ldr	r0, [sp, #20]
 80093ec:	f7ff f984 	bl	80086f8 <__lshift>
 80093f0:	4641      	mov	r1, r8
 80093f2:	4604      	mov	r4, r0
 80093f4:	f7ff f9ec 	bl	80087d0 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dd51      	ble.n	80094a0 <_strtod_l+0x8b8>
 80093fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009400:	9a08      	ldr	r2, [sp, #32]
 8009402:	0d1b      	lsrs	r3, r3, #20
 8009404:	051b      	lsls	r3, r3, #20
 8009406:	2a00      	cmp	r2, #0
 8009408:	d06b      	beq.n	80094e2 <_strtod_l+0x8fa>
 800940a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800940e:	d868      	bhi.n	80094e2 <_strtod_l+0x8fa>
 8009410:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009414:	f67f ae9d 	bls.w	8009152 <_strtod_l+0x56a>
 8009418:	4b0a      	ldr	r3, [pc, #40]	@ (8009444 <_strtod_l+0x85c>)
 800941a:	4650      	mov	r0, sl
 800941c:	4659      	mov	r1, fp
 800941e:	2200      	movs	r2, #0
 8009420:	f7f7 f8ea 	bl	80005f8 <__aeabi_dmul>
 8009424:	4b08      	ldr	r3, [pc, #32]	@ (8009448 <_strtod_l+0x860>)
 8009426:	400b      	ands	r3, r1
 8009428:	4682      	mov	sl, r0
 800942a:	468b      	mov	fp, r1
 800942c:	2b00      	cmp	r3, #0
 800942e:	f47f ae05 	bne.w	800903c <_strtod_l+0x454>
 8009432:	9a05      	ldr	r2, [sp, #20]
 8009434:	2322      	movs	r3, #34	@ 0x22
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	e600      	b.n	800903c <_strtod_l+0x454>
 800943a:	bf00      	nop
 800943c:	0800b398 	.word	0x0800b398
 8009440:	fffffc02 	.word	0xfffffc02
 8009444:	39500000 	.word	0x39500000
 8009448:	7ff00000 	.word	0x7ff00000
 800944c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009450:	d165      	bne.n	800951e <_strtod_l+0x936>
 8009452:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009458:	b35a      	cbz	r2, 80094b2 <_strtod_l+0x8ca>
 800945a:	4a9f      	ldr	r2, [pc, #636]	@ (80096d8 <_strtod_l+0xaf0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d12b      	bne.n	80094b8 <_strtod_l+0x8d0>
 8009460:	9b08      	ldr	r3, [sp, #32]
 8009462:	4651      	mov	r1, sl
 8009464:	b303      	cbz	r3, 80094a8 <_strtod_l+0x8c0>
 8009466:	4b9d      	ldr	r3, [pc, #628]	@ (80096dc <_strtod_l+0xaf4>)
 8009468:	465a      	mov	r2, fp
 800946a:	4013      	ands	r3, r2
 800946c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	d81b      	bhi.n	80094ae <_strtod_l+0x8c6>
 8009476:	0d1b      	lsrs	r3, r3, #20
 8009478:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800947c:	fa02 f303 	lsl.w	r3, r2, r3
 8009480:	4299      	cmp	r1, r3
 8009482:	d119      	bne.n	80094b8 <_strtod_l+0x8d0>
 8009484:	4b96      	ldr	r3, [pc, #600]	@ (80096e0 <_strtod_l+0xaf8>)
 8009486:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009488:	429a      	cmp	r2, r3
 800948a:	d102      	bne.n	8009492 <_strtod_l+0x8aa>
 800948c:	3101      	adds	r1, #1
 800948e:	f43f adca 	beq.w	8009026 <_strtod_l+0x43e>
 8009492:	4b92      	ldr	r3, [pc, #584]	@ (80096dc <_strtod_l+0xaf4>)
 8009494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009496:	401a      	ands	r2, r3
 8009498:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800949c:	f04f 0a00 	mov.w	sl, #0
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1b8      	bne.n	8009418 <_strtod_l+0x830>
 80094a6:	e5c9      	b.n	800903c <_strtod_l+0x454>
 80094a8:	f04f 33ff 	mov.w	r3, #4294967295
 80094ac:	e7e8      	b.n	8009480 <_strtod_l+0x898>
 80094ae:	4613      	mov	r3, r2
 80094b0:	e7e6      	b.n	8009480 <_strtod_l+0x898>
 80094b2:	ea53 030a 	orrs.w	r3, r3, sl
 80094b6:	d0a1      	beq.n	80093fc <_strtod_l+0x814>
 80094b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094ba:	b1db      	cbz	r3, 80094f4 <_strtod_l+0x90c>
 80094bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094be:	4213      	tst	r3, r2
 80094c0:	d0ee      	beq.n	80094a0 <_strtod_l+0x8b8>
 80094c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094c4:	9a08      	ldr	r2, [sp, #32]
 80094c6:	4650      	mov	r0, sl
 80094c8:	4659      	mov	r1, fp
 80094ca:	b1bb      	cbz	r3, 80094fc <_strtod_l+0x914>
 80094cc:	f7ff fb6e 	bl	8008bac <sulp>
 80094d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094d4:	ec53 2b10 	vmov	r2, r3, d0
 80094d8:	f7f6 fed8 	bl	800028c <__adddf3>
 80094dc:	4682      	mov	sl, r0
 80094de:	468b      	mov	fp, r1
 80094e0:	e7de      	b.n	80094a0 <_strtod_l+0x8b8>
 80094e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80094e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094ee:	f04f 3aff 	mov.w	sl, #4294967295
 80094f2:	e7d5      	b.n	80094a0 <_strtod_l+0x8b8>
 80094f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094f6:	ea13 0f0a 	tst.w	r3, sl
 80094fa:	e7e1      	b.n	80094c0 <_strtod_l+0x8d8>
 80094fc:	f7ff fb56 	bl	8008bac <sulp>
 8009500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009504:	ec53 2b10 	vmov	r2, r3, d0
 8009508:	f7f6 febe 	bl	8000288 <__aeabi_dsub>
 800950c:	2200      	movs	r2, #0
 800950e:	2300      	movs	r3, #0
 8009510:	4682      	mov	sl, r0
 8009512:	468b      	mov	fp, r1
 8009514:	f7f7 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009518:	2800      	cmp	r0, #0
 800951a:	d0c1      	beq.n	80094a0 <_strtod_l+0x8b8>
 800951c:	e619      	b.n	8009152 <_strtod_l+0x56a>
 800951e:	4641      	mov	r1, r8
 8009520:	4620      	mov	r0, r4
 8009522:	f7ff facd 	bl	8008ac0 <__ratio>
 8009526:	ec57 6b10 	vmov	r6, r7, d0
 800952a:	2200      	movs	r2, #0
 800952c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f7f7 fadc 	bl	8000af0 <__aeabi_dcmple>
 8009538:	2800      	cmp	r0, #0
 800953a:	d06f      	beq.n	800961c <_strtod_l+0xa34>
 800953c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d17a      	bne.n	8009638 <_strtod_l+0xa50>
 8009542:	f1ba 0f00 	cmp.w	sl, #0
 8009546:	d158      	bne.n	80095fa <_strtod_l+0xa12>
 8009548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800954a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800954e:	2b00      	cmp	r3, #0
 8009550:	d15a      	bne.n	8009608 <_strtod_l+0xa20>
 8009552:	4b64      	ldr	r3, [pc, #400]	@ (80096e4 <_strtod_l+0xafc>)
 8009554:	2200      	movs	r2, #0
 8009556:	4630      	mov	r0, r6
 8009558:	4639      	mov	r1, r7
 800955a:	f7f7 fabf 	bl	8000adc <__aeabi_dcmplt>
 800955e:	2800      	cmp	r0, #0
 8009560:	d159      	bne.n	8009616 <_strtod_l+0xa2e>
 8009562:	4630      	mov	r0, r6
 8009564:	4639      	mov	r1, r7
 8009566:	4b60      	ldr	r3, [pc, #384]	@ (80096e8 <_strtod_l+0xb00>)
 8009568:	2200      	movs	r2, #0
 800956a:	f7f7 f845 	bl	80005f8 <__aeabi_dmul>
 800956e:	4606      	mov	r6, r0
 8009570:	460f      	mov	r7, r1
 8009572:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009576:	9606      	str	r6, [sp, #24]
 8009578:	9307      	str	r3, [sp, #28]
 800957a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800957e:	4d57      	ldr	r5, [pc, #348]	@ (80096dc <_strtod_l+0xaf4>)
 8009580:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009586:	401d      	ands	r5, r3
 8009588:	4b58      	ldr	r3, [pc, #352]	@ (80096ec <_strtod_l+0xb04>)
 800958a:	429d      	cmp	r5, r3
 800958c:	f040 80b2 	bne.w	80096f4 <_strtod_l+0xb0c>
 8009590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009592:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009596:	ec4b ab10 	vmov	d0, sl, fp
 800959a:	f7ff f9c9 	bl	8008930 <__ulp>
 800959e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095a2:	ec51 0b10 	vmov	r0, r1, d0
 80095a6:	f7f7 f827 	bl	80005f8 <__aeabi_dmul>
 80095aa:	4652      	mov	r2, sl
 80095ac:	465b      	mov	r3, fp
 80095ae:	f7f6 fe6d 	bl	800028c <__adddf3>
 80095b2:	460b      	mov	r3, r1
 80095b4:	4949      	ldr	r1, [pc, #292]	@ (80096dc <_strtod_l+0xaf4>)
 80095b6:	4a4e      	ldr	r2, [pc, #312]	@ (80096f0 <_strtod_l+0xb08>)
 80095b8:	4019      	ands	r1, r3
 80095ba:	4291      	cmp	r1, r2
 80095bc:	4682      	mov	sl, r0
 80095be:	d942      	bls.n	8009646 <_strtod_l+0xa5e>
 80095c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095c2:	4b47      	ldr	r3, [pc, #284]	@ (80096e0 <_strtod_l+0xaf8>)
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d103      	bne.n	80095d0 <_strtod_l+0x9e8>
 80095c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095ca:	3301      	adds	r3, #1
 80095cc:	f43f ad2b 	beq.w	8009026 <_strtod_l+0x43e>
 80095d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80096e0 <_strtod_l+0xaf8>
 80095d4:	f04f 3aff 	mov.w	sl, #4294967295
 80095d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095da:	9805      	ldr	r0, [sp, #20]
 80095dc:	f7fe fe74 	bl	80082c8 <_Bfree>
 80095e0:	9805      	ldr	r0, [sp, #20]
 80095e2:	4649      	mov	r1, r9
 80095e4:	f7fe fe70 	bl	80082c8 <_Bfree>
 80095e8:	9805      	ldr	r0, [sp, #20]
 80095ea:	4641      	mov	r1, r8
 80095ec:	f7fe fe6c 	bl	80082c8 <_Bfree>
 80095f0:	9805      	ldr	r0, [sp, #20]
 80095f2:	4621      	mov	r1, r4
 80095f4:	f7fe fe68 	bl	80082c8 <_Bfree>
 80095f8:	e618      	b.n	800922c <_strtod_l+0x644>
 80095fa:	f1ba 0f01 	cmp.w	sl, #1
 80095fe:	d103      	bne.n	8009608 <_strtod_l+0xa20>
 8009600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009602:	2b00      	cmp	r3, #0
 8009604:	f43f ada5 	beq.w	8009152 <_strtod_l+0x56a>
 8009608:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80096b8 <_strtod_l+0xad0>
 800960c:	4f35      	ldr	r7, [pc, #212]	@ (80096e4 <_strtod_l+0xafc>)
 800960e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009612:	2600      	movs	r6, #0
 8009614:	e7b1      	b.n	800957a <_strtod_l+0x992>
 8009616:	4f34      	ldr	r7, [pc, #208]	@ (80096e8 <_strtod_l+0xb00>)
 8009618:	2600      	movs	r6, #0
 800961a:	e7aa      	b.n	8009572 <_strtod_l+0x98a>
 800961c:	4b32      	ldr	r3, [pc, #200]	@ (80096e8 <_strtod_l+0xb00>)
 800961e:	4630      	mov	r0, r6
 8009620:	4639      	mov	r1, r7
 8009622:	2200      	movs	r2, #0
 8009624:	f7f6 ffe8 	bl	80005f8 <__aeabi_dmul>
 8009628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962a:	4606      	mov	r6, r0
 800962c:	460f      	mov	r7, r1
 800962e:	2b00      	cmp	r3, #0
 8009630:	d09f      	beq.n	8009572 <_strtod_l+0x98a>
 8009632:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009636:	e7a0      	b.n	800957a <_strtod_l+0x992>
 8009638:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80096c0 <_strtod_l+0xad8>
 800963c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009640:	ec57 6b17 	vmov	r6, r7, d7
 8009644:	e799      	b.n	800957a <_strtod_l+0x992>
 8009646:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800964a:	9b08      	ldr	r3, [sp, #32]
 800964c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1c1      	bne.n	80095d8 <_strtod_l+0x9f0>
 8009654:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009658:	0d1b      	lsrs	r3, r3, #20
 800965a:	051b      	lsls	r3, r3, #20
 800965c:	429d      	cmp	r5, r3
 800965e:	d1bb      	bne.n	80095d8 <_strtod_l+0x9f0>
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f7 fb28 	bl	8000cb8 <__aeabi_d2lz>
 8009668:	f7f6 ff98 	bl	800059c <__aeabi_l2d>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4630      	mov	r0, r6
 8009672:	4639      	mov	r1, r7
 8009674:	f7f6 fe08 	bl	8000288 <__aeabi_dsub>
 8009678:	460b      	mov	r3, r1
 800967a:	4602      	mov	r2, r0
 800967c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009680:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009686:	ea46 060a 	orr.w	r6, r6, sl
 800968a:	431e      	orrs	r6, r3
 800968c:	d06f      	beq.n	800976e <_strtod_l+0xb86>
 800968e:	a30e      	add	r3, pc, #56	@ (adr r3, 80096c8 <_strtod_l+0xae0>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f7 fa22 	bl	8000adc <__aeabi_dcmplt>
 8009698:	2800      	cmp	r0, #0
 800969a:	f47f accf 	bne.w	800903c <_strtod_l+0x454>
 800969e:	a30c      	add	r3, pc, #48	@ (adr r3, 80096d0 <_strtod_l+0xae8>)
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096a8:	f7f7 fa36 	bl	8000b18 <__aeabi_dcmpgt>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d093      	beq.n	80095d8 <_strtod_l+0x9f0>
 80096b0:	e4c4      	b.n	800903c <_strtod_l+0x454>
 80096b2:	bf00      	nop
 80096b4:	f3af 8000 	nop.w
 80096b8:	00000000 	.word	0x00000000
 80096bc:	bff00000 	.word	0xbff00000
 80096c0:	00000000 	.word	0x00000000
 80096c4:	3ff00000 	.word	0x3ff00000
 80096c8:	94a03595 	.word	0x94a03595
 80096cc:	3fdfffff 	.word	0x3fdfffff
 80096d0:	35afe535 	.word	0x35afe535
 80096d4:	3fe00000 	.word	0x3fe00000
 80096d8:	000fffff 	.word	0x000fffff
 80096dc:	7ff00000 	.word	0x7ff00000
 80096e0:	7fefffff 	.word	0x7fefffff
 80096e4:	3ff00000 	.word	0x3ff00000
 80096e8:	3fe00000 	.word	0x3fe00000
 80096ec:	7fe00000 	.word	0x7fe00000
 80096f0:	7c9fffff 	.word	0x7c9fffff
 80096f4:	9b08      	ldr	r3, [sp, #32]
 80096f6:	b323      	cbz	r3, 8009742 <_strtod_l+0xb5a>
 80096f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80096fc:	d821      	bhi.n	8009742 <_strtod_l+0xb5a>
 80096fe:	a328      	add	r3, pc, #160	@ (adr r3, 80097a0 <_strtod_l+0xbb8>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	4630      	mov	r0, r6
 8009706:	4639      	mov	r1, r7
 8009708:	f7f7 f9f2 	bl	8000af0 <__aeabi_dcmple>
 800970c:	b1a0      	cbz	r0, 8009738 <_strtod_l+0xb50>
 800970e:	4639      	mov	r1, r7
 8009710:	4630      	mov	r0, r6
 8009712:	f7f7 fa49 	bl	8000ba8 <__aeabi_d2uiz>
 8009716:	2801      	cmp	r0, #1
 8009718:	bf38      	it	cc
 800971a:	2001      	movcc	r0, #1
 800971c:	f7f6 fef2 	bl	8000504 <__aeabi_ui2d>
 8009720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	b9fb      	cbnz	r3, 8009768 <_strtod_l+0xb80>
 8009728:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800972c:	9014      	str	r0, [sp, #80]	@ 0x50
 800972e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009730:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009734:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009738:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800973a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800973e:	1b5b      	subs	r3, r3, r5
 8009740:	9311      	str	r3, [sp, #68]	@ 0x44
 8009742:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009746:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800974a:	f7ff f8f1 	bl	8008930 <__ulp>
 800974e:	4650      	mov	r0, sl
 8009750:	ec53 2b10 	vmov	r2, r3, d0
 8009754:	4659      	mov	r1, fp
 8009756:	f7f6 ff4f 	bl	80005f8 <__aeabi_dmul>
 800975a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800975e:	f7f6 fd95 	bl	800028c <__adddf3>
 8009762:	4682      	mov	sl, r0
 8009764:	468b      	mov	fp, r1
 8009766:	e770      	b.n	800964a <_strtod_l+0xa62>
 8009768:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800976c:	e7e0      	b.n	8009730 <_strtod_l+0xb48>
 800976e:	a30e      	add	r3, pc, #56	@ (adr r3, 80097a8 <_strtod_l+0xbc0>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f7 f9b2 	bl	8000adc <__aeabi_dcmplt>
 8009778:	e798      	b.n	80096ac <_strtod_l+0xac4>
 800977a:	2300      	movs	r3, #0
 800977c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800977e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009780:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	f7ff ba6d 	b.w	8008c62 <_strtod_l+0x7a>
 8009788:	2a65      	cmp	r2, #101	@ 0x65
 800978a:	f43f ab66 	beq.w	8008e5a <_strtod_l+0x272>
 800978e:	2a45      	cmp	r2, #69	@ 0x45
 8009790:	f43f ab63 	beq.w	8008e5a <_strtod_l+0x272>
 8009794:	2301      	movs	r3, #1
 8009796:	f7ff bb9e 	b.w	8008ed6 <_strtod_l+0x2ee>
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w
 80097a0:	ffc00000 	.word	0xffc00000
 80097a4:	41dfffff 	.word	0x41dfffff
 80097a8:	94a03595 	.word	0x94a03595
 80097ac:	3fcfffff 	.word	0x3fcfffff

080097b0 <_strtod_r>:
 80097b0:	4b01      	ldr	r3, [pc, #4]	@ (80097b8 <_strtod_r+0x8>)
 80097b2:	f7ff ba19 	b.w	8008be8 <_strtod_l>
 80097b6:	bf00      	nop
 80097b8:	20000084 	.word	0x20000084

080097bc <_strtol_l.constprop.0>:
 80097bc:	2b24      	cmp	r3, #36	@ 0x24
 80097be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c2:	4686      	mov	lr, r0
 80097c4:	4690      	mov	r8, r2
 80097c6:	d801      	bhi.n	80097cc <_strtol_l.constprop.0+0x10>
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d106      	bne.n	80097da <_strtol_l.constprop.0+0x1e>
 80097cc:	f7fd fdac 	bl	8007328 <__errno>
 80097d0:	2316      	movs	r3, #22
 80097d2:	6003      	str	r3, [r0, #0]
 80097d4:	2000      	movs	r0, #0
 80097d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097da:	4834      	ldr	r0, [pc, #208]	@ (80098ac <_strtol_l.constprop.0+0xf0>)
 80097dc:	460d      	mov	r5, r1
 80097de:	462a      	mov	r2, r5
 80097e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097e4:	5d06      	ldrb	r6, [r0, r4]
 80097e6:	f016 0608 	ands.w	r6, r6, #8
 80097ea:	d1f8      	bne.n	80097de <_strtol_l.constprop.0+0x22>
 80097ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80097ee:	d12d      	bne.n	800984c <_strtol_l.constprop.0+0x90>
 80097f0:	782c      	ldrb	r4, [r5, #0]
 80097f2:	2601      	movs	r6, #1
 80097f4:	1c95      	adds	r5, r2, #2
 80097f6:	f033 0210 	bics.w	r2, r3, #16
 80097fa:	d109      	bne.n	8009810 <_strtol_l.constprop.0+0x54>
 80097fc:	2c30      	cmp	r4, #48	@ 0x30
 80097fe:	d12a      	bne.n	8009856 <_strtol_l.constprop.0+0x9a>
 8009800:	782a      	ldrb	r2, [r5, #0]
 8009802:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009806:	2a58      	cmp	r2, #88	@ 0x58
 8009808:	d125      	bne.n	8009856 <_strtol_l.constprop.0+0x9a>
 800980a:	786c      	ldrb	r4, [r5, #1]
 800980c:	2310      	movs	r3, #16
 800980e:	3502      	adds	r5, #2
 8009810:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009814:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009818:	2200      	movs	r2, #0
 800981a:	fbbc f9f3 	udiv	r9, ip, r3
 800981e:	4610      	mov	r0, r2
 8009820:	fb03 ca19 	mls	sl, r3, r9, ip
 8009824:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009828:	2f09      	cmp	r7, #9
 800982a:	d81b      	bhi.n	8009864 <_strtol_l.constprop.0+0xa8>
 800982c:	463c      	mov	r4, r7
 800982e:	42a3      	cmp	r3, r4
 8009830:	dd27      	ble.n	8009882 <_strtol_l.constprop.0+0xc6>
 8009832:	1c57      	adds	r7, r2, #1
 8009834:	d007      	beq.n	8009846 <_strtol_l.constprop.0+0x8a>
 8009836:	4581      	cmp	r9, r0
 8009838:	d320      	bcc.n	800987c <_strtol_l.constprop.0+0xc0>
 800983a:	d101      	bne.n	8009840 <_strtol_l.constprop.0+0x84>
 800983c:	45a2      	cmp	sl, r4
 800983e:	db1d      	blt.n	800987c <_strtol_l.constprop.0+0xc0>
 8009840:	fb00 4003 	mla	r0, r0, r3, r4
 8009844:	2201      	movs	r2, #1
 8009846:	f815 4b01 	ldrb.w	r4, [r5], #1
 800984a:	e7eb      	b.n	8009824 <_strtol_l.constprop.0+0x68>
 800984c:	2c2b      	cmp	r4, #43	@ 0x2b
 800984e:	bf04      	itt	eq
 8009850:	782c      	ldrbeq	r4, [r5, #0]
 8009852:	1c95      	addeq	r5, r2, #2
 8009854:	e7cf      	b.n	80097f6 <_strtol_l.constprop.0+0x3a>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1da      	bne.n	8009810 <_strtol_l.constprop.0+0x54>
 800985a:	2c30      	cmp	r4, #48	@ 0x30
 800985c:	bf0c      	ite	eq
 800985e:	2308      	moveq	r3, #8
 8009860:	230a      	movne	r3, #10
 8009862:	e7d5      	b.n	8009810 <_strtol_l.constprop.0+0x54>
 8009864:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009868:	2f19      	cmp	r7, #25
 800986a:	d801      	bhi.n	8009870 <_strtol_l.constprop.0+0xb4>
 800986c:	3c37      	subs	r4, #55	@ 0x37
 800986e:	e7de      	b.n	800982e <_strtol_l.constprop.0+0x72>
 8009870:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009874:	2f19      	cmp	r7, #25
 8009876:	d804      	bhi.n	8009882 <_strtol_l.constprop.0+0xc6>
 8009878:	3c57      	subs	r4, #87	@ 0x57
 800987a:	e7d8      	b.n	800982e <_strtol_l.constprop.0+0x72>
 800987c:	f04f 32ff 	mov.w	r2, #4294967295
 8009880:	e7e1      	b.n	8009846 <_strtol_l.constprop.0+0x8a>
 8009882:	1c53      	adds	r3, r2, #1
 8009884:	d108      	bne.n	8009898 <_strtol_l.constprop.0+0xdc>
 8009886:	2322      	movs	r3, #34	@ 0x22
 8009888:	f8ce 3000 	str.w	r3, [lr]
 800988c:	4660      	mov	r0, ip
 800988e:	f1b8 0f00 	cmp.w	r8, #0
 8009892:	d0a0      	beq.n	80097d6 <_strtol_l.constprop.0+0x1a>
 8009894:	1e69      	subs	r1, r5, #1
 8009896:	e006      	b.n	80098a6 <_strtol_l.constprop.0+0xea>
 8009898:	b106      	cbz	r6, 800989c <_strtol_l.constprop.0+0xe0>
 800989a:	4240      	negs	r0, r0
 800989c:	f1b8 0f00 	cmp.w	r8, #0
 80098a0:	d099      	beq.n	80097d6 <_strtol_l.constprop.0+0x1a>
 80098a2:	2a00      	cmp	r2, #0
 80098a4:	d1f6      	bne.n	8009894 <_strtol_l.constprop.0+0xd8>
 80098a6:	f8c8 1000 	str.w	r1, [r8]
 80098aa:	e794      	b.n	80097d6 <_strtol_l.constprop.0+0x1a>
 80098ac:	0800b3c1 	.word	0x0800b3c1

080098b0 <_strtol_r>:
 80098b0:	f7ff bf84 	b.w	80097bc <_strtol_l.constprop.0>

080098b4 <__ssputs_r>:
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	688e      	ldr	r6, [r1, #8]
 80098ba:	461f      	mov	r7, r3
 80098bc:	42be      	cmp	r6, r7
 80098be:	680b      	ldr	r3, [r1, #0]
 80098c0:	4682      	mov	sl, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	4690      	mov	r8, r2
 80098c6:	d82d      	bhi.n	8009924 <__ssputs_r+0x70>
 80098c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098d0:	d026      	beq.n	8009920 <__ssputs_r+0x6c>
 80098d2:	6965      	ldr	r5, [r4, #20]
 80098d4:	6909      	ldr	r1, [r1, #16]
 80098d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098da:	eba3 0901 	sub.w	r9, r3, r1
 80098de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098e2:	1c7b      	adds	r3, r7, #1
 80098e4:	444b      	add	r3, r9
 80098e6:	106d      	asrs	r5, r5, #1
 80098e8:	429d      	cmp	r5, r3
 80098ea:	bf38      	it	cc
 80098ec:	461d      	movcc	r5, r3
 80098ee:	0553      	lsls	r3, r2, #21
 80098f0:	d527      	bpl.n	8009942 <__ssputs_r+0x8e>
 80098f2:	4629      	mov	r1, r5
 80098f4:	f7fe fc1c 	bl	8008130 <_malloc_r>
 80098f8:	4606      	mov	r6, r0
 80098fa:	b360      	cbz	r0, 8009956 <__ssputs_r+0xa2>
 80098fc:	6921      	ldr	r1, [r4, #16]
 80098fe:	464a      	mov	r2, r9
 8009900:	f7fd fd3f 	bl	8007382 <memcpy>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800990a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	6126      	str	r6, [r4, #16]
 8009912:	6165      	str	r5, [r4, #20]
 8009914:	444e      	add	r6, r9
 8009916:	eba5 0509 	sub.w	r5, r5, r9
 800991a:	6026      	str	r6, [r4, #0]
 800991c:	60a5      	str	r5, [r4, #8]
 800991e:	463e      	mov	r6, r7
 8009920:	42be      	cmp	r6, r7
 8009922:	d900      	bls.n	8009926 <__ssputs_r+0x72>
 8009924:	463e      	mov	r6, r7
 8009926:	6820      	ldr	r0, [r4, #0]
 8009928:	4632      	mov	r2, r6
 800992a:	4641      	mov	r1, r8
 800992c:	f000 f9c6 	bl	8009cbc <memmove>
 8009930:	68a3      	ldr	r3, [r4, #8]
 8009932:	1b9b      	subs	r3, r3, r6
 8009934:	60a3      	str	r3, [r4, #8]
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	4433      	add	r3, r6
 800993a:	6023      	str	r3, [r4, #0]
 800993c:	2000      	movs	r0, #0
 800993e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009942:	462a      	mov	r2, r5
 8009944:	f000 fd7d 	bl	800a442 <_realloc_r>
 8009948:	4606      	mov	r6, r0
 800994a:	2800      	cmp	r0, #0
 800994c:	d1e0      	bne.n	8009910 <__ssputs_r+0x5c>
 800994e:	6921      	ldr	r1, [r4, #16]
 8009950:	4650      	mov	r0, sl
 8009952:	f7fe fb79 	bl	8008048 <_free_r>
 8009956:	230c      	movs	r3, #12
 8009958:	f8ca 3000 	str.w	r3, [sl]
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	f04f 30ff 	mov.w	r0, #4294967295
 8009968:	e7e9      	b.n	800993e <__ssputs_r+0x8a>
	...

0800996c <_svfiprintf_r>:
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	4698      	mov	r8, r3
 8009972:	898b      	ldrh	r3, [r1, #12]
 8009974:	061b      	lsls	r3, r3, #24
 8009976:	b09d      	sub	sp, #116	@ 0x74
 8009978:	4607      	mov	r7, r0
 800997a:	460d      	mov	r5, r1
 800997c:	4614      	mov	r4, r2
 800997e:	d510      	bpl.n	80099a2 <_svfiprintf_r+0x36>
 8009980:	690b      	ldr	r3, [r1, #16]
 8009982:	b973      	cbnz	r3, 80099a2 <_svfiprintf_r+0x36>
 8009984:	2140      	movs	r1, #64	@ 0x40
 8009986:	f7fe fbd3 	bl	8008130 <_malloc_r>
 800998a:	6028      	str	r0, [r5, #0]
 800998c:	6128      	str	r0, [r5, #16]
 800998e:	b930      	cbnz	r0, 800999e <_svfiprintf_r+0x32>
 8009990:	230c      	movs	r3, #12
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	b01d      	add	sp, #116	@ 0x74
 800999a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999e:	2340      	movs	r3, #64	@ 0x40
 80099a0:	616b      	str	r3, [r5, #20]
 80099a2:	2300      	movs	r3, #0
 80099a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a6:	2320      	movs	r3, #32
 80099a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80099b0:	2330      	movs	r3, #48	@ 0x30
 80099b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b50 <_svfiprintf_r+0x1e4>
 80099b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099ba:	f04f 0901 	mov.w	r9, #1
 80099be:	4623      	mov	r3, r4
 80099c0:	469a      	mov	sl, r3
 80099c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c6:	b10a      	cbz	r2, 80099cc <_svfiprintf_r+0x60>
 80099c8:	2a25      	cmp	r2, #37	@ 0x25
 80099ca:	d1f9      	bne.n	80099c0 <_svfiprintf_r+0x54>
 80099cc:	ebba 0b04 	subs.w	fp, sl, r4
 80099d0:	d00b      	beq.n	80099ea <_svfiprintf_r+0x7e>
 80099d2:	465b      	mov	r3, fp
 80099d4:	4622      	mov	r2, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	4638      	mov	r0, r7
 80099da:	f7ff ff6b 	bl	80098b4 <__ssputs_r>
 80099de:	3001      	adds	r0, #1
 80099e0:	f000 80a7 	beq.w	8009b32 <_svfiprintf_r+0x1c6>
 80099e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099e6:	445a      	add	r2, fp
 80099e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80099ea:	f89a 3000 	ldrb.w	r3, [sl]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 809f 	beq.w	8009b32 <_svfiprintf_r+0x1c6>
 80099f4:	2300      	movs	r3, #0
 80099f6:	f04f 32ff 	mov.w	r2, #4294967295
 80099fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099fe:	f10a 0a01 	add.w	sl, sl, #1
 8009a02:	9304      	str	r3, [sp, #16]
 8009a04:	9307      	str	r3, [sp, #28]
 8009a06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a0c:	4654      	mov	r4, sl
 8009a0e:	2205      	movs	r2, #5
 8009a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a14:	484e      	ldr	r0, [pc, #312]	@ (8009b50 <_svfiprintf_r+0x1e4>)
 8009a16:	f7f6 fbdb 	bl	80001d0 <memchr>
 8009a1a:	9a04      	ldr	r2, [sp, #16]
 8009a1c:	b9d8      	cbnz	r0, 8009a56 <_svfiprintf_r+0xea>
 8009a1e:	06d0      	lsls	r0, r2, #27
 8009a20:	bf44      	itt	mi
 8009a22:	2320      	movmi	r3, #32
 8009a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a28:	0711      	lsls	r1, r2, #28
 8009a2a:	bf44      	itt	mi
 8009a2c:	232b      	movmi	r3, #43	@ 0x2b
 8009a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a32:	f89a 3000 	ldrb.w	r3, [sl]
 8009a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a38:	d015      	beq.n	8009a66 <_svfiprintf_r+0xfa>
 8009a3a:	9a07      	ldr	r2, [sp, #28]
 8009a3c:	4654      	mov	r4, sl
 8009a3e:	2000      	movs	r0, #0
 8009a40:	f04f 0c0a 	mov.w	ip, #10
 8009a44:	4621      	mov	r1, r4
 8009a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a4a:	3b30      	subs	r3, #48	@ 0x30
 8009a4c:	2b09      	cmp	r3, #9
 8009a4e:	d94b      	bls.n	8009ae8 <_svfiprintf_r+0x17c>
 8009a50:	b1b0      	cbz	r0, 8009a80 <_svfiprintf_r+0x114>
 8009a52:	9207      	str	r2, [sp, #28]
 8009a54:	e014      	b.n	8009a80 <_svfiprintf_r+0x114>
 8009a56:	eba0 0308 	sub.w	r3, r0, r8
 8009a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	9304      	str	r3, [sp, #16]
 8009a62:	46a2      	mov	sl, r4
 8009a64:	e7d2      	b.n	8009a0c <_svfiprintf_r+0xa0>
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	1d19      	adds	r1, r3, #4
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	9103      	str	r1, [sp, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bfbb      	ittet	lt
 8009a72:	425b      	neglt	r3, r3
 8009a74:	f042 0202 	orrlt.w	r2, r2, #2
 8009a78:	9307      	strge	r3, [sp, #28]
 8009a7a:	9307      	strlt	r3, [sp, #28]
 8009a7c:	bfb8      	it	lt
 8009a7e:	9204      	strlt	r2, [sp, #16]
 8009a80:	7823      	ldrb	r3, [r4, #0]
 8009a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a84:	d10a      	bne.n	8009a9c <_svfiprintf_r+0x130>
 8009a86:	7863      	ldrb	r3, [r4, #1]
 8009a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a8a:	d132      	bne.n	8009af2 <_svfiprintf_r+0x186>
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	1d1a      	adds	r2, r3, #4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	9203      	str	r2, [sp, #12]
 8009a94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a98:	3402      	adds	r4, #2
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b60 <_svfiprintf_r+0x1f4>
 8009aa0:	7821      	ldrb	r1, [r4, #0]
 8009aa2:	2203      	movs	r2, #3
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	f7f6 fb93 	bl	80001d0 <memchr>
 8009aaa:	b138      	cbz	r0, 8009abc <_svfiprintf_r+0x150>
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	eba0 000a 	sub.w	r0, r0, sl
 8009ab2:	2240      	movs	r2, #64	@ 0x40
 8009ab4:	4082      	lsls	r2, r0
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	3401      	adds	r4, #1
 8009aba:	9304      	str	r3, [sp, #16]
 8009abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac0:	4824      	ldr	r0, [pc, #144]	@ (8009b54 <_svfiprintf_r+0x1e8>)
 8009ac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ac6:	2206      	movs	r2, #6
 8009ac8:	f7f6 fb82 	bl	80001d0 <memchr>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d036      	beq.n	8009b3e <_svfiprintf_r+0x1d2>
 8009ad0:	4b21      	ldr	r3, [pc, #132]	@ (8009b58 <_svfiprintf_r+0x1ec>)
 8009ad2:	bb1b      	cbnz	r3, 8009b1c <_svfiprintf_r+0x1b0>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	3307      	adds	r3, #7
 8009ad8:	f023 0307 	bic.w	r3, r3, #7
 8009adc:	3308      	adds	r3, #8
 8009ade:	9303      	str	r3, [sp, #12]
 8009ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae2:	4433      	add	r3, r6
 8009ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae6:	e76a      	b.n	80099be <_svfiprintf_r+0x52>
 8009ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aec:	460c      	mov	r4, r1
 8009aee:	2001      	movs	r0, #1
 8009af0:	e7a8      	b.n	8009a44 <_svfiprintf_r+0xd8>
 8009af2:	2300      	movs	r3, #0
 8009af4:	3401      	adds	r4, #1
 8009af6:	9305      	str	r3, [sp, #20]
 8009af8:	4619      	mov	r1, r3
 8009afa:	f04f 0c0a 	mov.w	ip, #10
 8009afe:	4620      	mov	r0, r4
 8009b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b04:	3a30      	subs	r2, #48	@ 0x30
 8009b06:	2a09      	cmp	r2, #9
 8009b08:	d903      	bls.n	8009b12 <_svfiprintf_r+0x1a6>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0c6      	beq.n	8009a9c <_svfiprintf_r+0x130>
 8009b0e:	9105      	str	r1, [sp, #20]
 8009b10:	e7c4      	b.n	8009a9c <_svfiprintf_r+0x130>
 8009b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b16:	4604      	mov	r4, r0
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e7f0      	b.n	8009afe <_svfiprintf_r+0x192>
 8009b1c:	ab03      	add	r3, sp, #12
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	462a      	mov	r2, r5
 8009b22:	4b0e      	ldr	r3, [pc, #56]	@ (8009b5c <_svfiprintf_r+0x1f0>)
 8009b24:	a904      	add	r1, sp, #16
 8009b26:	4638      	mov	r0, r7
 8009b28:	f7fc fcba 	bl	80064a0 <_printf_float>
 8009b2c:	1c42      	adds	r2, r0, #1
 8009b2e:	4606      	mov	r6, r0
 8009b30:	d1d6      	bne.n	8009ae0 <_svfiprintf_r+0x174>
 8009b32:	89ab      	ldrh	r3, [r5, #12]
 8009b34:	065b      	lsls	r3, r3, #25
 8009b36:	f53f af2d 	bmi.w	8009994 <_svfiprintf_r+0x28>
 8009b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b3c:	e72c      	b.n	8009998 <_svfiprintf_r+0x2c>
 8009b3e:	ab03      	add	r3, sp, #12
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	462a      	mov	r2, r5
 8009b44:	4b05      	ldr	r3, [pc, #20]	@ (8009b5c <_svfiprintf_r+0x1f0>)
 8009b46:	a904      	add	r1, sp, #16
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f7fc ff41 	bl	80069d0 <_printf_i>
 8009b4e:	e7ed      	b.n	8009b2c <_svfiprintf_r+0x1c0>
 8009b50:	0800b4c1 	.word	0x0800b4c1
 8009b54:	0800b4cb 	.word	0x0800b4cb
 8009b58:	080064a1 	.word	0x080064a1
 8009b5c:	080098b5 	.word	0x080098b5
 8009b60:	0800b4c7 	.word	0x0800b4c7

08009b64 <__sflush_r>:
 8009b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6c:	0716      	lsls	r6, r2, #28
 8009b6e:	4605      	mov	r5, r0
 8009b70:	460c      	mov	r4, r1
 8009b72:	d454      	bmi.n	8009c1e <__sflush_r+0xba>
 8009b74:	684b      	ldr	r3, [r1, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	dc02      	bgt.n	8009b80 <__sflush_r+0x1c>
 8009b7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	dd48      	ble.n	8009c12 <__sflush_r+0xae>
 8009b80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b82:	2e00      	cmp	r6, #0
 8009b84:	d045      	beq.n	8009c12 <__sflush_r+0xae>
 8009b86:	2300      	movs	r3, #0
 8009b88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b8c:	682f      	ldr	r7, [r5, #0]
 8009b8e:	6a21      	ldr	r1, [r4, #32]
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	d030      	beq.n	8009bf6 <__sflush_r+0x92>
 8009b94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	0759      	lsls	r1, r3, #29
 8009b9a:	d505      	bpl.n	8009ba8 <__sflush_r+0x44>
 8009b9c:	6863      	ldr	r3, [r4, #4]
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ba2:	b10b      	cbz	r3, 8009ba8 <__sflush_r+0x44>
 8009ba4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ba6:	1ad2      	subs	r2, r2, r3
 8009ba8:	2300      	movs	r3, #0
 8009baa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bac:	6a21      	ldr	r1, [r4, #32]
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b0      	blx	r6
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	d106      	bne.n	8009bc6 <__sflush_r+0x62>
 8009bb8:	6829      	ldr	r1, [r5, #0]
 8009bba:	291d      	cmp	r1, #29
 8009bbc:	d82b      	bhi.n	8009c16 <__sflush_r+0xb2>
 8009bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8009c68 <__sflush_r+0x104>)
 8009bc0:	410a      	asrs	r2, r1
 8009bc2:	07d6      	lsls	r6, r2, #31
 8009bc4:	d427      	bmi.n	8009c16 <__sflush_r+0xb2>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	6062      	str	r2, [r4, #4]
 8009bca:	04d9      	lsls	r1, r3, #19
 8009bcc:	6922      	ldr	r2, [r4, #16]
 8009bce:	6022      	str	r2, [r4, #0]
 8009bd0:	d504      	bpl.n	8009bdc <__sflush_r+0x78>
 8009bd2:	1c42      	adds	r2, r0, #1
 8009bd4:	d101      	bne.n	8009bda <__sflush_r+0x76>
 8009bd6:	682b      	ldr	r3, [r5, #0]
 8009bd8:	b903      	cbnz	r3, 8009bdc <__sflush_r+0x78>
 8009bda:	6560      	str	r0, [r4, #84]	@ 0x54
 8009bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bde:	602f      	str	r7, [r5, #0]
 8009be0:	b1b9      	cbz	r1, 8009c12 <__sflush_r+0xae>
 8009be2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009be6:	4299      	cmp	r1, r3
 8009be8:	d002      	beq.n	8009bf0 <__sflush_r+0x8c>
 8009bea:	4628      	mov	r0, r5
 8009bec:	f7fe fa2c 	bl	8008048 <_free_r>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bf4:	e00d      	b.n	8009c12 <__sflush_r+0xae>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b0      	blx	r6
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	1c50      	adds	r0, r2, #1
 8009c00:	d1c9      	bne.n	8009b96 <__sflush_r+0x32>
 8009c02:	682b      	ldr	r3, [r5, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d0c6      	beq.n	8009b96 <__sflush_r+0x32>
 8009c08:	2b1d      	cmp	r3, #29
 8009c0a:	d001      	beq.n	8009c10 <__sflush_r+0xac>
 8009c0c:	2b16      	cmp	r3, #22
 8009c0e:	d11e      	bne.n	8009c4e <__sflush_r+0xea>
 8009c10:	602f      	str	r7, [r5, #0]
 8009c12:	2000      	movs	r0, #0
 8009c14:	e022      	b.n	8009c5c <__sflush_r+0xf8>
 8009c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c1a:	b21b      	sxth	r3, r3
 8009c1c:	e01b      	b.n	8009c56 <__sflush_r+0xf2>
 8009c1e:	690f      	ldr	r7, [r1, #16]
 8009c20:	2f00      	cmp	r7, #0
 8009c22:	d0f6      	beq.n	8009c12 <__sflush_r+0xae>
 8009c24:	0793      	lsls	r3, r2, #30
 8009c26:	680e      	ldr	r6, [r1, #0]
 8009c28:	bf08      	it	eq
 8009c2a:	694b      	ldreq	r3, [r1, #20]
 8009c2c:	600f      	str	r7, [r1, #0]
 8009c2e:	bf18      	it	ne
 8009c30:	2300      	movne	r3, #0
 8009c32:	eba6 0807 	sub.w	r8, r6, r7
 8009c36:	608b      	str	r3, [r1, #8]
 8009c38:	f1b8 0f00 	cmp.w	r8, #0
 8009c3c:	dde9      	ble.n	8009c12 <__sflush_r+0xae>
 8009c3e:	6a21      	ldr	r1, [r4, #32]
 8009c40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c42:	4643      	mov	r3, r8
 8009c44:	463a      	mov	r2, r7
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b0      	blx	r6
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	dc08      	bgt.n	8009c60 <__sflush_r+0xfc>
 8009c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c60:	4407      	add	r7, r0
 8009c62:	eba8 0800 	sub.w	r8, r8, r0
 8009c66:	e7e7      	b.n	8009c38 <__sflush_r+0xd4>
 8009c68:	dfbffffe 	.word	0xdfbffffe

08009c6c <_fflush_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	690b      	ldr	r3, [r1, #16]
 8009c70:	4605      	mov	r5, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	b913      	cbnz	r3, 8009c7c <_fflush_r+0x10>
 8009c76:	2500      	movs	r5, #0
 8009c78:	4628      	mov	r0, r5
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	b118      	cbz	r0, 8009c86 <_fflush_r+0x1a>
 8009c7e:	6a03      	ldr	r3, [r0, #32]
 8009c80:	b90b      	cbnz	r3, 8009c86 <_fflush_r+0x1a>
 8009c82:	f7fd fa65 	bl	8007150 <__sinit>
 8009c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0f3      	beq.n	8009c76 <_fflush_r+0xa>
 8009c8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c90:	07d0      	lsls	r0, r2, #31
 8009c92:	d404      	bmi.n	8009c9e <_fflush_r+0x32>
 8009c94:	0599      	lsls	r1, r3, #22
 8009c96:	d402      	bmi.n	8009c9e <_fflush_r+0x32>
 8009c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c9a:	f7fd fb70 	bl	800737e <__retarget_lock_acquire_recursive>
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	f7ff ff5f 	bl	8009b64 <__sflush_r>
 8009ca6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ca8:	07da      	lsls	r2, r3, #31
 8009caa:	4605      	mov	r5, r0
 8009cac:	d4e4      	bmi.n	8009c78 <_fflush_r+0xc>
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	059b      	lsls	r3, r3, #22
 8009cb2:	d4e1      	bmi.n	8009c78 <_fflush_r+0xc>
 8009cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cb6:	f7fd fb63 	bl	8007380 <__retarget_lock_release_recursive>
 8009cba:	e7dd      	b.n	8009c78 <_fflush_r+0xc>

08009cbc <memmove>:
 8009cbc:	4288      	cmp	r0, r1
 8009cbe:	b510      	push	{r4, lr}
 8009cc0:	eb01 0402 	add.w	r4, r1, r2
 8009cc4:	d902      	bls.n	8009ccc <memmove+0x10>
 8009cc6:	4284      	cmp	r4, r0
 8009cc8:	4623      	mov	r3, r4
 8009cca:	d807      	bhi.n	8009cdc <memmove+0x20>
 8009ccc:	1e43      	subs	r3, r0, #1
 8009cce:	42a1      	cmp	r1, r4
 8009cd0:	d008      	beq.n	8009ce4 <memmove+0x28>
 8009cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cda:	e7f8      	b.n	8009cce <memmove+0x12>
 8009cdc:	4402      	add	r2, r0
 8009cde:	4601      	mov	r1, r0
 8009ce0:	428a      	cmp	r2, r1
 8009ce2:	d100      	bne.n	8009ce6 <memmove+0x2a>
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cee:	e7f7      	b.n	8009ce0 <memmove+0x24>

08009cf0 <strncmp>:
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	b16a      	cbz	r2, 8009d10 <strncmp+0x20>
 8009cf4:	3901      	subs	r1, #1
 8009cf6:	1884      	adds	r4, r0, r2
 8009cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d103      	bne.n	8009d0c <strncmp+0x1c>
 8009d04:	42a0      	cmp	r0, r4
 8009d06:	d001      	beq.n	8009d0c <strncmp+0x1c>
 8009d08:	2a00      	cmp	r2, #0
 8009d0a:	d1f5      	bne.n	8009cf8 <strncmp+0x8>
 8009d0c:	1ad0      	subs	r0, r2, r3
 8009d0e:	bd10      	pop	{r4, pc}
 8009d10:	4610      	mov	r0, r2
 8009d12:	e7fc      	b.n	8009d0e <strncmp+0x1e>

08009d14 <_sbrk_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d06      	ldr	r5, [pc, #24]	@ (8009d30 <_sbrk_r+0x1c>)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	f7f8 fbca 	bl	80024b8 <_sbrk>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_sbrk_r+0x1a>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_sbrk_r+0x1a>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	200005e0 	.word	0x200005e0
 8009d34:	00000000 	.word	0x00000000

08009d38 <nan>:
 8009d38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009d40 <nan+0x8>
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	00000000 	.word	0x00000000
 8009d44:	7ff80000 	.word	0x7ff80000

08009d48 <__assert_func>:
 8009d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d4a:	4614      	mov	r4, r2
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	4b09      	ldr	r3, [pc, #36]	@ (8009d74 <__assert_func+0x2c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4605      	mov	r5, r0
 8009d54:	68d8      	ldr	r0, [r3, #12]
 8009d56:	b954      	cbnz	r4, 8009d6e <__assert_func+0x26>
 8009d58:	4b07      	ldr	r3, [pc, #28]	@ (8009d78 <__assert_func+0x30>)
 8009d5a:	461c      	mov	r4, r3
 8009d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d60:	9100      	str	r1, [sp, #0]
 8009d62:	462b      	mov	r3, r5
 8009d64:	4905      	ldr	r1, [pc, #20]	@ (8009d7c <__assert_func+0x34>)
 8009d66:	f000 fba7 	bl	800a4b8 <fiprintf>
 8009d6a:	f000 fbb7 	bl	800a4dc <abort>
 8009d6e:	4b04      	ldr	r3, [pc, #16]	@ (8009d80 <__assert_func+0x38>)
 8009d70:	e7f4      	b.n	8009d5c <__assert_func+0x14>
 8009d72:	bf00      	nop
 8009d74:	20000034 	.word	0x20000034
 8009d78:	0800b515 	.word	0x0800b515
 8009d7c:	0800b4e7 	.word	0x0800b4e7
 8009d80:	0800b4da 	.word	0x0800b4da

08009d84 <_calloc_r>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	fba1 5402 	umull	r5, r4, r1, r2
 8009d8a:	b93c      	cbnz	r4, 8009d9c <_calloc_r+0x18>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7fe f9cf 	bl	8008130 <_malloc_r>
 8009d92:	4606      	mov	r6, r0
 8009d94:	b928      	cbnz	r0, 8009da2 <_calloc_r+0x1e>
 8009d96:	2600      	movs	r6, #0
 8009d98:	4630      	mov	r0, r6
 8009d9a:	bd70      	pop	{r4, r5, r6, pc}
 8009d9c:	220c      	movs	r2, #12
 8009d9e:	6002      	str	r2, [r0, #0]
 8009da0:	e7f9      	b.n	8009d96 <_calloc_r+0x12>
 8009da2:	462a      	mov	r2, r5
 8009da4:	4621      	mov	r1, r4
 8009da6:	f7fd fa6c 	bl	8007282 <memset>
 8009daa:	e7f5      	b.n	8009d98 <_calloc_r+0x14>

08009dac <rshift>:
 8009dac:	6903      	ldr	r3, [r0, #16]
 8009dae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009db2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009db6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009dba:	f100 0414 	add.w	r4, r0, #20
 8009dbe:	dd45      	ble.n	8009e4c <rshift+0xa0>
 8009dc0:	f011 011f 	ands.w	r1, r1, #31
 8009dc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009dc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009dcc:	d10c      	bne.n	8009de8 <rshift+0x3c>
 8009dce:	f100 0710 	add.w	r7, r0, #16
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	42b1      	cmp	r1, r6
 8009dd6:	d334      	bcc.n	8009e42 <rshift+0x96>
 8009dd8:	1a9b      	subs	r3, r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	1eea      	subs	r2, r5, #3
 8009dde:	4296      	cmp	r6, r2
 8009de0:	bf38      	it	cc
 8009de2:	2300      	movcc	r3, #0
 8009de4:	4423      	add	r3, r4
 8009de6:	e015      	b.n	8009e14 <rshift+0x68>
 8009de8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009dec:	f1c1 0820 	rsb	r8, r1, #32
 8009df0:	40cf      	lsrs	r7, r1
 8009df2:	f105 0e04 	add.w	lr, r5, #4
 8009df6:	46a1      	mov	r9, r4
 8009df8:	4576      	cmp	r6, lr
 8009dfa:	46f4      	mov	ip, lr
 8009dfc:	d815      	bhi.n	8009e2a <rshift+0x7e>
 8009dfe:	1a9a      	subs	r2, r3, r2
 8009e00:	0092      	lsls	r2, r2, #2
 8009e02:	3a04      	subs	r2, #4
 8009e04:	3501      	adds	r5, #1
 8009e06:	42ae      	cmp	r6, r5
 8009e08:	bf38      	it	cc
 8009e0a:	2200      	movcc	r2, #0
 8009e0c:	18a3      	adds	r3, r4, r2
 8009e0e:	50a7      	str	r7, [r4, r2]
 8009e10:	b107      	cbz	r7, 8009e14 <rshift+0x68>
 8009e12:	3304      	adds	r3, #4
 8009e14:	1b1a      	subs	r2, r3, r4
 8009e16:	42a3      	cmp	r3, r4
 8009e18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e1c:	bf08      	it	eq
 8009e1e:	2300      	moveq	r3, #0
 8009e20:	6102      	str	r2, [r0, #16]
 8009e22:	bf08      	it	eq
 8009e24:	6143      	streq	r3, [r0, #20]
 8009e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e2a:	f8dc c000 	ldr.w	ip, [ip]
 8009e2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e32:	ea4c 0707 	orr.w	r7, ip, r7
 8009e36:	f849 7b04 	str.w	r7, [r9], #4
 8009e3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e3e:	40cf      	lsrs	r7, r1
 8009e40:	e7da      	b.n	8009df8 <rshift+0x4c>
 8009e42:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e46:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e4a:	e7c3      	b.n	8009dd4 <rshift+0x28>
 8009e4c:	4623      	mov	r3, r4
 8009e4e:	e7e1      	b.n	8009e14 <rshift+0x68>

08009e50 <__hexdig_fun>:
 8009e50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009e54:	2b09      	cmp	r3, #9
 8009e56:	d802      	bhi.n	8009e5e <__hexdig_fun+0xe>
 8009e58:	3820      	subs	r0, #32
 8009e5a:	b2c0      	uxtb	r0, r0
 8009e5c:	4770      	bx	lr
 8009e5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	d801      	bhi.n	8009e6a <__hexdig_fun+0x1a>
 8009e66:	3847      	subs	r0, #71	@ 0x47
 8009e68:	e7f7      	b.n	8009e5a <__hexdig_fun+0xa>
 8009e6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009e6e:	2b05      	cmp	r3, #5
 8009e70:	d801      	bhi.n	8009e76 <__hexdig_fun+0x26>
 8009e72:	3827      	subs	r0, #39	@ 0x27
 8009e74:	e7f1      	b.n	8009e5a <__hexdig_fun+0xa>
 8009e76:	2000      	movs	r0, #0
 8009e78:	4770      	bx	lr
	...

08009e7c <__gethex>:
 8009e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e80:	b085      	sub	sp, #20
 8009e82:	468a      	mov	sl, r1
 8009e84:	9302      	str	r3, [sp, #8]
 8009e86:	680b      	ldr	r3, [r1, #0]
 8009e88:	9001      	str	r0, [sp, #4]
 8009e8a:	4690      	mov	r8, r2
 8009e8c:	1c9c      	adds	r4, r3, #2
 8009e8e:	46a1      	mov	r9, r4
 8009e90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009e94:	2830      	cmp	r0, #48	@ 0x30
 8009e96:	d0fa      	beq.n	8009e8e <__gethex+0x12>
 8009e98:	eba9 0303 	sub.w	r3, r9, r3
 8009e9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ea0:	f7ff ffd6 	bl	8009e50 <__hexdig_fun>
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d168      	bne.n	8009f7c <__gethex+0x100>
 8009eaa:	49a0      	ldr	r1, [pc, #640]	@ (800a12c <__gethex+0x2b0>)
 8009eac:	2201      	movs	r2, #1
 8009eae:	4648      	mov	r0, r9
 8009eb0:	f7ff ff1e 	bl	8009cf0 <strncmp>
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d167      	bne.n	8009f8a <__gethex+0x10e>
 8009eba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009ebe:	4626      	mov	r6, r4
 8009ec0:	f7ff ffc6 	bl	8009e50 <__hexdig_fun>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d062      	beq.n	8009f8e <__gethex+0x112>
 8009ec8:	4623      	mov	r3, r4
 8009eca:	7818      	ldrb	r0, [r3, #0]
 8009ecc:	2830      	cmp	r0, #48	@ 0x30
 8009ece:	4699      	mov	r9, r3
 8009ed0:	f103 0301 	add.w	r3, r3, #1
 8009ed4:	d0f9      	beq.n	8009eca <__gethex+0x4e>
 8009ed6:	f7ff ffbb 	bl	8009e50 <__hexdig_fun>
 8009eda:	fab0 f580 	clz	r5, r0
 8009ede:	096d      	lsrs	r5, r5, #5
 8009ee0:	f04f 0b01 	mov.w	fp, #1
 8009ee4:	464a      	mov	r2, r9
 8009ee6:	4616      	mov	r6, r2
 8009ee8:	3201      	adds	r2, #1
 8009eea:	7830      	ldrb	r0, [r6, #0]
 8009eec:	f7ff ffb0 	bl	8009e50 <__hexdig_fun>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d1f8      	bne.n	8009ee6 <__gethex+0x6a>
 8009ef4:	498d      	ldr	r1, [pc, #564]	@ (800a12c <__gethex+0x2b0>)
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f7ff fef9 	bl	8009cf0 <strncmp>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d13f      	bne.n	8009f82 <__gethex+0x106>
 8009f02:	b944      	cbnz	r4, 8009f16 <__gethex+0x9a>
 8009f04:	1c74      	adds	r4, r6, #1
 8009f06:	4622      	mov	r2, r4
 8009f08:	4616      	mov	r6, r2
 8009f0a:	3201      	adds	r2, #1
 8009f0c:	7830      	ldrb	r0, [r6, #0]
 8009f0e:	f7ff ff9f 	bl	8009e50 <__hexdig_fun>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d1f8      	bne.n	8009f08 <__gethex+0x8c>
 8009f16:	1ba4      	subs	r4, r4, r6
 8009f18:	00a7      	lsls	r7, r4, #2
 8009f1a:	7833      	ldrb	r3, [r6, #0]
 8009f1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009f20:	2b50      	cmp	r3, #80	@ 0x50
 8009f22:	d13e      	bne.n	8009fa2 <__gethex+0x126>
 8009f24:	7873      	ldrb	r3, [r6, #1]
 8009f26:	2b2b      	cmp	r3, #43	@ 0x2b
 8009f28:	d033      	beq.n	8009f92 <__gethex+0x116>
 8009f2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009f2c:	d034      	beq.n	8009f98 <__gethex+0x11c>
 8009f2e:	1c71      	adds	r1, r6, #1
 8009f30:	2400      	movs	r4, #0
 8009f32:	7808      	ldrb	r0, [r1, #0]
 8009f34:	f7ff ff8c 	bl	8009e50 <__hexdig_fun>
 8009f38:	1e43      	subs	r3, r0, #1
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b18      	cmp	r3, #24
 8009f3e:	d830      	bhi.n	8009fa2 <__gethex+0x126>
 8009f40:	f1a0 0210 	sub.w	r2, r0, #16
 8009f44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f48:	f7ff ff82 	bl	8009e50 <__hexdig_fun>
 8009f4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009f50:	fa5f fc8c 	uxtb.w	ip, ip
 8009f54:	f1bc 0f18 	cmp.w	ip, #24
 8009f58:	f04f 030a 	mov.w	r3, #10
 8009f5c:	d91e      	bls.n	8009f9c <__gethex+0x120>
 8009f5e:	b104      	cbz	r4, 8009f62 <__gethex+0xe6>
 8009f60:	4252      	negs	r2, r2
 8009f62:	4417      	add	r7, r2
 8009f64:	f8ca 1000 	str.w	r1, [sl]
 8009f68:	b1ed      	cbz	r5, 8009fa6 <__gethex+0x12a>
 8009f6a:	f1bb 0f00 	cmp.w	fp, #0
 8009f6e:	bf0c      	ite	eq
 8009f70:	2506      	moveq	r5, #6
 8009f72:	2500      	movne	r5, #0
 8009f74:	4628      	mov	r0, r5
 8009f76:	b005      	add	sp, #20
 8009f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7c:	2500      	movs	r5, #0
 8009f7e:	462c      	mov	r4, r5
 8009f80:	e7b0      	b.n	8009ee4 <__gethex+0x68>
 8009f82:	2c00      	cmp	r4, #0
 8009f84:	d1c7      	bne.n	8009f16 <__gethex+0x9a>
 8009f86:	4627      	mov	r7, r4
 8009f88:	e7c7      	b.n	8009f1a <__gethex+0x9e>
 8009f8a:	464e      	mov	r6, r9
 8009f8c:	462f      	mov	r7, r5
 8009f8e:	2501      	movs	r5, #1
 8009f90:	e7c3      	b.n	8009f1a <__gethex+0x9e>
 8009f92:	2400      	movs	r4, #0
 8009f94:	1cb1      	adds	r1, r6, #2
 8009f96:	e7cc      	b.n	8009f32 <__gethex+0xb6>
 8009f98:	2401      	movs	r4, #1
 8009f9a:	e7fb      	b.n	8009f94 <__gethex+0x118>
 8009f9c:	fb03 0002 	mla	r0, r3, r2, r0
 8009fa0:	e7ce      	b.n	8009f40 <__gethex+0xc4>
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	e7de      	b.n	8009f64 <__gethex+0xe8>
 8009fa6:	eba6 0309 	sub.w	r3, r6, r9
 8009faa:	3b01      	subs	r3, #1
 8009fac:	4629      	mov	r1, r5
 8009fae:	2b07      	cmp	r3, #7
 8009fb0:	dc0a      	bgt.n	8009fc8 <__gethex+0x14c>
 8009fb2:	9801      	ldr	r0, [sp, #4]
 8009fb4:	f7fe f948 	bl	8008248 <_Balloc>
 8009fb8:	4604      	mov	r4, r0
 8009fba:	b940      	cbnz	r0, 8009fce <__gethex+0x152>
 8009fbc:	4b5c      	ldr	r3, [pc, #368]	@ (800a130 <__gethex+0x2b4>)
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	21e4      	movs	r1, #228	@ 0xe4
 8009fc2:	485c      	ldr	r0, [pc, #368]	@ (800a134 <__gethex+0x2b8>)
 8009fc4:	f7ff fec0 	bl	8009d48 <__assert_func>
 8009fc8:	3101      	adds	r1, #1
 8009fca:	105b      	asrs	r3, r3, #1
 8009fcc:	e7ef      	b.n	8009fae <__gethex+0x132>
 8009fce:	f100 0a14 	add.w	sl, r0, #20
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4655      	mov	r5, sl
 8009fd6:	469b      	mov	fp, r3
 8009fd8:	45b1      	cmp	r9, r6
 8009fda:	d337      	bcc.n	800a04c <__gethex+0x1d0>
 8009fdc:	f845 bb04 	str.w	fp, [r5], #4
 8009fe0:	eba5 050a 	sub.w	r5, r5, sl
 8009fe4:	10ad      	asrs	r5, r5, #2
 8009fe6:	6125      	str	r5, [r4, #16]
 8009fe8:	4658      	mov	r0, fp
 8009fea:	f7fe fa1f 	bl	800842c <__hi0bits>
 8009fee:	016d      	lsls	r5, r5, #5
 8009ff0:	f8d8 6000 	ldr.w	r6, [r8]
 8009ff4:	1a2d      	subs	r5, r5, r0
 8009ff6:	42b5      	cmp	r5, r6
 8009ff8:	dd54      	ble.n	800a0a4 <__gethex+0x228>
 8009ffa:	1bad      	subs	r5, r5, r6
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4620      	mov	r0, r4
 800a000:	f7fe fdb3 	bl	8008b6a <__any_on>
 800a004:	4681      	mov	r9, r0
 800a006:	b178      	cbz	r0, 800a028 <__gethex+0x1ac>
 800a008:	1e6b      	subs	r3, r5, #1
 800a00a:	1159      	asrs	r1, r3, #5
 800a00c:	f003 021f 	and.w	r2, r3, #31
 800a010:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a014:	f04f 0901 	mov.w	r9, #1
 800a018:	fa09 f202 	lsl.w	r2, r9, r2
 800a01c:	420a      	tst	r2, r1
 800a01e:	d003      	beq.n	800a028 <__gethex+0x1ac>
 800a020:	454b      	cmp	r3, r9
 800a022:	dc36      	bgt.n	800a092 <__gethex+0x216>
 800a024:	f04f 0902 	mov.w	r9, #2
 800a028:	4629      	mov	r1, r5
 800a02a:	4620      	mov	r0, r4
 800a02c:	f7ff febe 	bl	8009dac <rshift>
 800a030:	442f      	add	r7, r5
 800a032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a036:	42bb      	cmp	r3, r7
 800a038:	da42      	bge.n	800a0c0 <__gethex+0x244>
 800a03a:	9801      	ldr	r0, [sp, #4]
 800a03c:	4621      	mov	r1, r4
 800a03e:	f7fe f943 	bl	80082c8 <_Bfree>
 800a042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a044:	2300      	movs	r3, #0
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	25a3      	movs	r5, #163	@ 0xa3
 800a04a:	e793      	b.n	8009f74 <__gethex+0xf8>
 800a04c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a050:	2a2e      	cmp	r2, #46	@ 0x2e
 800a052:	d012      	beq.n	800a07a <__gethex+0x1fe>
 800a054:	2b20      	cmp	r3, #32
 800a056:	d104      	bne.n	800a062 <__gethex+0x1e6>
 800a058:	f845 bb04 	str.w	fp, [r5], #4
 800a05c:	f04f 0b00 	mov.w	fp, #0
 800a060:	465b      	mov	r3, fp
 800a062:	7830      	ldrb	r0, [r6, #0]
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	f7ff fef3 	bl	8009e50 <__hexdig_fun>
 800a06a:	9b03      	ldr	r3, [sp, #12]
 800a06c:	f000 000f 	and.w	r0, r0, #15
 800a070:	4098      	lsls	r0, r3
 800a072:	ea4b 0b00 	orr.w	fp, fp, r0
 800a076:	3304      	adds	r3, #4
 800a078:	e7ae      	b.n	8009fd8 <__gethex+0x15c>
 800a07a:	45b1      	cmp	r9, r6
 800a07c:	d8ea      	bhi.n	800a054 <__gethex+0x1d8>
 800a07e:	492b      	ldr	r1, [pc, #172]	@ (800a12c <__gethex+0x2b0>)
 800a080:	9303      	str	r3, [sp, #12]
 800a082:	2201      	movs	r2, #1
 800a084:	4630      	mov	r0, r6
 800a086:	f7ff fe33 	bl	8009cf0 <strncmp>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d1e1      	bne.n	800a054 <__gethex+0x1d8>
 800a090:	e7a2      	b.n	8009fd8 <__gethex+0x15c>
 800a092:	1ea9      	subs	r1, r5, #2
 800a094:	4620      	mov	r0, r4
 800a096:	f7fe fd68 	bl	8008b6a <__any_on>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d0c2      	beq.n	800a024 <__gethex+0x1a8>
 800a09e:	f04f 0903 	mov.w	r9, #3
 800a0a2:	e7c1      	b.n	800a028 <__gethex+0x1ac>
 800a0a4:	da09      	bge.n	800a0ba <__gethex+0x23e>
 800a0a6:	1b75      	subs	r5, r6, r5
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	9801      	ldr	r0, [sp, #4]
 800a0ac:	462a      	mov	r2, r5
 800a0ae:	f7fe fb23 	bl	80086f8 <__lshift>
 800a0b2:	1b7f      	subs	r7, r7, r5
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	f100 0a14 	add.w	sl, r0, #20
 800a0ba:	f04f 0900 	mov.w	r9, #0
 800a0be:	e7b8      	b.n	800a032 <__gethex+0x1b6>
 800a0c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a0c4:	42bd      	cmp	r5, r7
 800a0c6:	dd6f      	ble.n	800a1a8 <__gethex+0x32c>
 800a0c8:	1bed      	subs	r5, r5, r7
 800a0ca:	42ae      	cmp	r6, r5
 800a0cc:	dc34      	bgt.n	800a138 <__gethex+0x2bc>
 800a0ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d022      	beq.n	800a11c <__gethex+0x2a0>
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d024      	beq.n	800a124 <__gethex+0x2a8>
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d115      	bne.n	800a10a <__gethex+0x28e>
 800a0de:	42ae      	cmp	r6, r5
 800a0e0:	d113      	bne.n	800a10a <__gethex+0x28e>
 800a0e2:	2e01      	cmp	r6, #1
 800a0e4:	d10b      	bne.n	800a0fe <__gethex+0x282>
 800a0e6:	9a02      	ldr	r2, [sp, #8]
 800a0e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	f8ca 3000 	str.w	r3, [sl]
 800a0f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0f8:	2562      	movs	r5, #98	@ 0x62
 800a0fa:	601c      	str	r4, [r3, #0]
 800a0fc:	e73a      	b.n	8009f74 <__gethex+0xf8>
 800a0fe:	1e71      	subs	r1, r6, #1
 800a100:	4620      	mov	r0, r4
 800a102:	f7fe fd32 	bl	8008b6a <__any_on>
 800a106:	2800      	cmp	r0, #0
 800a108:	d1ed      	bne.n	800a0e6 <__gethex+0x26a>
 800a10a:	9801      	ldr	r0, [sp, #4]
 800a10c:	4621      	mov	r1, r4
 800a10e:	f7fe f8db 	bl	80082c8 <_Bfree>
 800a112:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a114:	2300      	movs	r3, #0
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	2550      	movs	r5, #80	@ 0x50
 800a11a:	e72b      	b.n	8009f74 <__gethex+0xf8>
 800a11c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1f3      	bne.n	800a10a <__gethex+0x28e>
 800a122:	e7e0      	b.n	800a0e6 <__gethex+0x26a>
 800a124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1dd      	bne.n	800a0e6 <__gethex+0x26a>
 800a12a:	e7ee      	b.n	800a10a <__gethex+0x28e>
 800a12c:	0800b368 	.word	0x0800b368
 800a130:	0800b1fd 	.word	0x0800b1fd
 800a134:	0800b516 	.word	0x0800b516
 800a138:	1e6f      	subs	r7, r5, #1
 800a13a:	f1b9 0f00 	cmp.w	r9, #0
 800a13e:	d130      	bne.n	800a1a2 <__gethex+0x326>
 800a140:	b127      	cbz	r7, 800a14c <__gethex+0x2d0>
 800a142:	4639      	mov	r1, r7
 800a144:	4620      	mov	r0, r4
 800a146:	f7fe fd10 	bl	8008b6a <__any_on>
 800a14a:	4681      	mov	r9, r0
 800a14c:	117a      	asrs	r2, r7, #5
 800a14e:	2301      	movs	r3, #1
 800a150:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a154:	f007 071f 	and.w	r7, r7, #31
 800a158:	40bb      	lsls	r3, r7
 800a15a:	4213      	tst	r3, r2
 800a15c:	4629      	mov	r1, r5
 800a15e:	4620      	mov	r0, r4
 800a160:	bf18      	it	ne
 800a162:	f049 0902 	orrne.w	r9, r9, #2
 800a166:	f7ff fe21 	bl	8009dac <rshift>
 800a16a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a16e:	1b76      	subs	r6, r6, r5
 800a170:	2502      	movs	r5, #2
 800a172:	f1b9 0f00 	cmp.w	r9, #0
 800a176:	d047      	beq.n	800a208 <__gethex+0x38c>
 800a178:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d015      	beq.n	800a1ac <__gethex+0x330>
 800a180:	2b03      	cmp	r3, #3
 800a182:	d017      	beq.n	800a1b4 <__gethex+0x338>
 800a184:	2b01      	cmp	r3, #1
 800a186:	d109      	bne.n	800a19c <__gethex+0x320>
 800a188:	f019 0f02 	tst.w	r9, #2
 800a18c:	d006      	beq.n	800a19c <__gethex+0x320>
 800a18e:	f8da 3000 	ldr.w	r3, [sl]
 800a192:	ea49 0903 	orr.w	r9, r9, r3
 800a196:	f019 0f01 	tst.w	r9, #1
 800a19a:	d10e      	bne.n	800a1ba <__gethex+0x33e>
 800a19c:	f045 0510 	orr.w	r5, r5, #16
 800a1a0:	e032      	b.n	800a208 <__gethex+0x38c>
 800a1a2:	f04f 0901 	mov.w	r9, #1
 800a1a6:	e7d1      	b.n	800a14c <__gethex+0x2d0>
 800a1a8:	2501      	movs	r5, #1
 800a1aa:	e7e2      	b.n	800a172 <__gethex+0x2f6>
 800a1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ae:	f1c3 0301 	rsb	r3, r3, #1
 800a1b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0f0      	beq.n	800a19c <__gethex+0x320>
 800a1ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a1be:	f104 0314 	add.w	r3, r4, #20
 800a1c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a1c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a1ca:	f04f 0c00 	mov.w	ip, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a1d8:	d01b      	beq.n	800a212 <__gethex+0x396>
 800a1da:	3201      	adds	r2, #1
 800a1dc:	6002      	str	r2, [r0, #0]
 800a1de:	2d02      	cmp	r5, #2
 800a1e0:	f104 0314 	add.w	r3, r4, #20
 800a1e4:	d13c      	bne.n	800a260 <__gethex+0x3e4>
 800a1e6:	f8d8 2000 	ldr.w	r2, [r8]
 800a1ea:	3a01      	subs	r2, #1
 800a1ec:	42b2      	cmp	r2, r6
 800a1ee:	d109      	bne.n	800a204 <__gethex+0x388>
 800a1f0:	1171      	asrs	r1, r6, #5
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a1f8:	f006 061f 	and.w	r6, r6, #31
 800a1fc:	fa02 f606 	lsl.w	r6, r2, r6
 800a200:	421e      	tst	r6, r3
 800a202:	d13a      	bne.n	800a27a <__gethex+0x3fe>
 800a204:	f045 0520 	orr.w	r5, r5, #32
 800a208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a20a:	601c      	str	r4, [r3, #0]
 800a20c:	9b02      	ldr	r3, [sp, #8]
 800a20e:	601f      	str	r7, [r3, #0]
 800a210:	e6b0      	b.n	8009f74 <__gethex+0xf8>
 800a212:	4299      	cmp	r1, r3
 800a214:	f843 cc04 	str.w	ip, [r3, #-4]
 800a218:	d8d9      	bhi.n	800a1ce <__gethex+0x352>
 800a21a:	68a3      	ldr	r3, [r4, #8]
 800a21c:	459b      	cmp	fp, r3
 800a21e:	db17      	blt.n	800a250 <__gethex+0x3d4>
 800a220:	6861      	ldr	r1, [r4, #4]
 800a222:	9801      	ldr	r0, [sp, #4]
 800a224:	3101      	adds	r1, #1
 800a226:	f7fe f80f 	bl	8008248 <_Balloc>
 800a22a:	4681      	mov	r9, r0
 800a22c:	b918      	cbnz	r0, 800a236 <__gethex+0x3ba>
 800a22e:	4b1a      	ldr	r3, [pc, #104]	@ (800a298 <__gethex+0x41c>)
 800a230:	4602      	mov	r2, r0
 800a232:	2184      	movs	r1, #132	@ 0x84
 800a234:	e6c5      	b.n	8009fc2 <__gethex+0x146>
 800a236:	6922      	ldr	r2, [r4, #16]
 800a238:	3202      	adds	r2, #2
 800a23a:	f104 010c 	add.w	r1, r4, #12
 800a23e:	0092      	lsls	r2, r2, #2
 800a240:	300c      	adds	r0, #12
 800a242:	f7fd f89e 	bl	8007382 <memcpy>
 800a246:	4621      	mov	r1, r4
 800a248:	9801      	ldr	r0, [sp, #4]
 800a24a:	f7fe f83d 	bl	80082c8 <_Bfree>
 800a24e:	464c      	mov	r4, r9
 800a250:	6923      	ldr	r3, [r4, #16]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a258:	6122      	str	r2, [r4, #16]
 800a25a:	2201      	movs	r2, #1
 800a25c:	615a      	str	r2, [r3, #20]
 800a25e:	e7be      	b.n	800a1de <__gethex+0x362>
 800a260:	6922      	ldr	r2, [r4, #16]
 800a262:	455a      	cmp	r2, fp
 800a264:	dd0b      	ble.n	800a27e <__gethex+0x402>
 800a266:	2101      	movs	r1, #1
 800a268:	4620      	mov	r0, r4
 800a26a:	f7ff fd9f 	bl	8009dac <rshift>
 800a26e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a272:	3701      	adds	r7, #1
 800a274:	42bb      	cmp	r3, r7
 800a276:	f6ff aee0 	blt.w	800a03a <__gethex+0x1be>
 800a27a:	2501      	movs	r5, #1
 800a27c:	e7c2      	b.n	800a204 <__gethex+0x388>
 800a27e:	f016 061f 	ands.w	r6, r6, #31
 800a282:	d0fa      	beq.n	800a27a <__gethex+0x3fe>
 800a284:	4453      	add	r3, sl
 800a286:	f1c6 0620 	rsb	r6, r6, #32
 800a28a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a28e:	f7fe f8cd 	bl	800842c <__hi0bits>
 800a292:	42b0      	cmp	r0, r6
 800a294:	dbe7      	blt.n	800a266 <__gethex+0x3ea>
 800a296:	e7f0      	b.n	800a27a <__gethex+0x3fe>
 800a298:	0800b1fd 	.word	0x0800b1fd

0800a29c <L_shift>:
 800a29c:	f1c2 0208 	rsb	r2, r2, #8
 800a2a0:	0092      	lsls	r2, r2, #2
 800a2a2:	b570      	push	{r4, r5, r6, lr}
 800a2a4:	f1c2 0620 	rsb	r6, r2, #32
 800a2a8:	6843      	ldr	r3, [r0, #4]
 800a2aa:	6804      	ldr	r4, [r0, #0]
 800a2ac:	fa03 f506 	lsl.w	r5, r3, r6
 800a2b0:	432c      	orrs	r4, r5
 800a2b2:	40d3      	lsrs	r3, r2
 800a2b4:	6004      	str	r4, [r0, #0]
 800a2b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a2ba:	4288      	cmp	r0, r1
 800a2bc:	d3f4      	bcc.n	800a2a8 <L_shift+0xc>
 800a2be:	bd70      	pop	{r4, r5, r6, pc}

0800a2c0 <__match>:
 800a2c0:	b530      	push	{r4, r5, lr}
 800a2c2:	6803      	ldr	r3, [r0, #0]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ca:	b914      	cbnz	r4, 800a2d2 <__match+0x12>
 800a2cc:	6003      	str	r3, [r0, #0]
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	bd30      	pop	{r4, r5, pc}
 800a2d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a2da:	2d19      	cmp	r5, #25
 800a2dc:	bf98      	it	ls
 800a2de:	3220      	addls	r2, #32
 800a2e0:	42a2      	cmp	r2, r4
 800a2e2:	d0f0      	beq.n	800a2c6 <__match+0x6>
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	e7f3      	b.n	800a2d0 <__match+0x10>

0800a2e8 <__hexnan>:
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	680b      	ldr	r3, [r1, #0]
 800a2ee:	6801      	ldr	r1, [r0, #0]
 800a2f0:	115e      	asrs	r6, r3, #5
 800a2f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a2f6:	f013 031f 	ands.w	r3, r3, #31
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	bf18      	it	ne
 800a2fe:	3604      	addne	r6, #4
 800a300:	2500      	movs	r5, #0
 800a302:	1f37      	subs	r7, r6, #4
 800a304:	4682      	mov	sl, r0
 800a306:	4690      	mov	r8, r2
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a30e:	46b9      	mov	r9, r7
 800a310:	463c      	mov	r4, r7
 800a312:	9502      	str	r5, [sp, #8]
 800a314:	46ab      	mov	fp, r5
 800a316:	784a      	ldrb	r2, [r1, #1]
 800a318:	1c4b      	adds	r3, r1, #1
 800a31a:	9303      	str	r3, [sp, #12]
 800a31c:	b342      	cbz	r2, 800a370 <__hexnan+0x88>
 800a31e:	4610      	mov	r0, r2
 800a320:	9105      	str	r1, [sp, #20]
 800a322:	9204      	str	r2, [sp, #16]
 800a324:	f7ff fd94 	bl	8009e50 <__hexdig_fun>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d151      	bne.n	800a3d0 <__hexnan+0xe8>
 800a32c:	9a04      	ldr	r2, [sp, #16]
 800a32e:	9905      	ldr	r1, [sp, #20]
 800a330:	2a20      	cmp	r2, #32
 800a332:	d818      	bhi.n	800a366 <__hexnan+0x7e>
 800a334:	9b02      	ldr	r3, [sp, #8]
 800a336:	459b      	cmp	fp, r3
 800a338:	dd13      	ble.n	800a362 <__hexnan+0x7a>
 800a33a:	454c      	cmp	r4, r9
 800a33c:	d206      	bcs.n	800a34c <__hexnan+0x64>
 800a33e:	2d07      	cmp	r5, #7
 800a340:	dc04      	bgt.n	800a34c <__hexnan+0x64>
 800a342:	462a      	mov	r2, r5
 800a344:	4649      	mov	r1, r9
 800a346:	4620      	mov	r0, r4
 800a348:	f7ff ffa8 	bl	800a29c <L_shift>
 800a34c:	4544      	cmp	r4, r8
 800a34e:	d952      	bls.n	800a3f6 <__hexnan+0x10e>
 800a350:	2300      	movs	r3, #0
 800a352:	f1a4 0904 	sub.w	r9, r4, #4
 800a356:	f844 3c04 	str.w	r3, [r4, #-4]
 800a35a:	f8cd b008 	str.w	fp, [sp, #8]
 800a35e:	464c      	mov	r4, r9
 800a360:	461d      	mov	r5, r3
 800a362:	9903      	ldr	r1, [sp, #12]
 800a364:	e7d7      	b.n	800a316 <__hexnan+0x2e>
 800a366:	2a29      	cmp	r2, #41	@ 0x29
 800a368:	d157      	bne.n	800a41a <__hexnan+0x132>
 800a36a:	3102      	adds	r1, #2
 800a36c:	f8ca 1000 	str.w	r1, [sl]
 800a370:	f1bb 0f00 	cmp.w	fp, #0
 800a374:	d051      	beq.n	800a41a <__hexnan+0x132>
 800a376:	454c      	cmp	r4, r9
 800a378:	d206      	bcs.n	800a388 <__hexnan+0xa0>
 800a37a:	2d07      	cmp	r5, #7
 800a37c:	dc04      	bgt.n	800a388 <__hexnan+0xa0>
 800a37e:	462a      	mov	r2, r5
 800a380:	4649      	mov	r1, r9
 800a382:	4620      	mov	r0, r4
 800a384:	f7ff ff8a 	bl	800a29c <L_shift>
 800a388:	4544      	cmp	r4, r8
 800a38a:	d936      	bls.n	800a3fa <__hexnan+0x112>
 800a38c:	f1a8 0204 	sub.w	r2, r8, #4
 800a390:	4623      	mov	r3, r4
 800a392:	f853 1b04 	ldr.w	r1, [r3], #4
 800a396:	f842 1f04 	str.w	r1, [r2, #4]!
 800a39a:	429f      	cmp	r7, r3
 800a39c:	d2f9      	bcs.n	800a392 <__hexnan+0xaa>
 800a39e:	1b3b      	subs	r3, r7, r4
 800a3a0:	f023 0303 	bic.w	r3, r3, #3
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	3401      	adds	r4, #1
 800a3a8:	3e03      	subs	r6, #3
 800a3aa:	42b4      	cmp	r4, r6
 800a3ac:	bf88      	it	hi
 800a3ae:	2304      	movhi	r3, #4
 800a3b0:	4443      	add	r3, r8
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f843 2b04 	str.w	r2, [r3], #4
 800a3b8:	429f      	cmp	r7, r3
 800a3ba:	d2fb      	bcs.n	800a3b4 <__hexnan+0xcc>
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	b91b      	cbnz	r3, 800a3c8 <__hexnan+0xe0>
 800a3c0:	4547      	cmp	r7, r8
 800a3c2:	d128      	bne.n	800a416 <__hexnan+0x12e>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	603b      	str	r3, [r7, #0]
 800a3c8:	2005      	movs	r0, #5
 800a3ca:	b007      	add	sp, #28
 800a3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d0:	3501      	adds	r5, #1
 800a3d2:	2d08      	cmp	r5, #8
 800a3d4:	f10b 0b01 	add.w	fp, fp, #1
 800a3d8:	dd06      	ble.n	800a3e8 <__hexnan+0x100>
 800a3da:	4544      	cmp	r4, r8
 800a3dc:	d9c1      	bls.n	800a362 <__hexnan+0x7a>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3e4:	2501      	movs	r5, #1
 800a3e6:	3c04      	subs	r4, #4
 800a3e8:	6822      	ldr	r2, [r4, #0]
 800a3ea:	f000 000f 	and.w	r0, r0, #15
 800a3ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a3f2:	6020      	str	r0, [r4, #0]
 800a3f4:	e7b5      	b.n	800a362 <__hexnan+0x7a>
 800a3f6:	2508      	movs	r5, #8
 800a3f8:	e7b3      	b.n	800a362 <__hexnan+0x7a>
 800a3fa:	9b01      	ldr	r3, [sp, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d0dd      	beq.n	800a3bc <__hexnan+0xd4>
 800a400:	f1c3 0320 	rsb	r3, r3, #32
 800a404:	f04f 32ff 	mov.w	r2, #4294967295
 800a408:	40da      	lsrs	r2, r3
 800a40a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a40e:	4013      	ands	r3, r2
 800a410:	f846 3c04 	str.w	r3, [r6, #-4]
 800a414:	e7d2      	b.n	800a3bc <__hexnan+0xd4>
 800a416:	3f04      	subs	r7, #4
 800a418:	e7d0      	b.n	800a3bc <__hexnan+0xd4>
 800a41a:	2004      	movs	r0, #4
 800a41c:	e7d5      	b.n	800a3ca <__hexnan+0xe2>

0800a41e <__ascii_mbtowc>:
 800a41e:	b082      	sub	sp, #8
 800a420:	b901      	cbnz	r1, 800a424 <__ascii_mbtowc+0x6>
 800a422:	a901      	add	r1, sp, #4
 800a424:	b142      	cbz	r2, 800a438 <__ascii_mbtowc+0x1a>
 800a426:	b14b      	cbz	r3, 800a43c <__ascii_mbtowc+0x1e>
 800a428:	7813      	ldrb	r3, [r2, #0]
 800a42a:	600b      	str	r3, [r1, #0]
 800a42c:	7812      	ldrb	r2, [r2, #0]
 800a42e:	1e10      	subs	r0, r2, #0
 800a430:	bf18      	it	ne
 800a432:	2001      	movne	r0, #1
 800a434:	b002      	add	sp, #8
 800a436:	4770      	bx	lr
 800a438:	4610      	mov	r0, r2
 800a43a:	e7fb      	b.n	800a434 <__ascii_mbtowc+0x16>
 800a43c:	f06f 0001 	mvn.w	r0, #1
 800a440:	e7f8      	b.n	800a434 <__ascii_mbtowc+0x16>

0800a442 <_realloc_r>:
 800a442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a446:	4680      	mov	r8, r0
 800a448:	4615      	mov	r5, r2
 800a44a:	460c      	mov	r4, r1
 800a44c:	b921      	cbnz	r1, 800a458 <_realloc_r+0x16>
 800a44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a452:	4611      	mov	r1, r2
 800a454:	f7fd be6c 	b.w	8008130 <_malloc_r>
 800a458:	b92a      	cbnz	r2, 800a466 <_realloc_r+0x24>
 800a45a:	f7fd fdf5 	bl	8008048 <_free_r>
 800a45e:	2400      	movs	r4, #0
 800a460:	4620      	mov	r0, r4
 800a462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a466:	f000 f840 	bl	800a4ea <_malloc_usable_size_r>
 800a46a:	4285      	cmp	r5, r0
 800a46c:	4606      	mov	r6, r0
 800a46e:	d802      	bhi.n	800a476 <_realloc_r+0x34>
 800a470:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a474:	d8f4      	bhi.n	800a460 <_realloc_r+0x1e>
 800a476:	4629      	mov	r1, r5
 800a478:	4640      	mov	r0, r8
 800a47a:	f7fd fe59 	bl	8008130 <_malloc_r>
 800a47e:	4607      	mov	r7, r0
 800a480:	2800      	cmp	r0, #0
 800a482:	d0ec      	beq.n	800a45e <_realloc_r+0x1c>
 800a484:	42b5      	cmp	r5, r6
 800a486:	462a      	mov	r2, r5
 800a488:	4621      	mov	r1, r4
 800a48a:	bf28      	it	cs
 800a48c:	4632      	movcs	r2, r6
 800a48e:	f7fc ff78 	bl	8007382 <memcpy>
 800a492:	4621      	mov	r1, r4
 800a494:	4640      	mov	r0, r8
 800a496:	f7fd fdd7 	bl	8008048 <_free_r>
 800a49a:	463c      	mov	r4, r7
 800a49c:	e7e0      	b.n	800a460 <_realloc_r+0x1e>

0800a49e <__ascii_wctomb>:
 800a49e:	4603      	mov	r3, r0
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	b141      	cbz	r1, 800a4b6 <__ascii_wctomb+0x18>
 800a4a4:	2aff      	cmp	r2, #255	@ 0xff
 800a4a6:	d904      	bls.n	800a4b2 <__ascii_wctomb+0x14>
 800a4a8:	228a      	movs	r2, #138	@ 0x8a
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b0:	4770      	bx	lr
 800a4b2:	700a      	strb	r2, [r1, #0]
 800a4b4:	2001      	movs	r0, #1
 800a4b6:	4770      	bx	lr

0800a4b8 <fiprintf>:
 800a4b8:	b40e      	push	{r1, r2, r3}
 800a4ba:	b503      	push	{r0, r1, lr}
 800a4bc:	4601      	mov	r1, r0
 800a4be:	ab03      	add	r3, sp, #12
 800a4c0:	4805      	ldr	r0, [pc, #20]	@ (800a4d8 <fiprintf+0x20>)
 800a4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c6:	6800      	ldr	r0, [r0, #0]
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	f000 f83f 	bl	800a54c <_vfiprintf_r>
 800a4ce:	b002      	add	sp, #8
 800a4d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4d4:	b003      	add	sp, #12
 800a4d6:	4770      	bx	lr
 800a4d8:	20000034 	.word	0x20000034

0800a4dc <abort>:
 800a4dc:	b508      	push	{r3, lr}
 800a4de:	2006      	movs	r0, #6
 800a4e0:	f000 fa08 	bl	800a8f4 <raise>
 800a4e4:	2001      	movs	r0, #1
 800a4e6:	f7f7 ff6f 	bl	80023c8 <_exit>

0800a4ea <_malloc_usable_size_r>:
 800a4ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ee:	1f18      	subs	r0, r3, #4
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	bfbc      	itt	lt
 800a4f4:	580b      	ldrlt	r3, [r1, r0]
 800a4f6:	18c0      	addlt	r0, r0, r3
 800a4f8:	4770      	bx	lr

0800a4fa <__sfputc_r>:
 800a4fa:	6893      	ldr	r3, [r2, #8]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	b410      	push	{r4}
 800a502:	6093      	str	r3, [r2, #8]
 800a504:	da08      	bge.n	800a518 <__sfputc_r+0x1e>
 800a506:	6994      	ldr	r4, [r2, #24]
 800a508:	42a3      	cmp	r3, r4
 800a50a:	db01      	blt.n	800a510 <__sfputc_r+0x16>
 800a50c:	290a      	cmp	r1, #10
 800a50e:	d103      	bne.n	800a518 <__sfputc_r+0x1e>
 800a510:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a514:	f000 b932 	b.w	800a77c <__swbuf_r>
 800a518:	6813      	ldr	r3, [r2, #0]
 800a51a:	1c58      	adds	r0, r3, #1
 800a51c:	6010      	str	r0, [r2, #0]
 800a51e:	7019      	strb	r1, [r3, #0]
 800a520:	4608      	mov	r0, r1
 800a522:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <__sfputs_r>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	4606      	mov	r6, r0
 800a52c:	460f      	mov	r7, r1
 800a52e:	4614      	mov	r4, r2
 800a530:	18d5      	adds	r5, r2, r3
 800a532:	42ac      	cmp	r4, r5
 800a534:	d101      	bne.n	800a53a <__sfputs_r+0x12>
 800a536:	2000      	movs	r0, #0
 800a538:	e007      	b.n	800a54a <__sfputs_r+0x22>
 800a53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53e:	463a      	mov	r2, r7
 800a540:	4630      	mov	r0, r6
 800a542:	f7ff ffda 	bl	800a4fa <__sfputc_r>
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	d1f3      	bne.n	800a532 <__sfputs_r+0xa>
 800a54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a54c <_vfiprintf_r>:
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	460d      	mov	r5, r1
 800a552:	b09d      	sub	sp, #116	@ 0x74
 800a554:	4614      	mov	r4, r2
 800a556:	4698      	mov	r8, r3
 800a558:	4606      	mov	r6, r0
 800a55a:	b118      	cbz	r0, 800a564 <_vfiprintf_r+0x18>
 800a55c:	6a03      	ldr	r3, [r0, #32]
 800a55e:	b90b      	cbnz	r3, 800a564 <_vfiprintf_r+0x18>
 800a560:	f7fc fdf6 	bl	8007150 <__sinit>
 800a564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a566:	07d9      	lsls	r1, r3, #31
 800a568:	d405      	bmi.n	800a576 <_vfiprintf_r+0x2a>
 800a56a:	89ab      	ldrh	r3, [r5, #12]
 800a56c:	059a      	lsls	r2, r3, #22
 800a56e:	d402      	bmi.n	800a576 <_vfiprintf_r+0x2a>
 800a570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a572:	f7fc ff04 	bl	800737e <__retarget_lock_acquire_recursive>
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	071b      	lsls	r3, r3, #28
 800a57a:	d501      	bpl.n	800a580 <_vfiprintf_r+0x34>
 800a57c:	692b      	ldr	r3, [r5, #16]
 800a57e:	b99b      	cbnz	r3, 800a5a8 <_vfiprintf_r+0x5c>
 800a580:	4629      	mov	r1, r5
 800a582:	4630      	mov	r0, r6
 800a584:	f000 f938 	bl	800a7f8 <__swsetup_r>
 800a588:	b170      	cbz	r0, 800a5a8 <_vfiprintf_r+0x5c>
 800a58a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a58c:	07dc      	lsls	r4, r3, #31
 800a58e:	d504      	bpl.n	800a59a <_vfiprintf_r+0x4e>
 800a590:	f04f 30ff 	mov.w	r0, #4294967295
 800a594:	b01d      	add	sp, #116	@ 0x74
 800a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59a:	89ab      	ldrh	r3, [r5, #12]
 800a59c:	0598      	lsls	r0, r3, #22
 800a59e:	d4f7      	bmi.n	800a590 <_vfiprintf_r+0x44>
 800a5a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5a2:	f7fc feed 	bl	8007380 <__retarget_lock_release_recursive>
 800a5a6:	e7f3      	b.n	800a590 <_vfiprintf_r+0x44>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ac:	2320      	movs	r3, #32
 800a5ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5b6:	2330      	movs	r3, #48	@ 0x30
 800a5b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a768 <_vfiprintf_r+0x21c>
 800a5bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5c0:	f04f 0901 	mov.w	r9, #1
 800a5c4:	4623      	mov	r3, r4
 800a5c6:	469a      	mov	sl, r3
 800a5c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5cc:	b10a      	cbz	r2, 800a5d2 <_vfiprintf_r+0x86>
 800a5ce:	2a25      	cmp	r2, #37	@ 0x25
 800a5d0:	d1f9      	bne.n	800a5c6 <_vfiprintf_r+0x7a>
 800a5d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a5d6:	d00b      	beq.n	800a5f0 <_vfiprintf_r+0xa4>
 800a5d8:	465b      	mov	r3, fp
 800a5da:	4622      	mov	r2, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7ff ffa2 	bl	800a528 <__sfputs_r>
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	f000 80a7 	beq.w	800a738 <_vfiprintf_r+0x1ec>
 800a5ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ec:	445a      	add	r2, fp
 800a5ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 809f 	beq.w	800a738 <_vfiprintf_r+0x1ec>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a604:	f10a 0a01 	add.w	sl, sl, #1
 800a608:	9304      	str	r3, [sp, #16]
 800a60a:	9307      	str	r3, [sp, #28]
 800a60c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a610:	931a      	str	r3, [sp, #104]	@ 0x68
 800a612:	4654      	mov	r4, sl
 800a614:	2205      	movs	r2, #5
 800a616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a61a:	4853      	ldr	r0, [pc, #332]	@ (800a768 <_vfiprintf_r+0x21c>)
 800a61c:	f7f5 fdd8 	bl	80001d0 <memchr>
 800a620:	9a04      	ldr	r2, [sp, #16]
 800a622:	b9d8      	cbnz	r0, 800a65c <_vfiprintf_r+0x110>
 800a624:	06d1      	lsls	r1, r2, #27
 800a626:	bf44      	itt	mi
 800a628:	2320      	movmi	r3, #32
 800a62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a62e:	0713      	lsls	r3, r2, #28
 800a630:	bf44      	itt	mi
 800a632:	232b      	movmi	r3, #43	@ 0x2b
 800a634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a638:	f89a 3000 	ldrb.w	r3, [sl]
 800a63c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a63e:	d015      	beq.n	800a66c <_vfiprintf_r+0x120>
 800a640:	9a07      	ldr	r2, [sp, #28]
 800a642:	4654      	mov	r4, sl
 800a644:	2000      	movs	r0, #0
 800a646:	f04f 0c0a 	mov.w	ip, #10
 800a64a:	4621      	mov	r1, r4
 800a64c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a650:	3b30      	subs	r3, #48	@ 0x30
 800a652:	2b09      	cmp	r3, #9
 800a654:	d94b      	bls.n	800a6ee <_vfiprintf_r+0x1a2>
 800a656:	b1b0      	cbz	r0, 800a686 <_vfiprintf_r+0x13a>
 800a658:	9207      	str	r2, [sp, #28]
 800a65a:	e014      	b.n	800a686 <_vfiprintf_r+0x13a>
 800a65c:	eba0 0308 	sub.w	r3, r0, r8
 800a660:	fa09 f303 	lsl.w	r3, r9, r3
 800a664:	4313      	orrs	r3, r2
 800a666:	9304      	str	r3, [sp, #16]
 800a668:	46a2      	mov	sl, r4
 800a66a:	e7d2      	b.n	800a612 <_vfiprintf_r+0xc6>
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	1d19      	adds	r1, r3, #4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	9103      	str	r1, [sp, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	bfbb      	ittet	lt
 800a678:	425b      	neglt	r3, r3
 800a67a:	f042 0202 	orrlt.w	r2, r2, #2
 800a67e:	9307      	strge	r3, [sp, #28]
 800a680:	9307      	strlt	r3, [sp, #28]
 800a682:	bfb8      	it	lt
 800a684:	9204      	strlt	r2, [sp, #16]
 800a686:	7823      	ldrb	r3, [r4, #0]
 800a688:	2b2e      	cmp	r3, #46	@ 0x2e
 800a68a:	d10a      	bne.n	800a6a2 <_vfiprintf_r+0x156>
 800a68c:	7863      	ldrb	r3, [r4, #1]
 800a68e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a690:	d132      	bne.n	800a6f8 <_vfiprintf_r+0x1ac>
 800a692:	9b03      	ldr	r3, [sp, #12]
 800a694:	1d1a      	adds	r2, r3, #4
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	9203      	str	r2, [sp, #12]
 800a69a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a69e:	3402      	adds	r4, #2
 800a6a0:	9305      	str	r3, [sp, #20]
 800a6a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a778 <_vfiprintf_r+0x22c>
 800a6a6:	7821      	ldrb	r1, [r4, #0]
 800a6a8:	2203      	movs	r2, #3
 800a6aa:	4650      	mov	r0, sl
 800a6ac:	f7f5 fd90 	bl	80001d0 <memchr>
 800a6b0:	b138      	cbz	r0, 800a6c2 <_vfiprintf_r+0x176>
 800a6b2:	9b04      	ldr	r3, [sp, #16]
 800a6b4:	eba0 000a 	sub.w	r0, r0, sl
 800a6b8:	2240      	movs	r2, #64	@ 0x40
 800a6ba:	4082      	lsls	r2, r0
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	3401      	adds	r4, #1
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c6:	4829      	ldr	r0, [pc, #164]	@ (800a76c <_vfiprintf_r+0x220>)
 800a6c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6cc:	2206      	movs	r2, #6
 800a6ce:	f7f5 fd7f 	bl	80001d0 <memchr>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d03f      	beq.n	800a756 <_vfiprintf_r+0x20a>
 800a6d6:	4b26      	ldr	r3, [pc, #152]	@ (800a770 <_vfiprintf_r+0x224>)
 800a6d8:	bb1b      	cbnz	r3, 800a722 <_vfiprintf_r+0x1d6>
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	3307      	adds	r3, #7
 800a6de:	f023 0307 	bic.w	r3, r3, #7
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	9303      	str	r3, [sp, #12]
 800a6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6e8:	443b      	add	r3, r7
 800a6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ec:	e76a      	b.n	800a5c4 <_vfiprintf_r+0x78>
 800a6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	2001      	movs	r0, #1
 800a6f6:	e7a8      	b.n	800a64a <_vfiprintf_r+0xfe>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	3401      	adds	r4, #1
 800a6fc:	9305      	str	r3, [sp, #20]
 800a6fe:	4619      	mov	r1, r3
 800a700:	f04f 0c0a 	mov.w	ip, #10
 800a704:	4620      	mov	r0, r4
 800a706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a70a:	3a30      	subs	r2, #48	@ 0x30
 800a70c:	2a09      	cmp	r2, #9
 800a70e:	d903      	bls.n	800a718 <_vfiprintf_r+0x1cc>
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0c6      	beq.n	800a6a2 <_vfiprintf_r+0x156>
 800a714:	9105      	str	r1, [sp, #20]
 800a716:	e7c4      	b.n	800a6a2 <_vfiprintf_r+0x156>
 800a718:	fb0c 2101 	mla	r1, ip, r1, r2
 800a71c:	4604      	mov	r4, r0
 800a71e:	2301      	movs	r3, #1
 800a720:	e7f0      	b.n	800a704 <_vfiprintf_r+0x1b8>
 800a722:	ab03      	add	r3, sp, #12
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	462a      	mov	r2, r5
 800a728:	4b12      	ldr	r3, [pc, #72]	@ (800a774 <_vfiprintf_r+0x228>)
 800a72a:	a904      	add	r1, sp, #16
 800a72c:	4630      	mov	r0, r6
 800a72e:	f7fb feb7 	bl	80064a0 <_printf_float>
 800a732:	4607      	mov	r7, r0
 800a734:	1c78      	adds	r0, r7, #1
 800a736:	d1d6      	bne.n	800a6e6 <_vfiprintf_r+0x19a>
 800a738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a73a:	07d9      	lsls	r1, r3, #31
 800a73c:	d405      	bmi.n	800a74a <_vfiprintf_r+0x1fe>
 800a73e:	89ab      	ldrh	r3, [r5, #12]
 800a740:	059a      	lsls	r2, r3, #22
 800a742:	d402      	bmi.n	800a74a <_vfiprintf_r+0x1fe>
 800a744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a746:	f7fc fe1b 	bl	8007380 <__retarget_lock_release_recursive>
 800a74a:	89ab      	ldrh	r3, [r5, #12]
 800a74c:	065b      	lsls	r3, r3, #25
 800a74e:	f53f af1f 	bmi.w	800a590 <_vfiprintf_r+0x44>
 800a752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a754:	e71e      	b.n	800a594 <_vfiprintf_r+0x48>
 800a756:	ab03      	add	r3, sp, #12
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	462a      	mov	r2, r5
 800a75c:	4b05      	ldr	r3, [pc, #20]	@ (800a774 <_vfiprintf_r+0x228>)
 800a75e:	a904      	add	r1, sp, #16
 800a760:	4630      	mov	r0, r6
 800a762:	f7fc f935 	bl	80069d0 <_printf_i>
 800a766:	e7e4      	b.n	800a732 <_vfiprintf_r+0x1e6>
 800a768:	0800b4c1 	.word	0x0800b4c1
 800a76c:	0800b4cb 	.word	0x0800b4cb
 800a770:	080064a1 	.word	0x080064a1
 800a774:	0800a529 	.word	0x0800a529
 800a778:	0800b4c7 	.word	0x0800b4c7

0800a77c <__swbuf_r>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	460e      	mov	r6, r1
 800a780:	4614      	mov	r4, r2
 800a782:	4605      	mov	r5, r0
 800a784:	b118      	cbz	r0, 800a78e <__swbuf_r+0x12>
 800a786:	6a03      	ldr	r3, [r0, #32]
 800a788:	b90b      	cbnz	r3, 800a78e <__swbuf_r+0x12>
 800a78a:	f7fc fce1 	bl	8007150 <__sinit>
 800a78e:	69a3      	ldr	r3, [r4, #24]
 800a790:	60a3      	str	r3, [r4, #8]
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	071a      	lsls	r2, r3, #28
 800a796:	d501      	bpl.n	800a79c <__swbuf_r+0x20>
 800a798:	6923      	ldr	r3, [r4, #16]
 800a79a:	b943      	cbnz	r3, 800a7ae <__swbuf_r+0x32>
 800a79c:	4621      	mov	r1, r4
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 f82a 	bl	800a7f8 <__swsetup_r>
 800a7a4:	b118      	cbz	r0, 800a7ae <__swbuf_r+0x32>
 800a7a6:	f04f 37ff 	mov.w	r7, #4294967295
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	6922      	ldr	r2, [r4, #16]
 800a7b2:	1a98      	subs	r0, r3, r2
 800a7b4:	6963      	ldr	r3, [r4, #20]
 800a7b6:	b2f6      	uxtb	r6, r6
 800a7b8:	4283      	cmp	r3, r0
 800a7ba:	4637      	mov	r7, r6
 800a7bc:	dc05      	bgt.n	800a7ca <__swbuf_r+0x4e>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f7ff fa53 	bl	8009c6c <_fflush_r>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d1ed      	bne.n	800a7a6 <__swbuf_r+0x2a>
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	60a3      	str	r3, [r4, #8]
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	6022      	str	r2, [r4, #0]
 800a7d6:	701e      	strb	r6, [r3, #0]
 800a7d8:	6962      	ldr	r2, [r4, #20]
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d004      	beq.n	800a7ea <__swbuf_r+0x6e>
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	07db      	lsls	r3, r3, #31
 800a7e4:	d5e1      	bpl.n	800a7aa <__swbuf_r+0x2e>
 800a7e6:	2e0a      	cmp	r6, #10
 800a7e8:	d1df      	bne.n	800a7aa <__swbuf_r+0x2e>
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f7ff fa3d 	bl	8009c6c <_fflush_r>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d0d9      	beq.n	800a7aa <__swbuf_r+0x2e>
 800a7f6:	e7d6      	b.n	800a7a6 <__swbuf_r+0x2a>

0800a7f8 <__swsetup_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4b29      	ldr	r3, [pc, #164]	@ (800a8a0 <__swsetup_r+0xa8>)
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	6818      	ldr	r0, [r3, #0]
 800a800:	460c      	mov	r4, r1
 800a802:	b118      	cbz	r0, 800a80c <__swsetup_r+0x14>
 800a804:	6a03      	ldr	r3, [r0, #32]
 800a806:	b90b      	cbnz	r3, 800a80c <__swsetup_r+0x14>
 800a808:	f7fc fca2 	bl	8007150 <__sinit>
 800a80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a810:	0719      	lsls	r1, r3, #28
 800a812:	d422      	bmi.n	800a85a <__swsetup_r+0x62>
 800a814:	06da      	lsls	r2, r3, #27
 800a816:	d407      	bmi.n	800a828 <__swsetup_r+0x30>
 800a818:	2209      	movs	r2, #9
 800a81a:	602a      	str	r2, [r5, #0]
 800a81c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	f04f 30ff 	mov.w	r0, #4294967295
 800a826:	e033      	b.n	800a890 <__swsetup_r+0x98>
 800a828:	0758      	lsls	r0, r3, #29
 800a82a:	d512      	bpl.n	800a852 <__swsetup_r+0x5a>
 800a82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a82e:	b141      	cbz	r1, 800a842 <__swsetup_r+0x4a>
 800a830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a834:	4299      	cmp	r1, r3
 800a836:	d002      	beq.n	800a83e <__swsetup_r+0x46>
 800a838:	4628      	mov	r0, r5
 800a83a:	f7fd fc05 	bl	8008048 <_free_r>
 800a83e:	2300      	movs	r3, #0
 800a840:	6363      	str	r3, [r4, #52]	@ 0x34
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a848:	81a3      	strh	r3, [r4, #12]
 800a84a:	2300      	movs	r3, #0
 800a84c:	6063      	str	r3, [r4, #4]
 800a84e:	6923      	ldr	r3, [r4, #16]
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	f043 0308 	orr.w	r3, r3, #8
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	b94b      	cbnz	r3, 800a872 <__swsetup_r+0x7a>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a868:	d003      	beq.n	800a872 <__swsetup_r+0x7a>
 800a86a:	4621      	mov	r1, r4
 800a86c:	4628      	mov	r0, r5
 800a86e:	f000 f883 	bl	800a978 <__smakebuf_r>
 800a872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a876:	f013 0201 	ands.w	r2, r3, #1
 800a87a:	d00a      	beq.n	800a892 <__swsetup_r+0x9a>
 800a87c:	2200      	movs	r2, #0
 800a87e:	60a2      	str	r2, [r4, #8]
 800a880:	6962      	ldr	r2, [r4, #20]
 800a882:	4252      	negs	r2, r2
 800a884:	61a2      	str	r2, [r4, #24]
 800a886:	6922      	ldr	r2, [r4, #16]
 800a888:	b942      	cbnz	r2, 800a89c <__swsetup_r+0xa4>
 800a88a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a88e:	d1c5      	bne.n	800a81c <__swsetup_r+0x24>
 800a890:	bd38      	pop	{r3, r4, r5, pc}
 800a892:	0799      	lsls	r1, r3, #30
 800a894:	bf58      	it	pl
 800a896:	6962      	ldrpl	r2, [r4, #20]
 800a898:	60a2      	str	r2, [r4, #8]
 800a89a:	e7f4      	b.n	800a886 <__swsetup_r+0x8e>
 800a89c:	2000      	movs	r0, #0
 800a89e:	e7f7      	b.n	800a890 <__swsetup_r+0x98>
 800a8a0:	20000034 	.word	0x20000034

0800a8a4 <_raise_r>:
 800a8a4:	291f      	cmp	r1, #31
 800a8a6:	b538      	push	{r3, r4, r5, lr}
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	d904      	bls.n	800a8b8 <_raise_r+0x14>
 800a8ae:	2316      	movs	r3, #22
 800a8b0:	6003      	str	r3, [r0, #0]
 800a8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a8ba:	b112      	cbz	r2, 800a8c2 <_raise_r+0x1e>
 800a8bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8c0:	b94b      	cbnz	r3, 800a8d6 <_raise_r+0x32>
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f000 f830 	bl	800a928 <_getpid_r>
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8d2:	f000 b817 	b.w	800a904 <_kill_r>
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d00a      	beq.n	800a8f0 <_raise_r+0x4c>
 800a8da:	1c59      	adds	r1, r3, #1
 800a8dc:	d103      	bne.n	800a8e6 <_raise_r+0x42>
 800a8de:	2316      	movs	r3, #22
 800a8e0:	6003      	str	r3, [r0, #0]
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	e7e7      	b.n	800a8b6 <_raise_r+0x12>
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	4798      	blx	r3
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	e7e0      	b.n	800a8b6 <_raise_r+0x12>

0800a8f4 <raise>:
 800a8f4:	4b02      	ldr	r3, [pc, #8]	@ (800a900 <raise+0xc>)
 800a8f6:	4601      	mov	r1, r0
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	f7ff bfd3 	b.w	800a8a4 <_raise_r>
 800a8fe:	bf00      	nop
 800a900:	20000034 	.word	0x20000034

0800a904 <_kill_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	4d07      	ldr	r5, [pc, #28]	@ (800a924 <_kill_r+0x20>)
 800a908:	2300      	movs	r3, #0
 800a90a:	4604      	mov	r4, r0
 800a90c:	4608      	mov	r0, r1
 800a90e:	4611      	mov	r1, r2
 800a910:	602b      	str	r3, [r5, #0]
 800a912:	f7f7 fd49 	bl	80023a8 <_kill>
 800a916:	1c43      	adds	r3, r0, #1
 800a918:	d102      	bne.n	800a920 <_kill_r+0x1c>
 800a91a:	682b      	ldr	r3, [r5, #0]
 800a91c:	b103      	cbz	r3, 800a920 <_kill_r+0x1c>
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	bd38      	pop	{r3, r4, r5, pc}
 800a922:	bf00      	nop
 800a924:	200005e0 	.word	0x200005e0

0800a928 <_getpid_r>:
 800a928:	f7f7 bd36 	b.w	8002398 <_getpid>

0800a92c <__swhatbuf_r>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	460c      	mov	r4, r1
 800a930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a934:	2900      	cmp	r1, #0
 800a936:	b096      	sub	sp, #88	@ 0x58
 800a938:	4615      	mov	r5, r2
 800a93a:	461e      	mov	r6, r3
 800a93c:	da0d      	bge.n	800a95a <__swhatbuf_r+0x2e>
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a944:	f04f 0100 	mov.w	r1, #0
 800a948:	bf14      	ite	ne
 800a94a:	2340      	movne	r3, #64	@ 0x40
 800a94c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a950:	2000      	movs	r0, #0
 800a952:	6031      	str	r1, [r6, #0]
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	b016      	add	sp, #88	@ 0x58
 800a958:	bd70      	pop	{r4, r5, r6, pc}
 800a95a:	466a      	mov	r2, sp
 800a95c:	f000 f848 	bl	800a9f0 <_fstat_r>
 800a960:	2800      	cmp	r0, #0
 800a962:	dbec      	blt.n	800a93e <__swhatbuf_r+0x12>
 800a964:	9901      	ldr	r1, [sp, #4]
 800a966:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a96a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a96e:	4259      	negs	r1, r3
 800a970:	4159      	adcs	r1, r3
 800a972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a976:	e7eb      	b.n	800a950 <__swhatbuf_r+0x24>

0800a978 <__smakebuf_r>:
 800a978:	898b      	ldrh	r3, [r1, #12]
 800a97a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a97c:	079d      	lsls	r5, r3, #30
 800a97e:	4606      	mov	r6, r0
 800a980:	460c      	mov	r4, r1
 800a982:	d507      	bpl.n	800a994 <__smakebuf_r+0x1c>
 800a984:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	6123      	str	r3, [r4, #16]
 800a98c:	2301      	movs	r3, #1
 800a98e:	6163      	str	r3, [r4, #20]
 800a990:	b003      	add	sp, #12
 800a992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a994:	ab01      	add	r3, sp, #4
 800a996:	466a      	mov	r2, sp
 800a998:	f7ff ffc8 	bl	800a92c <__swhatbuf_r>
 800a99c:	9f00      	ldr	r7, [sp, #0]
 800a99e:	4605      	mov	r5, r0
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7fd fbc4 	bl	8008130 <_malloc_r>
 800a9a8:	b948      	cbnz	r0, 800a9be <__smakebuf_r+0x46>
 800a9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ae:	059a      	lsls	r2, r3, #22
 800a9b0:	d4ee      	bmi.n	800a990 <__smakebuf_r+0x18>
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	f043 0302 	orr.w	r3, r3, #2
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	e7e2      	b.n	800a984 <__smakebuf_r+0xc>
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	6020      	str	r0, [r4, #0]
 800a9c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9c6:	81a3      	strh	r3, [r4, #12]
 800a9c8:	9b01      	ldr	r3, [sp, #4]
 800a9ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a9ce:	b15b      	cbz	r3, 800a9e8 <__smakebuf_r+0x70>
 800a9d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	f000 f81d 	bl	800aa14 <_isatty_r>
 800a9da:	b128      	cbz	r0, 800a9e8 <__smakebuf_r+0x70>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	f023 0303 	bic.w	r3, r3, #3
 800a9e2:	f043 0301 	orr.w	r3, r3, #1
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	431d      	orrs	r5, r3
 800a9ec:	81a5      	strh	r5, [r4, #12]
 800a9ee:	e7cf      	b.n	800a990 <__smakebuf_r+0x18>

0800a9f0 <_fstat_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4d07      	ldr	r5, [pc, #28]	@ (800aa10 <_fstat_r+0x20>)
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	4608      	mov	r0, r1
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	602b      	str	r3, [r5, #0]
 800a9fe:	f7f7 fd33 	bl	8002468 <_fstat>
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	d102      	bne.n	800aa0c <_fstat_r+0x1c>
 800aa06:	682b      	ldr	r3, [r5, #0]
 800aa08:	b103      	cbz	r3, 800aa0c <_fstat_r+0x1c>
 800aa0a:	6023      	str	r3, [r4, #0]
 800aa0c:	bd38      	pop	{r3, r4, r5, pc}
 800aa0e:	bf00      	nop
 800aa10:	200005e0 	.word	0x200005e0

0800aa14 <_isatty_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4d06      	ldr	r5, [pc, #24]	@ (800aa30 <_isatty_r+0x1c>)
 800aa18:	2300      	movs	r3, #0
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	4608      	mov	r0, r1
 800aa1e:	602b      	str	r3, [r5, #0]
 800aa20:	f7f7 fd32 	bl	8002488 <_isatty>
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	d102      	bne.n	800aa2e <_isatty_r+0x1a>
 800aa28:	682b      	ldr	r3, [r5, #0]
 800aa2a:	b103      	cbz	r3, 800aa2e <_isatty_r+0x1a>
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	bd38      	pop	{r3, r4, r5, pc}
 800aa30:	200005e0 	.word	0x200005e0

0800aa34 <atan2>:
 800aa34:	f000 b908 	b.w	800ac48 <__ieee754_atan2>

0800aa38 <sqrt>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	ed2d 8b02 	vpush	{d8}
 800aa3e:	ec55 4b10 	vmov	r4, r5, d0
 800aa42:	f000 f825 	bl	800aa90 <__ieee754_sqrt>
 800aa46:	4622      	mov	r2, r4
 800aa48:	462b      	mov	r3, r5
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	eeb0 8a40 	vmov.f32	s16, s0
 800aa52:	eef0 8a60 	vmov.f32	s17, s1
 800aa56:	f7f6 f869 	bl	8000b2c <__aeabi_dcmpun>
 800aa5a:	b990      	cbnz	r0, 800aa82 <sqrt+0x4a>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4620      	mov	r0, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7f6 f83a 	bl	8000adc <__aeabi_dcmplt>
 800aa68:	b158      	cbz	r0, 800aa82 <sqrt+0x4a>
 800aa6a:	f7fc fc5d 	bl	8007328 <__errno>
 800aa6e:	2321      	movs	r3, #33	@ 0x21
 800aa70:	6003      	str	r3, [r0, #0]
 800aa72:	2200      	movs	r2, #0
 800aa74:	2300      	movs	r3, #0
 800aa76:	4610      	mov	r0, r2
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f7f5 fee7 	bl	800084c <__aeabi_ddiv>
 800aa7e:	ec41 0b18 	vmov	d8, r0, r1
 800aa82:	eeb0 0a48 	vmov.f32	s0, s16
 800aa86:	eef0 0a68 	vmov.f32	s1, s17
 800aa8a:	ecbd 8b02 	vpop	{d8}
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}

0800aa90 <__ieee754_sqrt>:
 800aa90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	4a68      	ldr	r2, [pc, #416]	@ (800ac38 <__ieee754_sqrt+0x1a8>)
 800aa96:	ec55 4b10 	vmov	r4, r5, d0
 800aa9a:	43aa      	bics	r2, r5
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	d110      	bne.n	800aac4 <__ieee754_sqrt+0x34>
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	f7f5 fda6 	bl	80005f8 <__aeabi_dmul>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4620      	mov	r0, r4
 800aab2:	4629      	mov	r1, r5
 800aab4:	f7f5 fbea 	bl	800028c <__adddf3>
 800aab8:	4604      	mov	r4, r0
 800aaba:	460d      	mov	r5, r1
 800aabc:	ec45 4b10 	vmov	d0, r4, r5
 800aac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac4:	2d00      	cmp	r5, #0
 800aac6:	dc0e      	bgt.n	800aae6 <__ieee754_sqrt+0x56>
 800aac8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800aacc:	4322      	orrs	r2, r4
 800aace:	d0f5      	beq.n	800aabc <__ieee754_sqrt+0x2c>
 800aad0:	b19d      	cbz	r5, 800aafa <__ieee754_sqrt+0x6a>
 800aad2:	4622      	mov	r2, r4
 800aad4:	4620      	mov	r0, r4
 800aad6:	4629      	mov	r1, r5
 800aad8:	f7f5 fbd6 	bl	8000288 <__aeabi_dsub>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	f7f5 feb4 	bl	800084c <__aeabi_ddiv>
 800aae4:	e7e8      	b.n	800aab8 <__ieee754_sqrt+0x28>
 800aae6:	152a      	asrs	r2, r5, #20
 800aae8:	d115      	bne.n	800ab16 <__ieee754_sqrt+0x86>
 800aaea:	2000      	movs	r0, #0
 800aaec:	e009      	b.n	800ab02 <__ieee754_sqrt+0x72>
 800aaee:	0acb      	lsrs	r3, r1, #11
 800aaf0:	3a15      	subs	r2, #21
 800aaf2:	0549      	lsls	r1, r1, #21
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0fa      	beq.n	800aaee <__ieee754_sqrt+0x5e>
 800aaf8:	e7f7      	b.n	800aaea <__ieee754_sqrt+0x5a>
 800aafa:	462a      	mov	r2, r5
 800aafc:	e7fa      	b.n	800aaf4 <__ieee754_sqrt+0x64>
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	3001      	adds	r0, #1
 800ab02:	02dc      	lsls	r4, r3, #11
 800ab04:	d5fb      	bpl.n	800aafe <__ieee754_sqrt+0x6e>
 800ab06:	1e44      	subs	r4, r0, #1
 800ab08:	1b12      	subs	r2, r2, r4
 800ab0a:	f1c0 0420 	rsb	r4, r0, #32
 800ab0e:	fa21 f404 	lsr.w	r4, r1, r4
 800ab12:	4323      	orrs	r3, r4
 800ab14:	4081      	lsls	r1, r0
 800ab16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab1a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ab1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab22:	07d2      	lsls	r2, r2, #31
 800ab24:	bf5c      	itt	pl
 800ab26:	005b      	lslpl	r3, r3, #1
 800ab28:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ab2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab30:	bf58      	it	pl
 800ab32:	0049      	lslpl	r1, r1, #1
 800ab34:	2600      	movs	r6, #0
 800ab36:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ab3a:	106d      	asrs	r5, r5, #1
 800ab3c:	0049      	lsls	r1, r1, #1
 800ab3e:	2016      	movs	r0, #22
 800ab40:	4632      	mov	r2, r6
 800ab42:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ab46:	1917      	adds	r7, r2, r4
 800ab48:	429f      	cmp	r7, r3
 800ab4a:	bfde      	ittt	le
 800ab4c:	193a      	addle	r2, r7, r4
 800ab4e:	1bdb      	suble	r3, r3, r7
 800ab50:	1936      	addle	r6, r6, r4
 800ab52:	0fcf      	lsrs	r7, r1, #31
 800ab54:	3801      	subs	r0, #1
 800ab56:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ab5a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ab62:	d1f0      	bne.n	800ab46 <__ieee754_sqrt+0xb6>
 800ab64:	4604      	mov	r4, r0
 800ab66:	2720      	movs	r7, #32
 800ab68:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	eb00 0e0c 	add.w	lr, r0, ip
 800ab72:	db02      	blt.n	800ab7a <__ieee754_sqrt+0xea>
 800ab74:	d113      	bne.n	800ab9e <__ieee754_sqrt+0x10e>
 800ab76:	458e      	cmp	lr, r1
 800ab78:	d811      	bhi.n	800ab9e <__ieee754_sqrt+0x10e>
 800ab7a:	f1be 0f00 	cmp.w	lr, #0
 800ab7e:	eb0e 000c 	add.w	r0, lr, ip
 800ab82:	da42      	bge.n	800ac0a <__ieee754_sqrt+0x17a>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	db40      	blt.n	800ac0a <__ieee754_sqrt+0x17a>
 800ab88:	f102 0801 	add.w	r8, r2, #1
 800ab8c:	1a9b      	subs	r3, r3, r2
 800ab8e:	458e      	cmp	lr, r1
 800ab90:	bf88      	it	hi
 800ab92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ab96:	eba1 010e 	sub.w	r1, r1, lr
 800ab9a:	4464      	add	r4, ip
 800ab9c:	4642      	mov	r2, r8
 800ab9e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800aba2:	3f01      	subs	r7, #1
 800aba4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800aba8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800abac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800abb0:	d1dc      	bne.n	800ab6c <__ieee754_sqrt+0xdc>
 800abb2:	4319      	orrs	r1, r3
 800abb4:	d01b      	beq.n	800abee <__ieee754_sqrt+0x15e>
 800abb6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ac3c <__ieee754_sqrt+0x1ac>
 800abba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ac40 <__ieee754_sqrt+0x1b0>
 800abbe:	e9da 0100 	ldrd	r0, r1, [sl]
 800abc2:	e9db 2300 	ldrd	r2, r3, [fp]
 800abc6:	f7f5 fb5f 	bl	8000288 <__aeabi_dsub>
 800abca:	e9da 8900 	ldrd	r8, r9, [sl]
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4640      	mov	r0, r8
 800abd4:	4649      	mov	r1, r9
 800abd6:	f7f5 ff8b 	bl	8000af0 <__aeabi_dcmple>
 800abda:	b140      	cbz	r0, 800abee <__ieee754_sqrt+0x15e>
 800abdc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800abe0:	e9da 0100 	ldrd	r0, r1, [sl]
 800abe4:	e9db 2300 	ldrd	r2, r3, [fp]
 800abe8:	d111      	bne.n	800ac0e <__ieee754_sqrt+0x17e>
 800abea:	3601      	adds	r6, #1
 800abec:	463c      	mov	r4, r7
 800abee:	1072      	asrs	r2, r6, #1
 800abf0:	0863      	lsrs	r3, r4, #1
 800abf2:	07f1      	lsls	r1, r6, #31
 800abf4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800abf8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800abfc:	bf48      	it	mi
 800abfe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ac02:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ac06:	4618      	mov	r0, r3
 800ac08:	e756      	b.n	800aab8 <__ieee754_sqrt+0x28>
 800ac0a:	4690      	mov	r8, r2
 800ac0c:	e7be      	b.n	800ab8c <__ieee754_sqrt+0xfc>
 800ac0e:	f7f5 fb3d 	bl	800028c <__adddf3>
 800ac12:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	4640      	mov	r0, r8
 800ac1c:	4649      	mov	r1, r9
 800ac1e:	f7f5 ff5d 	bl	8000adc <__aeabi_dcmplt>
 800ac22:	b120      	cbz	r0, 800ac2e <__ieee754_sqrt+0x19e>
 800ac24:	1ca0      	adds	r0, r4, #2
 800ac26:	bf08      	it	eq
 800ac28:	3601      	addeq	r6, #1
 800ac2a:	3402      	adds	r4, #2
 800ac2c:	e7df      	b.n	800abee <__ieee754_sqrt+0x15e>
 800ac2e:	1c63      	adds	r3, r4, #1
 800ac30:	f023 0401 	bic.w	r4, r3, #1
 800ac34:	e7db      	b.n	800abee <__ieee754_sqrt+0x15e>
 800ac36:	bf00      	nop
 800ac38:	7ff00000 	.word	0x7ff00000
 800ac3c:	200001f8 	.word	0x200001f8
 800ac40:	200001f0 	.word	0x200001f0
 800ac44:	00000000 	.word	0x00000000

0800ac48 <__ieee754_atan2>:
 800ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac4c:	ec57 6b11 	vmov	r6, r7, d1
 800ac50:	4273      	negs	r3, r6
 800ac52:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800add0 <__ieee754_atan2+0x188>
 800ac56:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ac5a:	4333      	orrs	r3, r6
 800ac5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ac60:	4543      	cmp	r3, r8
 800ac62:	ec51 0b10 	vmov	r0, r1, d0
 800ac66:	4635      	mov	r5, r6
 800ac68:	d809      	bhi.n	800ac7e <__ieee754_atan2+0x36>
 800ac6a:	4244      	negs	r4, r0
 800ac6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac70:	4304      	orrs	r4, r0
 800ac72:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ac76:	4544      	cmp	r4, r8
 800ac78:	468e      	mov	lr, r1
 800ac7a:	4681      	mov	r9, r0
 800ac7c:	d907      	bls.n	800ac8e <__ieee754_atan2+0x46>
 800ac7e:	4632      	mov	r2, r6
 800ac80:	463b      	mov	r3, r7
 800ac82:	f7f5 fb03 	bl	800028c <__adddf3>
 800ac86:	ec41 0b10 	vmov	d0, r0, r1
 800ac8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ac92:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ac96:	4334      	orrs	r4, r6
 800ac98:	d103      	bne.n	800aca2 <__ieee754_atan2+0x5a>
 800ac9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac9e:	f000 b89b 	b.w	800add8 <atan>
 800aca2:	17bc      	asrs	r4, r7, #30
 800aca4:	f004 0402 	and.w	r4, r4, #2
 800aca8:	ea53 0909 	orrs.w	r9, r3, r9
 800acac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800acb0:	d107      	bne.n	800acc2 <__ieee754_atan2+0x7a>
 800acb2:	2c02      	cmp	r4, #2
 800acb4:	d05f      	beq.n	800ad76 <__ieee754_atan2+0x12e>
 800acb6:	2c03      	cmp	r4, #3
 800acb8:	d1e5      	bne.n	800ac86 <__ieee754_atan2+0x3e>
 800acba:	a141      	add	r1, pc, #260	@ (adr r1, 800adc0 <__ieee754_atan2+0x178>)
 800acbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acc0:	e7e1      	b.n	800ac86 <__ieee754_atan2+0x3e>
 800acc2:	4315      	orrs	r5, r2
 800acc4:	d106      	bne.n	800acd4 <__ieee754_atan2+0x8c>
 800acc6:	f1be 0f00 	cmp.w	lr, #0
 800acca:	da5f      	bge.n	800ad8c <__ieee754_atan2+0x144>
 800accc:	a13e      	add	r1, pc, #248	@ (adr r1, 800adc8 <__ieee754_atan2+0x180>)
 800acce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd2:	e7d8      	b.n	800ac86 <__ieee754_atan2+0x3e>
 800acd4:	4542      	cmp	r2, r8
 800acd6:	d10f      	bne.n	800acf8 <__ieee754_atan2+0xb0>
 800acd8:	4293      	cmp	r3, r2
 800acda:	f104 34ff 	add.w	r4, r4, #4294967295
 800acde:	d107      	bne.n	800acf0 <__ieee754_atan2+0xa8>
 800ace0:	2c02      	cmp	r4, #2
 800ace2:	d84c      	bhi.n	800ad7e <__ieee754_atan2+0x136>
 800ace4:	4b34      	ldr	r3, [pc, #208]	@ (800adb8 <__ieee754_atan2+0x170>)
 800ace6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acee:	e7ca      	b.n	800ac86 <__ieee754_atan2+0x3e>
 800acf0:	2c02      	cmp	r4, #2
 800acf2:	d848      	bhi.n	800ad86 <__ieee754_atan2+0x13e>
 800acf4:	4b31      	ldr	r3, [pc, #196]	@ (800adbc <__ieee754_atan2+0x174>)
 800acf6:	e7f6      	b.n	800ace6 <__ieee754_atan2+0x9e>
 800acf8:	4543      	cmp	r3, r8
 800acfa:	d0e4      	beq.n	800acc6 <__ieee754_atan2+0x7e>
 800acfc:	1a9b      	subs	r3, r3, r2
 800acfe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ad02:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad06:	da1e      	bge.n	800ad46 <__ieee754_atan2+0xfe>
 800ad08:	2f00      	cmp	r7, #0
 800ad0a:	da01      	bge.n	800ad10 <__ieee754_atan2+0xc8>
 800ad0c:	323c      	adds	r2, #60	@ 0x3c
 800ad0e:	db1e      	blt.n	800ad4e <__ieee754_atan2+0x106>
 800ad10:	4632      	mov	r2, r6
 800ad12:	463b      	mov	r3, r7
 800ad14:	f7f5 fd9a 	bl	800084c <__aeabi_ddiv>
 800ad18:	ec41 0b10 	vmov	d0, r0, r1
 800ad1c:	f000 f9f4 	bl	800b108 <fabs>
 800ad20:	f000 f85a 	bl	800add8 <atan>
 800ad24:	ec51 0b10 	vmov	r0, r1, d0
 800ad28:	2c01      	cmp	r4, #1
 800ad2a:	d013      	beq.n	800ad54 <__ieee754_atan2+0x10c>
 800ad2c:	2c02      	cmp	r4, #2
 800ad2e:	d015      	beq.n	800ad5c <__ieee754_atan2+0x114>
 800ad30:	2c00      	cmp	r4, #0
 800ad32:	d0a8      	beq.n	800ac86 <__ieee754_atan2+0x3e>
 800ad34:	a318      	add	r3, pc, #96	@ (adr r3, 800ad98 <__ieee754_atan2+0x150>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	f7f5 faa5 	bl	8000288 <__aeabi_dsub>
 800ad3e:	a318      	add	r3, pc, #96	@ (adr r3, 800ada0 <__ieee754_atan2+0x158>)
 800ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad44:	e014      	b.n	800ad70 <__ieee754_atan2+0x128>
 800ad46:	a118      	add	r1, pc, #96	@ (adr r1, 800ada8 <__ieee754_atan2+0x160>)
 800ad48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4c:	e7ec      	b.n	800ad28 <__ieee754_atan2+0xe0>
 800ad4e:	2000      	movs	r0, #0
 800ad50:	2100      	movs	r1, #0
 800ad52:	e7e9      	b.n	800ad28 <__ieee754_atan2+0xe0>
 800ad54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad58:	4619      	mov	r1, r3
 800ad5a:	e794      	b.n	800ac86 <__ieee754_atan2+0x3e>
 800ad5c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad98 <__ieee754_atan2+0x150>)
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f7f5 fa91 	bl	8000288 <__aeabi_dsub>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	a10d      	add	r1, pc, #52	@ (adr r1, 800ada0 <__ieee754_atan2+0x158>)
 800ad6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad70:	f7f5 fa8a 	bl	8000288 <__aeabi_dsub>
 800ad74:	e787      	b.n	800ac86 <__ieee754_atan2+0x3e>
 800ad76:	a10a      	add	r1, pc, #40	@ (adr r1, 800ada0 <__ieee754_atan2+0x158>)
 800ad78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad7c:	e783      	b.n	800ac86 <__ieee754_atan2+0x3e>
 800ad7e:	a10c      	add	r1, pc, #48	@ (adr r1, 800adb0 <__ieee754_atan2+0x168>)
 800ad80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad84:	e77f      	b.n	800ac86 <__ieee754_atan2+0x3e>
 800ad86:	2000      	movs	r0, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	e77c      	b.n	800ac86 <__ieee754_atan2+0x3e>
 800ad8c:	a106      	add	r1, pc, #24	@ (adr r1, 800ada8 <__ieee754_atan2+0x160>)
 800ad8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad92:	e778      	b.n	800ac86 <__ieee754_atan2+0x3e>
 800ad94:	f3af 8000 	nop.w
 800ad98:	33145c07 	.word	0x33145c07
 800ad9c:	3ca1a626 	.word	0x3ca1a626
 800ada0:	54442d18 	.word	0x54442d18
 800ada4:	400921fb 	.word	0x400921fb
 800ada8:	54442d18 	.word	0x54442d18
 800adac:	3ff921fb 	.word	0x3ff921fb
 800adb0:	54442d18 	.word	0x54442d18
 800adb4:	3fe921fb 	.word	0x3fe921fb
 800adb8:	0800b590 	.word	0x0800b590
 800adbc:	0800b578 	.word	0x0800b578
 800adc0:	54442d18 	.word	0x54442d18
 800adc4:	c00921fb 	.word	0xc00921fb
 800adc8:	54442d18 	.word	0x54442d18
 800adcc:	bff921fb 	.word	0xbff921fb
 800add0:	7ff00000 	.word	0x7ff00000
 800add4:	00000000 	.word	0x00000000

0800add8 <atan>:
 800add8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800addc:	ec55 4b10 	vmov	r4, r5, d0
 800ade0:	4bbf      	ldr	r3, [pc, #764]	@ (800b0e0 <atan+0x308>)
 800ade2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ade6:	429e      	cmp	r6, r3
 800ade8:	46ab      	mov	fp, r5
 800adea:	d918      	bls.n	800ae1e <atan+0x46>
 800adec:	4bbd      	ldr	r3, [pc, #756]	@ (800b0e4 <atan+0x30c>)
 800adee:	429e      	cmp	r6, r3
 800adf0:	d801      	bhi.n	800adf6 <atan+0x1e>
 800adf2:	d109      	bne.n	800ae08 <atan+0x30>
 800adf4:	b144      	cbz	r4, 800ae08 <atan+0x30>
 800adf6:	4622      	mov	r2, r4
 800adf8:	462b      	mov	r3, r5
 800adfa:	4620      	mov	r0, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	f7f5 fa45 	bl	800028c <__adddf3>
 800ae02:	4604      	mov	r4, r0
 800ae04:	460d      	mov	r5, r1
 800ae06:	e006      	b.n	800ae16 <atan+0x3e>
 800ae08:	f1bb 0f00 	cmp.w	fp, #0
 800ae0c:	f340 812b 	ble.w	800b066 <atan+0x28e>
 800ae10:	a597      	add	r5, pc, #604	@ (adr r5, 800b070 <atan+0x298>)
 800ae12:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae16:	ec45 4b10 	vmov	d0, r4, r5
 800ae1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1e:	4bb2      	ldr	r3, [pc, #712]	@ (800b0e8 <atan+0x310>)
 800ae20:	429e      	cmp	r6, r3
 800ae22:	d813      	bhi.n	800ae4c <atan+0x74>
 800ae24:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ae28:	429e      	cmp	r6, r3
 800ae2a:	d80c      	bhi.n	800ae46 <atan+0x6e>
 800ae2c:	a392      	add	r3, pc, #584	@ (adr r3, 800b078 <atan+0x2a0>)
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 fa29 	bl	800028c <__adddf3>
 800ae3a:	4bac      	ldr	r3, [pc, #688]	@ (800b0ec <atan+0x314>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f7f5 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d1e7      	bne.n	800ae16 <atan+0x3e>
 800ae46:	f04f 3aff 	mov.w	sl, #4294967295
 800ae4a:	e029      	b.n	800aea0 <atan+0xc8>
 800ae4c:	f000 f95c 	bl	800b108 <fabs>
 800ae50:	4ba7      	ldr	r3, [pc, #668]	@ (800b0f0 <atan+0x318>)
 800ae52:	429e      	cmp	r6, r3
 800ae54:	ec55 4b10 	vmov	r4, r5, d0
 800ae58:	f200 80bc 	bhi.w	800afd4 <atan+0x1fc>
 800ae5c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ae60:	429e      	cmp	r6, r3
 800ae62:	f200 809e 	bhi.w	800afa2 <atan+0x1ca>
 800ae66:	4622      	mov	r2, r4
 800ae68:	462b      	mov	r3, r5
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	f7f5 fa0d 	bl	800028c <__adddf3>
 800ae72:	4b9e      	ldr	r3, [pc, #632]	@ (800b0ec <atan+0x314>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	f7f5 fa07 	bl	8000288 <__aeabi_dsub>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	460f      	mov	r7, r1
 800ae80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ae84:	4620      	mov	r0, r4
 800ae86:	4629      	mov	r1, r5
 800ae88:	f7f5 fa00 	bl	800028c <__adddf3>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4630      	mov	r0, r6
 800ae92:	4639      	mov	r1, r7
 800ae94:	f7f5 fcda 	bl	800084c <__aeabi_ddiv>
 800ae98:	f04f 0a00 	mov.w	sl, #0
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	460d      	mov	r5, r1
 800aea0:	4622      	mov	r2, r4
 800aea2:	462b      	mov	r3, r5
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f7f5 fba6 	bl	80005f8 <__aeabi_dmul>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4680      	mov	r8, r0
 800aeb2:	4689      	mov	r9, r1
 800aeb4:	f7f5 fba0 	bl	80005f8 <__aeabi_dmul>
 800aeb8:	a371      	add	r3, pc, #452	@ (adr r3, 800b080 <atan+0x2a8>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	4606      	mov	r6, r0
 800aec0:	460f      	mov	r7, r1
 800aec2:	f7f5 fb99 	bl	80005f8 <__aeabi_dmul>
 800aec6:	a370      	add	r3, pc, #448	@ (adr r3, 800b088 <atan+0x2b0>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f7f5 f9de 	bl	800028c <__adddf3>
 800aed0:	4632      	mov	r2, r6
 800aed2:	463b      	mov	r3, r7
 800aed4:	f7f5 fb90 	bl	80005f8 <__aeabi_dmul>
 800aed8:	a36d      	add	r3, pc, #436	@ (adr r3, 800b090 <atan+0x2b8>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 f9d5 	bl	800028c <__adddf3>
 800aee2:	4632      	mov	r2, r6
 800aee4:	463b      	mov	r3, r7
 800aee6:	f7f5 fb87 	bl	80005f8 <__aeabi_dmul>
 800aeea:	a36b      	add	r3, pc, #428	@ (adr r3, 800b098 <atan+0x2c0>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	f7f5 f9cc 	bl	800028c <__adddf3>
 800aef4:	4632      	mov	r2, r6
 800aef6:	463b      	mov	r3, r7
 800aef8:	f7f5 fb7e 	bl	80005f8 <__aeabi_dmul>
 800aefc:	a368      	add	r3, pc, #416	@ (adr r3, 800b0a0 <atan+0x2c8>)
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	f7f5 f9c3 	bl	800028c <__adddf3>
 800af06:	4632      	mov	r2, r6
 800af08:	463b      	mov	r3, r7
 800af0a:	f7f5 fb75 	bl	80005f8 <__aeabi_dmul>
 800af0e:	a366      	add	r3, pc, #408	@ (adr r3, 800b0a8 <atan+0x2d0>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f7f5 f9ba 	bl	800028c <__adddf3>
 800af18:	4642      	mov	r2, r8
 800af1a:	464b      	mov	r3, r9
 800af1c:	f7f5 fb6c 	bl	80005f8 <__aeabi_dmul>
 800af20:	a363      	add	r3, pc, #396	@ (adr r3, 800b0b0 <atan+0x2d8>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	4680      	mov	r8, r0
 800af28:	4689      	mov	r9, r1
 800af2a:	4630      	mov	r0, r6
 800af2c:	4639      	mov	r1, r7
 800af2e:	f7f5 fb63 	bl	80005f8 <__aeabi_dmul>
 800af32:	a361      	add	r3, pc, #388	@ (adr r3, 800b0b8 <atan+0x2e0>)
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	f7f5 f9a6 	bl	8000288 <__aeabi_dsub>
 800af3c:	4632      	mov	r2, r6
 800af3e:	463b      	mov	r3, r7
 800af40:	f7f5 fb5a 	bl	80005f8 <__aeabi_dmul>
 800af44:	a35e      	add	r3, pc, #376	@ (adr r3, 800b0c0 <atan+0x2e8>)
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	f7f5 f99d 	bl	8000288 <__aeabi_dsub>
 800af4e:	4632      	mov	r2, r6
 800af50:	463b      	mov	r3, r7
 800af52:	f7f5 fb51 	bl	80005f8 <__aeabi_dmul>
 800af56:	a35c      	add	r3, pc, #368	@ (adr r3, 800b0c8 <atan+0x2f0>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	f7f5 f994 	bl	8000288 <__aeabi_dsub>
 800af60:	4632      	mov	r2, r6
 800af62:	463b      	mov	r3, r7
 800af64:	f7f5 fb48 	bl	80005f8 <__aeabi_dmul>
 800af68:	a359      	add	r3, pc, #356	@ (adr r3, 800b0d0 <atan+0x2f8>)
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	f7f5 f98b 	bl	8000288 <__aeabi_dsub>
 800af72:	4632      	mov	r2, r6
 800af74:	463b      	mov	r3, r7
 800af76:	f7f5 fb3f 	bl	80005f8 <__aeabi_dmul>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4640      	mov	r0, r8
 800af80:	4649      	mov	r1, r9
 800af82:	f7f5 f983 	bl	800028c <__adddf3>
 800af86:	4622      	mov	r2, r4
 800af88:	462b      	mov	r3, r5
 800af8a:	f7f5 fb35 	bl	80005f8 <__aeabi_dmul>
 800af8e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	d148      	bne.n	800b02a <atan+0x252>
 800af98:	4620      	mov	r0, r4
 800af9a:	4629      	mov	r1, r5
 800af9c:	f7f5 f974 	bl	8000288 <__aeabi_dsub>
 800afa0:	e72f      	b.n	800ae02 <atan+0x2a>
 800afa2:	4b52      	ldr	r3, [pc, #328]	@ (800b0ec <atan+0x314>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	4620      	mov	r0, r4
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7f5 f96d 	bl	8000288 <__aeabi_dsub>
 800afae:	4b4f      	ldr	r3, [pc, #316]	@ (800b0ec <atan+0x314>)
 800afb0:	4606      	mov	r6, r0
 800afb2:	460f      	mov	r7, r1
 800afb4:	2200      	movs	r2, #0
 800afb6:	4620      	mov	r0, r4
 800afb8:	4629      	mov	r1, r5
 800afba:	f7f5 f967 	bl	800028c <__adddf3>
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	4630      	mov	r0, r6
 800afc4:	4639      	mov	r1, r7
 800afc6:	f7f5 fc41 	bl	800084c <__aeabi_ddiv>
 800afca:	f04f 0a01 	mov.w	sl, #1
 800afce:	4604      	mov	r4, r0
 800afd0:	460d      	mov	r5, r1
 800afd2:	e765      	b.n	800aea0 <atan+0xc8>
 800afd4:	4b47      	ldr	r3, [pc, #284]	@ (800b0f4 <atan+0x31c>)
 800afd6:	429e      	cmp	r6, r3
 800afd8:	d21c      	bcs.n	800b014 <atan+0x23c>
 800afda:	4b47      	ldr	r3, [pc, #284]	@ (800b0f8 <atan+0x320>)
 800afdc:	2200      	movs	r2, #0
 800afde:	4620      	mov	r0, r4
 800afe0:	4629      	mov	r1, r5
 800afe2:	f7f5 f951 	bl	8000288 <__aeabi_dsub>
 800afe6:	4b44      	ldr	r3, [pc, #272]	@ (800b0f8 <atan+0x320>)
 800afe8:	4606      	mov	r6, r0
 800afea:	460f      	mov	r7, r1
 800afec:	2200      	movs	r2, #0
 800afee:	4620      	mov	r0, r4
 800aff0:	4629      	mov	r1, r5
 800aff2:	f7f5 fb01 	bl	80005f8 <__aeabi_dmul>
 800aff6:	4b3d      	ldr	r3, [pc, #244]	@ (800b0ec <atan+0x314>)
 800aff8:	2200      	movs	r2, #0
 800affa:	f7f5 f947 	bl	800028c <__adddf3>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 fc21 	bl	800084c <__aeabi_ddiv>
 800b00a:	f04f 0a02 	mov.w	sl, #2
 800b00e:	4604      	mov	r4, r0
 800b010:	460d      	mov	r5, r1
 800b012:	e745      	b.n	800aea0 <atan+0xc8>
 800b014:	4622      	mov	r2, r4
 800b016:	462b      	mov	r3, r5
 800b018:	4938      	ldr	r1, [pc, #224]	@ (800b0fc <atan+0x324>)
 800b01a:	2000      	movs	r0, #0
 800b01c:	f7f5 fc16 	bl	800084c <__aeabi_ddiv>
 800b020:	f04f 0a03 	mov.w	sl, #3
 800b024:	4604      	mov	r4, r0
 800b026:	460d      	mov	r5, r1
 800b028:	e73a      	b.n	800aea0 <atan+0xc8>
 800b02a:	4b35      	ldr	r3, [pc, #212]	@ (800b100 <atan+0x328>)
 800b02c:	4e35      	ldr	r6, [pc, #212]	@ (800b104 <atan+0x32c>)
 800b02e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f7f5 f927 	bl	8000288 <__aeabi_dsub>
 800b03a:	4622      	mov	r2, r4
 800b03c:	462b      	mov	r3, r5
 800b03e:	f7f5 f923 	bl	8000288 <__aeabi_dsub>
 800b042:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b046:	4602      	mov	r2, r0
 800b048:	460b      	mov	r3, r1
 800b04a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b04e:	f7f5 f91b 	bl	8000288 <__aeabi_dsub>
 800b052:	f1bb 0f00 	cmp.w	fp, #0
 800b056:	4604      	mov	r4, r0
 800b058:	460d      	mov	r5, r1
 800b05a:	f6bf aedc 	bge.w	800ae16 <atan+0x3e>
 800b05e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b062:	461d      	mov	r5, r3
 800b064:	e6d7      	b.n	800ae16 <atan+0x3e>
 800b066:	a51c      	add	r5, pc, #112	@ (adr r5, 800b0d8 <atan+0x300>)
 800b068:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b06c:	e6d3      	b.n	800ae16 <atan+0x3e>
 800b06e:	bf00      	nop
 800b070:	54442d18 	.word	0x54442d18
 800b074:	3ff921fb 	.word	0x3ff921fb
 800b078:	8800759c 	.word	0x8800759c
 800b07c:	7e37e43c 	.word	0x7e37e43c
 800b080:	e322da11 	.word	0xe322da11
 800b084:	3f90ad3a 	.word	0x3f90ad3a
 800b088:	24760deb 	.word	0x24760deb
 800b08c:	3fa97b4b 	.word	0x3fa97b4b
 800b090:	a0d03d51 	.word	0xa0d03d51
 800b094:	3fb10d66 	.word	0x3fb10d66
 800b098:	c54c206e 	.word	0xc54c206e
 800b09c:	3fb745cd 	.word	0x3fb745cd
 800b0a0:	920083ff 	.word	0x920083ff
 800b0a4:	3fc24924 	.word	0x3fc24924
 800b0a8:	5555550d 	.word	0x5555550d
 800b0ac:	3fd55555 	.word	0x3fd55555
 800b0b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b0b4:	bfa2b444 	.word	0xbfa2b444
 800b0b8:	52defd9a 	.word	0x52defd9a
 800b0bc:	3fadde2d 	.word	0x3fadde2d
 800b0c0:	af749a6d 	.word	0xaf749a6d
 800b0c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b0c8:	fe231671 	.word	0xfe231671
 800b0cc:	3fbc71c6 	.word	0x3fbc71c6
 800b0d0:	9998ebc4 	.word	0x9998ebc4
 800b0d4:	3fc99999 	.word	0x3fc99999
 800b0d8:	54442d18 	.word	0x54442d18
 800b0dc:	bff921fb 	.word	0xbff921fb
 800b0e0:	440fffff 	.word	0x440fffff
 800b0e4:	7ff00000 	.word	0x7ff00000
 800b0e8:	3fdbffff 	.word	0x3fdbffff
 800b0ec:	3ff00000 	.word	0x3ff00000
 800b0f0:	3ff2ffff 	.word	0x3ff2ffff
 800b0f4:	40038000 	.word	0x40038000
 800b0f8:	3ff80000 	.word	0x3ff80000
 800b0fc:	bff00000 	.word	0xbff00000
 800b100:	0800b5a8 	.word	0x0800b5a8
 800b104:	0800b5c8 	.word	0x0800b5c8

0800b108 <fabs>:
 800b108:	ec51 0b10 	vmov	r0, r1, d0
 800b10c:	4602      	mov	r2, r0
 800b10e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b112:	ec43 2b10 	vmov	d0, r2, r3
 800b116:	4770      	bx	lr

0800b118 <_init>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr

0800b124 <_fini>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr

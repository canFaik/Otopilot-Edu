
ACCE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b038  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800b1c8  0800b1c8  0000c1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b680  0800b680  0000d1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b680  0800b680  0000c680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b688  0800b688  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b688  0800b688  0000c688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b68c  0800b68c  0000c68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b690  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1f8  2**0
                  CONTENTS
 10 .bss          00000420  200001f8  200001f8  0000d1f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000618  20000618  0000d1f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc78  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002181  00000000  00000000  0001cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  0001f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be0  00000000  00000000  0001ff58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022535  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f1f  00000000  00000000  0004306d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfcd2  00000000  00000000  00053f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  00123c5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005680  00000000  00000000  00123ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  00129364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1b0 	.word	0x0800b1b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800b1b0 	.word	0x0800b1b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f001 fb23 	bl	8002634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 f873 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff2:	f000 fae5 	bl	80015c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ff6:	f000 f8d9 	bl	80011ac <MX_SPI1_Init>
  MX_TIM1_Init();
 8000ffa:	f000 f90d 	bl	8001218 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000ffe:	f000 fa8b 	bl	8001518 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001002:	f000 fab3 	bl	800156c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001006:	f000 f99d 	bl	8001344 <MX_TIM2_Init>
  MX_TIM3_Init();
 800100a:	f000 fa15 	bl	8001438 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800100e:	482a      	ldr	r0, [pc, #168]	@ (80010b8 <main+0xd4>)
 8001010:	f003 f95e 	bl	80042d0 <HAL_TIM_Base_Start>
  myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 8001014:	2340      	movs	r3, #64	@ 0x40
 8001016:	703b      	strb	r3, [r7, #0]
  myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8001018:	2308      	movs	r3, #8
 800101a:	707b      	strb	r3, [r7, #1]
  myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 800101c:	23c0      	movs	r3, #192	@ 0xc0
 800101e:	70bb      	strb	r3, [r7, #2]
  myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001020:	2307      	movs	r3, #7
 8001022:	70fb      	strb	r3, [r7, #3]
  myAccConfigDef.interruptEnable = true;
 8001024:	2301      	movs	r3, #1
 8001026:	713b      	strb	r3, [r7, #4]
  LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4823      	ldr	r0, [pc, #140]	@ (80010bc <main+0xd8>)
 800102e:	f004 ff97 	bl	8005f60 <LIS3DSH_Init>

  LIS3DSH_X_calibrate(-1000.0, 980.0);
 8001032:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80010c0 <main+0xdc>
 8001036:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80010c4 <main+0xe0>
 800103a:	f005 f953 	bl	80062e4 <LIS3DSH_X_calibrate>
  LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 800103e:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80010c8 <main+0xe4>
 8001042:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80010cc <main+0xe8>
 8001046:	f005 f97b 	bl	8006340 <LIS3DSH_Y_calibrate>
  LIS3DSH_Z_calibrate(-920.0, 1040.0);
 800104a:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80010c8 <main+0xe4>
 800104e:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 80010d0 <main+0xec>
 8001052:	f005 f9a3 	bl	800639c <LIS3DSH_Z_calibrate>

  /* HAL PWM START */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001056:	2100      	movs	r1, #0
 8001058:	481e      	ldr	r0, [pc, #120]	@ (80010d4 <main+0xf0>)
 800105a:	f003 f9f1 	bl	8004440 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800105e:	2104      	movs	r1, #4
 8001060:	481c      	ldr	r0, [pc, #112]	@ (80010d4 <main+0xf0>)
 8001062:	f003 f9ed 	bl	8004440 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001066:	2108      	movs	r1, #8
 8001068:	481a      	ldr	r0, [pc, #104]	@ (80010d4 <main+0xf0>)
 800106a:	f003 f9e9 	bl	8004440 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800106e:	210c      	movs	r1, #12
 8001070:	4818      	ldr	r0, [pc, #96]	@ (80010d4 <main+0xf0>)
 8001072:	f003 f9e5 	bl	8004440 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,1000);
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <main+0xf0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1000);
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <main+0xf0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001088:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,1000);
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <main+0xf0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001092:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,1000);
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <main+0xf0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_Delay(3000);
 800109e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010a2:	f001 fb39 	bl	8002718 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  tim_start(); 											/* Timer start htim1, input capture */
 80010a6:	f000 fc47 	bl	8001938 <tim_start>

	 stabilize_drone_mode();								/* Drone is stabilize mode active */
 80010aa:	f000 fb5b 	bl	8001764 <stabilize_drone_mode>

	 acces_measure();
 80010ae:	f000 fc7b 	bl	80019a8 <acces_measure>
	  tim_start(); 											/* Timer start htim1, input capture */
 80010b2:	bf00      	nop
 80010b4:	e7f7      	b.n	80010a6 <main+0xc2>
 80010b6:	bf00      	nop
 80010b8:	2000027c 	.word	0x2000027c
 80010bc:	20000224 	.word	0x20000224
 80010c0:	44750000 	.word	0x44750000
 80010c4:	c47a0000 	.word	0xc47a0000
 80010c8:	44820000 	.word	0x44820000
 80010cc:	c47f0000 	.word	0xc47f0000
 80010d0:	c4660000 	.word	0xc4660000
 80010d4:	200002c4 	.word	0x200002c4

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	@ 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 f917 	bl	800731a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <SystemClock_Config+0xcc>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <SystemClock_Config+0xcc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <SystemClock_Config+0xd0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <SystemClock_Config+0xd0>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <SystemClock_Config+0xd0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800114c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001150:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001152:	2302      	movs	r3, #2
 8001154:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001156:	2307      	movs	r3, #7
 8001158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fdf8 	bl	8002d54 <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800116a:	f000 ff35 	bl	8001fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001172:	2302      	movs	r3, #2
 8001174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800117a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800117e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001184:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2105      	movs	r1, #5
 800118c:	4618      	mov	r0, r3
 800118e:	f002 f859 	bl	8003244 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001198:	f000 ff1e 	bl	8001fd8 <Error_Handler>
  }
}
 800119c:	bf00      	nop
 800119e:	3750      	adds	r7, #80	@ 0x50
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011b2:	4a18      	ldr	r2, [pc, #96]	@ (8001214 <MX_SPI1_Init+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011f8:	220a      	movs	r2, #10
 80011fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_SPI1_Init+0x64>)
 80011fe:	f002 fa41 	bl	8003684 <HAL_SPI_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001208:	f000 fee6 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000224 	.word	0x20000224
 8001214:	40013000 	.word	0x40013000

08001218 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001242:	4b3e      	ldr	r3, [pc, #248]	@ (800133c <MX_TIM1_Init+0x124>)
 8001244:	4a3e      	ldr	r2, [pc, #248]	@ (8001340 <MX_TIM1_Init+0x128>)
 8001246:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001248:	4b3c      	ldr	r3, [pc, #240]	@ (800133c <MX_TIM1_Init+0x124>)
 800124a:	2253      	movs	r2, #83	@ 0x53
 800124c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b3b      	ldr	r3, [pc, #236]	@ (800133c <MX_TIM1_Init+0x124>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 8001254:	4b39      	ldr	r3, [pc, #228]	@ (800133c <MX_TIM1_Init+0x124>)
 8001256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800125a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b37      	ldr	r3, [pc, #220]	@ (800133c <MX_TIM1_Init+0x124>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001262:	4b36      	ldr	r3, [pc, #216]	@ (800133c <MX_TIM1_Init+0x124>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b34      	ldr	r3, [pc, #208]	@ (800133c <MX_TIM1_Init+0x124>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800126e:	4833      	ldr	r0, [pc, #204]	@ (800133c <MX_TIM1_Init+0x124>)
 8001270:	f002 ffde 	bl	8004230 <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800127a:	f000 fead 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001282:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	4619      	mov	r1, r3
 800128a:	482c      	ldr	r0, [pc, #176]	@ (800133c <MX_TIM1_Init+0x124>)
 800128c:	f003 fd70 	bl	8004d70 <HAL_TIM_ConfigClockSource>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001296:	f000 fe9f 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800129a:	4828      	ldr	r0, [pc, #160]	@ (800133c <MX_TIM1_Init+0x124>)
 800129c:	f003 f998 	bl	80045d0 <HAL_TIM_IC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80012a6:	f000 fe97 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	4820      	ldr	r0, [pc, #128]	@ (800133c <MX_TIM1_Init+0x124>)
 80012ba:	f004 fa8f 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80012c4:	f000 fe88 	bl	8001fd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012c8:	230a      	movs	r3, #10
 80012ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	4817      	ldr	r0, [pc, #92]	@ (800133c <MX_TIM1_Init+0x124>)
 80012e0:	f003 fbe8 	bl	8004ab4 <HAL_TIM_IC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80012ea:	f000 fe75 	bl	8001fd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	2204      	movs	r2, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	@ (800133c <MX_TIM1_Init+0x124>)
 80012fa:	f003 fbdb 	bl	8004ab4 <HAL_TIM_IC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001304:	f000 fe68 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	2208      	movs	r2, #8
 800130c:	4619      	mov	r1, r3
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <MX_TIM1_Init+0x124>)
 8001310:	f003 fbd0 	bl	8004ab4 <HAL_TIM_IC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800131a:	f000 fe5d 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	220c      	movs	r2, #12
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_TIM1_Init+0x124>)
 8001326:	f003 fbc5 	bl	8004ab4 <HAL_TIM_IC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001330:	f000 fe52 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000027c 	.word	0x2000027c
 8001340:	40010000 	.word	0x40010000

08001344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001366:	4b33      	ldr	r3, [pc, #204]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800136e:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001370:	2253      	movs	r2, #83	@ 0x53
 8001372:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800137a:	4b2e      	ldr	r3, [pc, #184]	@ (8001434 <MX_TIM2_Init+0xf0>)
 800137c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001380:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <MX_TIM2_Init+0xf0>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800138e:	4829      	ldr	r0, [pc, #164]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001390:	f003 f806 	bl	80043a0 <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800139a:	f000 fe1d 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	4619      	mov	r1, r3
 80013ac:	4821      	ldr	r0, [pc, #132]	@ (8001434 <MX_TIM2_Init+0xf0>)
 80013ae:	f004 fa15 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013b8:	f000 fe0e 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	@ 0x60
 80013be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4818      	ldr	r0, [pc, #96]	@ (8001434 <MX_TIM2_Init+0xf0>)
 80013d4:	f003 fc0a 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013de:	f000 fdfb 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2204      	movs	r2, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4812      	ldr	r0, [pc, #72]	@ (8001434 <MX_TIM2_Init+0xf0>)
 80013ea:	f003 fbff 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013f4:	f000 fdf0 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2208      	movs	r2, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001400:	f003 fbf4 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800140a:	f000 fde5 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	220c      	movs	r2, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4807      	ldr	r0, [pc, #28]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001416:	f003 fbe9 	bl	8004bec <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001420:	f000 fdda 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001424:	4803      	ldr	r0, [pc, #12]	@ (8001434 <MX_TIM2_Init+0xf0>)
 8001426:	f000 fef9 	bl	800221c <HAL_TIM_MspPostInit>

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	@ 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200002c4 	.word	0x200002c4

08001438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0318 	add.w	r3, r7, #24
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001462:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <MX_TIM3_Init+0xd8>)
 8001464:	4a2b      	ldr	r2, [pc, #172]	@ (8001514 <MX_TIM3_Init+0xdc>)
 8001466:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001468:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <MX_TIM3_Init+0xd8>)
 800146a:	2253      	movs	r2, #83	@ 0x53
 800146c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <MX_TIM3_Init+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8001474:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <MX_TIM3_Init+0xd8>)
 8001476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800147a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <MX_TIM3_Init+0xd8>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <MX_TIM3_Init+0xd8>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001488:	4821      	ldr	r0, [pc, #132]	@ (8001510 <MX_TIM3_Init+0xd8>)
 800148a:	f002 fed1 	bl	8004230 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001494:	f000 fda0 	bl	8001fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	4619      	mov	r1, r3
 80014a4:	481a      	ldr	r0, [pc, #104]	@ (8001510 <MX_TIM3_Init+0xd8>)
 80014a6:	f003 fc63 	bl	8004d70 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014b0:	f000 fd92 	bl	8001fd8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014b4:	4816      	ldr	r0, [pc, #88]	@ (8001510 <MX_TIM3_Init+0xd8>)
 80014b6:	f003 f88b 	bl	80045d0 <HAL_TIM_IC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014c0:	f000 fd8a 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	480f      	ldr	r0, [pc, #60]	@ (8001510 <MX_TIM3_Init+0xd8>)
 80014d4:	f004 f982 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80014de:	f000 fd7b 	bl	8001fd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80014e2:	230a      	movs	r3, #10
 80014e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_TIM3_Init+0xd8>)
 80014fa:	f003 fadb 	bl	8004ab4 <HAL_TIM_IC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001504:	f000 fd68 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000030c 	.word	0x2000030c
 8001514:	40000400 	.word	0x40000400

08001518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <MX_USART1_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_USART1_UART_Init+0x4c>)
 8001550:	f004 f9d4 	bl	80058fc <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f000 fd3d 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000354 	.word	0x20000354
 8001568:	40011000 	.word	0x40011000

0800156c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <MX_USART3_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_USART3_UART_Init+0x4c>)
 80015a4:	f004 f9aa 	bl	80058fc <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ae:	f000 fd13 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000039c 	.word	0x2000039c
 80015bc:	40004800 	.word	0x40004800

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	@ 0x30
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	4b54      	ldr	r3, [pc, #336]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a53      	ldr	r2, [pc, #332]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b51      	ldr	r3, [pc, #324]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	4b4d      	ldr	r3, [pc, #308]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a4c      	ldr	r2, [pc, #304]	@ (800172c <MX_GPIO_Init+0x16c>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b4a      	ldr	r3, [pc, #296]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b46      	ldr	r3, [pc, #280]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a45      	ldr	r2, [pc, #276]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b43      	ldr	r3, [pc, #268]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a3e      	ldr	r2, [pc, #248]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <MX_GPIO_Init+0x16c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <MX_GPIO_Init+0x16c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a37      	ldr	r2, [pc, #220]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b35      	ldr	r3, [pc, #212]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b31      	ldr	r3, [pc, #196]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a30      	ldr	r2, [pc, #192]	@ (800172c <MX_GPIO_Init+0x16c>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <MX_GPIO_Init+0x16c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2108      	movs	r1, #8
 8001682:	482b      	ldr	r0, [pc, #172]	@ (8001730 <MX_GPIO_Init+0x170>)
 8001684:	f001 fb1a 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800168e:	4829      	ldr	r0, [pc, #164]	@ (8001734 <MX_GPIO_Init+0x174>)
 8001690:	f001 fb14 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001694:	2308      	movs	r3, #8
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	4821      	ldr	r0, [pc, #132]	@ (8001730 <MX_GPIO_Init+0x170>)
 80016ac:	f001 f96a 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80016b0:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	481a      	ldr	r0, [pc, #104]	@ (8001734 <MX_GPIO_Init+0x174>)
 80016ca:	f001 f95b 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4813      	ldr	r0, [pc, #76]	@ (8001734 <MX_GPIO_Init+0x174>)
 80016e6:	f001 f94d 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	480c      	ldr	r0, [pc, #48]	@ (8001730 <MX_GPIO_Init+0x170>)
 8001700:	f001 f940 	bl	8002984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2006      	movs	r0, #6
 800170a:	f001 f904 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800170e:	2006      	movs	r0, #6
 8001710:	f001 f91d 	bl	800294e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2028      	movs	r0, #40	@ 0x28
 800171a:	f001 f8fc 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800171e:	2028      	movs	r0, #40	@ 0x28
 8001720:	f001 f915 	bl	800294e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	@ 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	40021000 	.word	0x40021000
 8001734:	40020c00 	.word	0x40020c00

08001738 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	80fb      	strh	r3, [r7, #6]

	UNUSED(GPIO_Pin);

	drdyFlag = 1;
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_GPIO_EXTI_Callback+0x24>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001748:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <HAL_GPIO_EXTI_Callback+0x28>)
 800174e:	f001 face 	bl	8002cee <HAL_GPIO_TogglePin>
	//End
};
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000448 	.word	0x20000448
 8001760:	40020c00 	.word	0x40020c00

08001764 <stabilize_drone_mode>:

void stabilize_drone_mode(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	// Receiver value is control.
	receiver_motor_value();
 8001768:	f000 f9ec 	bl	8001b44 <receiver_motor_value>

	//Motor speed, roll, pitch, yaw value.
	stabilize_mode.motor_speed[0] = 1000 + rec_throttle + roll_right - roll_left + pitch_back - pitch_forward + yaw_right - yaw_left;
 800176c:	4b57      	ldr	r3, [pc, #348]	@ (80018cc <stabilize_drone_mode+0x168>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001774:	4a56      	ldr	r2, [pc, #344]	@ (80018d0 <stabilize_drone_mode+0x16c>)
 8001776:	8812      	ldrh	r2, [r2, #0]
 8001778:	4413      	add	r3, r2
 800177a:	4a56      	ldr	r2, [pc, #344]	@ (80018d4 <stabilize_drone_mode+0x170>)
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	4a55      	ldr	r2, [pc, #340]	@ (80018d8 <stabilize_drone_mode+0x174>)
 8001782:	8812      	ldrh	r2, [r2, #0]
 8001784:	4413      	add	r3, r2
 8001786:	4a55      	ldr	r2, [pc, #340]	@ (80018dc <stabilize_drone_mode+0x178>)
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	4a54      	ldr	r2, [pc, #336]	@ (80018e0 <stabilize_drone_mode+0x17c>)
 800178e:	8812      	ldrh	r2, [r2, #0]
 8001790:	4413      	add	r3, r2
 8001792:	4a54      	ldr	r2, [pc, #336]	@ (80018e4 <stabilize_drone_mode+0x180>)
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4b53      	ldr	r3, [pc, #332]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800179c:	601a      	str	r2, [r3, #0]
	stabilize_mode.motor_speed[1] = 1000 + rec_throttle + roll_right - roll_left - pitch_back + pitch_forward - yaw_right + yaw_left;
 800179e:	4b4b      	ldr	r3, [pc, #300]	@ (80018cc <stabilize_drone_mode+0x168>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017a6:	4a4a      	ldr	r2, [pc, #296]	@ (80018d0 <stabilize_drone_mode+0x16c>)
 80017a8:	8812      	ldrh	r2, [r2, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a49      	ldr	r2, [pc, #292]	@ (80018d4 <stabilize_drone_mode+0x170>)
 80017ae:	8812      	ldrh	r2, [r2, #0]
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	4a49      	ldr	r2, [pc, #292]	@ (80018d8 <stabilize_drone_mode+0x174>)
 80017b4:	8812      	ldrh	r2, [r2, #0]
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	4a48      	ldr	r2, [pc, #288]	@ (80018dc <stabilize_drone_mode+0x178>)
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	4a48      	ldr	r2, [pc, #288]	@ (80018e0 <stabilize_drone_mode+0x17c>)
 80017c0:	8812      	ldrh	r2, [r2, #0]
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	4a47      	ldr	r2, [pc, #284]	@ (80018e4 <stabilize_drone_mode+0x180>)
 80017c6:	8812      	ldrh	r2, [r2, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b46      	ldr	r3, [pc, #280]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80017ce:	605a      	str	r2, [r3, #4]
	stabilize_mode.motor_speed[2] = 1000 + rec_throttle + roll_left - roll_right + pitch_back - pitch_forward - yaw_right + yaw_left;
 80017d0:	4b3e      	ldr	r3, [pc, #248]	@ (80018cc <stabilize_drone_mode+0x168>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017d8:	4a3e      	ldr	r2, [pc, #248]	@ (80018d4 <stabilize_drone_mode+0x170>)
 80017da:	8812      	ldrh	r2, [r2, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	4a3c      	ldr	r2, [pc, #240]	@ (80018d0 <stabilize_drone_mode+0x16c>)
 80017e0:	8812      	ldrh	r2, [r2, #0]
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	4a3c      	ldr	r2, [pc, #240]	@ (80018d8 <stabilize_drone_mode+0x174>)
 80017e6:	8812      	ldrh	r2, [r2, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a3c      	ldr	r2, [pc, #240]	@ (80018dc <stabilize_drone_mode+0x178>)
 80017ec:	8812      	ldrh	r2, [r2, #0]
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	4a3b      	ldr	r2, [pc, #236]	@ (80018e0 <stabilize_drone_mode+0x17c>)
 80017f2:	8812      	ldrh	r2, [r2, #0]
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	4a3b      	ldr	r2, [pc, #236]	@ (80018e4 <stabilize_drone_mode+0x180>)
 80017f8:	8812      	ldrh	r2, [r2, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001800:	609a      	str	r2, [r3, #8]
	stabilize_mode.motor_speed[3] = 1000 + rec_throttle + roll_left - roll_right - pitch_back + pitch_forward + yaw_right - yaw_left ;
 8001802:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <stabilize_drone_mode+0x168>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800180a:	4a32      	ldr	r2, [pc, #200]	@ (80018d4 <stabilize_drone_mode+0x170>)
 800180c:	8812      	ldrh	r2, [r2, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a2f      	ldr	r2, [pc, #188]	@ (80018d0 <stabilize_drone_mode+0x16c>)
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	4a30      	ldr	r2, [pc, #192]	@ (80018d8 <stabilize_drone_mode+0x174>)
 8001818:	8812      	ldrh	r2, [r2, #0]
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <stabilize_drone_mode+0x178>)
 800181e:	8812      	ldrh	r2, [r2, #0]
 8001820:	4413      	add	r3, r2
 8001822:	4a2f      	ldr	r2, [pc, #188]	@ (80018e0 <stabilize_drone_mode+0x17c>)
 8001824:	8812      	ldrh	r2, [r2, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a2e      	ldr	r2, [pc, #184]	@ (80018e4 <stabilize_drone_mode+0x180>)
 800182a:	8812      	ldrh	r2, [r2, #0]
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	461a      	mov	r2, r3
 8001830:	4b2d      	ldr	r3, [pc, #180]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001832:	60da      	str	r2, [r3, #12]
//	stabilize_mode.motor_speed[1] = 1000 + rec_throttle + roll_right - roll_left - pitch_back + pitch_forward + yaw_left - yaw_right;
//	stabilize_mode.motor_speed[2] = 1000 + rec_throttle + roll_left - roll_right - pitch_back + pitch_forward + yaw_right - yaw_left;
//	stabilize_mode.motor_speed[3] = 1000 + rec_throttle + roll_left - roll_right + pitch_back - pitch_forward + yaw_left - yaw_right;

	// Motor speed roll, pitch, yaw stopper 0 - 2000.
	if(stabilize_mode.motor_speed[0] >=2000 ) stabilize_mode.motor_speed[0] = 2000;
 8001834:	4b2c      	ldr	r3, [pc, #176]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800183c:	d303      	bcc.n	8001846 <stabilize_drone_mode+0xe2>
 800183e:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001840:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001844:	601a      	str	r2, [r3, #0]
	if(stabilize_mode.motor_speed[1] >=2000 ) stabilize_mode.motor_speed[1] = 2000;
 8001846:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800184e:	d303      	bcc.n	8001858 <stabilize_drone_mode+0xf4>
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001852:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001856:	605a      	str	r2, [r3, #4]
	if(stabilize_mode.motor_speed[2] >=2000 ) stabilize_mode.motor_speed[2] = 2000;
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001860:	d303      	bcc.n	800186a <stabilize_drone_mode+0x106>
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001864:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001868:	609a      	str	r2, [r3, #8]
	if(stabilize_mode.motor_speed[3] >=2000 ) stabilize_mode.motor_speed[3] = 2000;
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001872:	d303      	bcc.n	800187c <stabilize_drone_mode+0x118>
 8001874:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001876:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800187a:	60da      	str	r2, [r3, #12]

	if(stabilize_mode.motor_speed[0] <=1000 ) stabilize_mode.motor_speed[0] = 1000;
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001884:	d803      	bhi.n	800188e <stabilize_drone_mode+0x12a>
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001888:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800188c:	601a      	str	r2, [r3, #0]
	if(stabilize_mode.motor_speed[1] <=1000 ) stabilize_mode.motor_speed[1] = 1000;
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <stabilize_drone_mode+0x184>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001896:	d803      	bhi.n	80018a0 <stabilize_drone_mode+0x13c>
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <stabilize_drone_mode+0x184>)
 800189a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800189e:	605a      	str	r2, [r3, #4]
	if(stabilize_mode.motor_speed[2] <=1000 ) stabilize_mode.motor_speed[2] = 1000;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018a8:	d803      	bhi.n	80018b2 <stabilize_drone_mode+0x14e>
 80018aa:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80018ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018b0:	609a      	str	r2, [r3, #8]
	if(stabilize_mode.motor_speed[3] <=1000 ) stabilize_mode.motor_speed[3] = 1000;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018ba:	d803      	bhi.n	80018c4 <stabilize_drone_mode+0x160>
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <stabilize_drone_mode+0x184>)
 80018be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018c2:	60da      	str	r2, [r3, #12]

	// Motor value to pwm compare set.
	stabilize_motor_output();
 80018c4:	f000 f84e 	bl	8001964 <stabilize_motor_output>
   // End
};
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000045c 	.word	0x2000045c
 80018d0:	2000044c 	.word	0x2000044c
 80018d4:	2000044e 	.word	0x2000044e
 80018d8:	20000452 	.word	0x20000452
 80018dc:	20000450 	.word	0x20000450
 80018e0:	20000454 	.word	0x20000454
 80018e4:	20000456 	.word	0x20000456
 80018e8:	20000214 	.word	0x20000214

080018ec <degree_change_percentage>:


};

uint16_t degree_change_percentage(uint16_t In, uint16_t Inmin, uint16_t Inmax, uint16_t Outmin, uint16_t Outmax)
{
 80018ec:	b490      	push	{r4, r7}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4604      	mov	r4, r0
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	80fb      	strh	r3, [r7, #6]
 80018fe:	4603      	mov	r3, r0
 8001900:	80bb      	strh	r3, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	807b      	strh	r3, [r7, #2]
 8001906:	4613      	mov	r3, r2
 8001908:	803b      	strh	r3, [r7, #0]
	return (In- Inmin) * (Outmax- Outmin) / (Inmax -Inmin) + Outmin;
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	8a39      	ldrh	r1, [r7, #16]
 8001912:	883a      	ldrh	r2, [r7, #0]
 8001914:	1a8a      	subs	r2, r1, r2
 8001916:	fb03 f202 	mul.w	r2, r3, r2
 800191a:	8879      	ldrh	r1, [r7, #2]
 800191c:	88bb      	ldrh	r3, [r7, #4]
 800191e:	1acb      	subs	r3, r1, r3
 8001920:	fb92 f3f3 	sdiv	r3, r2, r3
 8001924:	b29a      	uxth	r2, r3
 8001926:	883b      	ldrh	r3, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	b29b      	uxth	r3, r3
	//End
};
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bc90      	pop	{r4, r7}
 8001934:	4770      	bx	lr
	...

08001938 <tim_start>:

void tim_start(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800193c:	2100      	movs	r1, #0
 800193e:	4808      	ldr	r0, [pc, #32]	@ (8001960 <tim_start+0x28>)
 8001940:	f002 fea0 	bl	8004684 <HAL_TIM_IC_Start_IT>
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001944:	2104      	movs	r1, #4
 8001946:	4806      	ldr	r0, [pc, #24]	@ (8001960 <tim_start+0x28>)
 8001948:	f002 fe9c 	bl	8004684 <HAL_TIM_IC_Start_IT>
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 800194c:	2108      	movs	r1, #8
 800194e:	4804      	ldr	r0, [pc, #16]	@ (8001960 <tim_start+0x28>)
 8001950:	f002 fe98 	bl	8004684 <HAL_TIM_IC_Start_IT>
	   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8001954:	210c      	movs	r1, #12
 8001956:	4802      	ldr	r0, [pc, #8]	@ (8001960 <tim_start+0x28>)
 8001958:	f002 fe94 	bl	8004684 <HAL_TIM_IC_Start_IT>
	   // End
};
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000027c 	.word	0x2000027c

08001964 <stabilize_motor_output>:

void stabilize_motor_output(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,stabilize_mode.motor_speed[0]);
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <stabilize_motor_output+0x38>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <stabilize_motor_output+0x3c>)
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,stabilize_mode.motor_speed[1]);
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <stabilize_motor_output+0x38>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <stabilize_motor_output+0x3c>)
 8001978:	6852      	ldr	r2, [r2, #4]
 800197a:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,stabilize_mode.motor_speed[2]);
 800197c:	4b07      	ldr	r3, [pc, #28]	@ (800199c <stabilize_motor_output+0x38>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <stabilize_motor_output+0x3c>)
 8001982:	6892      	ldr	r2, [r2, #8]
 8001984:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,stabilize_mode.motor_speed[3]);
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <stabilize_motor_output+0x38>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <stabilize_motor_output+0x3c>)
 800198c:	68d2      	ldr	r2, [r2, #12]
 800198e:	641a      	str	r2, [r3, #64]	@ 0x40
	// End
};
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200002c4 	.word	0x200002c4
 80019a0:	20000214 	.word	0x20000214
 80019a4:	00000000 	.word	0x00000000

080019a8 <acces_measure>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,loiter_mode.motor_speed[3]);
	// End
};

void acces_measure(void)
{
 80019a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ac:	af00      	add	r7, sp, #0
	if(drdyFlag == 1)
 80019ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001b20 <acces_measure+0x178>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d173      	bne.n	8001a9e <acces_measure+0xf6>
	{

		drdyFlag = 0;
 80019b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b20 <acces_measure+0x178>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
		X = LIS3DSH_GetDataScaled();
 80019bc:	f004 fbde 	bl	800617c <LIS3DSH_GetDataScaled>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	4b56      	ldr	r3, [pc, #344]	@ (8001b24 <acces_measure+0x17c>)
 80019ca:	ed83 7b00 	vstr	d7, [r3]
		Y = LIS3DSH_GetDataScaledY();
 80019ce:	f004 fc11 	bl	80061f4 <LIS3DSH_GetDataScaledY>
 80019d2:	eeb0 7a40 	vmov.f32	s14, s0
 80019d6:	eef0 7a60 	vmov.f32	s15, s1
 80019da:	4b53      	ldr	r3, [pc, #332]	@ (8001b28 <acces_measure+0x180>)
 80019dc:	ed83 7b00 	vstr	d7, [r3]
		Z = LIS3DSH_GetDataScaledZ();
 80019e0:	f004 fc44 	bl	800626c <LIS3DSH_GetDataScaledZ>
 80019e4:	eeb0 7a40 	vmov.f32	s14, s0
 80019e8:	eef0 7a60 	vmov.f32	s15, s1
 80019ec:	4b4f      	ldr	r3, [pc, #316]	@ (8001b2c <acces_measure+0x184>)
 80019ee:	ed83 7b00 	vstr	d7, [r3]

		measured_roll = (int)((((atan2((double)(-X.x) , sqrt((double)Y.y *(double) Y.y +(double) Z.z *(double) Z.z)) * 57.3)+1.5))* -1);
 80019f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001b24 <acces_measure+0x17c>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	4692      	mov	sl, r2
 80019fa:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80019fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001b28 <acces_measure+0x180>)
 8001a00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a04:	4b48      	ldr	r3, [pc, #288]	@ (8001b28 <acces_measure+0x180>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fdf5 	bl	80005f8 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4690      	mov	r8, r2
 8001a14:	4699      	mov	r9, r3
 8001a16:	4b45      	ldr	r3, [pc, #276]	@ (8001b2c <acces_measure+0x184>)
 8001a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a1c:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <acces_measure+0x184>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fde9 	bl	80005f8 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4640      	mov	r0, r8
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	f7fe fc2d 	bl	800028c <__adddf3>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	ec43 2b17 	vmov	d7, r2, r3
 8001a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3e:	eef0 0a67 	vmov.f32	s1, s15
 8001a42:	f009 f845 	bl	800aad0 <sqrt>
 8001a46:	eeb0 7a40 	vmov.f32	s14, s0
 8001a4a:	eef0 7a60 	vmov.f32	s15, s1
 8001a4e:	eeb0 1a47 	vmov.f32	s2, s14
 8001a52:	eef0 1a67 	vmov.f32	s3, s15
 8001a56:	ec4b ab10 	vmov	d0, sl, fp
 8001a5a:	f009 f837 	bl	800aacc <atan2>
 8001a5e:	ec51 0b10 	vmov	r0, r1, d0
 8001a62:	a32b      	add	r3, pc, #172	@ (adr r3, 8001b10 <acces_measure+0x168>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fdc6 	bl	80005f8 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <acces_measure+0x188>)
 8001a7a:	f7fe fc07 	bl	800028c <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7ff f864 	bl	8000b58 <__aeabi_d2iz>
 8001a90:	ee07 0a90 	vmov	s15, r0
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	4b26      	ldr	r3, [pc, #152]	@ (8001b34 <acces_measure+0x18c>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]
	}
		measured_pitch =(int)((atan2(Y.y, Z.z) * 180 / 3.14)+1.2);
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <acces_measure+0x180>)
 8001aa0:	ed93 7b00 	vldr	d7, [r3]
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <acces_measure+0x184>)
 8001aa6:	ed93 6b00 	vldr	d6, [r3]
 8001aaa:	eeb0 1a46 	vmov.f32	s2, s12
 8001aae:	eef0 1a66 	vmov.f32	s3, s13
 8001ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab6:	eef0 0a67 	vmov.f32	s1, s15
 8001aba:	f009 f807 	bl	800aacc <atan2>
 8001abe:	ec51 0b10 	vmov	r0, r1, d0
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <acces_measure+0x190>)
 8001ac8:	f7fe fd96 	bl	80005f8 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	a310      	add	r3, pc, #64	@ (adr r3, 8001b18 <acces_measure+0x170>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe feb7 	bl	800084c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <acces_measure+0x194>)
 8001aec:	f7fe fbce 	bl	800028c <__adddf3>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f82e 	bl	8000b58 <__aeabi_d2iz>
 8001afc:	ee07 0a90 	vmov	s15, r0
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <acces_measure+0x198>)
 8001b06:	edc3 7a00 	vstr	s15, [r3]
}
 8001b0a:	bf00      	nop
 8001b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b10:	66666666 	.word	0x66666666
 8001b14:	404ca666 	.word	0x404ca666
 8001b18:	51eb851f 	.word	0x51eb851f
 8001b1c:	40091eb8 	.word	0x40091eb8
 8001b20:	20000448 	.word	0x20000448
 8001b24:	20000430 	.word	0x20000430
 8001b28:	20000438 	.word	0x20000438
 8001b2c:	20000440 	.word	0x20000440
 8001b30:	3ff80000 	.word	0x3ff80000
 8001b34:	20000424 	.word	0x20000424
 8001b38:	40668000 	.word	0x40668000
 8001b3c:	3ff33333 	.word	0x3ff33333
 8001b40:	20000428 	.word	0x20000428

08001b44 <receiver_motor_value>:



void receiver_motor_value(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af02      	add	r7, sp, #8
	roll_right = degree_change_percentage(rec_roll, 500, 1000, 0, 50);
 8001b4a:	4b48      	ldr	r3, [pc, #288]	@ (8001c6c <receiver_motor_value+0x128>)
 8001b4c:	8818      	ldrh	r0, [r3, #0]
 8001b4e:	2332      	movs	r3, #50	@ 0x32
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2300      	movs	r3, #0
 8001b54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b58:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001b5c:	f7ff fec6 	bl	80018ec <degree_change_percentage>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b42      	ldr	r3, [pc, #264]	@ (8001c70 <receiver_motor_value+0x12c>)
 8001b66:	801a      	strh	r2, [r3, #0]
	if(roll_right >=1050) roll_right = 0;
 8001b68:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <receiver_motor_value+0x12c>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	f240 4219 	movw	r2, #1049	@ 0x419
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d902      	bls.n	8001b7a <receiver_motor_value+0x36>
 8001b74:	4b3e      	ldr	r3, [pc, #248]	@ (8001c70 <receiver_motor_value+0x12c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	801a      	strh	r2, [r3, #0]
	roll_left = degree_change_percentage(rec_roll, 0, 500, 50, 0);
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c6c <receiver_motor_value+0x128>)
 8001b7c:	8818      	ldrh	r0, [r3, #0]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2332      	movs	r3, #50	@ 0x32
 8001b84:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f7ff feaf 	bl	80018ec <degree_change_percentage>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <receiver_motor_value+0x130>)
 8001b94:	801a      	strh	r2, [r3, #0]
	if(roll_left >=1050) roll_left = 0;
 8001b96:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <receiver_motor_value+0x130>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	f240 4219 	movw	r2, #1049	@ 0x419
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d902      	bls.n	8001ba8 <receiver_motor_value+0x64>
 8001ba2:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <receiver_motor_value+0x130>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	801a      	strh	r2, [r3, #0]
	yaw_right = degree_change_percentage(rec_yaw, 500, 1000, 0, 50);
 8001ba8:	4b33      	ldr	r3, [pc, #204]	@ (8001c78 <receiver_motor_value+0x134>)
 8001baa:	8818      	ldrh	r0, [r3, #0]
 8001bac:	2332      	movs	r3, #50	@ 0x32
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bb6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001bba:	f7ff fe97 	bl	80018ec <degree_change_percentage>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c7c <receiver_motor_value+0x138>)
 8001bc4:	801a      	strh	r2, [r3, #0]
	if(yaw_right >= 1050) yaw_right = 0;
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c7c <receiver_motor_value+0x138>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f240 4219 	movw	r2, #1049	@ 0x419
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d902      	bls.n	8001bd8 <receiver_motor_value+0x94>
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <receiver_motor_value+0x138>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	801a      	strh	r2, [r3, #0]
	yaw_left = degree_change_percentage(rec_yaw, 0, 500, 50, 0);
 8001bd8:	4b27      	ldr	r3, [pc, #156]	@ (8001c78 <receiver_motor_value+0x134>)
 8001bda:	8818      	ldrh	r0, [r3, #0]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2332      	movs	r3, #50	@ 0x32
 8001be2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001be6:	2100      	movs	r1, #0
 8001be8:	f7ff fe80 	bl	80018ec <degree_change_percentage>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <receiver_motor_value+0x13c>)
 8001bf2:	801a      	strh	r2, [r3, #0]
	if(yaw_left >= 1050) yaw_left = 0;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <receiver_motor_value+0x13c>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	f240 4219 	movw	r2, #1049	@ 0x419
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d902      	bls.n	8001c06 <receiver_motor_value+0xc2>
 8001c00:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <receiver_motor_value+0x13c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	801a      	strh	r2, [r3, #0]
	pitch_forward = degree_change_percentage(rec_pitch,0 , 500, 50, 0);
 8001c06:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <receiver_motor_value+0x140>)
 8001c08:	8818      	ldrh	r0, [r3, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2332      	movs	r3, #50	@ 0x32
 8001c10:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c14:	2100      	movs	r1, #0
 8001c16:	f7ff fe69 	bl	80018ec <degree_change_percentage>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <receiver_motor_value+0x144>)
 8001c20:	801a      	strh	r2, [r3, #0]
	if(pitch_forward >= 1050) pitch_forward = 0;
 8001c22:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <receiver_motor_value+0x144>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	f240 4219 	movw	r2, #1049	@ 0x419
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d902      	bls.n	8001c34 <receiver_motor_value+0xf0>
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <receiver_motor_value+0x144>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	801a      	strh	r2, [r3, #0]
	pitch_back = degree_change_percentage(rec_pitch,500 , 1000, 0, 50);
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <receiver_motor_value+0x140>)
 8001c36:	8818      	ldrh	r0, [r3, #0]
 8001c38:	2332      	movs	r3, #50	@ 0x32
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c42:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001c46:	f7ff fe51 	bl	80018ec <degree_change_percentage>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <receiver_motor_value+0x148>)
 8001c50:	801a      	strh	r2, [r3, #0]
	if(pitch_back >= 1050) pitch_back = 0;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <receiver_motor_value+0x148>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	f240 4219 	movw	r2, #1049	@ 0x419
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d902      	bls.n	8001c64 <receiver_motor_value+0x120>
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <receiver_motor_value+0x148>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	801a      	strh	r2, [r3, #0]
	// End
};
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000044a 	.word	0x2000044a
 8001c70:	2000044c 	.word	0x2000044c
 8001c74:	2000044e 	.word	0x2000044e
 8001c78:	2000045a 	.word	0x2000045a
 8001c7c:	20000454 	.word	0x20000454
 8001c80:	20000456 	.word	0x20000456
 8001c84:	20000458 	.word	0x20000458
 8001c88:	20000450 	.word	0x20000450
 8001c8c:	20000452 	.word	0x20000452

08001c90 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a91      	ldr	r2, [pc, #580]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f040 8143 	bne.w	8001f2a <HAL_TIM_IC_CaptureCallback+0x29a>
	{
		switch(htim->Channel)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7f1b      	ldrb	r3, [r3, #28]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	2b07      	cmp	r3, #7
 8001cac:	f200 813c 	bhi.w	8001f28 <HAL_TIM_IC_CaptureCallback+0x298>
 8001cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001cd9 	.word	0x08001cd9
 8001cbc:	08001d59 	.word	0x08001d59
 8001cc0:	08001f29 	.word	0x08001f29
 8001cc4:	08001ddd 	.word	0x08001ddd
 8001cc8:	08001f29 	.word	0x08001f29
 8001ccc:	08001f29 	.word	0x08001f29
 8001cd0:	08001f29 	.word	0x08001f29
 8001cd4:	08001e61 	.word	0x08001e61
		{
		case HAL_TIM_ACTIVE_CHANNEL_1:
			if((TIM1->CCER & TIM_CCER_CC1P)==0)
 8001cd8:	4b82      	ldr	r3, [pc, #520]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10a      	bne.n	8001cfa <HAL_TIM_IC_CaptureCallback+0x6a>
			{
				ch1_rising = TIM1->CCR1;
 8001ce4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ee8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001cea:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC1P;
 8001cec:	4b7d      	ldr	r3, [pc, #500]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	6213      	str	r3, [r2, #32]
				 * ch1 falling 570
				 * pre_ch1 = pre_ch1 falling - pre_ch1_rising = 570 - 65000 = -64430
				 * pre_ch1 +=0xFFFF(65536) --> 1106
				 */
			}
			break;
 8001cf8:	e117      	b.n	8001f2a <HAL_TIM_IC_CaptureCallback+0x29a>
				ch1_falling = TIM1->CCR1;
 8001cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfe:	4a7b      	ldr	r2, [pc, #492]	@ (8001eec <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001d00:	6013      	str	r3, [r2, #0]
				pre_ch1 = ch1_falling - ch1_rising;
 8001d02:	4b7a      	ldr	r3, [pc, #488]	@ (8001eec <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b78      	ldr	r3, [pc, #480]	@ (8001ee8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	4a78      	ldr	r2, [pc, #480]	@ (8001ef0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001d0e:	6013      	str	r3, [r2, #0]
				pre_ch1 = degree_change_percentage(pre_ch1, 2140, 3862, 0,1000);
 8001d10:	4b77      	ldr	r3, [pc, #476]	@ (8001ef0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b298      	uxth	r0, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f640 7216 	movw	r2, #3862	@ 0xf16
 8001d22:	f640 015c 	movw	r1, #2140	@ 0x85c
 8001d26:	f7ff fde1 	bl	80018ec <degree_change_percentage>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b70      	ldr	r3, [pc, #448]	@ (8001ef0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001d30:	601a      	str	r2, [r3, #0]
				if(pre_ch1 <= 1000 && pre_ch1 >= 0)rec_roll=pre_ch1;
 8001d32:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d3a:	d806      	bhi.n	8001d4a <HAL_TIM_IC_CaptureCallback+0xba>
 8001d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ef0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001d48:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC1P;
 8001d4a:	4b66      	ldr	r3, [pc, #408]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a65      	ldr	r2, [pc, #404]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001d50:	f023 0302 	bic.w	r3, r3, #2
 8001d54:	6213      	str	r3, [r2, #32]
			break;
 8001d56:	e0e8      	b.n	8001f2a <HAL_TIM_IC_CaptureCallback+0x29a>
		case HAL_TIM_ACTIVE_CHANNEL_2:
			if((TIM1->CCER & TIM_CCER_CC2P)==0)
 8001d58:	4b62      	ldr	r3, [pc, #392]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10a      	bne.n	8001d7a <HAL_TIM_IC_CaptureCallback+0xea>
			{
				ch2_rising = TIM1->CCR2;
 8001d64:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d68:	4a63      	ldr	r2, [pc, #396]	@ (8001ef8 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001d6a:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC2P;
 8001d6c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a5c      	ldr	r2, [pc, #368]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001d72:	f043 0320 	orr.w	r3, r3, #32
 8001d76:	6213      	str	r3, [r2, #32]
				if(pre_ch2 < 0)pre_ch2 += 0xFFFF;
				pre_ch2 = degree_change_percentage(pre_ch2, 2140, 3862, 0, 1000);
				if(pre_ch2 <= 1000 && pre_ch2 >= 0)rec_pitch=pre_ch2;
				TIM1->CCER &= ~TIM_CCER_CC2P;
			}
			break;
 8001d78:	e0d7      	b.n	8001f2a <HAL_TIM_IC_CaptureCallback+0x29a>
				ch2_falling = TIM1->CCR2;
 8001d7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d7e:	4a5f      	ldr	r2, [pc, #380]	@ (8001efc <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001d80:	6013      	str	r3, [r2, #0]
				pre_ch2 = ch2_falling - ch2_rising;
 8001d82:	4b5e      	ldr	r3, [pc, #376]	@ (8001efc <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef8 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8001f00 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001d8e:	6013      	str	r3, [r2, #0]
				if(pre_ch2 < 0)pre_ch2 += 0xFFFF;
 8001d90:	4b5b      	ldr	r3, [pc, #364]	@ (8001f00 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
				pre_ch2 = degree_change_percentage(pre_ch2, 2140, 3862, 0, 1000);
 8001d94:	4b5a      	ldr	r3, [pc, #360]	@ (8001f00 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b298      	uxth	r0, r3
 8001d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2300      	movs	r3, #0
 8001da2:	f640 7216 	movw	r2, #3862	@ 0xf16
 8001da6:	f640 015c 	movw	r1, #2140	@ 0x85c
 8001daa:	f7ff fd9f 	bl	80018ec <degree_change_percentage>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001db4:	601a      	str	r2, [r3, #0]
				if(pre_ch2 <= 1000 && pre_ch2 >= 0)rec_pitch=pre_ch2;
 8001db6:	4b52      	ldr	r3, [pc, #328]	@ (8001f00 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dbe:	d806      	bhi.n	8001dce <HAL_TIM_IC_CaptureCallback+0x13e>
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f00 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8001f00 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b4e      	ldr	r3, [pc, #312]	@ (8001f04 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001dcc:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC2P;
 8001dce:	4b45      	ldr	r3, [pc, #276]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a44      	ldr	r2, [pc, #272]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001dd4:	f023 0320 	bic.w	r3, r3, #32
 8001dd8:	6213      	str	r3, [r2, #32]
			break;
 8001dda:	e0a6      	b.n	8001f2a <HAL_TIM_IC_CaptureCallback+0x29a>
		case HAL_TIM_ACTIVE_CHANNEL_3:
			if((TIM1->CCER & TIM_CCER_CC3P)==0)
 8001ddc:	4b41      	ldr	r3, [pc, #260]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10a      	bne.n	8001dfe <HAL_TIM_IC_CaptureCallback+0x16e>
			{
				ch3_rising = TIM1->CCR3;
 8001de8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	4a46      	ldr	r2, [pc, #280]	@ (8001f08 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001dee:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC3P;
 8001df0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfa:	6213      	str	r3, [r2, #32]
				if(pre_ch3 < 0)pre_ch3 += 0xFFFF;
				pre_ch3 = degree_change_percentage(pre_ch3, 2140, 3862, 0, 1000);
				if(pre_ch3 <= 1000 && pre_ch3 >= 0)rec_throttle=pre_ch3;
				TIM1->CCER &= ~TIM_CCER_CC3P;
			}
			break;
 8001dfc:	e095      	b.n	8001f2a <HAL_TIM_IC_CaptureCallback+0x29a>
				ch3_falling = TIM1->CCR3;
 8001dfe:	4b39      	ldr	r3, [pc, #228]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e02:	4a42      	ldr	r2, [pc, #264]	@ (8001f0c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001e04:	6013      	str	r3, [r2, #0]
				pre_ch3 = ch3_falling - ch3_rising;
 8001e06:	4b41      	ldr	r3, [pc, #260]	@ (8001f0c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f08 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a3f      	ldr	r2, [pc, #252]	@ (8001f10 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001e12:	6013      	str	r3, [r2, #0]
				if(pre_ch3 < 0)pre_ch3 += 0xFFFF;
 8001e14:	4b3e      	ldr	r3, [pc, #248]	@ (8001f10 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001e16:	681b      	ldr	r3, [r3, #0]
				pre_ch3 = degree_change_percentage(pre_ch3, 2140, 3862, 0, 1000);
 8001e18:	4b3d      	ldr	r3, [pc, #244]	@ (8001f10 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b298      	uxth	r0, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2300      	movs	r3, #0
 8001e26:	f640 7216 	movw	r2, #3862	@ 0xf16
 8001e2a:	f640 015c 	movw	r1, #2140	@ 0x85c
 8001e2e:	f7ff fd5d 	bl	80018ec <degree_change_percentage>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001e38:	601a      	str	r2, [r3, #0]
				if(pre_ch3 <= 1000 && pre_ch3 >= 0)rec_throttle=pre_ch3;
 8001e3a:	4b35      	ldr	r3, [pc, #212]	@ (8001f10 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e42:	d806      	bhi.n	8001e52 <HAL_TIM_IC_CaptureCallback+0x1c2>
 8001e44:	4b32      	ldr	r3, [pc, #200]	@ (8001f10 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	4b31      	ldr	r3, [pc, #196]	@ (8001f14 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001e50:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC3P;
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a23      	ldr	r2, [pc, #140]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001e5c:	6213      	str	r3, [r2, #32]
			break;
 8001e5e:	e064      	b.n	8001f2a <HAL_TIM_IC_CaptureCallback+0x29a>
		case HAL_TIM_ACTIVE_CHANNEL_4:
			if((TIM1->CCER & TIM_CCER_CC4P)==0)
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <HAL_TIM_IC_CaptureCallback+0x1f2>
			{
				ch4_rising = TIM1->CCR4;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	4a29      	ldr	r2, [pc, #164]	@ (8001f18 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001e72:	6013      	str	r3, [r2, #0]
				TIM1->CCER |= TIM_CCER_CC4P;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e7e:	6213      	str	r3, [r2, #32]
				if(pre_ch4 < 0)pre_ch4 += 0xFFFF;
				pre_ch4 = degree_change_percentage(pre_ch4, 2140, 3862, 0, 1000);
				if(pre_ch4 <= 1000 && pre_ch4 >= 0)rec_yaw=pre_ch4;
				TIM1->CCER &= ~TIM_CCER_CC4P;
			}
			break;
 8001e80:	e053      	b.n	8001f2a <HAL_TIM_IC_CaptureCallback+0x29a>
				ch4_falling = TIM1->CCR4;
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001e88:	6013      	str	r3, [r2, #0]
				pre_ch4 = ch4_falling - ch4_rising;
 8001e8a:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	4a22      	ldr	r2, [pc, #136]	@ (8001f20 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001e96:	6013      	str	r3, [r2, #0]
				if(pre_ch4 < 0)pre_ch4 += 0xFFFF;
 8001e98:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
				pre_ch4 = degree_change_percentage(pre_ch4, 2140, 3862, 0, 1000);
 8001e9c:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b298      	uxth	r0, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f640 7216 	movw	r2, #3862	@ 0xf16
 8001eae:	f640 015c 	movw	r1, #2140	@ 0x85c
 8001eb2:	f7ff fd1b 	bl	80018ec <degree_change_percentage>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001ebc:	601a      	str	r2, [r3, #0]
				if(pre_ch4 <= 1000 && pre_ch4 >= 0)rec_yaw=pre_ch4;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ec6:	d806      	bhi.n	8001ed6 <HAL_TIM_IC_CaptureCallback+0x246>
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001ed4:	801a      	strh	r2, [r3, #0]
				TIM1->CCER &= ~TIM_CCER_CC4P;
 8001ed6:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a02      	ldr	r2, [pc, #8]	@ (8001ee4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001edc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ee0:	6213      	str	r3, [r2, #32]
			break;
 8001ee2:	e022      	b.n	8001f2a <HAL_TIM_IC_CaptureCallback+0x29a>
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	200003e4 	.word	0x200003e4
 8001eec:	20000404 	.word	0x20000404
 8001ef0:	20000414 	.word	0x20000414
 8001ef4:	2000044a 	.word	0x2000044a
 8001ef8:	200003e8 	.word	0x200003e8
 8001efc:	20000408 	.word	0x20000408
 8001f00:	20000418 	.word	0x20000418
 8001f04:	20000458 	.word	0x20000458
 8001f08:	200003ec 	.word	0x200003ec
 8001f0c:	2000040c 	.word	0x2000040c
 8001f10:	2000041c 	.word	0x2000041c
 8001f14:	2000045c 	.word	0x2000045c
 8001f18:	200003f0 	.word	0x200003f0
 8001f1c:	20000410 	.word	0x20000410
 8001f20:	20000420 	.word	0x20000420
 8001f24:	2000045a 	.word	0x2000045a
		default:
			break;
 8001f28:	bf00      	nop
		}
	}

	if(htim->Instance == TIM3) {
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a22      	ldr	r2, [pc, #136]	@ (8001fb8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d13d      	bne.n	8001fb0 <HAL_TIM_IC_CaptureCallback+0x320>
		if((TIM3->CCER & TIM_CCER_CC1P)==0)
 8001f34:	4b20      	ldr	r3, [pc, #128]	@ (8001fb8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <HAL_TIM_IC_CaptureCallback+0x2c6>
					{
						ch5_rising = TIM3->CCR1;
 8001f40:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f44:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001f46:	6013      	str	r3, [r2, #0]
						TIM3->CCER |= TIM_CCER_CC1P;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	6213      	str	r3, [r2, #32]
						 * pre_ch1 +=0xFFFF(65536) --> 1106
						 */
					}

	}
};
 8001f54:	e02c      	b.n	8001fb0 <HAL_TIM_IC_CaptureCallback+0x320>
						ch5_falling = TIM3->CCR1;
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5a:	4a19      	ldr	r2, [pc, #100]	@ (8001fc0 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001f5c:	6013      	str	r3, [r2, #0]
						pre_ch1 = ch1_falling - ch1_rising;
 8001f5e:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <HAL_TIM_IC_CaptureCallback+0x334>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4a18      	ldr	r2, [pc, #96]	@ (8001fcc <HAL_TIM_IC_CaptureCallback+0x33c>)
 8001f6a:	6013      	str	r3, [r2, #0]
						pre_ch5 = degree_change_percentage(pre_ch5, 2140, 3862, 0,1000);
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b298      	uxth	r0, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f640 7216 	movw	r2, #3862	@ 0xf16
 8001f7e:	f640 015c 	movw	r1, #2140	@ 0x85c
 8001f82:	f7ff fcb3 	bl	80018ec <degree_change_percentage>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f8c:	601a      	str	r2, [r3, #0]
						if(pre_ch5 <= 1000 && pre_ch5 >= 0)mode_status=pre_ch5;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f96:	d805      	bhi.n	8001fa4 <HAL_TIM_IC_CaptureCallback+0x314>
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd4 <HAL_TIM_IC_CaptureCallback+0x344>)
 8001fa2:	6013      	str	r3, [r2, #0]
						TIM3->CCER &= ~TIM_CCER_CC1P;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a03      	ldr	r2, [pc, #12]	@ (8001fb8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001faa:	f023 0302 	bic.w	r3, r3, #2
 8001fae:	6213      	str	r3, [r2, #32]
};
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	200003f4 	.word	0x200003f4
 8001fc0:	200003f8 	.word	0x200003f8
 8001fc4:	20000404 	.word	0x20000404
 8001fc8:	200003e4 	.word	0x200003e4
 8001fcc:	20000414 	.word	0x20000414
 8001fd0:	200003fc 	.word	0x200003fc
 8001fd4:	20000400 	.word	0x20000400

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <Error_Handler+0x4>

08001fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	4a0f      	ldr	r2, [pc, #60]	@ (800202c <HAL_MspInit+0x4c>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <HAL_MspInit+0x4c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4b09      	ldr	r3, [pc, #36]	@ (800202c <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	4a08      	ldr	r2, [pc, #32]	@ (800202c <HAL_MspInit+0x4c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	@ 0x40
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_MspInit+0x4c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800201e:	2007      	movs	r0, #7
 8002020:	f000 fc6e 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800

08002030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	@ 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a19      	ldr	r2, [pc, #100]	@ (80020b4 <HAL_SPI_MspInit+0x84>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d12b      	bne.n	80020aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <HAL_SPI_MspInit+0x88>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	4a17      	ldr	r2, [pc, #92]	@ (80020b8 <HAL_SPI_MspInit+0x88>)
 800205c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002060:	6453      	str	r3, [r2, #68]	@ 0x44
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <HAL_SPI_MspInit+0x88>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <HAL_SPI_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4a10      	ldr	r2, [pc, #64]	@ (80020b8 <HAL_SPI_MspInit+0x88>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	@ 0x30
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <HAL_SPI_MspInit+0x88>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800208a:	23e0      	movs	r3, #224	@ 0xe0
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800209a:	2305      	movs	r3, #5
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	@ (80020bc <HAL_SPI_MspInit+0x8c>)
 80020a6:	f000 fc6d 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	@ 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40013000 	.word	0x40013000
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020000 	.word	0x40020000

080020c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	@ 0x30
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3a      	ldr	r2, [pc, #232]	@ (80021c8 <HAL_TIM_Base_MspInit+0x108>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d135      	bne.n	800214e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	4b39      	ldr	r3, [pc, #228]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	4a38      	ldr	r2, [pc, #224]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f2:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a31      	ldr	r2, [pc, #196]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b2f      	ldr	r3, [pc, #188]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = AILERON_Pin|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800211a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800212c:	2301      	movs	r3, #1
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	4826      	ldr	r0, [pc, #152]	@ (80021d0 <HAL_TIM_Base_MspInit+0x110>)
 8002138:	f000 fc24 	bl	8002984 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	201b      	movs	r0, #27
 8002142:	f000 fbe8 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002146:	201b      	movs	r0, #27
 8002148:	f000 fc01 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800214c:	e038      	b.n	80021c0 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a20      	ldr	r2, [pc, #128]	@ (80021d4 <HAL_TIM_Base_MspInit+0x114>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d133      	bne.n	80021c0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	4a1a      	ldr	r2, [pc, #104]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	6413      	str	r3, [r2, #64]	@ 0x40
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	4a13      	ldr	r2, [pc, #76]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6313      	str	r3, [r2, #48]	@ 0x30
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_TIM_Base_MspInit+0x10c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002190:	2340      	movs	r3, #64	@ 0x40
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021a0:	2302      	movs	r3, #2
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	480b      	ldr	r0, [pc, #44]	@ (80021d8 <HAL_TIM_Base_MspInit+0x118>)
 80021ac:	f000 fbea 	bl	8002984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	201d      	movs	r0, #29
 80021b6:	f000 fbae 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021ba:	201d      	movs	r0, #29
 80021bc:	f000 fbc7 	bl	800294e <HAL_NVIC_EnableIRQ>
}
 80021c0:	bf00      	nop
 80021c2:	3730      	adds	r7, #48	@ 0x30
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40020800 	.word	0x40020800

080021dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ec:	d10d      	bne.n	800220a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_TIM_PWM_MspInit+0x3c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <HAL_TIM_PWM_MspInit+0x3c>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_TIM_PWM_MspInit+0x3c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800

0800221c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223c:	d11d      	bne.n	800227a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_TIM_MspPostInit+0x68>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a0f      	ldr	r2, [pc, #60]	@ (8002284 <HAL_TIM_MspPostInit+0x68>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_TIM_MspPostInit+0x68>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin|MOTOR_3_Pin|MOTOR_4_Pin;
 800225a:	230f      	movs	r3, #15
 800225c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800226a:	2301      	movs	r3, #1
 800226c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4619      	mov	r1, r3
 8002274:	4804      	ldr	r0, [pc, #16]	@ (8002288 <HAL_TIM_MspPostInit+0x6c>)
 8002276:	f000 fb85 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800227a:	bf00      	nop
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000

0800228c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	@ 0x30
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a33      	ldr	r2, [pc, #204]	@ (8002378 <HAL_UART_MspInit+0xec>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12d      	bne.n	800230a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	4b32      	ldr	r3, [pc, #200]	@ (800237c <HAL_UART_MspInit+0xf0>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	4a31      	ldr	r2, [pc, #196]	@ (800237c <HAL_UART_MspInit+0xf0>)
 80022b8:	f043 0310 	orr.w	r3, r3, #16
 80022bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022be:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <HAL_UART_MspInit+0xf0>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <HAL_UART_MspInit+0xf0>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4a2a      	ldr	r2, [pc, #168]	@ (800237c <HAL_UART_MspInit+0xf0>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022da:	4b28      	ldr	r3, [pc, #160]	@ (800237c <HAL_UART_MspInit+0xf0>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022e6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f8:	2307      	movs	r3, #7
 80022fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 031c 	add.w	r3, r7, #28
 8002300:	4619      	mov	r1, r3
 8002302:	481f      	ldr	r0, [pc, #124]	@ (8002380 <HAL_UART_MspInit+0xf4>)
 8002304:	f000 fb3e 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002308:	e031      	b.n	800236e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1d      	ldr	r2, [pc, #116]	@ (8002384 <HAL_UART_MspInit+0xf8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d12c      	bne.n	800236e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	4b18      	ldr	r3, [pc, #96]	@ (800237c <HAL_UART_MspInit+0xf0>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	4a17      	ldr	r2, [pc, #92]	@ (800237c <HAL_UART_MspInit+0xf0>)
 800231e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002322:	6413      	str	r3, [r2, #64]	@ 0x40
 8002324:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_UART_MspInit+0xf0>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_UART_MspInit+0xf0>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_UART_MspInit+0xf0>)
 800233a:	f043 0302 	orr.w	r3, r3, #2
 800233e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002340:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_UART_MspInit+0xf0>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800234c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800235e:	2307      	movs	r3, #7
 8002360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	4807      	ldr	r0, [pc, #28]	@ (8002388 <HAL_UART_MspInit+0xfc>)
 800236a:	f000 fb0b 	bl	8002984 <HAL_GPIO_Init>
}
 800236e:	bf00      	nop
 8002370:	3730      	adds	r7, #48	@ 0x30
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40011000 	.word	0x40011000
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000
 8002384:	40004800 	.word	0x40004800
 8002388:	40020400 	.word	0x40020400

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <NMI_Handler+0x4>

08002394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <HardFault_Handler+0x4>

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <MemManage_Handler+0x4>

080023a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e2:	f000 f979 	bl	80026d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}

080023ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 fc98 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023fc:	4802      	ldr	r0, [pc, #8]	@ (8002408 <TIM1_CC_IRQHandler+0x10>)
 80023fe:	f002 fa69 	bl	80048d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000027c 	.word	0x2000027c

0800240c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002410:	4802      	ldr	r0, [pc, #8]	@ (800241c <TIM3_IRQHandler+0x10>)
 8002412:	f002 fa5f 	bl	80048d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000030c 	.word	0x2000030c

08002420 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002424:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002428:	f000 fc7c 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return 1;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_kill>:

int _kill(int pid, int sig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800244a:	f004 ffb9 	bl	80073c0 <__errno>
 800244e:	4603      	mov	r3, r0
 8002450:	2216      	movs	r2, #22
 8002452:	601a      	str	r2, [r3, #0]
  return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_exit>:

void _exit (int status)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ffe7 	bl	8002440 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002472:	bf00      	nop
 8002474:	e7fd      	b.n	8002472 <_exit+0x12>

08002476 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e00a      	b.n	800249e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002488:	f3af 8000 	nop.w
 800248c:	4601      	mov	r1, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	60ba      	str	r2, [r7, #8]
 8002494:	b2ca      	uxtb	r2, r1
 8002496:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbf0      	blt.n	8002488 <_read+0x12>
  }

  return len;
 80024a6:	687b      	ldr	r3, [r7, #4]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e009      	b.n	80024d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	60ba      	str	r2, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	dbf1      	blt.n	80024c2 <_write+0x12>
  }
  return len;
 80024de:	687b      	ldr	r3, [r7, #4]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_close>:

int _close(int file)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002510:	605a      	str	r2, [r3, #4]
  return 0;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <_isatty>:

int _isatty(int file)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002558:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <_sbrk+0x5c>)
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <_sbrk+0x60>)
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002564:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <_sbrk+0x64>)
 800256e:	4a12      	ldr	r2, [pc, #72]	@ (80025b8 <_sbrk+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002580:	f004 ff1e 	bl	80073c0 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	220c      	movs	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e009      	b.n	80025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	4a05      	ldr	r2, [pc, #20]	@ (80025b4 <_sbrk+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20020000 	.word	0x20020000
 80025b0:	00000400 	.word	0x00000400
 80025b4:	20000460 	.word	0x20000460
 80025b8:	20000618 	.word	0x20000618

080025bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002618 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025e4:	f7ff ffea 	bl	80025bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e8:	480c      	ldr	r0, [pc, #48]	@ (800261c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ea:	490d      	ldr	r1, [pc, #52]	@ (8002620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f0:	e002      	b.n	80025f8 <LoopCopyDataInit>

080025f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f6:	3304      	adds	r3, #4

080025f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025fc:	d3f9      	bcc.n	80025f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002600:	4c0a      	ldr	r4, [pc, #40]	@ (800262c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002604:	e001      	b.n	800260a <LoopFillZerobss>

08002606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002608:	3204      	adds	r2, #4

0800260a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800260c:	d3fb      	bcc.n	8002606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800260e:	f004 fedd 	bl	80073cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002612:	f7fe fce7 	bl	8000fe4 <main>
  bx  lr    
 8002616:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800261c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002620:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002624:	0800b690 	.word	0x0800b690
  ldr r2, =_sbss
 8002628:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800262c:	20000618 	.word	0x20000618

08002630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC_IRQHandler>
	...

08002634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <HAL_Init+0x40>)
 800263e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <HAL_Init+0x40>)
 800264a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800264e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002650:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a07      	ldr	r2, [pc, #28]	@ (8002674 <HAL_Init+0x40>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265c:	2003      	movs	r0, #3
 800265e:	f000 f94f 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002662:	2000      	movs	r0, #0
 8002664:	f000 f808 	bl	8002678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002668:	f7ff fcba 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00

08002678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_InitTick+0x54>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_InitTick+0x58>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800268e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f967 	bl	800296a <HAL_SYSTICK_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00e      	b.n	80026c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d80a      	bhi.n	80026c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f000 f92f 	bl	8002916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b8:	4a06      	ldr	r2, [pc, #24]	@ (80026d4 <HAL_InitTick+0x5c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000008 	.word	0x20000008
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_IncTick+0x20>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_IncTick+0x24>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a04      	ldr	r2, [pc, #16]	@ (80026fc <HAL_IncTick+0x24>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000008 	.word	0x20000008
 80026fc:	20000464 	.word	0x20000464

08002700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <HAL_GetTick+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000464 	.word	0x20000464

08002718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff ffee 	bl	8002700 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d005      	beq.n	800273e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002732:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <HAL_Delay+0x44>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800273e:	bf00      	nop
 8002740:	f7ff ffde 	bl	8002700 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d8f7      	bhi.n	8002740 <HAL_Delay+0x28>
  {
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000008 	.word	0x20000008

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	@ (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	@ (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	@ (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	@ 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	@ 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028cc:	d301      	bcc.n	80028d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d2:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <SysTick_Config+0x40>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028da:	210f      	movs	r1, #15
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f7ff ff8e 	bl	8002800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <SysTick_Config+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ea:	4b04      	ldr	r3, [pc, #16]	@ (80028fc <SysTick_Config+0x40>)
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff29 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff3e 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff8e 	bl	8002854 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5d 	bl	8002800 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff31 	bl	80027c4 <__NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffa2 	bl	80028bc <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	e16b      	b.n	8002c78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	f040 815a 	bne.w	8002c72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d005      	beq.n	80029d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d130      	bne.n	8002a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	2203      	movs	r2, #3
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 0201 	and.w	r2, r3, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d017      	beq.n	8002a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d123      	bne.n	8002ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	08da      	lsrs	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	220f      	movs	r2, #15
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	08da      	lsrs	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3208      	adds	r2, #8
 8002ac2:	69b9      	ldr	r1, [r7, #24]
 8002ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0203 	and.w	r2, r3, #3
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80b4 	beq.w	8002c72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b60      	ldr	r3, [pc, #384]	@ (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	4a5f      	ldr	r2, [pc, #380]	@ (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b26:	4a5b      	ldr	r2, [pc, #364]	@ (8002c94 <HAL_GPIO_Init+0x310>)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	@ (8002c98 <HAL_GPIO_Init+0x314>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02b      	beq.n	8002baa <HAL_GPIO_Init+0x226>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a51      	ldr	r2, [pc, #324]	@ (8002c9c <HAL_GPIO_Init+0x318>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d025      	beq.n	8002ba6 <HAL_GPIO_Init+0x222>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a50      	ldr	r2, [pc, #320]	@ (8002ca0 <HAL_GPIO_Init+0x31c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <HAL_GPIO_Init+0x21e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4f      	ldr	r2, [pc, #316]	@ (8002ca4 <HAL_GPIO_Init+0x320>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x21a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x216>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4d      	ldr	r2, [pc, #308]	@ (8002cac <HAL_GPIO_Init+0x328>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x212>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002cb0 <HAL_GPIO_Init+0x32c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x20e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb4 <HAL_GPIO_Init+0x330>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x20a>
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	e00e      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	e00c      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b92:	2306      	movs	r3, #6
 8002b94:	e00a      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b96:	2305      	movs	r3, #5
 8002b98:	e008      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	e006      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e004      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e002      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002baa:	2300      	movs	r3, #0
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	f002 0203 	and.w	r2, r2, #3
 8002bb2:	0092      	lsls	r2, r2, #2
 8002bb4:	4093      	lsls	r3, r2
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bbc:	4935      	ldr	r1, [pc, #212]	@ (8002c94 <HAL_GPIO_Init+0x310>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bca:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bee:	4a32      	ldr	r2, [pc, #200]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf4:	4b30      	ldr	r3, [pc, #192]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c18:	4a27      	ldr	r2, [pc, #156]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c1e:	4b26      	ldr	r3, [pc, #152]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c42:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c6c:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	f67f ae90 	bls.w	80029a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3724      	adds	r7, #36	@ 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40013800 	.word	0x40013800
 8002c98:	40020000 	.word	0x40020000
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40020c00 	.word	0x40020c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40021400 	.word	0x40021400
 8002cb0:	40021800 	.word	0x40021800
 8002cb4:	40021c00 	.word	0x40021c00
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d00:	887a      	ldrh	r2, [r7, #2]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	041a      	lsls	r2, r3, #16
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	400b      	ands	r3, r1
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d2e:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d3a:	4a05      	ldr	r2, [pc, #20]	@ (8002d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fcf8 	bl	8001738 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e267      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d075      	beq.n	8002e5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d72:	4b88      	ldr	r3, [pc, #544]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d00c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7e:	4b85      	ldr	r3, [pc, #532]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d112      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8a:	4b82      	ldr	r3, [pc, #520]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d96:	d10b      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	4b7e      	ldr	r3, [pc, #504]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d05b      	beq.n	8002e5c <HAL_RCC_OscConfig+0x108>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d157      	bne.n	8002e5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e242      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x74>
 8002dba:	4b76      	ldr	r3, [pc, #472]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a75      	ldr	r2, [pc, #468]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e01d      	b.n	8002e04 <HAL_RCC_OscConfig+0xb0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x98>
 8002dd2:	4b70      	ldr	r3, [pc, #448]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6f      	ldr	r2, [pc, #444]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b6d      	ldr	r3, [pc, #436]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6c      	ldr	r2, [pc, #432]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0xb0>
 8002dec:	4b69      	ldr	r3, [pc, #420]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a68      	ldr	r2, [pc, #416]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b66      	ldr	r3, [pc, #408]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a65      	ldr	r2, [pc, #404]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d013      	beq.n	8002e34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7ff fc78 	bl	8002700 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e14:	f7ff fc74 	bl	8002700 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	@ 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e207      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b5b      	ldr	r3, [pc, #364]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0xc0>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7ff fc64 	bl	8002700 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7ff fc60 	bl	8002700 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	@ 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1f3      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	4b51      	ldr	r3, [pc, #324]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0xe8>
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d063      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e76:	4b47      	ldr	r3, [pc, #284]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d11c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e82:	4b44      	ldr	r3, [pc, #272]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d116      	bne.n	8002ebc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8e:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x152>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e1c7      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4937      	ldr	r1, [pc, #220]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	e03a      	b.n	8002f32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <HAL_RCC_OscConfig+0x244>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7ff fc19 	bl	8002700 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed2:	f7ff fc15 	bl	8002700 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e1a8      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef0:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4925      	ldr	r1, [pc, #148]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
 8002f04:	e015      	b.n	8002f32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f06:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <HAL_RCC_OscConfig+0x244>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7ff fbf8 	bl	8002700 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f14:	f7ff fbf4 	bl	8002700 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e187      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d036      	beq.n	8002fac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f46:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <HAL_RCC_OscConfig+0x248>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7ff fbd8 	bl	8002700 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f54:	f7ff fbd4 	bl	8002700 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e167      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x200>
 8002f72:	e01b      	b.n	8002fac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f74:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <HAL_RCC_OscConfig+0x248>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7ff fbc1 	bl	8002700 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f80:	e00e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f82:	f7ff fbbd 	bl	8002700 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d907      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e150      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	42470000 	.word	0x42470000
 8002f9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa0:	4b88      	ldr	r3, [pc, #544]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ea      	bne.n	8002f82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8097 	beq.w	80030e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fbe:	4b81      	ldr	r3, [pc, #516]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10f      	bne.n	8002fea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	4b7d      	ldr	r3, [pc, #500]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	4a7c      	ldr	r2, [pc, #496]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fda:	4b7a      	ldr	r3, [pc, #488]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fea:	4b77      	ldr	r3, [pc, #476]	@ (80031c8 <HAL_RCC_OscConfig+0x474>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff6:	4b74      	ldr	r3, [pc, #464]	@ (80031c8 <HAL_RCC_OscConfig+0x474>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a73      	ldr	r2, [pc, #460]	@ (80031c8 <HAL_RCC_OscConfig+0x474>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003002:	f7ff fb7d 	bl	8002700 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7ff fb79 	bl	8002700 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e10c      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	4b6a      	ldr	r3, [pc, #424]	@ (80031c8 <HAL_RCC_OscConfig+0x474>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x2ea>
 8003030:	4b64      	ldr	r3, [pc, #400]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003034:	4a63      	ldr	r2, [pc, #396]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	@ 0x70
 800303c:	e01c      	b.n	8003078 <HAL_RCC_OscConfig+0x324>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x30c>
 8003046:	4b5f      	ldr	r3, [pc, #380]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	4a5e      	ldr	r2, [pc, #376]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6713      	str	r3, [r2, #112]	@ 0x70
 8003052:	4b5c      	ldr	r3, [pc, #368]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a5b      	ldr	r2, [pc, #364]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0x324>
 8003060:	4b58      	ldr	r3, [pc, #352]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003064:	4a57      	ldr	r2, [pc, #348]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	@ 0x70
 800306c:	4b55      	ldr	r3, [pc, #340]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a54      	ldr	r2, [pc, #336]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003072:	f023 0304 	bic.w	r3, r3, #4
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d015      	beq.n	80030ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7ff fb3e 	bl	8002700 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003086:	e00a      	b.n	800309e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003088:	f7ff fb3a 	bl	8002700 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e0cb      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	4b49      	ldr	r3, [pc, #292]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0ee      	beq.n	8003088 <HAL_RCC_OscConfig+0x334>
 80030aa:	e014      	b.n	80030d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ac:	f7ff fb28 	bl	8002700 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7ff fb24 	bl	8002700 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0b5      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	4b3e      	ldr	r3, [pc, #248]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ee      	bne.n	80030b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030dc:	4b39      	ldr	r3, [pc, #228]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	4a38      	ldr	r2, [pc, #224]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a1 	beq.w	8003234 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030f2:	4b34      	ldr	r3, [pc, #208]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d05c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d141      	bne.n	800318a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b31      	ldr	r3, [pc, #196]	@ (80031cc <HAL_RCC_OscConfig+0x478>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7ff faf8 	bl	8002700 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003114:	f7ff faf4 	bl	8002700 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e087      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b27      	ldr	r3, [pc, #156]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	491b      	ldr	r1, [pc, #108]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b1b      	ldr	r3, [pc, #108]	@ (80031cc <HAL_RCC_OscConfig+0x478>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7ff facd 	bl	8002700 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316a:	f7ff fac9 	bl	8002700 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e05c      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x416>
 8003188:	e054      	b.n	8003234 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <HAL_RCC_OscConfig+0x478>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7ff fab6 	bl	8002700 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003198:	f7ff fab2 	bl	8002700 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e045      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_RCC_OscConfig+0x470>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x444>
 80031b6:	e03d      	b.n	8003234 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e038      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40007000 	.word	0x40007000
 80031cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x4ec>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d028      	beq.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d121      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d11a      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003200:	4013      	ands	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003206:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003208:	4293      	cmp	r3, r2
 800320a:	d111      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0cc      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b68      	ldr	r3, [pc, #416]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d90c      	bls.n	8003280 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b65      	ldr	r3, [pc, #404]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b63      	ldr	r3, [pc, #396]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0b8      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003298:	4b59      	ldr	r3, [pc, #356]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a58      	ldr	r2, [pc, #352]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b0:	4b53      	ldr	r3, [pc, #332]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a52      	ldr	r2, [pc, #328]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032bc:	4b50      	ldr	r3, [pc, #320]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	494d      	ldr	r1, [pc, #308]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d044      	beq.n	8003364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	4b47      	ldr	r3, [pc, #284]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d119      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e07f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	4b3f      	ldr	r3, [pc, #252]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e06f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e067      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b37      	ldr	r3, [pc, #220]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4934      	ldr	r1, [pc, #208]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003334:	f7ff f9e4 	bl	8002700 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7ff f9e0 	bl	8002700 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e04f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d20c      	bcs.n	800338c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b22      	ldr	r3, [pc, #136]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b20      	ldr	r3, [pc, #128]	@ (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e032      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003398:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4916      	ldr	r1, [pc, #88]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	490e      	ldr	r1, [pc, #56]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ca:	f000 f821 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033ce:	4602      	mov	r2, r0
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	490a      	ldr	r1, [pc, #40]	@ (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	5ccb      	ldrb	r3, [r1, r3]
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	4a09      	ldr	r2, [pc, #36]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033e6:	4b09      	ldr	r3, [pc, #36]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff f944 	bl	8002678 <HAL_InitTick>

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023c00 	.word	0x40023c00
 8003400:	40023800 	.word	0x40023800
 8003404:	0800b1c8 	.word	0x0800b1c8
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003414:	b094      	sub	sp, #80	@ 0x50
 8003416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	647b      	str	r3, [r7, #68]	@ 0x44
 800341c:	2300      	movs	r3, #0
 800341e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003420:	2300      	movs	r3, #0
 8003422:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003428:	4b79      	ldr	r3, [pc, #484]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d00d      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x40>
 8003434:	2b08      	cmp	r3, #8
 8003436:	f200 80e1 	bhi.w	80035fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x34>
 800343e:	2b04      	cmp	r3, #4
 8003440:	d003      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0x3a>
 8003442:	e0db      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003444:	4b73      	ldr	r3, [pc, #460]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x204>)
 8003446:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003448:	e0db      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800344a:	4b73      	ldr	r3, [pc, #460]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x208>)
 800344c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800344e:	e0d8      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003450:	4b6f      	ldr	r3, [pc, #444]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003458:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800345a:	4b6d      	ldr	r3, [pc, #436]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003466:	4b6a      	ldr	r3, [pc, #424]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	2200      	movs	r2, #0
 800346e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003470:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003478:	633b      	str	r3, [r7, #48]	@ 0x30
 800347a:	2300      	movs	r3, #0
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34
 800347e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003482:	4622      	mov	r2, r4
 8003484:	462b      	mov	r3, r5
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003494:	0150      	lsls	r0, r2, #5
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4621      	mov	r1, r4
 800349c:	1a51      	subs	r1, r2, r1
 800349e:	6139      	str	r1, [r7, #16]
 80034a0:	4629      	mov	r1, r5
 80034a2:	eb63 0301 	sbc.w	r3, r3, r1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b4:	4659      	mov	r1, fp
 80034b6:	018b      	lsls	r3, r1, #6
 80034b8:	4651      	mov	r1, sl
 80034ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034be:	4651      	mov	r1, sl
 80034c0:	018a      	lsls	r2, r1, #6
 80034c2:	4651      	mov	r1, sl
 80034c4:	ebb2 0801 	subs.w	r8, r2, r1
 80034c8:	4659      	mov	r1, fp
 80034ca:	eb63 0901 	sbc.w	r9, r3, r1
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e2:	4690      	mov	r8, r2
 80034e4:	4699      	mov	r9, r3
 80034e6:	4623      	mov	r3, r4
 80034e8:	eb18 0303 	adds.w	r3, r8, r3
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	462b      	mov	r3, r5
 80034f0:	eb49 0303 	adc.w	r3, r9, r3
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003502:	4629      	mov	r1, r5
 8003504:	024b      	lsls	r3, r1, #9
 8003506:	4621      	mov	r1, r4
 8003508:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800350c:	4621      	mov	r1, r4
 800350e:	024a      	lsls	r2, r1, #9
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003516:	2200      	movs	r2, #0
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800351c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003520:	f7fd fbb2 	bl	8000c88 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800352c:	e058      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b38      	ldr	r3, [pc, #224]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	2200      	movs	r2, #0
 8003536:	4618      	mov	r0, r3
 8003538:	4611      	mov	r1, r2
 800353a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
 8003544:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003548:	4642      	mov	r2, r8
 800354a:	464b      	mov	r3, r9
 800354c:	f04f 0000 	mov.w	r0, #0
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	0159      	lsls	r1, r3, #5
 8003556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355a:	0150      	lsls	r0, r2, #5
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4641      	mov	r1, r8
 8003562:	ebb2 0a01 	subs.w	sl, r2, r1
 8003566:	4649      	mov	r1, r9
 8003568:	eb63 0b01 	sbc.w	fp, r3, r1
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003578:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800357c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003580:	ebb2 040a 	subs.w	r4, r2, sl
 8003584:	eb63 050b 	sbc.w	r5, r3, fp
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	00eb      	lsls	r3, r5, #3
 8003592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003596:	00e2      	lsls	r2, r4, #3
 8003598:	4614      	mov	r4, r2
 800359a:	461d      	mov	r5, r3
 800359c:	4643      	mov	r3, r8
 800359e:	18e3      	adds	r3, r4, r3
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	464b      	mov	r3, r9
 80035a4:	eb45 0303 	adc.w	r3, r5, r3
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035b6:	4629      	mov	r1, r5
 80035b8:	028b      	lsls	r3, r1, #10
 80035ba:	4621      	mov	r1, r4
 80035bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c0:	4621      	mov	r1, r4
 80035c2:	028a      	lsls	r2, r1, #10
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ca:	2200      	movs	r2, #0
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	61fa      	str	r2, [r7, #28]
 80035d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d4:	f7fd fb58 	bl	8000c88 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4613      	mov	r3, r2
 80035de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	3301      	adds	r3, #1
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80035f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035fa:	e002      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x204>)
 80035fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003604:	4618      	mov	r0, r3
 8003606:	3750      	adds	r7, #80	@ 0x50
 8003608:	46bd      	mov	sp, r7
 800360a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	00f42400 	.word	0x00f42400
 8003618:	007a1200 	.word	0x007a1200

0800361c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003620:	4b03      	ldr	r3, [pc, #12]	@ (8003630 <HAL_RCC_GetHCLKFreq+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003638:	f7ff fff0 	bl	800361c <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4903      	ldr	r1, [pc, #12]	@ (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40023800 	.word	0x40023800
 8003658:	0800b1d8 	.word	0x0800b1d8

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003660:	f7ff ffdc 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	@ (800367c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	0b5b      	lsrs	r3, r3, #13
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4903      	ldr	r1, [pc, #12]	@ (8003680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	0800b1d8 	.word	0x0800b1d8

08003684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07b      	b.n	800378e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036a6:	d009      	beq.n	80036bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
 80036ae:	e005      	b.n	80036bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fe fcaa 	bl	8002030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003740:	ea42 0103 	orr.w	r1, r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	f003 0104 	and.w	r1, r3, #4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	f003 0210 	and.w	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800377c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b088      	sub	sp, #32
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_SPI_Transmit+0x22>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e12d      	b.n	8003a14 <HAL_SPI_Transmit+0x27e>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c0:	f7fe ff9e 	bl	8002700 <HAL_GetTick>
 80037c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
 80037d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037da:	e116      	b.n	8003a0a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_Transmit+0x52>
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037ec:	e10d      	b.n	8003a0a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2203      	movs	r2, #3
 80037f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003834:	d10f      	bne.n	8003856 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003844:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003854:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d007      	beq.n	8003874 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800387c:	d14f      	bne.n	800391e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_SPI_Transmit+0xf6>
 8003886:	8afb      	ldrh	r3, [r7, #22]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d142      	bne.n	8003912 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	881a      	ldrh	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038b0:	e02f      	b.n	8003912 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d112      	bne.n	80038e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038e4:	e015      	b.n	8003912 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038e6:	f7fe ff0b 	bl	8002700 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d803      	bhi.n	80038fe <HAL_SPI_Transmit+0x168>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d102      	bne.n	8003904 <HAL_SPI_Transmit+0x16e>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003910:	e07b      	b.n	8003a0a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ca      	bne.n	80038b2 <HAL_SPI_Transmit+0x11c>
 800391c:	e050      	b.n	80039c0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_SPI_Transmit+0x196>
 8003926:	8afb      	ldrh	r3, [r7, #22]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d144      	bne.n	80039b6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	7812      	ldrb	r2, [r2, #0]
 8003938:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003952:	e030      	b.n	80039b6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d113      	bne.n	800398a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	7812      	ldrb	r2, [r2, #0]
 800396e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003988:	e015      	b.n	80039b6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800398a:	f7fe feb9 	bl	8002700 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d803      	bhi.n	80039a2 <HAL_SPI_Transmit+0x20c>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d102      	bne.n	80039a8 <HAL_SPI_Transmit+0x212>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80039b4:	e029      	b.n	8003a0a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1c9      	bne.n	8003954 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	6839      	ldr	r1, [r7, #0]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fbdf 	bl	8004188 <SPI_EndRxTxTransaction>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e003      	b.n	8003a0a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a12:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d002      	beq.n	8003a42 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a40:	e0fb      	b.n	8003c3a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4a:	d112      	bne.n	8003a72 <HAL_SPI_Receive+0x56>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10e      	bne.n	8003a72 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2204      	movs	r2, #4
 8003a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a5c:	88fa      	ldrh	r2, [r7, #6]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f8ef 	bl	8003c4c <HAL_SPI_TransmitReceive>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	e0e8      	b.n	8003c44 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_SPI_Receive+0x64>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0e1      	b.n	8003c44 <HAL_SPI_Receive+0x228>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a88:	f7fe fe3a 	bl	8002700 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_SPI_Receive+0x7e>
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a9e:	e0cc      	b.n	8003c3a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	88fa      	ldrh	r2, [r7, #6]
 8003abe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae6:	d10f      	bne.n	8003b08 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b12:	2b40      	cmp	r3, #64	@ 0x40
 8003b14:	d007      	beq.n	8003b26 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d16a      	bne.n	8003c04 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b2e:	e032      	b.n	8003b96 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d115      	bne.n	8003b6a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f103 020c 	add.w	r2, r3, #12
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b68:	e015      	b.n	8003b96 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b6a:	f7fe fdc9 	bl	8002700 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d803      	bhi.n	8003b82 <HAL_SPI_Receive+0x166>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d102      	bne.n	8003b88 <HAL_SPI_Receive+0x16c>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b94:	e051      	b.n	8003c3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1c7      	bne.n	8003b30 <HAL_SPI_Receive+0x114>
 8003ba0:	e035      	b.n	8003c0e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d113      	bne.n	8003bd8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bd6:	e015      	b.n	8003c04 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bd8:	f7fe fd92 	bl	8002700 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d803      	bhi.n	8003bf0 <HAL_SPI_Receive+0x1d4>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d102      	bne.n	8003bf6 <HAL_SPI_Receive+0x1da>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003c02:	e01a      	b.n	8003c3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1c9      	bne.n	8003ba2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	6839      	ldr	r1, [r7, #0]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fa52 	bl	80040bc <SPI_EndRxTransaction>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
 8003c30:	e003      	b.n	8003c3a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08c      	sub	sp, #48	@ 0x30
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x26>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e198      	b.n	8003fa4 <HAL_SPI_TransmitReceive+0x358>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c7a:	f7fe fd41 	bl	8002700 <HAL_GetTick>
 8003c7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d00f      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x70>
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ca2:	d107      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d103      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x68>
 8003cac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d003      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003cba:	e16d      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x82>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x82>
 8003cc8:	887b      	ldrh	r3, [r7, #2]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003cd4:	e160      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d003      	beq.n	8003cea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2205      	movs	r2, #5
 8003ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	887a      	ldrh	r2, [r7, #2]
 8003cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	887a      	ldrh	r2, [r7, #2]
 8003d12:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2a:	2b40      	cmp	r3, #64	@ 0x40
 8003d2c:	d007      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d46:	d17c      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x10a>
 8003d50:	8b7b      	ldrh	r3, [r7, #26]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d16a      	bne.n	8003e2c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	881a      	ldrh	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	1c9a      	adds	r2, r3, #2
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7a:	e057      	b.n	8003e2c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d11b      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x176>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d016      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x176>
 8003d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d113      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	881a      	ldrh	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	1c9a      	adds	r2, r3, #2
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d119      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x1b8>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d014      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de4:	b292      	uxth	r2, r2
 8003de6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	1c9a      	adds	r2, r3, #2
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e00:	2301      	movs	r3, #1
 8003e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e04:	f7fe fc7c 	bl	8002700 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d80b      	bhi.n	8003e2c <HAL_SPI_TransmitReceive+0x1e0>
 8003e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d007      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003e2a:	e0b5      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1a2      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x130>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d19d      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x130>
 8003e40:	e080      	b.n	8003f44 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x204>
 8003e4a:	8b7b      	ldrh	r3, [r7, #26]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d16f      	bne.n	8003f30 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	7812      	ldrb	r2, [r2, #0]
 8003e5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e76:	e05b      	b.n	8003f30 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d11c      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x274>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d017      	beq.n	8003ec0 <HAL_SPI_TransmitReceive+0x274>
 8003e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d114      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	7812      	ldrb	r2, [r2, #0]
 8003ea2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d119      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x2b6>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d014      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003efe:	2301      	movs	r3, #1
 8003f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f02:	f7fe fbfd 	bl	8002700 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d803      	bhi.n	8003f1a <HAL_SPI_TransmitReceive+0x2ce>
 8003f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d102      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x2d4>
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d107      	bne.n	8003f30 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003f2e:	e033      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d19e      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x22c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d199      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f91d 	bl	8004188 <SPI_EndRxTxTransaction>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d006      	beq.n	8003f62 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003f60:	e01a      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8e:	e003      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003fa0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3730      	adds	r7, #48	@ 0x30
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fbc:	f7fe fba0 	bl	8002700 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fcc:	f7fe fb98 	bl	8002700 <HAL_GetTick>
 8003fd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fd2:	4b39      	ldr	r3, [pc, #228]	@ (80040b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	015b      	lsls	r3, r3, #5
 8003fd8:	0d1b      	lsrs	r3, r3, #20
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe2:	e054      	b.n	800408e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d050      	beq.n	800408e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fec:	f7fe fb88 	bl	8002700 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d902      	bls.n	8004002 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d13d      	bne.n	800407e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004010:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800401a:	d111      	bne.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x94>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004024:	d004      	beq.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402e:	d107      	bne.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800403e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004048:	d10f      	bne.n	800406a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004068:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e017      	b.n	80040ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3b01      	subs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d19b      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000000 	.word	0x20000000

080040bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040d0:	d111      	bne.n	80040f6 <SPI_EndRxTransaction+0x3a>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040da:	d004      	beq.n	80040e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e4:	d107      	bne.n	80040f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040fe:	d12a      	bne.n	8004156 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004108:	d012      	beq.n	8004130 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2200      	movs	r2, #0
 8004112:	2180      	movs	r1, #128	@ 0x80
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff ff49 	bl	8003fac <SPI_WaitFlagStateUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02d      	beq.n	800417c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004124:	f043 0220 	orr.w	r2, r3, #32
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e026      	b.n	800417e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	2101      	movs	r1, #1
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff ff36 	bl	8003fac <SPI_WaitFlagStateUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01a      	beq.n	800417c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e013      	b.n	800417e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2200      	movs	r2, #0
 800415e:	2101      	movs	r1, #1
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff ff23 	bl	8003fac <SPI_WaitFlagStateUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e000      	b.n	800417e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2201      	movs	r2, #1
 800419c:	2102      	movs	r1, #2
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff ff04 	bl	8003fac <SPI_WaitFlagStateUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e032      	b.n	8004220 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <SPI_EndRxTxTransaction+0xa0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1b      	ldr	r2, [pc, #108]	@ (800422c <SPI_EndRxTxTransaction+0xa4>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	0d5b      	lsrs	r3, r3, #21
 80041c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041d8:	d112      	bne.n	8004200 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2200      	movs	r2, #0
 80041e2:	2180      	movs	r1, #128	@ 0x80
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff fee1 	bl	8003fac <SPI_WaitFlagStateUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d016      	beq.n	800421e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e00f      	b.n	8004220 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	3b01      	subs	r3, #1
 800420a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004216:	2b80      	cmp	r3, #128	@ 0x80
 8004218:	d0f2      	beq.n	8004200 <SPI_EndRxTxTransaction+0x78>
 800421a:	e000      	b.n	800421e <SPI_EndRxTxTransaction+0x96>
        break;
 800421c:	bf00      	nop
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20000000 	.word	0x20000000
 800422c:	165e9f81 	.word	0x165e9f81

08004230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e041      	b.n	80042c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd ff32 	bl	80020c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f000 fe6e 	bl	8004f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d001      	beq.n	80042e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e046      	b.n	8004376 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <HAL_TIM_Base_Start+0xb4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d022      	beq.n	8004340 <HAL_TIM_Base_Start+0x70>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004302:	d01d      	beq.n	8004340 <HAL_TIM_Base_Start+0x70>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <HAL_TIM_Base_Start+0xb8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d018      	beq.n	8004340 <HAL_TIM_Base_Start+0x70>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <HAL_TIM_Base_Start+0xbc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d013      	beq.n	8004340 <HAL_TIM_Base_Start+0x70>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1c      	ldr	r2, [pc, #112]	@ (8004390 <HAL_TIM_Base_Start+0xc0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00e      	beq.n	8004340 <HAL_TIM_Base_Start+0x70>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	@ (8004394 <HAL_TIM_Base_Start+0xc4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_TIM_Base_Start+0x70>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a19      	ldr	r2, [pc, #100]	@ (8004398 <HAL_TIM_Base_Start+0xc8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_TIM_Base_Start+0x70>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a18      	ldr	r2, [pc, #96]	@ (800439c <HAL_TIM_Base_Start+0xcc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d111      	bne.n	8004364 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b06      	cmp	r3, #6
 8004350:	d010      	beq.n	8004374 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004362:	e007      	b.n	8004374 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40010400 	.word	0x40010400
 8004398:	40014000 	.word	0x40014000
 800439c:	40001800 	.word	0x40001800

080043a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fd ff08 	bl	80021dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 fdb6 	bl	8004f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_TIM_PWM_Start+0x24>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	e022      	b.n	80044aa <HAL_TIM_PWM_Start+0x6a>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b04      	cmp	r3, #4
 8004468:	d109      	bne.n	800447e <HAL_TIM_PWM_Start+0x3e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	bf14      	ite	ne
 8004476:	2301      	movne	r3, #1
 8004478:	2300      	moveq	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	e015      	b.n	80044aa <HAL_TIM_PWM_Start+0x6a>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d109      	bne.n	8004498 <HAL_TIM_PWM_Start+0x58>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e008      	b.n	80044aa <HAL_TIM_PWM_Start+0x6a>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e07c      	b.n	80045ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d104      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x82>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044c0:	e013      	b.n	80044ea <HAL_TIM_PWM_Start+0xaa>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_PWM_Start+0x92>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044d0:	e00b      	b.n	80044ea <HAL_TIM_PWM_Start+0xaa>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_PWM_Start+0xa2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044e0:	e003      	b.n	80044ea <HAL_TIM_PWM_Start+0xaa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2201      	movs	r2, #1
 80044f0:	6839      	ldr	r1, [r7, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 f94c 	bl	8005790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a2d      	ldr	r2, [pc, #180]	@ (80045b4 <HAL_TIM_PWM_Start+0x174>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_TIM_PWM_Start+0xcc>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2c      	ldr	r2, [pc, #176]	@ (80045b8 <HAL_TIM_PWM_Start+0x178>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_TIM_PWM_Start+0xd0>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_TIM_PWM_Start+0xd2>
 8004510:	2300      	movs	r3, #0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a22      	ldr	r2, [pc, #136]	@ (80045b4 <HAL_TIM_PWM_Start+0x174>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d022      	beq.n	8004576 <HAL_TIM_PWM_Start+0x136>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004538:	d01d      	beq.n	8004576 <HAL_TIM_PWM_Start+0x136>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1f      	ldr	r2, [pc, #124]	@ (80045bc <HAL_TIM_PWM_Start+0x17c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d018      	beq.n	8004576 <HAL_TIM_PWM_Start+0x136>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1d      	ldr	r2, [pc, #116]	@ (80045c0 <HAL_TIM_PWM_Start+0x180>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_TIM_PWM_Start+0x136>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1c      	ldr	r2, [pc, #112]	@ (80045c4 <HAL_TIM_PWM_Start+0x184>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_TIM_PWM_Start+0x136>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a16      	ldr	r2, [pc, #88]	@ (80045b8 <HAL_TIM_PWM_Start+0x178>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_TIM_PWM_Start+0x136>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a18      	ldr	r2, [pc, #96]	@ (80045c8 <HAL_TIM_PWM_Start+0x188>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_TIM_PWM_Start+0x136>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a16      	ldr	r2, [pc, #88]	@ (80045cc <HAL_TIM_PWM_Start+0x18c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d111      	bne.n	800459a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b06      	cmp	r3, #6
 8004586:	d010      	beq.n	80045aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004598:	e007      	b.n	80045aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40010400 	.word	0x40010400
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40001800 	.word	0x40001800

080045d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e041      	b.n	8004666 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f839 	bl	800466e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fc9e 	bl	8004f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_IC_Start_IT+0x1e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	e013      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x46>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_IC_Start_IT+0x2e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	e00b      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x46>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_IC_Start_IT+0x3e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	e003      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x46>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_TIM_IC_Start_IT+0x58>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e013      	b.n	8004704 <HAL_TIM_IC_Start_IT+0x80>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d104      	bne.n	80046ec <HAL_TIM_IC_Start_IT+0x68>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	e00b      	b.n	8004704 <HAL_TIM_IC_Start_IT+0x80>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d104      	bne.n	80046fc <HAL_TIM_IC_Start_IT+0x78>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e003      	b.n	8004704 <HAL_TIM_IC_Start_IT+0x80>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004702:	b2db      	uxtb	r3, r3
 8004704:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004706:	7bbb      	ldrb	r3, [r7, #14]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d102      	bne.n	8004712 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800470c:	7b7b      	ldrb	r3, [r7, #13]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d001      	beq.n	8004716 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e0cc      	b.n	80048b0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_TIM_IC_Start_IT+0xa2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004724:	e013      	b.n	800474e <HAL_TIM_IC_Start_IT+0xca>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b04      	cmp	r3, #4
 800472a:	d104      	bne.n	8004736 <HAL_TIM_IC_Start_IT+0xb2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004734:	e00b      	b.n	800474e <HAL_TIM_IC_Start_IT+0xca>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d104      	bne.n	8004746 <HAL_TIM_IC_Start_IT+0xc2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004744:	e003      	b.n	800474e <HAL_TIM_IC_Start_IT+0xca>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <HAL_TIM_IC_Start_IT+0xda>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800475c:	e013      	b.n	8004786 <HAL_TIM_IC_Start_IT+0x102>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d104      	bne.n	800476e <HAL_TIM_IC_Start_IT+0xea>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800476c:	e00b      	b.n	8004786 <HAL_TIM_IC_Start_IT+0x102>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d104      	bne.n	800477e <HAL_TIM_IC_Start_IT+0xfa>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800477c:	e003      	b.n	8004786 <HAL_TIM_IC_Start_IT+0x102>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b0c      	cmp	r3, #12
 800478a:	d841      	bhi.n	8004810 <HAL_TIM_IC_Start_IT+0x18c>
 800478c:	a201      	add	r2, pc, #4	@ (adr r2, 8004794 <HAL_TIM_IC_Start_IT+0x110>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047c9 	.word	0x080047c9
 8004798:	08004811 	.word	0x08004811
 800479c:	08004811 	.word	0x08004811
 80047a0:	08004811 	.word	0x08004811
 80047a4:	080047db 	.word	0x080047db
 80047a8:	08004811 	.word	0x08004811
 80047ac:	08004811 	.word	0x08004811
 80047b0:	08004811 	.word	0x08004811
 80047b4:	080047ed 	.word	0x080047ed
 80047b8:	08004811 	.word	0x08004811
 80047bc:	08004811 	.word	0x08004811
 80047c0:	08004811 	.word	0x08004811
 80047c4:	080047ff 	.word	0x080047ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0202 	orr.w	r2, r2, #2
 80047d6:	60da      	str	r2, [r3, #12]
      break;
 80047d8:	e01d      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0204 	orr.w	r2, r2, #4
 80047e8:	60da      	str	r2, [r3, #12]
      break;
 80047ea:	e014      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	60da      	str	r2, [r3, #12]
      break;
 80047fc:	e00b      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0210 	orr.w	r2, r2, #16
 800480c:	60da      	str	r2, [r3, #12]
      break;
 800480e:	e002      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	bf00      	nop
  }

  if (status == HAL_OK)
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d148      	bne.n	80048ae <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2201      	movs	r2, #1
 8004822:	6839      	ldr	r1, [r7, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 ffb3 	bl	8005790 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a22      	ldr	r2, [pc, #136]	@ (80048b8 <HAL_TIM_IC_Start_IT+0x234>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d022      	beq.n	800487a <HAL_TIM_IC_Start_IT+0x1f6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483c:	d01d      	beq.n	800487a <HAL_TIM_IC_Start_IT+0x1f6>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1e      	ldr	r2, [pc, #120]	@ (80048bc <HAL_TIM_IC_Start_IT+0x238>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d018      	beq.n	800487a <HAL_TIM_IC_Start_IT+0x1f6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1c      	ldr	r2, [pc, #112]	@ (80048c0 <HAL_TIM_IC_Start_IT+0x23c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_TIM_IC_Start_IT+0x1f6>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1b      	ldr	r2, [pc, #108]	@ (80048c4 <HAL_TIM_IC_Start_IT+0x240>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_TIM_IC_Start_IT+0x1f6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a19      	ldr	r2, [pc, #100]	@ (80048c8 <HAL_TIM_IC_Start_IT+0x244>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_TIM_IC_Start_IT+0x1f6>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a18      	ldr	r2, [pc, #96]	@ (80048cc <HAL_TIM_IC_Start_IT+0x248>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIM_IC_Start_IT+0x1f6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a16      	ldr	r2, [pc, #88]	@ (80048d0 <HAL_TIM_IC_Start_IT+0x24c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d111      	bne.n	800489e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b06      	cmp	r3, #6
 800488a:	d010      	beq.n	80048ae <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489c:	e007      	b.n	80048ae <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40010400 	.word	0x40010400
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40001800 	.word	0x40001800

080048d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d020      	beq.n	8004938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01b      	beq.n	8004938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0202 	mvn.w	r2, #2
 8004908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd f9b6 	bl	8001c90 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 faf3 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fafa 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d020      	beq.n	8004984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01b      	beq.n	8004984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0204 	mvn.w	r2, #4
 8004954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd f990 	bl	8001c90 <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 facd 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fad4 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d020      	beq.n	80049d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01b      	beq.n	80049d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0208 	mvn.w	r2, #8
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2204      	movs	r2, #4
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd f96a 	bl	8001c90 <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 faa7 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 faae 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d020      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01b      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0210 	mvn.w	r2, #16
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2208      	movs	r2, #8
 80049f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fd f944 	bl	8001c90 <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa81 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fa88 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0201 	mvn.w	r2, #1
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa5f 	bl	8004efe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00c      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 ff42 	bl	80058e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fa59 	bl	8004f3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00c      	beq.n	8004aac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0220 	mvn.w	r2, #32
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 ff14 	bl	80058d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e088      	b.n	8004be4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d11b      	bne.n	8004b18 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004af0:	f000 fc8a 	bl	8005408 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 020c 	bic.w	r2, r2, #12
 8004b02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	619a      	str	r2, [r3, #24]
 8004b16:	e060      	b.n	8004bda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d11c      	bne.n	8004b58 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004b2e:	f000 fd0e 	bl	800554e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6999      	ldr	r1, [r3, #24]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	619a      	str	r2, [r3, #24]
 8004b56:	e040      	b.n	8004bda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d11b      	bne.n	8004b96 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004b6e:	f000 fd5b 	bl	8005628 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 020c 	bic.w	r2, r2, #12
 8004b80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69d9      	ldr	r1, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	61da      	str	r2, [r3, #28]
 8004b94:	e021      	b.n	8004bda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d11c      	bne.n	8004bd6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004bac:	f000 fd78 	bl	80056a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004bbe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69d9      	ldr	r1, [r3, #28]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	021a      	lsls	r2, r3, #8
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	61da      	str	r2, [r3, #28]
 8004bd4:	e001      	b.n	8004bda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e0ae      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b0c      	cmp	r3, #12
 8004c16:	f200 809f 	bhi.w	8004d58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c20:	08004c55 	.word	0x08004c55
 8004c24:	08004d59 	.word	0x08004d59
 8004c28:	08004d59 	.word	0x08004d59
 8004c2c:	08004d59 	.word	0x08004d59
 8004c30:	08004c95 	.word	0x08004c95
 8004c34:	08004d59 	.word	0x08004d59
 8004c38:	08004d59 	.word	0x08004d59
 8004c3c:	08004d59 	.word	0x08004d59
 8004c40:	08004cd7 	.word	0x08004cd7
 8004c44:	08004d59 	.word	0x08004d59
 8004c48:	08004d59 	.word	0x08004d59
 8004c4c:	08004d59 	.word	0x08004d59
 8004c50:	08004d17 	.word	0x08004d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fa24 	bl	80050a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0208 	orr.w	r2, r2, #8
 8004c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6999      	ldr	r1, [r3, #24]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	619a      	str	r2, [r3, #24]
      break;
 8004c92:	e064      	b.n	8004d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fa74 	bl	8005188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6999      	ldr	r1, [r3, #24]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	021a      	lsls	r2, r3, #8
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	619a      	str	r2, [r3, #24]
      break;
 8004cd4:	e043      	b.n	8004d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fac9 	bl	8005274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0208 	orr.w	r2, r2, #8
 8004cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0204 	bic.w	r2, r2, #4
 8004d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69d9      	ldr	r1, [r3, #28]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	61da      	str	r2, [r3, #28]
      break;
 8004d14:	e023      	b.n	8004d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fb1d 	bl	800535c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69d9      	ldr	r1, [r3, #28]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	021a      	lsls	r2, r3, #8
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	61da      	str	r2, [r3, #28]
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_TIM_ConfigClockSource+0x1c>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e0b4      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x186>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc4:	d03e      	beq.n	8004e44 <HAL_TIM_ConfigClockSource+0xd4>
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dca:	f200 8087 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd2:	f000 8086 	beq.w	8004ee2 <HAL_TIM_ConfigClockSource+0x172>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dda:	d87f      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004ddc:	2b70      	cmp	r3, #112	@ 0x70
 8004dde:	d01a      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0xa6>
 8004de0:	2b70      	cmp	r3, #112	@ 0x70
 8004de2:	d87b      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b60      	cmp	r3, #96	@ 0x60
 8004de6:	d050      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x11a>
 8004de8:	2b60      	cmp	r3, #96	@ 0x60
 8004dea:	d877      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b50      	cmp	r3, #80	@ 0x50
 8004dee:	d03c      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0xfa>
 8004df0:	2b50      	cmp	r3, #80	@ 0x50
 8004df2:	d873      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d058      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x13a>
 8004df8:	2b40      	cmp	r3, #64	@ 0x40
 8004dfa:	d86f      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b30      	cmp	r3, #48	@ 0x30
 8004dfe:	d064      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15a>
 8004e00:	2b30      	cmp	r3, #48	@ 0x30
 8004e02:	d86b      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d060      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15a>
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d867      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d05c      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d05a      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15a>
 8004e14:	e062      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e26:	f000 fc93 	bl	8005750 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	609a      	str	r2, [r3, #8]
      break;
 8004e42:	e04f      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	f000 fc7c 	bl	8005750 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e66:	609a      	str	r2, [r3, #8]
      break;
 8004e68:	e03c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 fb3a 	bl	80054f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2150      	movs	r1, #80	@ 0x50
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fc49 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004e88:	e02c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 fb96 	bl	80055c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2160      	movs	r1, #96	@ 0x60
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fc39 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e01c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f000 fb1a 	bl	80054f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2140      	movs	r1, #64	@ 0x40
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fc29 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004ec8:	e00c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f000 fc20 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004eda:	e003      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee0:	e000      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a46      	ldr	r2, [pc, #280]	@ (800507c <TIM_Base_SetConfig+0x12c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6e:	d00f      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a43      	ldr	r2, [pc, #268]	@ (8005080 <TIM_Base_SetConfig+0x130>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00b      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a42      	ldr	r2, [pc, #264]	@ (8005084 <TIM_Base_SetConfig+0x134>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d007      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a41      	ldr	r2, [pc, #260]	@ (8005088 <TIM_Base_SetConfig+0x138>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a40      	ldr	r2, [pc, #256]	@ (800508c <TIM_Base_SetConfig+0x13c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d108      	bne.n	8004fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a35      	ldr	r2, [pc, #212]	@ (800507c <TIM_Base_SetConfig+0x12c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02b      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb0:	d027      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a32      	ldr	r2, [pc, #200]	@ (8005080 <TIM_Base_SetConfig+0x130>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d023      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a31      	ldr	r2, [pc, #196]	@ (8005084 <TIM_Base_SetConfig+0x134>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01f      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a30      	ldr	r2, [pc, #192]	@ (8005088 <TIM_Base_SetConfig+0x138>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01b      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800508c <TIM_Base_SetConfig+0x13c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d017      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8005090 <TIM_Base_SetConfig+0x140>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8005094 <TIM_Base_SetConfig+0x144>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00f      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <TIM_Base_SetConfig+0x148>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00b      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2b      	ldr	r2, [pc, #172]	@ (800509c <TIM_Base_SetConfig+0x14c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d007      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80050a0 <TIM_Base_SetConfig+0x150>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a29      	ldr	r2, [pc, #164]	@ (80050a4 <TIM_Base_SetConfig+0x154>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d108      	bne.n	8005014 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a10      	ldr	r2, [pc, #64]	@ (800507c <TIM_Base_SetConfig+0x12c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_Base_SetConfig+0xf8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a12      	ldr	r2, [pc, #72]	@ (800508c <TIM_Base_SetConfig+0x13c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d103      	bne.n	8005050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d105      	bne.n	800506e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	611a      	str	r2, [r3, #16]
  }
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40010400 	.word	0x40010400
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800
 800509c:	40001800 	.word	0x40001800
 80050a0:	40001c00 	.word	0x40001c00
 80050a4:	40002000 	.word	0x40002000

080050a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f023 0201 	bic.w	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 0302 	bic.w	r3, r3, #2
 80050f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a20      	ldr	r2, [pc, #128]	@ (8005180 <TIM_OC1_SetConfig+0xd8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC1_SetConfig+0x64>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1f      	ldr	r2, [pc, #124]	@ (8005184 <TIM_OC1_SetConfig+0xdc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10c      	bne.n	8005126 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0308 	bic.w	r3, r3, #8
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a15      	ldr	r2, [pc, #84]	@ (8005180 <TIM_OC1_SetConfig+0xd8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC1_SetConfig+0x8e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a14      	ldr	r2, [pc, #80]	@ (8005184 <TIM_OC1_SetConfig+0xdc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40010000 	.word	0x40010000
 8005184:	40010400 	.word	0x40010400

08005188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f023 0210 	bic.w	r2, r3, #16
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0320 	bic.w	r3, r3, #32
 80051d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a22      	ldr	r2, [pc, #136]	@ (800526c <TIM_OC2_SetConfig+0xe4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_OC2_SetConfig+0x68>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a21      	ldr	r2, [pc, #132]	@ (8005270 <TIM_OC2_SetConfig+0xe8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d10d      	bne.n	800520c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800520a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a17      	ldr	r2, [pc, #92]	@ (800526c <TIM_OC2_SetConfig+0xe4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_OC2_SetConfig+0x94>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a16      	ldr	r2, [pc, #88]	@ (8005270 <TIM_OC2_SetConfig+0xe8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d113      	bne.n	8005244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800522a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40010000 	.word	0x40010000
 8005270:	40010400 	.word	0x40010400

08005274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0303 	bic.w	r3, r3, #3
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a21      	ldr	r2, [pc, #132]	@ (8005354 <TIM_OC3_SetConfig+0xe0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC3_SetConfig+0x66>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a20      	ldr	r2, [pc, #128]	@ (8005358 <TIM_OC3_SetConfig+0xe4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10d      	bne.n	80052f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a16      	ldr	r2, [pc, #88]	@ (8005354 <TIM_OC3_SetConfig+0xe0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_OC3_SetConfig+0x92>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a15      	ldr	r2, [pc, #84]	@ (8005358 <TIM_OC3_SetConfig+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d113      	bne.n	800532e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800530c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	621a      	str	r2, [r3, #32]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40010000 	.word	0x40010000
 8005358:	40010400 	.word	0x40010400

0800535c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a12      	ldr	r2, [pc, #72]	@ (8005400 <TIM_OC4_SetConfig+0xa4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_OC4_SetConfig+0x68>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a11      	ldr	r2, [pc, #68]	@ (8005404 <TIM_OC4_SetConfig+0xa8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d109      	bne.n	80053d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	40010400 	.word	0x40010400

08005408 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f023 0201 	bic.w	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4a28      	ldr	r2, [pc, #160]	@ (80054d4 <TIM_TI1_SetConfig+0xcc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543c:	d017      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a25      	ldr	r2, [pc, #148]	@ (80054d8 <TIM_TI1_SetConfig+0xd0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a24      	ldr	r2, [pc, #144]	@ (80054dc <TIM_TI1_SetConfig+0xd4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a23      	ldr	r2, [pc, #140]	@ (80054e0 <TIM_TI1_SetConfig+0xd8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a22      	ldr	r2, [pc, #136]	@ (80054e4 <TIM_TI1_SetConfig+0xdc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a21      	ldr	r2, [pc, #132]	@ (80054e8 <TIM_TI1_SetConfig+0xe0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_TI1_SetConfig+0x66>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a20      	ldr	r2, [pc, #128]	@ (80054ec <TIM_TI1_SetConfig+0xe4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <TIM_TI1_SetConfig+0x6a>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <TIM_TI1_SetConfig+0x6c>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e003      	b.n	8005492 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f023 030a 	bic.w	r3, r3, #10
 80054ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f003 030a 	and.w	r3, r3, #10
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40001800 	.word	0x40001800

080054f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800551a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 030a 	bic.w	r3, r3, #10
 800552c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800554e:	b480      	push	{r7}
 8005550:	b087      	sub	sp, #28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f023 0210 	bic.w	r2, r3, #16
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800557a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800558c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	031b      	lsls	r3, r3, #12
 8005592:	b29b      	uxth	r3, r3
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0210 	bic.w	r2, r3, #16
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	031b      	lsls	r3, r3, #12
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005604:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	621a      	str	r2, [r3, #32]
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f023 0303 	bic.w	r3, r3, #3
 8005654:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005664:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	b2db      	uxtb	r3, r3
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005678:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	031b      	lsls	r3, r3, #12
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80056f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	031b      	lsls	r3, r3, #12
 80056f8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	f043 0307 	orr.w	r3, r3, #7
 800573c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800576a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	431a      	orrs	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2201      	movs	r2, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	401a      	ands	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e05a      	b.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a21      	ldr	r2, [pc, #132]	@ (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d022      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005840:	d01d      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1d      	ldr	r2, [pc, #116]	@ (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d018      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1b      	ldr	r2, [pc, #108]	@ (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d013      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1a      	ldr	r2, [pc, #104]	@ (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00e      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a18      	ldr	r2, [pc, #96]	@ (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d009      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a17      	ldr	r2, [pc, #92]	@ (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a15      	ldr	r2, [pc, #84]	@ (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d10c      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4313      	orrs	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40010400 	.word	0x40010400
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40001800 	.word	0x40001800

080058d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e042      	b.n	8005994 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc fcb2 	bl	800228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	@ 0x24
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800593e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f82b 	bl	800599c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800599c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a0:	b0c0      	sub	sp, #256	@ 0x100
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	68d9      	ldr	r1, [r3, #12]
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	ea40 0301 	orr.w	r3, r0, r1
 80059c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	431a      	orrs	r2, r3
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059f4:	f021 010c 	bic.w	r1, r1, #12
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a02:	430b      	orrs	r3, r1
 8005a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a16:	6999      	ldr	r1, [r3, #24]
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	ea40 0301 	orr.w	r3, r0, r1
 8005a22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b8f      	ldr	r3, [pc, #572]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d005      	beq.n	8005a3c <UART_SetConfig+0xa0>
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b8d      	ldr	r3, [pc, #564]	@ (8005c6c <UART_SetConfig+0x2d0>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d104      	bne.n	8005a46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a3c:	f7fd fe0e 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8005a40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a44:	e003      	b.n	8005a4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a46:	f7fd fdf5 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8005a4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a58:	f040 810c 	bne.w	8005c74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a6e:	4622      	mov	r2, r4
 8005a70:	462b      	mov	r3, r5
 8005a72:	1891      	adds	r1, r2, r2
 8005a74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a76:	415b      	adcs	r3, r3
 8005a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a7e:	4621      	mov	r1, r4
 8005a80:	eb12 0801 	adds.w	r8, r2, r1
 8005a84:	4629      	mov	r1, r5
 8005a86:	eb43 0901 	adc.w	r9, r3, r1
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a9e:	4690      	mov	r8, r2
 8005aa0:	4699      	mov	r9, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	eb18 0303 	adds.w	r3, r8, r3
 8005aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005aac:	462b      	mov	r3, r5
 8005aae:	eb49 0303 	adc.w	r3, r9, r3
 8005ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ac2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ac6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005aca:	460b      	mov	r3, r1
 8005acc:	18db      	adds	r3, r3, r3
 8005ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	eb42 0303 	adc.w	r3, r2, r3
 8005ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ad8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005adc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ae0:	f7fb f8d2 	bl	8000c88 <__aeabi_uldivmod>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4b61      	ldr	r3, [pc, #388]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005aea:	fba3 2302 	umull	r2, r3, r3, r2
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	011c      	lsls	r4, r3, #4
 8005af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005afc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	1891      	adds	r1, r2, r2
 8005b0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b0c:	415b      	adcs	r3, r3
 8005b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b14:	4641      	mov	r1, r8
 8005b16:	eb12 0a01 	adds.w	sl, r2, r1
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b34:	4692      	mov	sl, r2
 8005b36:	469b      	mov	fp, r3
 8005b38:	4643      	mov	r3, r8
 8005b3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b42:	464b      	mov	r3, r9
 8005b44:	eb4b 0303 	adc.w	r3, fp, r3
 8005b48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b60:	460b      	mov	r3, r1
 8005b62:	18db      	adds	r3, r3, r3
 8005b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b66:	4613      	mov	r3, r2
 8005b68:	eb42 0303 	adc.w	r3, r2, r3
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b76:	f7fb f887 	bl	8000c88 <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4b3b      	ldr	r3, [pc, #236]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005b82:	fba3 2301 	umull	r2, r3, r3, r1
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2264      	movs	r2, #100	@ 0x64
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	1acb      	subs	r3, r1, r3
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b96:	4b36      	ldr	r3, [pc, #216]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005b98:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ba4:	441c      	add	r4, r3
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bb8:	4642      	mov	r2, r8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	1891      	adds	r1, r2, r2
 8005bbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bc0:	415b      	adcs	r3, r3
 8005bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bc8:	4641      	mov	r1, r8
 8005bca:	1851      	adds	r1, r2, r1
 8005bcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bce:	4649      	mov	r1, r9
 8005bd0:	414b      	adcs	r3, r1
 8005bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005be0:	4659      	mov	r1, fp
 8005be2:	00cb      	lsls	r3, r1, #3
 8005be4:	4651      	mov	r1, sl
 8005be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bea:	4651      	mov	r1, sl
 8005bec:	00ca      	lsls	r2, r1, #3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	189b      	adds	r3, r3, r2
 8005bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	460a      	mov	r2, r1
 8005c00:	eb42 0303 	adc.w	r3, r2, r3
 8005c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	18db      	adds	r3, r3, r3
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c22:	4613      	mov	r3, r2
 8005c24:	eb42 0303 	adc.w	r3, r2, r3
 8005c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c32:	f7fb f829 	bl	8000c88 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	2164      	movs	r1, #100	@ 0x64
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	3332      	adds	r3, #50	@ 0x32
 8005c4e:	4a08      	ldr	r2, [pc, #32]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005c50:	fba2 2303 	umull	r2, r3, r2, r3
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	f003 0207 	and.w	r2, r3, #7
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4422      	add	r2, r4
 8005c62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c64:	e106      	b.n	8005e74 <UART_SetConfig+0x4d8>
 8005c66:	bf00      	nop
 8005c68:	40011000 	.word	0x40011000
 8005c6c:	40011400 	.word	0x40011400
 8005c70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c86:	4642      	mov	r2, r8
 8005c88:	464b      	mov	r3, r9
 8005c8a:	1891      	adds	r1, r2, r2
 8005c8c:	6239      	str	r1, [r7, #32]
 8005c8e:	415b      	adcs	r3, r3
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c96:	4641      	mov	r1, r8
 8005c98:	1854      	adds	r4, r2, r1
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	eb43 0501 	adc.w	r5, r3, r1
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	00eb      	lsls	r3, r5, #3
 8005caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cae:	00e2      	lsls	r2, r4, #3
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	18e3      	adds	r3, r4, r3
 8005cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	eb45 0303 	adc.w	r3, r5, r3
 8005cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	008b      	lsls	r3, r1, #2
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cec:	4621      	mov	r1, r4
 8005cee:	008a      	lsls	r2, r1, #2
 8005cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cf4:	f7fa ffc8 	bl	8000c88 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4b60      	ldr	r3, [pc, #384]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	011c      	lsls	r4, r3, #4
 8005d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	61b9      	str	r1, [r7, #24]
 8005d20:	415b      	adcs	r3, r3
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d28:	4641      	mov	r1, r8
 8005d2a:	1851      	adds	r1, r2, r1
 8005d2c:	6139      	str	r1, [r7, #16]
 8005d2e:	4649      	mov	r1, r9
 8005d30:	414b      	adcs	r3, r1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d40:	4659      	mov	r1, fp
 8005d42:	00cb      	lsls	r3, r1, #3
 8005d44:	4651      	mov	r1, sl
 8005d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	00ca      	lsls	r2, r1, #3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	4642      	mov	r2, r8
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	460a      	mov	r2, r1
 8005d60:	eb42 0303 	adc.w	r3, r2, r3
 8005d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d80:	4649      	mov	r1, r9
 8005d82:	008b      	lsls	r3, r1, #2
 8005d84:	4641      	mov	r1, r8
 8005d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	008a      	lsls	r2, r1, #2
 8005d8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d92:	f7fa ff79 	bl	8000c88 <__aeabi_uldivmod>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4b38      	ldr	r3, [pc, #224]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	2264      	movs	r2, #100	@ 0x64
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	1acb      	subs	r3, r1, r3
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	3332      	adds	r3, #50	@ 0x32
 8005db0:	4a33      	ldr	r2, [pc, #204]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dbc:	441c      	add	r4, r3
 8005dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	1891      	adds	r1, r2, r2
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	415b      	adcs	r3, r3
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ddc:	4641      	mov	r1, r8
 8005dde:	1851      	adds	r1, r2, r1
 8005de0:	6039      	str	r1, [r7, #0]
 8005de2:	4649      	mov	r1, r9
 8005de4:	414b      	adcs	r3, r1
 8005de6:	607b      	str	r3, [r7, #4]
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005df4:	4659      	mov	r1, fp
 8005df6:	00cb      	lsls	r3, r1, #3
 8005df8:	4651      	mov	r1, sl
 8005dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfe:	4651      	mov	r1, sl
 8005e00:	00ca      	lsls	r2, r1, #3
 8005e02:	4610      	mov	r0, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	4642      	mov	r2, r8
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e0e:	464b      	mov	r3, r9
 8005e10:	460a      	mov	r2, r1
 8005e12:	eb42 0303 	adc.w	r3, r2, r3
 8005e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e22:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e30:	4649      	mov	r1, r9
 8005e32:	008b      	lsls	r3, r1, #2
 8005e34:	4641      	mov	r1, r8
 8005e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	008a      	lsls	r2, r1, #2
 8005e3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e42:	f7fa ff21 	bl	8000c88 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	2164      	movs	r1, #100	@ 0x64
 8005e54:	fb01 f303 	mul.w	r3, r1, r3
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	3332      	adds	r3, #50	@ 0x32
 8005e5e:	4a08      	ldr	r2, [pc, #32]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005e60:	fba2 2303 	umull	r2, r3, r2, r3
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	f003 020f 	and.w	r2, r3, #15
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4422      	add	r2, r4
 8005e72:	609a      	str	r2, [r3, #8]
}
 8005e74:	bf00      	nop
 8005e76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e80:	51eb851f 	.word	0x51eb851f

08005e84 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	6039      	str	r1, [r7, #0]
 8005e8e:	71fb      	strb	r3, [r7, #7]
 8005e90:	4613      	mov	r3, r2
 8005e92:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2108      	movs	r1, #8
 8005e9c:	480c      	ldr	r0, [pc, #48]	@ (8005ed0 <LIS3DSH_WriteIO+0x4c>)
 8005e9e:	f7fc ff0d 	bl	8002cbc <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8005ea2:	f107 010f 	add.w	r1, r7, #15
 8005ea6:	230a      	movs	r3, #10
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	480a      	ldr	r0, [pc, #40]	@ (8005ed4 <LIS3DSH_WriteIO+0x50>)
 8005eac:	f7fd fc73 	bl	8003796 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8005eb0:	79bb      	ldrb	r3, [r7, #6]
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	230a      	movs	r3, #10
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	4806      	ldr	r0, [pc, #24]	@ (8005ed4 <LIS3DSH_WriteIO+0x50>)
 8005eba:	f7fd fc6c 	bl	8003796 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	2108      	movs	r1, #8
 8005ec2:	4803      	ldr	r0, [pc, #12]	@ (8005ed0 <LIS3DSH_WriteIO+0x4c>)
 8005ec4:	f7fc fefa 	bl	8002cbc <HAL_GPIO_WritePin>
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	20000468 	.word	0x20000468

08005ed8 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6039      	str	r1, [r7, #0]
 8005ee2:	71fb      	strb	r3, [r7, #7]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2108      	movs	r1, #8
 8005ef6:	4818      	ldr	r0, [pc, #96]	@ (8005f58 <LIS3DSH_ReadIO+0x80>)
 8005ef8:	f7fc fee0 	bl	8002cbc <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8005efc:	f107 0108 	add.w	r1, r7, #8
 8005f00:	230a      	movs	r3, #10
 8005f02:	2201      	movs	r2, #1
 8005f04:	4815      	ldr	r0, [pc, #84]	@ (8005f5c <LIS3DSH_ReadIO+0x84>)
 8005f06:	f7fd fc46 	bl	8003796 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8005f0a:	79bb      	ldrb	r3, [r7, #6]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f107 0108 	add.w	r1, r7, #8
 8005f12:	230a      	movs	r3, #10
 8005f14:	4811      	ldr	r0, [pc, #68]	@ (8005f5c <LIS3DSH_ReadIO+0x84>)
 8005f16:	f7fd fd81 	bl	8003a1c <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	2108      	movs	r1, #8
 8005f1e:	480e      	ldr	r0, [pc, #56]	@ (8005f58 <LIS3DSH_ReadIO+0x80>)
 8005f20:	f7fc fecc 	bl	8002cbc <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8005f24:	2300      	movs	r3, #0
 8005f26:	73fb      	strb	r3, [r7, #15]
 8005f28:	e00b      	b.n	8005f42 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8005f2a:	7bfa      	ldrb	r2, [r7, #15]
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	440b      	add	r3, r1
 8005f32:	3210      	adds	r2, #16
 8005f34:	443a      	add	r2, r7
 8005f36:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8005f3a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
 8005f42:	7bfa      	ldrb	r2, [r7, #15]
 8005f44:	79bb      	ldrb	r3, [r7, #6]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	dbed      	blt.n	8005f2a <LIS3DSH_ReadIO+0x52>
	}
}
 8005f4e:	bf00      	nop
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	20000468 	.word	0x20000468

08005f60 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8005f6e:	2258      	movs	r2, #88	@ 0x58
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	485b      	ldr	r0, [pc, #364]	@ (80060e0 <LIS3DSH_Init+0x180>)
 8005f74:	f001 fa51 	bl	800741a <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	78db      	ldrb	r3, [r3, #3]
 8005f7c:	b25b      	sxtb	r3, r3
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	b25a      	sxtb	r2, r3
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	b25b      	sxtb	r3, r3
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b25b      	sxtb	r3, r3
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b25b      	sxtb	r3, r3
 8005f96:	f023 030f 	bic.w	r3, r3, #15
 8005f9a:	b25a      	sxtb	r2, r3
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	b25b      	sxtb	r3, r3
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8005fa8:	f107 030f 	add.w	r3, r7, #15
 8005fac:	2201      	movs	r2, #1
 8005fae:	4619      	mov	r1, r3
 8005fb0:	2020      	movs	r0, #32
 8005fb2:	f7ff ff67 	bl	8005e84 <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	789b      	ldrb	r3, [r3, #2]
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005fc4:	b25a      	sxtb	r2, r3
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	b25b      	sxtb	r3, r3
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	b25b      	sxtb	r3, r3
 8005fd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fdc:	b25a      	sxtb	r2, r3
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	b25b      	sxtb	r3, r3
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	b25b      	sxtb	r3, r3
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8005fea:	f107 030f 	add.w	r3, r7, #15
 8005fee:	2201      	movs	r2, #1
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	2024      	movs	r0, #36	@ 0x24
 8005ff4:	f7ff ff46 	bl	8005e84 <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	791b      	ldrb	r3, [r3, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8006000:	2388      	movs	r3, #136	@ 0x88
 8006002:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8006004:	f107 030f 	add.w	r3, r7, #15
 8006008:	2201      	movs	r2, #1
 800600a:	4619      	mov	r1, r3
 800600c:	2023      	movs	r0, #35	@ 0x23
 800600e:	f7ff ff39 	bl	8005e84 <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	2b20      	cmp	r3, #32
 8006018:	d858      	bhi.n	80060cc <LIS3DSH_Init+0x16c>
 800601a:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <LIS3DSH_Init+0xc0>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	080060a5 	.word	0x080060a5
 8006024:	080060cd 	.word	0x080060cd
 8006028:	080060cd 	.word	0x080060cd
 800602c:	080060cd 	.word	0x080060cd
 8006030:	080060cd 	.word	0x080060cd
 8006034:	080060cd 	.word	0x080060cd
 8006038:	080060cd 	.word	0x080060cd
 800603c:	080060cd 	.word	0x080060cd
 8006040:	080060ad 	.word	0x080060ad
 8006044:	080060cd 	.word	0x080060cd
 8006048:	080060cd 	.word	0x080060cd
 800604c:	080060cd 	.word	0x080060cd
 8006050:	080060cd 	.word	0x080060cd
 8006054:	080060cd 	.word	0x080060cd
 8006058:	080060cd 	.word	0x080060cd
 800605c:	080060cd 	.word	0x080060cd
 8006060:	080060b5 	.word	0x080060b5
 8006064:	080060cd 	.word	0x080060cd
 8006068:	080060cd 	.word	0x080060cd
 800606c:	080060cd 	.word	0x080060cd
 8006070:	080060cd 	.word	0x080060cd
 8006074:	080060cd 	.word	0x080060cd
 8006078:	080060cd 	.word	0x080060cd
 800607c:	080060cd 	.word	0x080060cd
 8006080:	080060bd 	.word	0x080060bd
 8006084:	080060cd 	.word	0x080060cd
 8006088:	080060cd 	.word	0x080060cd
 800608c:	080060cd 	.word	0x080060cd
 8006090:	080060cd 	.word	0x080060cd
 8006094:	080060cd 	.word	0x080060cd
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080060cd 	.word	0x080060cd
 80060a0:	080060c5 	.word	0x080060c5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80060a4:	4b0f      	ldr	r3, [pc, #60]	@ (80060e4 <LIS3DSH_Init+0x184>)
 80060a6:	4a10      	ldr	r2, [pc, #64]	@ (80060e8 <LIS3DSH_Init+0x188>)
 80060a8:	601a      	str	r2, [r3, #0]
			break;
 80060aa:	e00f      	b.n	80060cc <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80060ac:	4b0d      	ldr	r3, [pc, #52]	@ (80060e4 <LIS3DSH_Init+0x184>)
 80060ae:	4a0f      	ldr	r2, [pc, #60]	@ (80060ec <LIS3DSH_Init+0x18c>)
 80060b0:	601a      	str	r2, [r3, #0]
			break;
 80060b2:	e00b      	b.n	80060cc <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80060b4:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <LIS3DSH_Init+0x184>)
 80060b6:	4a0e      	ldr	r2, [pc, #56]	@ (80060f0 <LIS3DSH_Init+0x190>)
 80060b8:	601a      	str	r2, [r3, #0]
			break;
 80060ba:	e007      	b.n	80060cc <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80060bc:	4b09      	ldr	r3, [pc, #36]	@ (80060e4 <LIS3DSH_Init+0x184>)
 80060be:	4a0d      	ldr	r2, [pc, #52]	@ (80060f4 <LIS3DSH_Init+0x194>)
 80060c0:	601a      	str	r2, [r3, #0]
			break;
 80060c2:	e003      	b.n	80060cc <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80060c4:	4b07      	ldr	r3, [pc, #28]	@ (80060e4 <LIS3DSH_Init+0x184>)
 80060c6:	4a0c      	ldr	r2, [pc, #48]	@ (80060f8 <LIS3DSH_Init+0x198>)
 80060c8:	601a      	str	r2, [r3, #0]
			break;
 80060ca:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80060cc:	2201      	movs	r2, #1
 80060ce:	2108      	movs	r1, #8
 80060d0:	480a      	ldr	r0, [pc, #40]	@ (80060fc <LIS3DSH_Init+0x19c>)
 80060d2:	f7fc fdf3 	bl	8002cbc <HAL_GPIO_WritePin>
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000468 	.word	0x20000468
 80060e4:	2000000c 	.word	0x2000000c
 80060e8:	3d75c28f 	.word	0x3d75c28f
 80060ec:	3df5c28f 	.word	0x3df5c28f
 80060f0:	3e3851ec 	.word	0x3e3851ec
 80060f4:	3e75c28f 	.word	0x3e75c28f
 80060f8:	3f3ae148 	.word	0x3f3ae148
 80060fc:	40021000 	.word	0x40021000

08006100 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8006108:	f107 0314 	add.w	r3, r7, #20
 800610c:	2202      	movs	r2, #2
 800610e:	4619      	mov	r1, r3
 8006110:	2028      	movs	r0, #40	@ 0x28
 8006112:	f7ff fee1 	bl	8005ed8 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8006116:	7d7b      	ldrb	r3, [r7, #21]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	b29b      	uxth	r3, r3
 800611c:	7d3a      	ldrb	r2, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	b29b      	uxth	r3, r3
 8006122:	b21b      	sxth	r3, r3
 8006124:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8006126:	f107 0314 	add.w	r3, r7, #20
 800612a:	2202      	movs	r2, #2
 800612c:	4619      	mov	r1, r3
 800612e:	202a      	movs	r0, #42	@ 0x2a
 8006130:	f7ff fed2 	bl	8005ed8 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8006134:	7d7b      	ldrb	r3, [r7, #21]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	b29b      	uxth	r3, r3
 800613a:	7d3a      	ldrb	r2, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	b29b      	uxth	r3, r3
 8006140:	b21b      	sxth	r3, r3
 8006142:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8006144:	f107 0314 	add.w	r3, r7, #20
 8006148:	2202      	movs	r2, #2
 800614a:	4619      	mov	r1, r3
 800614c:	202c      	movs	r0, #44	@ 0x2c
 800614e:	f7ff fec3 	bl	8005ed8 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8006152:	7d7b      	ldrb	r3, [r7, #21]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	b29b      	uxth	r3, r3
 8006158:	7d3a      	ldrb	r2, [r7, #20]
 800615a:	4413      	add	r3, r2
 800615c:	b29b      	uxth	r3, r3
 800615e:	b21b      	sxth	r3, r3
 8006160:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	461a      	mov	r2, r3
 8006166:	f107 030c 	add.w	r3, r7, #12
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	6010      	str	r0, [r2, #0]
 800616e:	889b      	ldrh	r3, [r3, #4]
 8006170:	8093      	strh	r3, [r2, #4]
	
}
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff ffba 	bl	8006100 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 800618c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006190:	ee07 3a90 	vmov	s15, r3
 8006194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006198:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <LIS3DSH_GetDataScaled+0x68>)
 800619a:	edd3 7a00 	vldr	s15, [r3]
 800619e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061a2:	4b11      	ldr	r3, [pc, #68]	@ (80061e8 <LIS3DSH_GetDataScaled+0x6c>)
 80061a4:	edd3 7a00 	vldr	s15, [r3]
 80061a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80061ec <LIS3DSH_GetDataScaled+0x70>
 80061b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b4:	4b0e      	ldr	r3, [pc, #56]	@ (80061f0 <LIS3DSH_GetDataScaled+0x74>)
 80061b6:	edd3 7a00 	vldr	s15, [r3]
 80061ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061be:	ee17 0a90 	vmov	r0, s15
 80061c2:	f7fa f9c1 	bl	8000548 <__aeabi_f2d>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	e9c7 2300 	strd	r2, r3, [r7]
	//tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
	//tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
	
	return tempScaledData;
 80061ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80061d6:	eeb0 0a47 	vmov.f32	s0, s14
 80061da:	eef0 0a67 	vmov.f32	s1, s15
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	2000000c 	.word	0x2000000c
 80061e8:	20000010 	.word	0x20000010
 80061ec:	00000000 	.word	0x00000000
 80061f0:	200004c0 	.word	0x200004c0

080061f4 <LIS3DSH_GetDataScaledY>:


LIS3DSH_DataScaledY LIS3DSH_GetDataScaledY(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80061fa:	f107 0308 	add.w	r3, r7, #8
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff ff7e 	bl	8006100 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaledY tempScaledData;
	//tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8006204:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006208:	ee07 3a90 	vmov	s15, r3
 800620c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006210:	4b12      	ldr	r3, [pc, #72]	@ (800625c <LIS3DSH_GetDataScaledY+0x68>)
 8006212:	edd3 7a00 	vldr	s15, [r3]
 8006216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800621a:	4b11      	ldr	r3, [pc, #68]	@ (8006260 <LIS3DSH_GetDataScaledY+0x6c>)
 800621c:	edd3 7a00 	vldr	s15, [r3]
 8006220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006224:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006264 <LIS3DSH_GetDataScaledY+0x70>
 8006228:	ee37 7a87 	vadd.f32	s14, s15, s14
 800622c:	4b0e      	ldr	r3, [pc, #56]	@ (8006268 <LIS3DSH_GetDataScaledY+0x74>)
 800622e:	edd3 7a00 	vldr	s15, [r3]
 8006232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006236:	ee17 0a90 	vmov	r0, s15
 800623a:	f7fa f985 	bl	8000548 <__aeabi_f2d>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	e9c7 2300 	strd	r2, r3, [r7]
	//tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;

	return tempScaledData;
 8006246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800624a:	ec43 2b17 	vmov	d7, r2, r3
}
 800624e:	eeb0 0a47 	vmov.f32	s0, s14
 8006252:	eef0 0a67 	vmov.f32	s1, s15
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	2000000c 	.word	0x2000000c
 8006260:	20000014 	.word	0x20000014
 8006264:	00000000 	.word	0x00000000
 8006268:	200004c4 	.word	0x200004c4

0800626c <LIS3DSH_GetDataScaledZ>:

LIS3DSH_DataScaledZ LIS3DSH_GetDataScaledZ(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8006272:	f107 0308 	add.w	r3, r7, #8
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff ff42 	bl	8006100 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaledZ tempScaledData;
	//tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
	 //tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800627c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006288:	4b12      	ldr	r3, [pc, #72]	@ (80062d4 <LIS3DSH_GetDataScaledZ+0x68>)
 800628a:	edd3 7a00 	vldr	s15, [r3]
 800628e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006292:	4b11      	ldr	r3, [pc, #68]	@ (80062d8 <LIS3DSH_GetDataScaledZ+0x6c>)
 8006294:	edd3 7a00 	vldr	s15, [r3]
 8006298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80062dc <LIS3DSH_GetDataScaledZ+0x70>
 80062a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a4:	4b0e      	ldr	r3, [pc, #56]	@ (80062e0 <LIS3DSH_GetDataScaledZ+0x74>)
 80062a6:	edd3 7a00 	vldr	s15, [r3]
 80062aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ae:	ee17 0a90 	vmov	r0, s15
 80062b2:	f7fa f949 	bl	8000548 <__aeabi_f2d>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	e9c7 2300 	strd	r2, r3, [r7]

	return tempScaledData;
 80062be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80062c6:	eeb0 0a47 	vmov.f32	s0, s14
 80062ca:	eef0 0a67 	vmov.f32	s1, s15
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	2000000c 	.word	0x2000000c
 80062d8:	20000018 	.word	0x20000018
 80062dc:	00000000 	.word	0x00000000
 80062e0:	200004c8 	.word	0x200004c8

080062e4 <LIS3DSH_X_calibrate>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80062ee:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80062f2:	ed97 7a00 	vldr	s14, [r7]
 80062f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062fe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006306:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <LIS3DSH_X_calibrate+0x50>)
 8006308:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 800630c:	ed97 7a00 	vldr	s14, [r7]
 8006310:	edd7 7a01 	vldr	s15, [r7, #4]
 8006314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006318:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8006338 <LIS3DSH_X_calibrate+0x54>
 800631c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006320:	4b06      	ldr	r3, [pc, #24]	@ (800633c <LIS3DSH_X_calibrate+0x58>)
 8006322:	edc3 7a00 	vstr	s15, [r3]
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	200004c0 	.word	0x200004c0
 8006338:	44fa0000 	.word	0x44fa0000
 800633c:	20000010 	.word	0x20000010

08006340 <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	ed87 0a01 	vstr	s0, [r7, #4]
 800634a:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 800634e:	ed97 7a00 	vldr	s14, [r7]
 8006352:	edd7 7a01 	vldr	s15, [r7, #4]
 8006356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800635a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800635e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006362:	4b0b      	ldr	r3, [pc, #44]	@ (8006390 <LIS3DSH_Y_calibrate+0x50>)
 8006364:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8006368:	ed97 7a00 	vldr	s14, [r7]
 800636c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006374:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8006394 <LIS3DSH_Y_calibrate+0x54>
 8006378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800637c:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <LIS3DSH_Y_calibrate+0x58>)
 800637e:	edc3 7a00 	vstr	s15, [r3]
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	200004c4 	.word	0x200004c4
 8006394:	44fa0000 	.word	0x44fa0000
 8006398:	20000014 	.word	0x20000014

0800639c <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80063a6:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 80063aa:	ed97 7a00 	vldr	s14, [r7]
 80063ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80063b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063b6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80063ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063be:	4b0b      	ldr	r3, [pc, #44]	@ (80063ec <LIS3DSH_Z_calibrate+0x50>)
 80063c0:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 80063c4:	ed97 7a00 	vldr	s14, [r7]
 80063c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80063cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063d0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80063f0 <LIS3DSH_Z_calibrate+0x54>
 80063d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d8:	4b06      	ldr	r3, [pc, #24]	@ (80063f4 <LIS3DSH_Z_calibrate+0x58>)
 80063da:	edc3 7a00 	vstr	s15, [r3]
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	200004c8 	.word	0x200004c8
 80063f0:	44fa0000 	.word	0x44fa0000
 80063f4:	20000018 	.word	0x20000018

080063f8 <__cvt>:
 80063f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	ec57 6b10 	vmov	r6, r7, d0
 8006400:	2f00      	cmp	r7, #0
 8006402:	460c      	mov	r4, r1
 8006404:	4619      	mov	r1, r3
 8006406:	463b      	mov	r3, r7
 8006408:	bfbb      	ittet	lt
 800640a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800640e:	461f      	movlt	r7, r3
 8006410:	2300      	movge	r3, #0
 8006412:	232d      	movlt	r3, #45	@ 0x2d
 8006414:	700b      	strb	r3, [r1, #0]
 8006416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006418:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800641c:	4691      	mov	r9, r2
 800641e:	f023 0820 	bic.w	r8, r3, #32
 8006422:	bfbc      	itt	lt
 8006424:	4632      	movlt	r2, r6
 8006426:	4616      	movlt	r6, r2
 8006428:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800642c:	d005      	beq.n	800643a <__cvt+0x42>
 800642e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006432:	d100      	bne.n	8006436 <__cvt+0x3e>
 8006434:	3401      	adds	r4, #1
 8006436:	2102      	movs	r1, #2
 8006438:	e000      	b.n	800643c <__cvt+0x44>
 800643a:	2103      	movs	r1, #3
 800643c:	ab03      	add	r3, sp, #12
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	ab02      	add	r3, sp, #8
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	ec47 6b10 	vmov	d0, r6, r7
 8006448:	4653      	mov	r3, sl
 800644a:	4622      	mov	r2, r4
 800644c:	f001 f884 	bl	8007558 <_dtoa_r>
 8006450:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006454:	4605      	mov	r5, r0
 8006456:	d119      	bne.n	800648c <__cvt+0x94>
 8006458:	f019 0f01 	tst.w	r9, #1
 800645c:	d00e      	beq.n	800647c <__cvt+0x84>
 800645e:	eb00 0904 	add.w	r9, r0, r4
 8006462:	2200      	movs	r2, #0
 8006464:	2300      	movs	r3, #0
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	f7fa fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800646e:	b108      	cbz	r0, 8006474 <__cvt+0x7c>
 8006470:	f8cd 900c 	str.w	r9, [sp, #12]
 8006474:	2230      	movs	r2, #48	@ 0x30
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	454b      	cmp	r3, r9
 800647a:	d31e      	bcc.n	80064ba <__cvt+0xc2>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006480:	1b5b      	subs	r3, r3, r5
 8006482:	4628      	mov	r0, r5
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	b004      	add	sp, #16
 8006488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006490:	eb00 0904 	add.w	r9, r0, r4
 8006494:	d1e5      	bne.n	8006462 <__cvt+0x6a>
 8006496:	7803      	ldrb	r3, [r0, #0]
 8006498:	2b30      	cmp	r3, #48	@ 0x30
 800649a:	d10a      	bne.n	80064b2 <__cvt+0xba>
 800649c:	2200      	movs	r2, #0
 800649e:	2300      	movs	r3, #0
 80064a0:	4630      	mov	r0, r6
 80064a2:	4639      	mov	r1, r7
 80064a4:	f7fa fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a8:	b918      	cbnz	r0, 80064b2 <__cvt+0xba>
 80064aa:	f1c4 0401 	rsb	r4, r4, #1
 80064ae:	f8ca 4000 	str.w	r4, [sl]
 80064b2:	f8da 3000 	ldr.w	r3, [sl]
 80064b6:	4499      	add	r9, r3
 80064b8:	e7d3      	b.n	8006462 <__cvt+0x6a>
 80064ba:	1c59      	adds	r1, r3, #1
 80064bc:	9103      	str	r1, [sp, #12]
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	e7d9      	b.n	8006476 <__cvt+0x7e>

080064c2 <__exponent>:
 80064c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064c4:	2900      	cmp	r1, #0
 80064c6:	bfba      	itte	lt
 80064c8:	4249      	neglt	r1, r1
 80064ca:	232d      	movlt	r3, #45	@ 0x2d
 80064cc:	232b      	movge	r3, #43	@ 0x2b
 80064ce:	2909      	cmp	r1, #9
 80064d0:	7002      	strb	r2, [r0, #0]
 80064d2:	7043      	strb	r3, [r0, #1]
 80064d4:	dd29      	ble.n	800652a <__exponent+0x68>
 80064d6:	f10d 0307 	add.w	r3, sp, #7
 80064da:	461d      	mov	r5, r3
 80064dc:	270a      	movs	r7, #10
 80064de:	461a      	mov	r2, r3
 80064e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80064e4:	fb07 1416 	mls	r4, r7, r6, r1
 80064e8:	3430      	adds	r4, #48	@ 0x30
 80064ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064ee:	460c      	mov	r4, r1
 80064f0:	2c63      	cmp	r4, #99	@ 0x63
 80064f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80064f6:	4631      	mov	r1, r6
 80064f8:	dcf1      	bgt.n	80064de <__exponent+0x1c>
 80064fa:	3130      	adds	r1, #48	@ 0x30
 80064fc:	1e94      	subs	r4, r2, #2
 80064fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006502:	1c41      	adds	r1, r0, #1
 8006504:	4623      	mov	r3, r4
 8006506:	42ab      	cmp	r3, r5
 8006508:	d30a      	bcc.n	8006520 <__exponent+0x5e>
 800650a:	f10d 0309 	add.w	r3, sp, #9
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	42ac      	cmp	r4, r5
 8006512:	bf88      	it	hi
 8006514:	2300      	movhi	r3, #0
 8006516:	3302      	adds	r3, #2
 8006518:	4403      	add	r3, r0
 800651a:	1a18      	subs	r0, r3, r0
 800651c:	b003      	add	sp, #12
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006520:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006524:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006528:	e7ed      	b.n	8006506 <__exponent+0x44>
 800652a:	2330      	movs	r3, #48	@ 0x30
 800652c:	3130      	adds	r1, #48	@ 0x30
 800652e:	7083      	strb	r3, [r0, #2]
 8006530:	70c1      	strb	r1, [r0, #3]
 8006532:	1d03      	adds	r3, r0, #4
 8006534:	e7f1      	b.n	800651a <__exponent+0x58>
	...

08006538 <_printf_float>:
 8006538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	b08d      	sub	sp, #52	@ 0x34
 800653e:	460c      	mov	r4, r1
 8006540:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006544:	4616      	mov	r6, r2
 8006546:	461f      	mov	r7, r3
 8006548:	4605      	mov	r5, r0
 800654a:	f000 feef 	bl	800732c <_localeconv_r>
 800654e:	6803      	ldr	r3, [r0, #0]
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	4618      	mov	r0, r3
 8006554:	f7f9 fe8c 	bl	8000270 <strlen>
 8006558:	2300      	movs	r3, #0
 800655a:	930a      	str	r3, [sp, #40]	@ 0x28
 800655c:	f8d8 3000 	ldr.w	r3, [r8]
 8006560:	9005      	str	r0, [sp, #20]
 8006562:	3307      	adds	r3, #7
 8006564:	f023 0307 	bic.w	r3, r3, #7
 8006568:	f103 0208 	add.w	r2, r3, #8
 800656c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006570:	f8d4 b000 	ldr.w	fp, [r4]
 8006574:	f8c8 2000 	str.w	r2, [r8]
 8006578:	e9d3 8900 	ldrd	r8, r9, [r3]
 800657c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006580:	9307      	str	r3, [sp, #28]
 8006582:	f8cd 8018 	str.w	r8, [sp, #24]
 8006586:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800658a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800658e:	4b9c      	ldr	r3, [pc, #624]	@ (8006800 <_printf_float+0x2c8>)
 8006590:	f04f 32ff 	mov.w	r2, #4294967295
 8006594:	f7fa faca 	bl	8000b2c <__aeabi_dcmpun>
 8006598:	bb70      	cbnz	r0, 80065f8 <_printf_float+0xc0>
 800659a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800659e:	4b98      	ldr	r3, [pc, #608]	@ (8006800 <_printf_float+0x2c8>)
 80065a0:	f04f 32ff 	mov.w	r2, #4294967295
 80065a4:	f7fa faa4 	bl	8000af0 <__aeabi_dcmple>
 80065a8:	bb30      	cbnz	r0, 80065f8 <_printf_float+0xc0>
 80065aa:	2200      	movs	r2, #0
 80065ac:	2300      	movs	r3, #0
 80065ae:	4640      	mov	r0, r8
 80065b0:	4649      	mov	r1, r9
 80065b2:	f7fa fa93 	bl	8000adc <__aeabi_dcmplt>
 80065b6:	b110      	cbz	r0, 80065be <_printf_float+0x86>
 80065b8:	232d      	movs	r3, #45	@ 0x2d
 80065ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065be:	4a91      	ldr	r2, [pc, #580]	@ (8006804 <_printf_float+0x2cc>)
 80065c0:	4b91      	ldr	r3, [pc, #580]	@ (8006808 <_printf_float+0x2d0>)
 80065c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065c6:	bf94      	ite	ls
 80065c8:	4690      	movls	r8, r2
 80065ca:	4698      	movhi	r8, r3
 80065cc:	2303      	movs	r3, #3
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	f02b 0304 	bic.w	r3, fp, #4
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	f04f 0900 	mov.w	r9, #0
 80065da:	9700      	str	r7, [sp, #0]
 80065dc:	4633      	mov	r3, r6
 80065de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065e0:	4621      	mov	r1, r4
 80065e2:	4628      	mov	r0, r5
 80065e4:	f000 f9d2 	bl	800698c <_printf_common>
 80065e8:	3001      	adds	r0, #1
 80065ea:	f040 808d 	bne.w	8006708 <_printf_float+0x1d0>
 80065ee:	f04f 30ff 	mov.w	r0, #4294967295
 80065f2:	b00d      	add	sp, #52	@ 0x34
 80065f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	4640      	mov	r0, r8
 80065fe:	4649      	mov	r1, r9
 8006600:	f7fa fa94 	bl	8000b2c <__aeabi_dcmpun>
 8006604:	b140      	cbz	r0, 8006618 <_printf_float+0xe0>
 8006606:	464b      	mov	r3, r9
 8006608:	2b00      	cmp	r3, #0
 800660a:	bfbc      	itt	lt
 800660c:	232d      	movlt	r3, #45	@ 0x2d
 800660e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006612:	4a7e      	ldr	r2, [pc, #504]	@ (800680c <_printf_float+0x2d4>)
 8006614:	4b7e      	ldr	r3, [pc, #504]	@ (8006810 <_printf_float+0x2d8>)
 8006616:	e7d4      	b.n	80065c2 <_printf_float+0x8a>
 8006618:	6863      	ldr	r3, [r4, #4]
 800661a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800661e:	9206      	str	r2, [sp, #24]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	d13b      	bne.n	800669c <_printf_float+0x164>
 8006624:	2306      	movs	r3, #6
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800662c:	2300      	movs	r3, #0
 800662e:	6022      	str	r2, [r4, #0]
 8006630:	9303      	str	r3, [sp, #12]
 8006632:	ab0a      	add	r3, sp, #40	@ 0x28
 8006634:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006638:	ab09      	add	r3, sp, #36	@ 0x24
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	6861      	ldr	r1, [r4, #4]
 800663e:	ec49 8b10 	vmov	d0, r8, r9
 8006642:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006646:	4628      	mov	r0, r5
 8006648:	f7ff fed6 	bl	80063f8 <__cvt>
 800664c:	9b06      	ldr	r3, [sp, #24]
 800664e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006650:	2b47      	cmp	r3, #71	@ 0x47
 8006652:	4680      	mov	r8, r0
 8006654:	d129      	bne.n	80066aa <_printf_float+0x172>
 8006656:	1cc8      	adds	r0, r1, #3
 8006658:	db02      	blt.n	8006660 <_printf_float+0x128>
 800665a:	6863      	ldr	r3, [r4, #4]
 800665c:	4299      	cmp	r1, r3
 800665e:	dd41      	ble.n	80066e4 <_printf_float+0x1ac>
 8006660:	f1aa 0a02 	sub.w	sl, sl, #2
 8006664:	fa5f fa8a 	uxtb.w	sl, sl
 8006668:	3901      	subs	r1, #1
 800666a:	4652      	mov	r2, sl
 800666c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006670:	9109      	str	r1, [sp, #36]	@ 0x24
 8006672:	f7ff ff26 	bl	80064c2 <__exponent>
 8006676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006678:	1813      	adds	r3, r2, r0
 800667a:	2a01      	cmp	r2, #1
 800667c:	4681      	mov	r9, r0
 800667e:	6123      	str	r3, [r4, #16]
 8006680:	dc02      	bgt.n	8006688 <_printf_float+0x150>
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	07d2      	lsls	r2, r2, #31
 8006686:	d501      	bpl.n	800668c <_printf_float+0x154>
 8006688:	3301      	adds	r3, #1
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0a2      	beq.n	80065da <_printf_float+0xa2>
 8006694:	232d      	movs	r3, #45	@ 0x2d
 8006696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800669a:	e79e      	b.n	80065da <_printf_float+0xa2>
 800669c:	9a06      	ldr	r2, [sp, #24]
 800669e:	2a47      	cmp	r2, #71	@ 0x47
 80066a0:	d1c2      	bne.n	8006628 <_printf_float+0xf0>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1c0      	bne.n	8006628 <_printf_float+0xf0>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e7bd      	b.n	8006626 <_printf_float+0xee>
 80066aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066ae:	d9db      	bls.n	8006668 <_printf_float+0x130>
 80066b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80066b4:	d118      	bne.n	80066e8 <_printf_float+0x1b0>
 80066b6:	2900      	cmp	r1, #0
 80066b8:	6863      	ldr	r3, [r4, #4]
 80066ba:	dd0b      	ble.n	80066d4 <_printf_float+0x19c>
 80066bc:	6121      	str	r1, [r4, #16]
 80066be:	b913      	cbnz	r3, 80066c6 <_printf_float+0x18e>
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	07d0      	lsls	r0, r2, #31
 80066c4:	d502      	bpl.n	80066cc <_printf_float+0x194>
 80066c6:	3301      	adds	r3, #1
 80066c8:	440b      	add	r3, r1
 80066ca:	6123      	str	r3, [r4, #16]
 80066cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066ce:	f04f 0900 	mov.w	r9, #0
 80066d2:	e7db      	b.n	800668c <_printf_float+0x154>
 80066d4:	b913      	cbnz	r3, 80066dc <_printf_float+0x1a4>
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	07d2      	lsls	r2, r2, #31
 80066da:	d501      	bpl.n	80066e0 <_printf_float+0x1a8>
 80066dc:	3302      	adds	r3, #2
 80066de:	e7f4      	b.n	80066ca <_printf_float+0x192>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e7f2      	b.n	80066ca <_printf_float+0x192>
 80066e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ea:	4299      	cmp	r1, r3
 80066ec:	db05      	blt.n	80066fa <_printf_float+0x1c2>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	6121      	str	r1, [r4, #16]
 80066f2:	07d8      	lsls	r0, r3, #31
 80066f4:	d5ea      	bpl.n	80066cc <_printf_float+0x194>
 80066f6:	1c4b      	adds	r3, r1, #1
 80066f8:	e7e7      	b.n	80066ca <_printf_float+0x192>
 80066fa:	2900      	cmp	r1, #0
 80066fc:	bfd4      	ite	le
 80066fe:	f1c1 0202 	rsble	r2, r1, #2
 8006702:	2201      	movgt	r2, #1
 8006704:	4413      	add	r3, r2
 8006706:	e7e0      	b.n	80066ca <_printf_float+0x192>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	055a      	lsls	r2, r3, #21
 800670c:	d407      	bmi.n	800671e <_printf_float+0x1e6>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	4642      	mov	r2, r8
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	d12b      	bne.n	8006774 <_printf_float+0x23c>
 800671c:	e767      	b.n	80065ee <_printf_float+0xb6>
 800671e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006722:	f240 80dd 	bls.w	80068e0 <_printf_float+0x3a8>
 8006726:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800672a:	2200      	movs	r2, #0
 800672c:	2300      	movs	r3, #0
 800672e:	f7fa f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006732:	2800      	cmp	r0, #0
 8006734:	d033      	beq.n	800679e <_printf_float+0x266>
 8006736:	4a37      	ldr	r2, [pc, #220]	@ (8006814 <_printf_float+0x2dc>)
 8006738:	2301      	movs	r3, #1
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f af54 	beq.w	80065ee <_printf_float+0xb6>
 8006746:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800674a:	4543      	cmp	r3, r8
 800674c:	db02      	blt.n	8006754 <_printf_float+0x21c>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	07d8      	lsls	r0, r3, #31
 8006752:	d50f      	bpl.n	8006774 <_printf_float+0x23c>
 8006754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af45 	beq.w	80065ee <_printf_float+0xb6>
 8006764:	f04f 0900 	mov.w	r9, #0
 8006768:	f108 38ff 	add.w	r8, r8, #4294967295
 800676c:	f104 0a1a 	add.w	sl, r4, #26
 8006770:	45c8      	cmp	r8, r9
 8006772:	dc09      	bgt.n	8006788 <_printf_float+0x250>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	079b      	lsls	r3, r3, #30
 8006778:	f100 8103 	bmi.w	8006982 <_printf_float+0x44a>
 800677c:	68e0      	ldr	r0, [r4, #12]
 800677e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006780:	4298      	cmp	r0, r3
 8006782:	bfb8      	it	lt
 8006784:	4618      	movlt	r0, r3
 8006786:	e734      	b.n	80065f2 <_printf_float+0xba>
 8006788:	2301      	movs	r3, #1
 800678a:	4652      	mov	r2, sl
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f af2b 	beq.w	80065ee <_printf_float+0xb6>
 8006798:	f109 0901 	add.w	r9, r9, #1
 800679c:	e7e8      	b.n	8006770 <_printf_float+0x238>
 800679e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc39      	bgt.n	8006818 <_printf_float+0x2e0>
 80067a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006814 <_printf_float+0x2dc>)
 80067a6:	2301      	movs	r3, #1
 80067a8:	4631      	mov	r1, r6
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b8      	blx	r7
 80067ae:	3001      	adds	r0, #1
 80067b0:	f43f af1d 	beq.w	80065ee <_printf_float+0xb6>
 80067b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80067b8:	ea59 0303 	orrs.w	r3, r9, r3
 80067bc:	d102      	bne.n	80067c4 <_printf_float+0x28c>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	07d9      	lsls	r1, r3, #31
 80067c2:	d5d7      	bpl.n	8006774 <_printf_float+0x23c>
 80067c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f af0d 	beq.w	80065ee <_printf_float+0xb6>
 80067d4:	f04f 0a00 	mov.w	sl, #0
 80067d8:	f104 0b1a 	add.w	fp, r4, #26
 80067dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067de:	425b      	negs	r3, r3
 80067e0:	4553      	cmp	r3, sl
 80067e2:	dc01      	bgt.n	80067e8 <_printf_float+0x2b0>
 80067e4:	464b      	mov	r3, r9
 80067e6:	e793      	b.n	8006710 <_printf_float+0x1d8>
 80067e8:	2301      	movs	r3, #1
 80067ea:	465a      	mov	r2, fp
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f aefb 	beq.w	80065ee <_printf_float+0xb6>
 80067f8:	f10a 0a01 	add.w	sl, sl, #1
 80067fc:	e7ee      	b.n	80067dc <_printf_float+0x2a4>
 80067fe:	bf00      	nop
 8006800:	7fefffff 	.word	0x7fefffff
 8006804:	0800b1e0 	.word	0x0800b1e0
 8006808:	0800b1e4 	.word	0x0800b1e4
 800680c:	0800b1e8 	.word	0x0800b1e8
 8006810:	0800b1ec 	.word	0x0800b1ec
 8006814:	0800b1f0 	.word	0x0800b1f0
 8006818:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800681a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800681e:	4553      	cmp	r3, sl
 8006820:	bfa8      	it	ge
 8006822:	4653      	movge	r3, sl
 8006824:	2b00      	cmp	r3, #0
 8006826:	4699      	mov	r9, r3
 8006828:	dc36      	bgt.n	8006898 <_printf_float+0x360>
 800682a:	f04f 0b00 	mov.w	fp, #0
 800682e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006832:	f104 021a 	add.w	r2, r4, #26
 8006836:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006838:	9306      	str	r3, [sp, #24]
 800683a:	eba3 0309 	sub.w	r3, r3, r9
 800683e:	455b      	cmp	r3, fp
 8006840:	dc31      	bgt.n	80068a6 <_printf_float+0x36e>
 8006842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006844:	459a      	cmp	sl, r3
 8006846:	dc3a      	bgt.n	80068be <_printf_float+0x386>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	07da      	lsls	r2, r3, #31
 800684c:	d437      	bmi.n	80068be <_printf_float+0x386>
 800684e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006850:	ebaa 0903 	sub.w	r9, sl, r3
 8006854:	9b06      	ldr	r3, [sp, #24]
 8006856:	ebaa 0303 	sub.w	r3, sl, r3
 800685a:	4599      	cmp	r9, r3
 800685c:	bfa8      	it	ge
 800685e:	4699      	movge	r9, r3
 8006860:	f1b9 0f00 	cmp.w	r9, #0
 8006864:	dc33      	bgt.n	80068ce <_printf_float+0x396>
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800686e:	f104 0b1a 	add.w	fp, r4, #26
 8006872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006874:	ebaa 0303 	sub.w	r3, sl, r3
 8006878:	eba3 0309 	sub.w	r3, r3, r9
 800687c:	4543      	cmp	r3, r8
 800687e:	f77f af79 	ble.w	8006774 <_printf_float+0x23c>
 8006882:	2301      	movs	r3, #1
 8006884:	465a      	mov	r2, fp
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f aeae 	beq.w	80065ee <_printf_float+0xb6>
 8006892:	f108 0801 	add.w	r8, r8, #1
 8006896:	e7ec      	b.n	8006872 <_printf_float+0x33a>
 8006898:	4642      	mov	r2, r8
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	d1c2      	bne.n	800682a <_printf_float+0x2f2>
 80068a4:	e6a3      	b.n	80065ee <_printf_float+0xb6>
 80068a6:	2301      	movs	r3, #1
 80068a8:	4631      	mov	r1, r6
 80068aa:	4628      	mov	r0, r5
 80068ac:	9206      	str	r2, [sp, #24]
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	f43f ae9c 	beq.w	80065ee <_printf_float+0xb6>
 80068b6:	9a06      	ldr	r2, [sp, #24]
 80068b8:	f10b 0b01 	add.w	fp, fp, #1
 80068bc:	e7bb      	b.n	8006836 <_printf_float+0x2fe>
 80068be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	d1c0      	bne.n	800684e <_printf_float+0x316>
 80068cc:	e68f      	b.n	80065ee <_printf_float+0xb6>
 80068ce:	9a06      	ldr	r2, [sp, #24]
 80068d0:	464b      	mov	r3, r9
 80068d2:	4442      	add	r2, r8
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	d1c3      	bne.n	8006866 <_printf_float+0x32e>
 80068de:	e686      	b.n	80065ee <_printf_float+0xb6>
 80068e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068e4:	f1ba 0f01 	cmp.w	sl, #1
 80068e8:	dc01      	bgt.n	80068ee <_printf_float+0x3b6>
 80068ea:	07db      	lsls	r3, r3, #31
 80068ec:	d536      	bpl.n	800695c <_printf_float+0x424>
 80068ee:	2301      	movs	r3, #1
 80068f0:	4642      	mov	r2, r8
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f ae78 	beq.w	80065ee <_printf_float+0xb6>
 80068fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	f43f ae70 	beq.w	80065ee <_printf_float+0xb6>
 800690e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006912:	2200      	movs	r2, #0
 8006914:	2300      	movs	r3, #0
 8006916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800691a:	f7fa f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800691e:	b9c0      	cbnz	r0, 8006952 <_printf_float+0x41a>
 8006920:	4653      	mov	r3, sl
 8006922:	f108 0201 	add.w	r2, r8, #1
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	d10c      	bne.n	800694a <_printf_float+0x412>
 8006930:	e65d      	b.n	80065ee <_printf_float+0xb6>
 8006932:	2301      	movs	r3, #1
 8006934:	465a      	mov	r2, fp
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	f43f ae56 	beq.w	80065ee <_printf_float+0xb6>
 8006942:	f108 0801 	add.w	r8, r8, #1
 8006946:	45d0      	cmp	r8, sl
 8006948:	dbf3      	blt.n	8006932 <_printf_float+0x3fa>
 800694a:	464b      	mov	r3, r9
 800694c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006950:	e6df      	b.n	8006712 <_printf_float+0x1da>
 8006952:	f04f 0800 	mov.w	r8, #0
 8006956:	f104 0b1a 	add.w	fp, r4, #26
 800695a:	e7f4      	b.n	8006946 <_printf_float+0x40e>
 800695c:	2301      	movs	r3, #1
 800695e:	4642      	mov	r2, r8
 8006960:	e7e1      	b.n	8006926 <_printf_float+0x3ee>
 8006962:	2301      	movs	r3, #1
 8006964:	464a      	mov	r2, r9
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f ae3e 	beq.w	80065ee <_printf_float+0xb6>
 8006972:	f108 0801 	add.w	r8, r8, #1
 8006976:	68e3      	ldr	r3, [r4, #12]
 8006978:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800697a:	1a5b      	subs	r3, r3, r1
 800697c:	4543      	cmp	r3, r8
 800697e:	dcf0      	bgt.n	8006962 <_printf_float+0x42a>
 8006980:	e6fc      	b.n	800677c <_printf_float+0x244>
 8006982:	f04f 0800 	mov.w	r8, #0
 8006986:	f104 0919 	add.w	r9, r4, #25
 800698a:	e7f4      	b.n	8006976 <_printf_float+0x43e>

0800698c <_printf_common>:
 800698c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	4616      	mov	r6, r2
 8006992:	4698      	mov	r8, r3
 8006994:	688a      	ldr	r2, [r1, #8]
 8006996:	690b      	ldr	r3, [r1, #16]
 8006998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800699c:	4293      	cmp	r3, r2
 800699e:	bfb8      	it	lt
 80069a0:	4613      	movlt	r3, r2
 80069a2:	6033      	str	r3, [r6, #0]
 80069a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069a8:	4607      	mov	r7, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	b10a      	cbz	r2, 80069b2 <_printf_common+0x26>
 80069ae:	3301      	adds	r3, #1
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	0699      	lsls	r1, r3, #26
 80069b6:	bf42      	ittt	mi
 80069b8:	6833      	ldrmi	r3, [r6, #0]
 80069ba:	3302      	addmi	r3, #2
 80069bc:	6033      	strmi	r3, [r6, #0]
 80069be:	6825      	ldr	r5, [r4, #0]
 80069c0:	f015 0506 	ands.w	r5, r5, #6
 80069c4:	d106      	bne.n	80069d4 <_printf_common+0x48>
 80069c6:	f104 0a19 	add.w	sl, r4, #25
 80069ca:	68e3      	ldr	r3, [r4, #12]
 80069cc:	6832      	ldr	r2, [r6, #0]
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	dc26      	bgt.n	8006a22 <_printf_common+0x96>
 80069d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	3b00      	subs	r3, #0
 80069dc:	bf18      	it	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	0692      	lsls	r2, r2, #26
 80069e2:	d42b      	bmi.n	8006a3c <_printf_common+0xb0>
 80069e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069e8:	4641      	mov	r1, r8
 80069ea:	4638      	mov	r0, r7
 80069ec:	47c8      	blx	r9
 80069ee:	3001      	adds	r0, #1
 80069f0:	d01e      	beq.n	8006a30 <_printf_common+0xa4>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	6922      	ldr	r2, [r4, #16]
 80069f6:	f003 0306 	and.w	r3, r3, #6
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	bf02      	ittt	eq
 80069fe:	68e5      	ldreq	r5, [r4, #12]
 8006a00:	6833      	ldreq	r3, [r6, #0]
 8006a02:	1aed      	subeq	r5, r5, r3
 8006a04:	68a3      	ldr	r3, [r4, #8]
 8006a06:	bf0c      	ite	eq
 8006a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a0c:	2500      	movne	r5, #0
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	bfc4      	itt	gt
 8006a12:	1a9b      	subgt	r3, r3, r2
 8006a14:	18ed      	addgt	r5, r5, r3
 8006a16:	2600      	movs	r6, #0
 8006a18:	341a      	adds	r4, #26
 8006a1a:	42b5      	cmp	r5, r6
 8006a1c:	d11a      	bne.n	8006a54 <_printf_common+0xc8>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e008      	b.n	8006a34 <_printf_common+0xa8>
 8006a22:	2301      	movs	r3, #1
 8006a24:	4652      	mov	r2, sl
 8006a26:	4641      	mov	r1, r8
 8006a28:	4638      	mov	r0, r7
 8006a2a:	47c8      	blx	r9
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d103      	bne.n	8006a38 <_printf_common+0xac>
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a38:	3501      	adds	r5, #1
 8006a3a:	e7c6      	b.n	80069ca <_printf_common+0x3e>
 8006a3c:	18e1      	adds	r1, r4, r3
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	2030      	movs	r0, #48	@ 0x30
 8006a42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a46:	4422      	add	r2, r4
 8006a48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a50:	3302      	adds	r3, #2
 8006a52:	e7c7      	b.n	80069e4 <_printf_common+0x58>
 8006a54:	2301      	movs	r3, #1
 8006a56:	4622      	mov	r2, r4
 8006a58:	4641      	mov	r1, r8
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	47c8      	blx	r9
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d0e6      	beq.n	8006a30 <_printf_common+0xa4>
 8006a62:	3601      	adds	r6, #1
 8006a64:	e7d9      	b.n	8006a1a <_printf_common+0x8e>
	...

08006a68 <_printf_i>:
 8006a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	7e0f      	ldrb	r7, [r1, #24]
 8006a6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a70:	2f78      	cmp	r7, #120	@ 0x78
 8006a72:	4691      	mov	r9, r2
 8006a74:	4680      	mov	r8, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	469a      	mov	sl, r3
 8006a7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a7e:	d807      	bhi.n	8006a90 <_printf_i+0x28>
 8006a80:	2f62      	cmp	r7, #98	@ 0x62
 8006a82:	d80a      	bhi.n	8006a9a <_printf_i+0x32>
 8006a84:	2f00      	cmp	r7, #0
 8006a86:	f000 80d2 	beq.w	8006c2e <_printf_i+0x1c6>
 8006a8a:	2f58      	cmp	r7, #88	@ 0x58
 8006a8c:	f000 80b9 	beq.w	8006c02 <_printf_i+0x19a>
 8006a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a98:	e03a      	b.n	8006b10 <_printf_i+0xa8>
 8006a9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a9e:	2b15      	cmp	r3, #21
 8006aa0:	d8f6      	bhi.n	8006a90 <_printf_i+0x28>
 8006aa2:	a101      	add	r1, pc, #4	@ (adr r1, 8006aa8 <_printf_i+0x40>)
 8006aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa8:	08006b01 	.word	0x08006b01
 8006aac:	08006b15 	.word	0x08006b15
 8006ab0:	08006a91 	.word	0x08006a91
 8006ab4:	08006a91 	.word	0x08006a91
 8006ab8:	08006a91 	.word	0x08006a91
 8006abc:	08006a91 	.word	0x08006a91
 8006ac0:	08006b15 	.word	0x08006b15
 8006ac4:	08006a91 	.word	0x08006a91
 8006ac8:	08006a91 	.word	0x08006a91
 8006acc:	08006a91 	.word	0x08006a91
 8006ad0:	08006a91 	.word	0x08006a91
 8006ad4:	08006c15 	.word	0x08006c15
 8006ad8:	08006b3f 	.word	0x08006b3f
 8006adc:	08006bcf 	.word	0x08006bcf
 8006ae0:	08006a91 	.word	0x08006a91
 8006ae4:	08006a91 	.word	0x08006a91
 8006ae8:	08006c37 	.word	0x08006c37
 8006aec:	08006a91 	.word	0x08006a91
 8006af0:	08006b3f 	.word	0x08006b3f
 8006af4:	08006a91 	.word	0x08006a91
 8006af8:	08006a91 	.word	0x08006a91
 8006afc:	08006bd7 	.word	0x08006bd7
 8006b00:	6833      	ldr	r3, [r6, #0]
 8006b02:	1d1a      	adds	r2, r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6032      	str	r2, [r6, #0]
 8006b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b10:	2301      	movs	r3, #1
 8006b12:	e09d      	b.n	8006c50 <_printf_i+0x1e8>
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	6820      	ldr	r0, [r4, #0]
 8006b18:	1d19      	adds	r1, r3, #4
 8006b1a:	6031      	str	r1, [r6, #0]
 8006b1c:	0606      	lsls	r6, r0, #24
 8006b1e:	d501      	bpl.n	8006b24 <_printf_i+0xbc>
 8006b20:	681d      	ldr	r5, [r3, #0]
 8006b22:	e003      	b.n	8006b2c <_printf_i+0xc4>
 8006b24:	0645      	lsls	r5, r0, #25
 8006b26:	d5fb      	bpl.n	8006b20 <_printf_i+0xb8>
 8006b28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	da03      	bge.n	8006b38 <_printf_i+0xd0>
 8006b30:	232d      	movs	r3, #45	@ 0x2d
 8006b32:	426d      	negs	r5, r5
 8006b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b38:	4859      	ldr	r0, [pc, #356]	@ (8006ca0 <_printf_i+0x238>)
 8006b3a:	230a      	movs	r3, #10
 8006b3c:	e011      	b.n	8006b62 <_printf_i+0xfa>
 8006b3e:	6821      	ldr	r1, [r4, #0]
 8006b40:	6833      	ldr	r3, [r6, #0]
 8006b42:	0608      	lsls	r0, r1, #24
 8006b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b48:	d402      	bmi.n	8006b50 <_printf_i+0xe8>
 8006b4a:	0649      	lsls	r1, r1, #25
 8006b4c:	bf48      	it	mi
 8006b4e:	b2ad      	uxthmi	r5, r5
 8006b50:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b52:	4853      	ldr	r0, [pc, #332]	@ (8006ca0 <_printf_i+0x238>)
 8006b54:	6033      	str	r3, [r6, #0]
 8006b56:	bf14      	ite	ne
 8006b58:	230a      	movne	r3, #10
 8006b5a:	2308      	moveq	r3, #8
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b62:	6866      	ldr	r6, [r4, #4]
 8006b64:	60a6      	str	r6, [r4, #8]
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	bfa2      	ittt	ge
 8006b6a:	6821      	ldrge	r1, [r4, #0]
 8006b6c:	f021 0104 	bicge.w	r1, r1, #4
 8006b70:	6021      	strge	r1, [r4, #0]
 8006b72:	b90d      	cbnz	r5, 8006b78 <_printf_i+0x110>
 8006b74:	2e00      	cmp	r6, #0
 8006b76:	d04b      	beq.n	8006c10 <_printf_i+0x1a8>
 8006b78:	4616      	mov	r6, r2
 8006b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b82:	5dc7      	ldrb	r7, [r0, r7]
 8006b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b88:	462f      	mov	r7, r5
 8006b8a:	42bb      	cmp	r3, r7
 8006b8c:	460d      	mov	r5, r1
 8006b8e:	d9f4      	bls.n	8006b7a <_printf_i+0x112>
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d10b      	bne.n	8006bac <_printf_i+0x144>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	07df      	lsls	r7, r3, #31
 8006b98:	d508      	bpl.n	8006bac <_printf_i+0x144>
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	6861      	ldr	r1, [r4, #4]
 8006b9e:	4299      	cmp	r1, r3
 8006ba0:	bfde      	ittt	le
 8006ba2:	2330      	movle	r3, #48	@ 0x30
 8006ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ba8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bac:	1b92      	subs	r2, r2, r6
 8006bae:	6122      	str	r2, [r4, #16]
 8006bb0:	f8cd a000 	str.w	sl, [sp]
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	aa03      	add	r2, sp, #12
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4640      	mov	r0, r8
 8006bbc:	f7ff fee6 	bl	800698c <_printf_common>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d14a      	bne.n	8006c5a <_printf_i+0x1f2>
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	b004      	add	sp, #16
 8006bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	f043 0320 	orr.w	r3, r3, #32
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	4833      	ldr	r0, [pc, #204]	@ (8006ca4 <_printf_i+0x23c>)
 8006bd8:	2778      	movs	r7, #120	@ 0x78
 8006bda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	6831      	ldr	r1, [r6, #0]
 8006be2:	061f      	lsls	r7, r3, #24
 8006be4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006be8:	d402      	bmi.n	8006bf0 <_printf_i+0x188>
 8006bea:	065f      	lsls	r7, r3, #25
 8006bec:	bf48      	it	mi
 8006bee:	b2ad      	uxthmi	r5, r5
 8006bf0:	6031      	str	r1, [r6, #0]
 8006bf2:	07d9      	lsls	r1, r3, #31
 8006bf4:	bf44      	itt	mi
 8006bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bfa:	6023      	strmi	r3, [r4, #0]
 8006bfc:	b11d      	cbz	r5, 8006c06 <_printf_i+0x19e>
 8006bfe:	2310      	movs	r3, #16
 8006c00:	e7ac      	b.n	8006b5c <_printf_i+0xf4>
 8006c02:	4827      	ldr	r0, [pc, #156]	@ (8006ca0 <_printf_i+0x238>)
 8006c04:	e7e9      	b.n	8006bda <_printf_i+0x172>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	f023 0320 	bic.w	r3, r3, #32
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	e7f6      	b.n	8006bfe <_printf_i+0x196>
 8006c10:	4616      	mov	r6, r2
 8006c12:	e7bd      	b.n	8006b90 <_printf_i+0x128>
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	6825      	ldr	r5, [r4, #0]
 8006c18:	6961      	ldr	r1, [r4, #20]
 8006c1a:	1d18      	adds	r0, r3, #4
 8006c1c:	6030      	str	r0, [r6, #0]
 8006c1e:	062e      	lsls	r6, r5, #24
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	d501      	bpl.n	8006c28 <_printf_i+0x1c0>
 8006c24:	6019      	str	r1, [r3, #0]
 8006c26:	e002      	b.n	8006c2e <_printf_i+0x1c6>
 8006c28:	0668      	lsls	r0, r5, #25
 8006c2a:	d5fb      	bpl.n	8006c24 <_printf_i+0x1bc>
 8006c2c:	8019      	strh	r1, [r3, #0]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6123      	str	r3, [r4, #16]
 8006c32:	4616      	mov	r6, r2
 8006c34:	e7bc      	b.n	8006bb0 <_printf_i+0x148>
 8006c36:	6833      	ldr	r3, [r6, #0]
 8006c38:	1d1a      	adds	r2, r3, #4
 8006c3a:	6032      	str	r2, [r6, #0]
 8006c3c:	681e      	ldr	r6, [r3, #0]
 8006c3e:	6862      	ldr	r2, [r4, #4]
 8006c40:	2100      	movs	r1, #0
 8006c42:	4630      	mov	r0, r6
 8006c44:	f7f9 fac4 	bl	80001d0 <memchr>
 8006c48:	b108      	cbz	r0, 8006c4e <_printf_i+0x1e6>
 8006c4a:	1b80      	subs	r0, r0, r6
 8006c4c:	6060      	str	r0, [r4, #4]
 8006c4e:	6863      	ldr	r3, [r4, #4]
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	2300      	movs	r3, #0
 8006c54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c58:	e7aa      	b.n	8006bb0 <_printf_i+0x148>
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	4649      	mov	r1, r9
 8006c60:	4640      	mov	r0, r8
 8006c62:	47d0      	blx	sl
 8006c64:	3001      	adds	r0, #1
 8006c66:	d0ad      	beq.n	8006bc4 <_printf_i+0x15c>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	079b      	lsls	r3, r3, #30
 8006c6c:	d413      	bmi.n	8006c96 <_printf_i+0x22e>
 8006c6e:	68e0      	ldr	r0, [r4, #12]
 8006c70:	9b03      	ldr	r3, [sp, #12]
 8006c72:	4298      	cmp	r0, r3
 8006c74:	bfb8      	it	lt
 8006c76:	4618      	movlt	r0, r3
 8006c78:	e7a6      	b.n	8006bc8 <_printf_i+0x160>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	4649      	mov	r1, r9
 8006c80:	4640      	mov	r0, r8
 8006c82:	47d0      	blx	sl
 8006c84:	3001      	adds	r0, #1
 8006c86:	d09d      	beq.n	8006bc4 <_printf_i+0x15c>
 8006c88:	3501      	adds	r5, #1
 8006c8a:	68e3      	ldr	r3, [r4, #12]
 8006c8c:	9903      	ldr	r1, [sp, #12]
 8006c8e:	1a5b      	subs	r3, r3, r1
 8006c90:	42ab      	cmp	r3, r5
 8006c92:	dcf2      	bgt.n	8006c7a <_printf_i+0x212>
 8006c94:	e7eb      	b.n	8006c6e <_printf_i+0x206>
 8006c96:	2500      	movs	r5, #0
 8006c98:	f104 0619 	add.w	r6, r4, #25
 8006c9c:	e7f5      	b.n	8006c8a <_printf_i+0x222>
 8006c9e:	bf00      	nop
 8006ca0:	0800b1f2 	.word	0x0800b1f2
 8006ca4:	0800b203 	.word	0x0800b203

08006ca8 <_scanf_float>:
 8006ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	b087      	sub	sp, #28
 8006cae:	4617      	mov	r7, r2
 8006cb0:	9303      	str	r3, [sp, #12]
 8006cb2:	688b      	ldr	r3, [r1, #8]
 8006cb4:	1e5a      	subs	r2, r3, #1
 8006cb6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006cba:	bf81      	itttt	hi
 8006cbc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006cc0:	eb03 0b05 	addhi.w	fp, r3, r5
 8006cc4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006cc8:	608b      	strhi	r3, [r1, #8]
 8006cca:	680b      	ldr	r3, [r1, #0]
 8006ccc:	460a      	mov	r2, r1
 8006cce:	f04f 0500 	mov.w	r5, #0
 8006cd2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006cd6:	f842 3b1c 	str.w	r3, [r2], #28
 8006cda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006cde:	4680      	mov	r8, r0
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	bf98      	it	ls
 8006ce4:	f04f 0b00 	movls.w	fp, #0
 8006ce8:	9201      	str	r2, [sp, #4]
 8006cea:	4616      	mov	r6, r2
 8006cec:	46aa      	mov	sl, r5
 8006cee:	46a9      	mov	r9, r5
 8006cf0:	9502      	str	r5, [sp, #8]
 8006cf2:	68a2      	ldr	r2, [r4, #8]
 8006cf4:	b152      	cbz	r2, 8006d0c <_scanf_float+0x64>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b4e      	cmp	r3, #78	@ 0x4e
 8006cfc:	d864      	bhi.n	8006dc8 <_scanf_float+0x120>
 8006cfe:	2b40      	cmp	r3, #64	@ 0x40
 8006d00:	d83c      	bhi.n	8006d7c <_scanf_float+0xd4>
 8006d02:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006d06:	b2c8      	uxtb	r0, r1
 8006d08:	280e      	cmp	r0, #14
 8006d0a:	d93a      	bls.n	8006d82 <_scanf_float+0xda>
 8006d0c:	f1b9 0f00 	cmp.w	r9, #0
 8006d10:	d003      	beq.n	8006d1a <_scanf_float+0x72>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d1e:	f1ba 0f01 	cmp.w	sl, #1
 8006d22:	f200 8117 	bhi.w	8006f54 <_scanf_float+0x2ac>
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	429e      	cmp	r6, r3
 8006d2a:	f200 8108 	bhi.w	8006f3e <_scanf_float+0x296>
 8006d2e:	2001      	movs	r0, #1
 8006d30:	b007      	add	sp, #28
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006d3a:	2a0d      	cmp	r2, #13
 8006d3c:	d8e6      	bhi.n	8006d0c <_scanf_float+0x64>
 8006d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8006d44 <_scanf_float+0x9c>)
 8006d40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d44:	08006e8b 	.word	0x08006e8b
 8006d48:	08006d0d 	.word	0x08006d0d
 8006d4c:	08006d0d 	.word	0x08006d0d
 8006d50:	08006d0d 	.word	0x08006d0d
 8006d54:	08006eeb 	.word	0x08006eeb
 8006d58:	08006ec3 	.word	0x08006ec3
 8006d5c:	08006d0d 	.word	0x08006d0d
 8006d60:	08006d0d 	.word	0x08006d0d
 8006d64:	08006e99 	.word	0x08006e99
 8006d68:	08006d0d 	.word	0x08006d0d
 8006d6c:	08006d0d 	.word	0x08006d0d
 8006d70:	08006d0d 	.word	0x08006d0d
 8006d74:	08006d0d 	.word	0x08006d0d
 8006d78:	08006e51 	.word	0x08006e51
 8006d7c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006d80:	e7db      	b.n	8006d3a <_scanf_float+0x92>
 8006d82:	290e      	cmp	r1, #14
 8006d84:	d8c2      	bhi.n	8006d0c <_scanf_float+0x64>
 8006d86:	a001      	add	r0, pc, #4	@ (adr r0, 8006d8c <_scanf_float+0xe4>)
 8006d88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d8c:	08006e41 	.word	0x08006e41
 8006d90:	08006d0d 	.word	0x08006d0d
 8006d94:	08006e41 	.word	0x08006e41
 8006d98:	08006ed7 	.word	0x08006ed7
 8006d9c:	08006d0d 	.word	0x08006d0d
 8006da0:	08006de9 	.word	0x08006de9
 8006da4:	08006e27 	.word	0x08006e27
 8006da8:	08006e27 	.word	0x08006e27
 8006dac:	08006e27 	.word	0x08006e27
 8006db0:	08006e27 	.word	0x08006e27
 8006db4:	08006e27 	.word	0x08006e27
 8006db8:	08006e27 	.word	0x08006e27
 8006dbc:	08006e27 	.word	0x08006e27
 8006dc0:	08006e27 	.word	0x08006e27
 8006dc4:	08006e27 	.word	0x08006e27
 8006dc8:	2b6e      	cmp	r3, #110	@ 0x6e
 8006dca:	d809      	bhi.n	8006de0 <_scanf_float+0x138>
 8006dcc:	2b60      	cmp	r3, #96	@ 0x60
 8006dce:	d8b2      	bhi.n	8006d36 <_scanf_float+0x8e>
 8006dd0:	2b54      	cmp	r3, #84	@ 0x54
 8006dd2:	d07b      	beq.n	8006ecc <_scanf_float+0x224>
 8006dd4:	2b59      	cmp	r3, #89	@ 0x59
 8006dd6:	d199      	bne.n	8006d0c <_scanf_float+0x64>
 8006dd8:	2d07      	cmp	r5, #7
 8006dda:	d197      	bne.n	8006d0c <_scanf_float+0x64>
 8006ddc:	2508      	movs	r5, #8
 8006dde:	e02c      	b.n	8006e3a <_scanf_float+0x192>
 8006de0:	2b74      	cmp	r3, #116	@ 0x74
 8006de2:	d073      	beq.n	8006ecc <_scanf_float+0x224>
 8006de4:	2b79      	cmp	r3, #121	@ 0x79
 8006de6:	e7f6      	b.n	8006dd6 <_scanf_float+0x12e>
 8006de8:	6821      	ldr	r1, [r4, #0]
 8006dea:	05c8      	lsls	r0, r1, #23
 8006dec:	d51b      	bpl.n	8006e26 <_scanf_float+0x17e>
 8006dee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006df2:	6021      	str	r1, [r4, #0]
 8006df4:	f109 0901 	add.w	r9, r9, #1
 8006df8:	f1bb 0f00 	cmp.w	fp, #0
 8006dfc:	d003      	beq.n	8006e06 <_scanf_float+0x15e>
 8006dfe:	3201      	adds	r2, #1
 8006e00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e04:	60a2      	str	r2, [r4, #8]
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	60a3      	str	r3, [r4, #8]
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	6123      	str	r3, [r4, #16]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	607b      	str	r3, [r7, #4]
 8006e1a:	f340 8087 	ble.w	8006f2c <_scanf_float+0x284>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	e765      	b.n	8006cf2 <_scanf_float+0x4a>
 8006e26:	eb1a 0105 	adds.w	r1, sl, r5
 8006e2a:	f47f af6f 	bne.w	8006d0c <_scanf_float+0x64>
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006e34:	6022      	str	r2, [r4, #0]
 8006e36:	460d      	mov	r5, r1
 8006e38:	468a      	mov	sl, r1
 8006e3a:	f806 3b01 	strb.w	r3, [r6], #1
 8006e3e:	e7e2      	b.n	8006e06 <_scanf_float+0x15e>
 8006e40:	6822      	ldr	r2, [r4, #0]
 8006e42:	0610      	lsls	r0, r2, #24
 8006e44:	f57f af62 	bpl.w	8006d0c <_scanf_float+0x64>
 8006e48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e4c:	6022      	str	r2, [r4, #0]
 8006e4e:	e7f4      	b.n	8006e3a <_scanf_float+0x192>
 8006e50:	f1ba 0f00 	cmp.w	sl, #0
 8006e54:	d10e      	bne.n	8006e74 <_scanf_float+0x1cc>
 8006e56:	f1b9 0f00 	cmp.w	r9, #0
 8006e5a:	d10e      	bne.n	8006e7a <_scanf_float+0x1d2>
 8006e5c:	6822      	ldr	r2, [r4, #0]
 8006e5e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e62:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e66:	d108      	bne.n	8006e7a <_scanf_float+0x1d2>
 8006e68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e6c:	6022      	str	r2, [r4, #0]
 8006e6e:	f04f 0a01 	mov.w	sl, #1
 8006e72:	e7e2      	b.n	8006e3a <_scanf_float+0x192>
 8006e74:	f1ba 0f02 	cmp.w	sl, #2
 8006e78:	d055      	beq.n	8006f26 <_scanf_float+0x27e>
 8006e7a:	2d01      	cmp	r5, #1
 8006e7c:	d002      	beq.n	8006e84 <_scanf_float+0x1dc>
 8006e7e:	2d04      	cmp	r5, #4
 8006e80:	f47f af44 	bne.w	8006d0c <_scanf_float+0x64>
 8006e84:	3501      	adds	r5, #1
 8006e86:	b2ed      	uxtb	r5, r5
 8006e88:	e7d7      	b.n	8006e3a <_scanf_float+0x192>
 8006e8a:	f1ba 0f01 	cmp.w	sl, #1
 8006e8e:	f47f af3d 	bne.w	8006d0c <_scanf_float+0x64>
 8006e92:	f04f 0a02 	mov.w	sl, #2
 8006e96:	e7d0      	b.n	8006e3a <_scanf_float+0x192>
 8006e98:	b97d      	cbnz	r5, 8006eba <_scanf_float+0x212>
 8006e9a:	f1b9 0f00 	cmp.w	r9, #0
 8006e9e:	f47f af38 	bne.w	8006d12 <_scanf_float+0x6a>
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006ea8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006eac:	f040 8108 	bne.w	80070c0 <_scanf_float+0x418>
 8006eb0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006eb4:	6022      	str	r2, [r4, #0]
 8006eb6:	2501      	movs	r5, #1
 8006eb8:	e7bf      	b.n	8006e3a <_scanf_float+0x192>
 8006eba:	2d03      	cmp	r5, #3
 8006ebc:	d0e2      	beq.n	8006e84 <_scanf_float+0x1dc>
 8006ebe:	2d05      	cmp	r5, #5
 8006ec0:	e7de      	b.n	8006e80 <_scanf_float+0x1d8>
 8006ec2:	2d02      	cmp	r5, #2
 8006ec4:	f47f af22 	bne.w	8006d0c <_scanf_float+0x64>
 8006ec8:	2503      	movs	r5, #3
 8006eca:	e7b6      	b.n	8006e3a <_scanf_float+0x192>
 8006ecc:	2d06      	cmp	r5, #6
 8006ece:	f47f af1d 	bne.w	8006d0c <_scanf_float+0x64>
 8006ed2:	2507      	movs	r5, #7
 8006ed4:	e7b1      	b.n	8006e3a <_scanf_float+0x192>
 8006ed6:	6822      	ldr	r2, [r4, #0]
 8006ed8:	0591      	lsls	r1, r2, #22
 8006eda:	f57f af17 	bpl.w	8006d0c <_scanf_float+0x64>
 8006ede:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006ee2:	6022      	str	r2, [r4, #0]
 8006ee4:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ee8:	e7a7      	b.n	8006e3a <_scanf_float+0x192>
 8006eea:	6822      	ldr	r2, [r4, #0]
 8006eec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006ef0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ef4:	d006      	beq.n	8006f04 <_scanf_float+0x25c>
 8006ef6:	0550      	lsls	r0, r2, #21
 8006ef8:	f57f af08 	bpl.w	8006d0c <_scanf_float+0x64>
 8006efc:	f1b9 0f00 	cmp.w	r9, #0
 8006f00:	f000 80de 	beq.w	80070c0 <_scanf_float+0x418>
 8006f04:	0591      	lsls	r1, r2, #22
 8006f06:	bf58      	it	pl
 8006f08:	9902      	ldrpl	r1, [sp, #8]
 8006f0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f0e:	bf58      	it	pl
 8006f10:	eba9 0101 	subpl.w	r1, r9, r1
 8006f14:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006f18:	bf58      	it	pl
 8006f1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f1e:	6022      	str	r2, [r4, #0]
 8006f20:	f04f 0900 	mov.w	r9, #0
 8006f24:	e789      	b.n	8006e3a <_scanf_float+0x192>
 8006f26:	f04f 0a03 	mov.w	sl, #3
 8006f2a:	e786      	b.n	8006e3a <_scanf_float+0x192>
 8006f2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006f30:	4639      	mov	r1, r7
 8006f32:	4640      	mov	r0, r8
 8006f34:	4798      	blx	r3
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f43f aedb 	beq.w	8006cf2 <_scanf_float+0x4a>
 8006f3c:	e6e6      	b.n	8006d0c <_scanf_float+0x64>
 8006f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f46:	463a      	mov	r2, r7
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4798      	blx	r3
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	6123      	str	r3, [r4, #16]
 8006f52:	e6e8      	b.n	8006d26 <_scanf_float+0x7e>
 8006f54:	1e6b      	subs	r3, r5, #1
 8006f56:	2b06      	cmp	r3, #6
 8006f58:	d824      	bhi.n	8006fa4 <_scanf_float+0x2fc>
 8006f5a:	2d02      	cmp	r5, #2
 8006f5c:	d836      	bhi.n	8006fcc <_scanf_float+0x324>
 8006f5e:	9b01      	ldr	r3, [sp, #4]
 8006f60:	429e      	cmp	r6, r3
 8006f62:	f67f aee4 	bls.w	8006d2e <_scanf_float+0x86>
 8006f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f6e:	463a      	mov	r2, r7
 8006f70:	4640      	mov	r0, r8
 8006f72:	4798      	blx	r3
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	e7f0      	b.n	8006f5e <_scanf_float+0x2b6>
 8006f7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f80:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006f84:	463a      	mov	r2, r7
 8006f86:	4640      	mov	r0, r8
 8006f88:	4798      	blx	r3
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f94:	fa5f fa8a 	uxtb.w	sl, sl
 8006f98:	f1ba 0f02 	cmp.w	sl, #2
 8006f9c:	d1ee      	bne.n	8006f7c <_scanf_float+0x2d4>
 8006f9e:	3d03      	subs	r5, #3
 8006fa0:	b2ed      	uxtb	r5, r5
 8006fa2:	1b76      	subs	r6, r6, r5
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	05da      	lsls	r2, r3, #23
 8006fa8:	d530      	bpl.n	800700c <_scanf_float+0x364>
 8006faa:	055b      	lsls	r3, r3, #21
 8006fac:	d511      	bpl.n	8006fd2 <_scanf_float+0x32a>
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	429e      	cmp	r6, r3
 8006fb2:	f67f aebc 	bls.w	8006d2e <_scanf_float+0x86>
 8006fb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fbe:	463a      	mov	r2, r7
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	4798      	blx	r3
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	6123      	str	r3, [r4, #16]
 8006fca:	e7f0      	b.n	8006fae <_scanf_float+0x306>
 8006fcc:	46aa      	mov	sl, r5
 8006fce:	46b3      	mov	fp, r6
 8006fd0:	e7de      	b.n	8006f90 <_scanf_float+0x2e8>
 8006fd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	2965      	cmp	r1, #101	@ 0x65
 8006fda:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fde:	f106 35ff 	add.w	r5, r6, #4294967295
 8006fe2:	6123      	str	r3, [r4, #16]
 8006fe4:	d00c      	beq.n	8007000 <_scanf_float+0x358>
 8006fe6:	2945      	cmp	r1, #69	@ 0x45
 8006fe8:	d00a      	beq.n	8007000 <_scanf_float+0x358>
 8006fea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fee:	463a      	mov	r2, r7
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4798      	blx	r3
 8006ff4:	6923      	ldr	r3, [r4, #16]
 8006ff6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	1eb5      	subs	r5, r6, #2
 8006ffe:	6123      	str	r3, [r4, #16]
 8007000:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007004:	463a      	mov	r2, r7
 8007006:	4640      	mov	r0, r8
 8007008:	4798      	blx	r3
 800700a:	462e      	mov	r6, r5
 800700c:	6822      	ldr	r2, [r4, #0]
 800700e:	f012 0210 	ands.w	r2, r2, #16
 8007012:	d001      	beq.n	8007018 <_scanf_float+0x370>
 8007014:	2000      	movs	r0, #0
 8007016:	e68b      	b.n	8006d30 <_scanf_float+0x88>
 8007018:	7032      	strb	r2, [r6, #0]
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007024:	d11c      	bne.n	8007060 <_scanf_float+0x3b8>
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	454b      	cmp	r3, r9
 800702a:	eba3 0209 	sub.w	r2, r3, r9
 800702e:	d123      	bne.n	8007078 <_scanf_float+0x3d0>
 8007030:	9901      	ldr	r1, [sp, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	4640      	mov	r0, r8
 8007036:	f002 fc07 	bl	8009848 <_strtod_r>
 800703a:	9b03      	ldr	r3, [sp, #12]
 800703c:	6821      	ldr	r1, [r4, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f011 0f02 	tst.w	r1, #2
 8007044:	ec57 6b10 	vmov	r6, r7, d0
 8007048:	f103 0204 	add.w	r2, r3, #4
 800704c:	d01f      	beq.n	800708e <_scanf_float+0x3e6>
 800704e:	9903      	ldr	r1, [sp, #12]
 8007050:	600a      	str	r2, [r1, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	e9c3 6700 	strd	r6, r7, [r3]
 8007058:	68e3      	ldr	r3, [r4, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60e3      	str	r3, [r4, #12]
 800705e:	e7d9      	b.n	8007014 <_scanf_float+0x36c>
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0e4      	beq.n	8007030 <_scanf_float+0x388>
 8007066:	9905      	ldr	r1, [sp, #20]
 8007068:	230a      	movs	r3, #10
 800706a:	3101      	adds	r1, #1
 800706c:	4640      	mov	r0, r8
 800706e:	f002 fc6b 	bl	8009948 <_strtol_r>
 8007072:	9b04      	ldr	r3, [sp, #16]
 8007074:	9e05      	ldr	r6, [sp, #20]
 8007076:	1ac2      	subs	r2, r0, r3
 8007078:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800707c:	429e      	cmp	r6, r3
 800707e:	bf28      	it	cs
 8007080:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007084:	4910      	ldr	r1, [pc, #64]	@ (80070c8 <_scanf_float+0x420>)
 8007086:	4630      	mov	r0, r6
 8007088:	f000 f8e4 	bl	8007254 <siprintf>
 800708c:	e7d0      	b.n	8007030 <_scanf_float+0x388>
 800708e:	f011 0f04 	tst.w	r1, #4
 8007092:	9903      	ldr	r1, [sp, #12]
 8007094:	600a      	str	r2, [r1, #0]
 8007096:	d1dc      	bne.n	8007052 <_scanf_float+0x3aa>
 8007098:	681d      	ldr	r5, [r3, #0]
 800709a:	4632      	mov	r2, r6
 800709c:	463b      	mov	r3, r7
 800709e:	4630      	mov	r0, r6
 80070a0:	4639      	mov	r1, r7
 80070a2:	f7f9 fd43 	bl	8000b2c <__aeabi_dcmpun>
 80070a6:	b128      	cbz	r0, 80070b4 <_scanf_float+0x40c>
 80070a8:	4808      	ldr	r0, [pc, #32]	@ (80070cc <_scanf_float+0x424>)
 80070aa:	f000 f9c5 	bl	8007438 <nanf>
 80070ae:	ed85 0a00 	vstr	s0, [r5]
 80070b2:	e7d1      	b.n	8007058 <_scanf_float+0x3b0>
 80070b4:	4630      	mov	r0, r6
 80070b6:	4639      	mov	r1, r7
 80070b8:	f7f9 fd96 	bl	8000be8 <__aeabi_d2f>
 80070bc:	6028      	str	r0, [r5, #0]
 80070be:	e7cb      	b.n	8007058 <_scanf_float+0x3b0>
 80070c0:	f04f 0900 	mov.w	r9, #0
 80070c4:	e629      	b.n	8006d1a <_scanf_float+0x72>
 80070c6:	bf00      	nop
 80070c8:	0800b214 	.word	0x0800b214
 80070cc:	0800b5ad 	.word	0x0800b5ad

080070d0 <std>:
 80070d0:	2300      	movs	r3, #0
 80070d2:	b510      	push	{r4, lr}
 80070d4:	4604      	mov	r4, r0
 80070d6:	e9c0 3300 	strd	r3, r3, [r0]
 80070da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070de:	6083      	str	r3, [r0, #8]
 80070e0:	8181      	strh	r1, [r0, #12]
 80070e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80070e4:	81c2      	strh	r2, [r0, #14]
 80070e6:	6183      	str	r3, [r0, #24]
 80070e8:	4619      	mov	r1, r3
 80070ea:	2208      	movs	r2, #8
 80070ec:	305c      	adds	r0, #92	@ 0x5c
 80070ee:	f000 f914 	bl	800731a <memset>
 80070f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007128 <std+0x58>)
 80070f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80070f6:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <std+0x5c>)
 80070f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007130 <std+0x60>)
 80070fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007134 <std+0x64>)
 8007100:	6323      	str	r3, [r4, #48]	@ 0x30
 8007102:	4b0d      	ldr	r3, [pc, #52]	@ (8007138 <std+0x68>)
 8007104:	6224      	str	r4, [r4, #32]
 8007106:	429c      	cmp	r4, r3
 8007108:	d006      	beq.n	8007118 <std+0x48>
 800710a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800710e:	4294      	cmp	r4, r2
 8007110:	d002      	beq.n	8007118 <std+0x48>
 8007112:	33d0      	adds	r3, #208	@ 0xd0
 8007114:	429c      	cmp	r4, r3
 8007116:	d105      	bne.n	8007124 <std+0x54>
 8007118:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007120:	f000 b978 	b.w	8007414 <__retarget_lock_init_recursive>
 8007124:	bd10      	pop	{r4, pc}
 8007126:	bf00      	nop
 8007128:	08007295 	.word	0x08007295
 800712c:	080072b7 	.word	0x080072b7
 8007130:	080072ef 	.word	0x080072ef
 8007134:	08007313 	.word	0x08007313
 8007138:	200004cc 	.word	0x200004cc

0800713c <stdio_exit_handler>:
 800713c:	4a02      	ldr	r2, [pc, #8]	@ (8007148 <stdio_exit_handler+0xc>)
 800713e:	4903      	ldr	r1, [pc, #12]	@ (800714c <stdio_exit_handler+0x10>)
 8007140:	4803      	ldr	r0, [pc, #12]	@ (8007150 <stdio_exit_handler+0x14>)
 8007142:	f000 b869 	b.w	8007218 <_fwalk_sglue>
 8007146:	bf00      	nop
 8007148:	2000001c 	.word	0x2000001c
 800714c:	08009d05 	.word	0x08009d05
 8007150:	2000002c 	.word	0x2000002c

08007154 <cleanup_stdio>:
 8007154:	6841      	ldr	r1, [r0, #4]
 8007156:	4b0c      	ldr	r3, [pc, #48]	@ (8007188 <cleanup_stdio+0x34>)
 8007158:	4299      	cmp	r1, r3
 800715a:	b510      	push	{r4, lr}
 800715c:	4604      	mov	r4, r0
 800715e:	d001      	beq.n	8007164 <cleanup_stdio+0x10>
 8007160:	f002 fdd0 	bl	8009d04 <_fflush_r>
 8007164:	68a1      	ldr	r1, [r4, #8]
 8007166:	4b09      	ldr	r3, [pc, #36]	@ (800718c <cleanup_stdio+0x38>)
 8007168:	4299      	cmp	r1, r3
 800716a:	d002      	beq.n	8007172 <cleanup_stdio+0x1e>
 800716c:	4620      	mov	r0, r4
 800716e:	f002 fdc9 	bl	8009d04 <_fflush_r>
 8007172:	68e1      	ldr	r1, [r4, #12]
 8007174:	4b06      	ldr	r3, [pc, #24]	@ (8007190 <cleanup_stdio+0x3c>)
 8007176:	4299      	cmp	r1, r3
 8007178:	d004      	beq.n	8007184 <cleanup_stdio+0x30>
 800717a:	4620      	mov	r0, r4
 800717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007180:	f002 bdc0 	b.w	8009d04 <_fflush_r>
 8007184:	bd10      	pop	{r4, pc}
 8007186:	bf00      	nop
 8007188:	200004cc 	.word	0x200004cc
 800718c:	20000534 	.word	0x20000534
 8007190:	2000059c 	.word	0x2000059c

08007194 <global_stdio_init.part.0>:
 8007194:	b510      	push	{r4, lr}
 8007196:	4b0b      	ldr	r3, [pc, #44]	@ (80071c4 <global_stdio_init.part.0+0x30>)
 8007198:	4c0b      	ldr	r4, [pc, #44]	@ (80071c8 <global_stdio_init.part.0+0x34>)
 800719a:	4a0c      	ldr	r2, [pc, #48]	@ (80071cc <global_stdio_init.part.0+0x38>)
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	4620      	mov	r0, r4
 80071a0:	2200      	movs	r2, #0
 80071a2:	2104      	movs	r1, #4
 80071a4:	f7ff ff94 	bl	80070d0 <std>
 80071a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071ac:	2201      	movs	r2, #1
 80071ae:	2109      	movs	r1, #9
 80071b0:	f7ff ff8e 	bl	80070d0 <std>
 80071b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071b8:	2202      	movs	r2, #2
 80071ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071be:	2112      	movs	r1, #18
 80071c0:	f7ff bf86 	b.w	80070d0 <std>
 80071c4:	20000604 	.word	0x20000604
 80071c8:	200004cc 	.word	0x200004cc
 80071cc:	0800713d 	.word	0x0800713d

080071d0 <__sfp_lock_acquire>:
 80071d0:	4801      	ldr	r0, [pc, #4]	@ (80071d8 <__sfp_lock_acquire+0x8>)
 80071d2:	f000 b920 	b.w	8007416 <__retarget_lock_acquire_recursive>
 80071d6:	bf00      	nop
 80071d8:	2000060d 	.word	0x2000060d

080071dc <__sfp_lock_release>:
 80071dc:	4801      	ldr	r0, [pc, #4]	@ (80071e4 <__sfp_lock_release+0x8>)
 80071de:	f000 b91b 	b.w	8007418 <__retarget_lock_release_recursive>
 80071e2:	bf00      	nop
 80071e4:	2000060d 	.word	0x2000060d

080071e8 <__sinit>:
 80071e8:	b510      	push	{r4, lr}
 80071ea:	4604      	mov	r4, r0
 80071ec:	f7ff fff0 	bl	80071d0 <__sfp_lock_acquire>
 80071f0:	6a23      	ldr	r3, [r4, #32]
 80071f2:	b11b      	cbz	r3, 80071fc <__sinit+0x14>
 80071f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f8:	f7ff bff0 	b.w	80071dc <__sfp_lock_release>
 80071fc:	4b04      	ldr	r3, [pc, #16]	@ (8007210 <__sinit+0x28>)
 80071fe:	6223      	str	r3, [r4, #32]
 8007200:	4b04      	ldr	r3, [pc, #16]	@ (8007214 <__sinit+0x2c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f5      	bne.n	80071f4 <__sinit+0xc>
 8007208:	f7ff ffc4 	bl	8007194 <global_stdio_init.part.0>
 800720c:	e7f2      	b.n	80071f4 <__sinit+0xc>
 800720e:	bf00      	nop
 8007210:	08007155 	.word	0x08007155
 8007214:	20000604 	.word	0x20000604

08007218 <_fwalk_sglue>:
 8007218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800721c:	4607      	mov	r7, r0
 800721e:	4688      	mov	r8, r1
 8007220:	4614      	mov	r4, r2
 8007222:	2600      	movs	r6, #0
 8007224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007228:	f1b9 0901 	subs.w	r9, r9, #1
 800722c:	d505      	bpl.n	800723a <_fwalk_sglue+0x22>
 800722e:	6824      	ldr	r4, [r4, #0]
 8007230:	2c00      	cmp	r4, #0
 8007232:	d1f7      	bne.n	8007224 <_fwalk_sglue+0xc>
 8007234:	4630      	mov	r0, r6
 8007236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d907      	bls.n	8007250 <_fwalk_sglue+0x38>
 8007240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007244:	3301      	adds	r3, #1
 8007246:	d003      	beq.n	8007250 <_fwalk_sglue+0x38>
 8007248:	4629      	mov	r1, r5
 800724a:	4638      	mov	r0, r7
 800724c:	47c0      	blx	r8
 800724e:	4306      	orrs	r6, r0
 8007250:	3568      	adds	r5, #104	@ 0x68
 8007252:	e7e9      	b.n	8007228 <_fwalk_sglue+0x10>

08007254 <siprintf>:
 8007254:	b40e      	push	{r1, r2, r3}
 8007256:	b500      	push	{lr}
 8007258:	b09c      	sub	sp, #112	@ 0x70
 800725a:	ab1d      	add	r3, sp, #116	@ 0x74
 800725c:	9002      	str	r0, [sp, #8]
 800725e:	9006      	str	r0, [sp, #24]
 8007260:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007264:	4809      	ldr	r0, [pc, #36]	@ (800728c <siprintf+0x38>)
 8007266:	9107      	str	r1, [sp, #28]
 8007268:	9104      	str	r1, [sp, #16]
 800726a:	4909      	ldr	r1, [pc, #36]	@ (8007290 <siprintf+0x3c>)
 800726c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007270:	9105      	str	r1, [sp, #20]
 8007272:	6800      	ldr	r0, [r0, #0]
 8007274:	9301      	str	r3, [sp, #4]
 8007276:	a902      	add	r1, sp, #8
 8007278:	f002 fbc4 	bl	8009a04 <_svfiprintf_r>
 800727c:	9b02      	ldr	r3, [sp, #8]
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
 8007282:	b01c      	add	sp, #112	@ 0x70
 8007284:	f85d eb04 	ldr.w	lr, [sp], #4
 8007288:	b003      	add	sp, #12
 800728a:	4770      	bx	lr
 800728c:	20000028 	.word	0x20000028
 8007290:	ffff0208 	.word	0xffff0208

08007294 <__sread>:
 8007294:	b510      	push	{r4, lr}
 8007296:	460c      	mov	r4, r1
 8007298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729c:	f000 f86c 	bl	8007378 <_read_r>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	bfab      	itete	ge
 80072a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072a6:	89a3      	ldrhlt	r3, [r4, #12]
 80072a8:	181b      	addge	r3, r3, r0
 80072aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072ae:	bfac      	ite	ge
 80072b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072b2:	81a3      	strhlt	r3, [r4, #12]
 80072b4:	bd10      	pop	{r4, pc}

080072b6 <__swrite>:
 80072b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ba:	461f      	mov	r7, r3
 80072bc:	898b      	ldrh	r3, [r1, #12]
 80072be:	05db      	lsls	r3, r3, #23
 80072c0:	4605      	mov	r5, r0
 80072c2:	460c      	mov	r4, r1
 80072c4:	4616      	mov	r6, r2
 80072c6:	d505      	bpl.n	80072d4 <__swrite+0x1e>
 80072c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072cc:	2302      	movs	r3, #2
 80072ce:	2200      	movs	r2, #0
 80072d0:	f000 f840 	bl	8007354 <_lseek_r>
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072de:	81a3      	strh	r3, [r4, #12]
 80072e0:	4632      	mov	r2, r6
 80072e2:	463b      	mov	r3, r7
 80072e4:	4628      	mov	r0, r5
 80072e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ea:	f000 b857 	b.w	800739c <_write_r>

080072ee <__sseek>:
 80072ee:	b510      	push	{r4, lr}
 80072f0:	460c      	mov	r4, r1
 80072f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f6:	f000 f82d 	bl	8007354 <_lseek_r>
 80072fa:	1c43      	adds	r3, r0, #1
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	bf15      	itete	ne
 8007300:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007302:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007306:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800730a:	81a3      	strheq	r3, [r4, #12]
 800730c:	bf18      	it	ne
 800730e:	81a3      	strhne	r3, [r4, #12]
 8007310:	bd10      	pop	{r4, pc}

08007312 <__sclose>:
 8007312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007316:	f000 b80d 	b.w	8007334 <_close_r>

0800731a <memset>:
 800731a:	4402      	add	r2, r0
 800731c:	4603      	mov	r3, r0
 800731e:	4293      	cmp	r3, r2
 8007320:	d100      	bne.n	8007324 <memset+0xa>
 8007322:	4770      	bx	lr
 8007324:	f803 1b01 	strb.w	r1, [r3], #1
 8007328:	e7f9      	b.n	800731e <memset+0x4>
	...

0800732c <_localeconv_r>:
 800732c:	4800      	ldr	r0, [pc, #0]	@ (8007330 <_localeconv_r+0x4>)
 800732e:	4770      	bx	lr
 8007330:	20000168 	.word	0x20000168

08007334 <_close_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4d06      	ldr	r5, [pc, #24]	@ (8007350 <_close_r+0x1c>)
 8007338:	2300      	movs	r3, #0
 800733a:	4604      	mov	r4, r0
 800733c:	4608      	mov	r0, r1
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	f7fb f8d2 	bl	80024e8 <_close>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d102      	bne.n	800734e <_close_r+0x1a>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b103      	cbz	r3, 800734e <_close_r+0x1a>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	20000608 	.word	0x20000608

08007354 <_lseek_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4d07      	ldr	r5, [pc, #28]	@ (8007374 <_lseek_r+0x20>)
 8007358:	4604      	mov	r4, r0
 800735a:	4608      	mov	r0, r1
 800735c:	4611      	mov	r1, r2
 800735e:	2200      	movs	r2, #0
 8007360:	602a      	str	r2, [r5, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	f7fb f8e7 	bl	8002536 <_lseek>
 8007368:	1c43      	adds	r3, r0, #1
 800736a:	d102      	bne.n	8007372 <_lseek_r+0x1e>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	b103      	cbz	r3, 8007372 <_lseek_r+0x1e>
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	bd38      	pop	{r3, r4, r5, pc}
 8007374:	20000608 	.word	0x20000608

08007378 <_read_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4d07      	ldr	r5, [pc, #28]	@ (8007398 <_read_r+0x20>)
 800737c:	4604      	mov	r4, r0
 800737e:	4608      	mov	r0, r1
 8007380:	4611      	mov	r1, r2
 8007382:	2200      	movs	r2, #0
 8007384:	602a      	str	r2, [r5, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	f7fb f875 	bl	8002476 <_read>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d102      	bne.n	8007396 <_read_r+0x1e>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	b103      	cbz	r3, 8007396 <_read_r+0x1e>
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	20000608 	.word	0x20000608

0800739c <_write_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d07      	ldr	r5, [pc, #28]	@ (80073bc <_write_r+0x20>)
 80073a0:	4604      	mov	r4, r0
 80073a2:	4608      	mov	r0, r1
 80073a4:	4611      	mov	r1, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	602a      	str	r2, [r5, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f7fb f880 	bl	80024b0 <_write>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_write_r+0x1e>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_write_r+0x1e>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20000608 	.word	0x20000608

080073c0 <__errno>:
 80073c0:	4b01      	ldr	r3, [pc, #4]	@ (80073c8 <__errno+0x8>)
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20000028 	.word	0x20000028

080073cc <__libc_init_array>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007404 <__libc_init_array+0x38>)
 80073d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007408 <__libc_init_array+0x3c>)
 80073d2:	1b64      	subs	r4, r4, r5
 80073d4:	10a4      	asrs	r4, r4, #2
 80073d6:	2600      	movs	r6, #0
 80073d8:	42a6      	cmp	r6, r4
 80073da:	d109      	bne.n	80073f0 <__libc_init_array+0x24>
 80073dc:	4d0b      	ldr	r5, [pc, #44]	@ (800740c <__libc_init_array+0x40>)
 80073de:	4c0c      	ldr	r4, [pc, #48]	@ (8007410 <__libc_init_array+0x44>)
 80073e0:	f003 fee6 	bl	800b1b0 <_init>
 80073e4:	1b64      	subs	r4, r4, r5
 80073e6:	10a4      	asrs	r4, r4, #2
 80073e8:	2600      	movs	r6, #0
 80073ea:	42a6      	cmp	r6, r4
 80073ec:	d105      	bne.n	80073fa <__libc_init_array+0x2e>
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f4:	4798      	blx	r3
 80073f6:	3601      	adds	r6, #1
 80073f8:	e7ee      	b.n	80073d8 <__libc_init_array+0xc>
 80073fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fe:	4798      	blx	r3
 8007400:	3601      	adds	r6, #1
 8007402:	e7f2      	b.n	80073ea <__libc_init_array+0x1e>
 8007404:	0800b688 	.word	0x0800b688
 8007408:	0800b688 	.word	0x0800b688
 800740c:	0800b688 	.word	0x0800b688
 8007410:	0800b68c 	.word	0x0800b68c

08007414 <__retarget_lock_init_recursive>:
 8007414:	4770      	bx	lr

08007416 <__retarget_lock_acquire_recursive>:
 8007416:	4770      	bx	lr

08007418 <__retarget_lock_release_recursive>:
 8007418:	4770      	bx	lr

0800741a <memcpy>:
 800741a:	440a      	add	r2, r1
 800741c:	4291      	cmp	r1, r2
 800741e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007422:	d100      	bne.n	8007426 <memcpy+0xc>
 8007424:	4770      	bx	lr
 8007426:	b510      	push	{r4, lr}
 8007428:	f811 4b01 	ldrb.w	r4, [r1], #1
 800742c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007430:	4291      	cmp	r1, r2
 8007432:	d1f9      	bne.n	8007428 <memcpy+0xe>
 8007434:	bd10      	pop	{r4, pc}
	...

08007438 <nanf>:
 8007438:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007440 <nanf+0x8>
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	7fc00000 	.word	0x7fc00000

08007444 <quorem>:
 8007444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007448:	6903      	ldr	r3, [r0, #16]
 800744a:	690c      	ldr	r4, [r1, #16]
 800744c:	42a3      	cmp	r3, r4
 800744e:	4607      	mov	r7, r0
 8007450:	db7e      	blt.n	8007550 <quorem+0x10c>
 8007452:	3c01      	subs	r4, #1
 8007454:	f101 0814 	add.w	r8, r1, #20
 8007458:	00a3      	lsls	r3, r4, #2
 800745a:	f100 0514 	add.w	r5, r0, #20
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800746a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800746e:	3301      	adds	r3, #1
 8007470:	429a      	cmp	r2, r3
 8007472:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007476:	fbb2 f6f3 	udiv	r6, r2, r3
 800747a:	d32e      	bcc.n	80074da <quorem+0x96>
 800747c:	f04f 0a00 	mov.w	sl, #0
 8007480:	46c4      	mov	ip, r8
 8007482:	46ae      	mov	lr, r5
 8007484:	46d3      	mov	fp, sl
 8007486:	f85c 3b04 	ldr.w	r3, [ip], #4
 800748a:	b298      	uxth	r0, r3
 800748c:	fb06 a000 	mla	r0, r6, r0, sl
 8007490:	0c02      	lsrs	r2, r0, #16
 8007492:	0c1b      	lsrs	r3, r3, #16
 8007494:	fb06 2303 	mla	r3, r6, r3, r2
 8007498:	f8de 2000 	ldr.w	r2, [lr]
 800749c:	b280      	uxth	r0, r0
 800749e:	b292      	uxth	r2, r2
 80074a0:	1a12      	subs	r2, r2, r0
 80074a2:	445a      	add	r2, fp
 80074a4:	f8de 0000 	ldr.w	r0, [lr]
 80074a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80074b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80074b6:	b292      	uxth	r2, r2
 80074b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80074bc:	45e1      	cmp	r9, ip
 80074be:	f84e 2b04 	str.w	r2, [lr], #4
 80074c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80074c6:	d2de      	bcs.n	8007486 <quorem+0x42>
 80074c8:	9b00      	ldr	r3, [sp, #0]
 80074ca:	58eb      	ldr	r3, [r5, r3]
 80074cc:	b92b      	cbnz	r3, 80074da <quorem+0x96>
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	3b04      	subs	r3, #4
 80074d2:	429d      	cmp	r5, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	d32f      	bcc.n	8007538 <quorem+0xf4>
 80074d8:	613c      	str	r4, [r7, #16]
 80074da:	4638      	mov	r0, r7
 80074dc:	f001 f9c4 	bl	8008868 <__mcmp>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	db25      	blt.n	8007530 <quorem+0xec>
 80074e4:	4629      	mov	r1, r5
 80074e6:	2000      	movs	r0, #0
 80074e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80074ec:	f8d1 c000 	ldr.w	ip, [r1]
 80074f0:	fa1f fe82 	uxth.w	lr, r2
 80074f4:	fa1f f38c 	uxth.w	r3, ip
 80074f8:	eba3 030e 	sub.w	r3, r3, lr
 80074fc:	4403      	add	r3, r0
 80074fe:	0c12      	lsrs	r2, r2, #16
 8007500:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007504:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007508:	b29b      	uxth	r3, r3
 800750a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800750e:	45c1      	cmp	r9, r8
 8007510:	f841 3b04 	str.w	r3, [r1], #4
 8007514:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007518:	d2e6      	bcs.n	80074e8 <quorem+0xa4>
 800751a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800751e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007522:	b922      	cbnz	r2, 800752e <quorem+0xea>
 8007524:	3b04      	subs	r3, #4
 8007526:	429d      	cmp	r5, r3
 8007528:	461a      	mov	r2, r3
 800752a:	d30b      	bcc.n	8007544 <quorem+0x100>
 800752c:	613c      	str	r4, [r7, #16]
 800752e:	3601      	adds	r6, #1
 8007530:	4630      	mov	r0, r6
 8007532:	b003      	add	sp, #12
 8007534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	3b04      	subs	r3, #4
 800753c:	2a00      	cmp	r2, #0
 800753e:	d1cb      	bne.n	80074d8 <quorem+0x94>
 8007540:	3c01      	subs	r4, #1
 8007542:	e7c6      	b.n	80074d2 <quorem+0x8e>
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	3b04      	subs	r3, #4
 8007548:	2a00      	cmp	r2, #0
 800754a:	d1ef      	bne.n	800752c <quorem+0xe8>
 800754c:	3c01      	subs	r4, #1
 800754e:	e7ea      	b.n	8007526 <quorem+0xe2>
 8007550:	2000      	movs	r0, #0
 8007552:	e7ee      	b.n	8007532 <quorem+0xee>
 8007554:	0000      	movs	r0, r0
	...

08007558 <_dtoa_r>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	69c7      	ldr	r7, [r0, #28]
 800755e:	b099      	sub	sp, #100	@ 0x64
 8007560:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007564:	ec55 4b10 	vmov	r4, r5, d0
 8007568:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800756a:	9109      	str	r1, [sp, #36]	@ 0x24
 800756c:	4683      	mov	fp, r0
 800756e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007570:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007572:	b97f      	cbnz	r7, 8007594 <_dtoa_r+0x3c>
 8007574:	2010      	movs	r0, #16
 8007576:	f000 fdfd 	bl	8008174 <malloc>
 800757a:	4602      	mov	r2, r0
 800757c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007580:	b920      	cbnz	r0, 800758c <_dtoa_r+0x34>
 8007582:	4ba7      	ldr	r3, [pc, #668]	@ (8007820 <_dtoa_r+0x2c8>)
 8007584:	21ef      	movs	r1, #239	@ 0xef
 8007586:	48a7      	ldr	r0, [pc, #668]	@ (8007824 <_dtoa_r+0x2cc>)
 8007588:	f002 fc2a 	bl	8009de0 <__assert_func>
 800758c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007590:	6007      	str	r7, [r0, #0]
 8007592:	60c7      	str	r7, [r0, #12]
 8007594:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007598:	6819      	ldr	r1, [r3, #0]
 800759a:	b159      	cbz	r1, 80075b4 <_dtoa_r+0x5c>
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	604a      	str	r2, [r1, #4]
 80075a0:	2301      	movs	r3, #1
 80075a2:	4093      	lsls	r3, r2
 80075a4:	608b      	str	r3, [r1, #8]
 80075a6:	4658      	mov	r0, fp
 80075a8:	f000 feda 	bl	8008360 <_Bfree>
 80075ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	1e2b      	subs	r3, r5, #0
 80075b6:	bfb9      	ittee	lt
 80075b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80075bc:	9303      	strlt	r3, [sp, #12]
 80075be:	2300      	movge	r3, #0
 80075c0:	6033      	strge	r3, [r6, #0]
 80075c2:	9f03      	ldr	r7, [sp, #12]
 80075c4:	4b98      	ldr	r3, [pc, #608]	@ (8007828 <_dtoa_r+0x2d0>)
 80075c6:	bfbc      	itt	lt
 80075c8:	2201      	movlt	r2, #1
 80075ca:	6032      	strlt	r2, [r6, #0]
 80075cc:	43bb      	bics	r3, r7
 80075ce:	d112      	bne.n	80075f6 <_dtoa_r+0x9e>
 80075d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075dc:	4323      	orrs	r3, r4
 80075de:	f000 854d 	beq.w	800807c <_dtoa_r+0xb24>
 80075e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800783c <_dtoa_r+0x2e4>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 854f 	beq.w	800808c <_dtoa_r+0xb34>
 80075ee:	f10a 0303 	add.w	r3, sl, #3
 80075f2:	f000 bd49 	b.w	8008088 <_dtoa_r+0xb30>
 80075f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075fa:	2200      	movs	r2, #0
 80075fc:	ec51 0b17 	vmov	r0, r1, d7
 8007600:	2300      	movs	r3, #0
 8007602:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007606:	f7f9 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800760a:	4680      	mov	r8, r0
 800760c:	b158      	cbz	r0, 8007626 <_dtoa_r+0xce>
 800760e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007610:	2301      	movs	r3, #1
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007616:	b113      	cbz	r3, 800761e <_dtoa_r+0xc6>
 8007618:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800761a:	4b84      	ldr	r3, [pc, #528]	@ (800782c <_dtoa_r+0x2d4>)
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007840 <_dtoa_r+0x2e8>
 8007622:	f000 bd33 	b.w	800808c <_dtoa_r+0xb34>
 8007626:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800762a:	aa16      	add	r2, sp, #88	@ 0x58
 800762c:	a917      	add	r1, sp, #92	@ 0x5c
 800762e:	4658      	mov	r0, fp
 8007630:	f001 fa3a 	bl	8008aa8 <__d2b>
 8007634:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007638:	4681      	mov	r9, r0
 800763a:	2e00      	cmp	r6, #0
 800763c:	d077      	beq.n	800772e <_dtoa_r+0x1d6>
 800763e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007640:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800764c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007650:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007654:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007658:	4619      	mov	r1, r3
 800765a:	2200      	movs	r2, #0
 800765c:	4b74      	ldr	r3, [pc, #464]	@ (8007830 <_dtoa_r+0x2d8>)
 800765e:	f7f8 fe13 	bl	8000288 <__aeabi_dsub>
 8007662:	a369      	add	r3, pc, #420	@ (adr r3, 8007808 <_dtoa_r+0x2b0>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 ffc6 	bl	80005f8 <__aeabi_dmul>
 800766c:	a368      	add	r3, pc, #416	@ (adr r3, 8007810 <_dtoa_r+0x2b8>)
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f8 fe0b 	bl	800028c <__adddf3>
 8007676:	4604      	mov	r4, r0
 8007678:	4630      	mov	r0, r6
 800767a:	460d      	mov	r5, r1
 800767c:	f7f8 ff52 	bl	8000524 <__aeabi_i2d>
 8007680:	a365      	add	r3, pc, #404	@ (adr r3, 8007818 <_dtoa_r+0x2c0>)
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f8 ffb7 	bl	80005f8 <__aeabi_dmul>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4620      	mov	r0, r4
 8007690:	4629      	mov	r1, r5
 8007692:	f7f8 fdfb 	bl	800028c <__adddf3>
 8007696:	4604      	mov	r4, r0
 8007698:	460d      	mov	r5, r1
 800769a:	f7f9 fa5d 	bl	8000b58 <__aeabi_d2iz>
 800769e:	2200      	movs	r2, #0
 80076a0:	4607      	mov	r7, r0
 80076a2:	2300      	movs	r3, #0
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f9 fa18 	bl	8000adc <__aeabi_dcmplt>
 80076ac:	b140      	cbz	r0, 80076c0 <_dtoa_r+0x168>
 80076ae:	4638      	mov	r0, r7
 80076b0:	f7f8 ff38 	bl	8000524 <__aeabi_i2d>
 80076b4:	4622      	mov	r2, r4
 80076b6:	462b      	mov	r3, r5
 80076b8:	f7f9 fa06 	bl	8000ac8 <__aeabi_dcmpeq>
 80076bc:	b900      	cbnz	r0, 80076c0 <_dtoa_r+0x168>
 80076be:	3f01      	subs	r7, #1
 80076c0:	2f16      	cmp	r7, #22
 80076c2:	d851      	bhi.n	8007768 <_dtoa_r+0x210>
 80076c4:	4b5b      	ldr	r3, [pc, #364]	@ (8007834 <_dtoa_r+0x2dc>)
 80076c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076d2:	f7f9 fa03 	bl	8000adc <__aeabi_dcmplt>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d048      	beq.n	800776c <_dtoa_r+0x214>
 80076da:	3f01      	subs	r7, #1
 80076dc:	2300      	movs	r3, #0
 80076de:	9312      	str	r3, [sp, #72]	@ 0x48
 80076e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076e2:	1b9b      	subs	r3, r3, r6
 80076e4:	1e5a      	subs	r2, r3, #1
 80076e6:	bf44      	itt	mi
 80076e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80076ec:	2300      	movmi	r3, #0
 80076ee:	9208      	str	r2, [sp, #32]
 80076f0:	bf54      	ite	pl
 80076f2:	f04f 0800 	movpl.w	r8, #0
 80076f6:	9308      	strmi	r3, [sp, #32]
 80076f8:	2f00      	cmp	r7, #0
 80076fa:	db39      	blt.n	8007770 <_dtoa_r+0x218>
 80076fc:	9b08      	ldr	r3, [sp, #32]
 80076fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007700:	443b      	add	r3, r7
 8007702:	9308      	str	r3, [sp, #32]
 8007704:	2300      	movs	r3, #0
 8007706:	930a      	str	r3, [sp, #40]	@ 0x28
 8007708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800770a:	2b09      	cmp	r3, #9
 800770c:	d864      	bhi.n	80077d8 <_dtoa_r+0x280>
 800770e:	2b05      	cmp	r3, #5
 8007710:	bfc4      	itt	gt
 8007712:	3b04      	subgt	r3, #4
 8007714:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007718:	f1a3 0302 	sub.w	r3, r3, #2
 800771c:	bfcc      	ite	gt
 800771e:	2400      	movgt	r4, #0
 8007720:	2401      	movle	r4, #1
 8007722:	2b03      	cmp	r3, #3
 8007724:	d863      	bhi.n	80077ee <_dtoa_r+0x296>
 8007726:	e8df f003 	tbb	[pc, r3]
 800772a:	372a      	.short	0x372a
 800772c:	5535      	.short	0x5535
 800772e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007732:	441e      	add	r6, r3
 8007734:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007738:	2b20      	cmp	r3, #32
 800773a:	bfc1      	itttt	gt
 800773c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007740:	409f      	lslgt	r7, r3
 8007742:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007746:	fa24 f303 	lsrgt.w	r3, r4, r3
 800774a:	bfd6      	itet	le
 800774c:	f1c3 0320 	rsble	r3, r3, #32
 8007750:	ea47 0003 	orrgt.w	r0, r7, r3
 8007754:	fa04 f003 	lslle.w	r0, r4, r3
 8007758:	f7f8 fed4 	bl	8000504 <__aeabi_ui2d>
 800775c:	2201      	movs	r2, #1
 800775e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007762:	3e01      	subs	r6, #1
 8007764:	9214      	str	r2, [sp, #80]	@ 0x50
 8007766:	e777      	b.n	8007658 <_dtoa_r+0x100>
 8007768:	2301      	movs	r3, #1
 800776a:	e7b8      	b.n	80076de <_dtoa_r+0x186>
 800776c:	9012      	str	r0, [sp, #72]	@ 0x48
 800776e:	e7b7      	b.n	80076e0 <_dtoa_r+0x188>
 8007770:	427b      	negs	r3, r7
 8007772:	930a      	str	r3, [sp, #40]	@ 0x28
 8007774:	2300      	movs	r3, #0
 8007776:	eba8 0807 	sub.w	r8, r8, r7
 800777a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800777c:	e7c4      	b.n	8007708 <_dtoa_r+0x1b0>
 800777e:	2300      	movs	r3, #0
 8007780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007784:	2b00      	cmp	r3, #0
 8007786:	dc35      	bgt.n	80077f4 <_dtoa_r+0x29c>
 8007788:	2301      	movs	r3, #1
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	9307      	str	r3, [sp, #28]
 800778e:	461a      	mov	r2, r3
 8007790:	920e      	str	r2, [sp, #56]	@ 0x38
 8007792:	e00b      	b.n	80077ac <_dtoa_r+0x254>
 8007794:	2301      	movs	r3, #1
 8007796:	e7f3      	b.n	8007780 <_dtoa_r+0x228>
 8007798:	2300      	movs	r3, #0
 800779a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800779c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800779e:	18fb      	adds	r3, r7, r3
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	3301      	adds	r3, #1
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	bfb8      	it	lt
 80077aa:	2301      	movlt	r3, #1
 80077ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80077b0:	2100      	movs	r1, #0
 80077b2:	2204      	movs	r2, #4
 80077b4:	f102 0514 	add.w	r5, r2, #20
 80077b8:	429d      	cmp	r5, r3
 80077ba:	d91f      	bls.n	80077fc <_dtoa_r+0x2a4>
 80077bc:	6041      	str	r1, [r0, #4]
 80077be:	4658      	mov	r0, fp
 80077c0:	f000 fd8e 	bl	80082e0 <_Balloc>
 80077c4:	4682      	mov	sl, r0
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d13c      	bne.n	8007844 <_dtoa_r+0x2ec>
 80077ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007838 <_dtoa_r+0x2e0>)
 80077cc:	4602      	mov	r2, r0
 80077ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80077d2:	e6d8      	b.n	8007586 <_dtoa_r+0x2e>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e7e0      	b.n	800779a <_dtoa_r+0x242>
 80077d8:	2401      	movs	r4, #1
 80077da:	2300      	movs	r3, #0
 80077dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80077de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077e0:	f04f 33ff 	mov.w	r3, #4294967295
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	9307      	str	r3, [sp, #28]
 80077e8:	2200      	movs	r2, #0
 80077ea:	2312      	movs	r3, #18
 80077ec:	e7d0      	b.n	8007790 <_dtoa_r+0x238>
 80077ee:	2301      	movs	r3, #1
 80077f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077f2:	e7f5      	b.n	80077e0 <_dtoa_r+0x288>
 80077f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	9307      	str	r3, [sp, #28]
 80077fa:	e7d7      	b.n	80077ac <_dtoa_r+0x254>
 80077fc:	3101      	adds	r1, #1
 80077fe:	0052      	lsls	r2, r2, #1
 8007800:	e7d8      	b.n	80077b4 <_dtoa_r+0x25c>
 8007802:	bf00      	nop
 8007804:	f3af 8000 	nop.w
 8007808:	636f4361 	.word	0x636f4361
 800780c:	3fd287a7 	.word	0x3fd287a7
 8007810:	8b60c8b3 	.word	0x8b60c8b3
 8007814:	3fc68a28 	.word	0x3fc68a28
 8007818:	509f79fb 	.word	0x509f79fb
 800781c:	3fd34413 	.word	0x3fd34413
 8007820:	0800b226 	.word	0x0800b226
 8007824:	0800b23d 	.word	0x0800b23d
 8007828:	7ff00000 	.word	0x7ff00000
 800782c:	0800b1f1 	.word	0x0800b1f1
 8007830:	3ff80000 	.word	0x3ff80000
 8007834:	0800b338 	.word	0x0800b338
 8007838:	0800b295 	.word	0x0800b295
 800783c:	0800b222 	.word	0x0800b222
 8007840:	0800b1f0 	.word	0x0800b1f0
 8007844:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007848:	6018      	str	r0, [r3, #0]
 800784a:	9b07      	ldr	r3, [sp, #28]
 800784c:	2b0e      	cmp	r3, #14
 800784e:	f200 80a4 	bhi.w	800799a <_dtoa_r+0x442>
 8007852:	2c00      	cmp	r4, #0
 8007854:	f000 80a1 	beq.w	800799a <_dtoa_r+0x442>
 8007858:	2f00      	cmp	r7, #0
 800785a:	dd33      	ble.n	80078c4 <_dtoa_r+0x36c>
 800785c:	4bad      	ldr	r3, [pc, #692]	@ (8007b14 <_dtoa_r+0x5bc>)
 800785e:	f007 020f 	and.w	r2, r7, #15
 8007862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007866:	ed93 7b00 	vldr	d7, [r3]
 800786a:	05f8      	lsls	r0, r7, #23
 800786c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007870:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007874:	d516      	bpl.n	80078a4 <_dtoa_r+0x34c>
 8007876:	4ba8      	ldr	r3, [pc, #672]	@ (8007b18 <_dtoa_r+0x5c0>)
 8007878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800787c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007880:	f7f8 ffe4 	bl	800084c <__aeabi_ddiv>
 8007884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007888:	f004 040f 	and.w	r4, r4, #15
 800788c:	2603      	movs	r6, #3
 800788e:	4da2      	ldr	r5, [pc, #648]	@ (8007b18 <_dtoa_r+0x5c0>)
 8007890:	b954      	cbnz	r4, 80078a8 <_dtoa_r+0x350>
 8007892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800789a:	f7f8 ffd7 	bl	800084c <__aeabi_ddiv>
 800789e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078a2:	e028      	b.n	80078f6 <_dtoa_r+0x39e>
 80078a4:	2602      	movs	r6, #2
 80078a6:	e7f2      	b.n	800788e <_dtoa_r+0x336>
 80078a8:	07e1      	lsls	r1, r4, #31
 80078aa:	d508      	bpl.n	80078be <_dtoa_r+0x366>
 80078ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078b4:	f7f8 fea0 	bl	80005f8 <__aeabi_dmul>
 80078b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078bc:	3601      	adds	r6, #1
 80078be:	1064      	asrs	r4, r4, #1
 80078c0:	3508      	adds	r5, #8
 80078c2:	e7e5      	b.n	8007890 <_dtoa_r+0x338>
 80078c4:	f000 80d2 	beq.w	8007a6c <_dtoa_r+0x514>
 80078c8:	427c      	negs	r4, r7
 80078ca:	4b92      	ldr	r3, [pc, #584]	@ (8007b14 <_dtoa_r+0x5bc>)
 80078cc:	4d92      	ldr	r5, [pc, #584]	@ (8007b18 <_dtoa_r+0x5c0>)
 80078ce:	f004 020f 	and.w	r2, r4, #15
 80078d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078de:	f7f8 fe8b 	bl	80005f8 <__aeabi_dmul>
 80078e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078e6:	1124      	asrs	r4, r4, #4
 80078e8:	2300      	movs	r3, #0
 80078ea:	2602      	movs	r6, #2
 80078ec:	2c00      	cmp	r4, #0
 80078ee:	f040 80b2 	bne.w	8007a56 <_dtoa_r+0x4fe>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1d3      	bne.n	800789e <_dtoa_r+0x346>
 80078f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 80b7 	beq.w	8007a70 <_dtoa_r+0x518>
 8007902:	4b86      	ldr	r3, [pc, #536]	@ (8007b1c <_dtoa_r+0x5c4>)
 8007904:	2200      	movs	r2, #0
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f9 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800790e:	2800      	cmp	r0, #0
 8007910:	f000 80ae 	beq.w	8007a70 <_dtoa_r+0x518>
 8007914:	9b07      	ldr	r3, [sp, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 80aa 	beq.w	8007a70 <_dtoa_r+0x518>
 800791c:	9b00      	ldr	r3, [sp, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	dd37      	ble.n	8007992 <_dtoa_r+0x43a>
 8007922:	1e7b      	subs	r3, r7, #1
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	4620      	mov	r0, r4
 8007928:	4b7d      	ldr	r3, [pc, #500]	@ (8007b20 <_dtoa_r+0x5c8>)
 800792a:	2200      	movs	r2, #0
 800792c:	4629      	mov	r1, r5
 800792e:	f7f8 fe63 	bl	80005f8 <__aeabi_dmul>
 8007932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007936:	9c00      	ldr	r4, [sp, #0]
 8007938:	3601      	adds	r6, #1
 800793a:	4630      	mov	r0, r6
 800793c:	f7f8 fdf2 	bl	8000524 <__aeabi_i2d>
 8007940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007944:	f7f8 fe58 	bl	80005f8 <__aeabi_dmul>
 8007948:	4b76      	ldr	r3, [pc, #472]	@ (8007b24 <_dtoa_r+0x5cc>)
 800794a:	2200      	movs	r2, #0
 800794c:	f7f8 fc9e 	bl	800028c <__adddf3>
 8007950:	4605      	mov	r5, r0
 8007952:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007956:	2c00      	cmp	r4, #0
 8007958:	f040 808d 	bne.w	8007a76 <_dtoa_r+0x51e>
 800795c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007960:	4b71      	ldr	r3, [pc, #452]	@ (8007b28 <_dtoa_r+0x5d0>)
 8007962:	2200      	movs	r2, #0
 8007964:	f7f8 fc90 	bl	8000288 <__aeabi_dsub>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007970:	462a      	mov	r2, r5
 8007972:	4633      	mov	r3, r6
 8007974:	f7f9 f8d0 	bl	8000b18 <__aeabi_dcmpgt>
 8007978:	2800      	cmp	r0, #0
 800797a:	f040 828b 	bne.w	8007e94 <_dtoa_r+0x93c>
 800797e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007982:	462a      	mov	r2, r5
 8007984:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007988:	f7f9 f8a8 	bl	8000adc <__aeabi_dcmplt>
 800798c:	2800      	cmp	r0, #0
 800798e:	f040 8128 	bne.w	8007be2 <_dtoa_r+0x68a>
 8007992:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007996:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800799a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800799c:	2b00      	cmp	r3, #0
 800799e:	f2c0 815a 	blt.w	8007c56 <_dtoa_r+0x6fe>
 80079a2:	2f0e      	cmp	r7, #14
 80079a4:	f300 8157 	bgt.w	8007c56 <_dtoa_r+0x6fe>
 80079a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b14 <_dtoa_r+0x5bc>)
 80079aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079ae:	ed93 7b00 	vldr	d7, [r3]
 80079b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	ed8d 7b00 	vstr	d7, [sp]
 80079ba:	da03      	bge.n	80079c4 <_dtoa_r+0x46c>
 80079bc:	9b07      	ldr	r3, [sp, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f340 8101 	ble.w	8007bc6 <_dtoa_r+0x66e>
 80079c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079c8:	4656      	mov	r6, sl
 80079ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079ce:	4620      	mov	r0, r4
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f8 ff3b 	bl	800084c <__aeabi_ddiv>
 80079d6:	f7f9 f8bf 	bl	8000b58 <__aeabi_d2iz>
 80079da:	4680      	mov	r8, r0
 80079dc:	f7f8 fda2 	bl	8000524 <__aeabi_i2d>
 80079e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079e4:	f7f8 fe08 	bl	80005f8 <__aeabi_dmul>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4620      	mov	r0, r4
 80079ee:	4629      	mov	r1, r5
 80079f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80079f4:	f7f8 fc48 	bl	8000288 <__aeabi_dsub>
 80079f8:	f806 4b01 	strb.w	r4, [r6], #1
 80079fc:	9d07      	ldr	r5, [sp, #28]
 80079fe:	eba6 040a 	sub.w	r4, r6, sl
 8007a02:	42a5      	cmp	r5, r4
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	f040 8117 	bne.w	8007c3a <_dtoa_r+0x6e2>
 8007a0c:	f7f8 fc3e 	bl	800028c <__adddf3>
 8007a10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a14:	4604      	mov	r4, r0
 8007a16:	460d      	mov	r5, r1
 8007a18:	f7f9 f87e 	bl	8000b18 <__aeabi_dcmpgt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f040 80f9 	bne.w	8007c14 <_dtoa_r+0x6bc>
 8007a22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a26:	4620      	mov	r0, r4
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7f9 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a2e:	b118      	cbz	r0, 8007a38 <_dtoa_r+0x4e0>
 8007a30:	f018 0f01 	tst.w	r8, #1
 8007a34:	f040 80ee 	bne.w	8007c14 <_dtoa_r+0x6bc>
 8007a38:	4649      	mov	r1, r9
 8007a3a:	4658      	mov	r0, fp
 8007a3c:	f000 fc90 	bl	8008360 <_Bfree>
 8007a40:	2300      	movs	r3, #0
 8007a42:	7033      	strb	r3, [r6, #0]
 8007a44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a46:	3701      	adds	r7, #1
 8007a48:	601f      	str	r7, [r3, #0]
 8007a4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 831d 	beq.w	800808c <_dtoa_r+0xb34>
 8007a52:	601e      	str	r6, [r3, #0]
 8007a54:	e31a      	b.n	800808c <_dtoa_r+0xb34>
 8007a56:	07e2      	lsls	r2, r4, #31
 8007a58:	d505      	bpl.n	8007a66 <_dtoa_r+0x50e>
 8007a5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a5e:	f7f8 fdcb 	bl	80005f8 <__aeabi_dmul>
 8007a62:	3601      	adds	r6, #1
 8007a64:	2301      	movs	r3, #1
 8007a66:	1064      	asrs	r4, r4, #1
 8007a68:	3508      	adds	r5, #8
 8007a6a:	e73f      	b.n	80078ec <_dtoa_r+0x394>
 8007a6c:	2602      	movs	r6, #2
 8007a6e:	e742      	b.n	80078f6 <_dtoa_r+0x39e>
 8007a70:	9c07      	ldr	r4, [sp, #28]
 8007a72:	9704      	str	r7, [sp, #16]
 8007a74:	e761      	b.n	800793a <_dtoa_r+0x3e2>
 8007a76:	4b27      	ldr	r3, [pc, #156]	@ (8007b14 <_dtoa_r+0x5bc>)
 8007a78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a82:	4454      	add	r4, sl
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d053      	beq.n	8007b30 <_dtoa_r+0x5d8>
 8007a88:	4928      	ldr	r1, [pc, #160]	@ (8007b2c <_dtoa_r+0x5d4>)
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	f7f8 fede 	bl	800084c <__aeabi_ddiv>
 8007a90:	4633      	mov	r3, r6
 8007a92:	462a      	mov	r2, r5
 8007a94:	f7f8 fbf8 	bl	8000288 <__aeabi_dsub>
 8007a98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a9c:	4656      	mov	r6, sl
 8007a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aa2:	f7f9 f859 	bl	8000b58 <__aeabi_d2iz>
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	f7f8 fd3c 	bl	8000524 <__aeabi_i2d>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab4:	f7f8 fbe8 	bl	8000288 <__aeabi_dsub>
 8007ab8:	3530      	adds	r5, #48	@ 0x30
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ac2:	f806 5b01 	strb.w	r5, [r6], #1
 8007ac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007aca:	f7f9 f807 	bl	8000adc <__aeabi_dcmplt>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d171      	bne.n	8007bb6 <_dtoa_r+0x65e>
 8007ad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ad6:	4911      	ldr	r1, [pc, #68]	@ (8007b1c <_dtoa_r+0x5c4>)
 8007ad8:	2000      	movs	r0, #0
 8007ada:	f7f8 fbd5 	bl	8000288 <__aeabi_dsub>
 8007ade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ae2:	f7f8 fffb 	bl	8000adc <__aeabi_dcmplt>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f040 8095 	bne.w	8007c16 <_dtoa_r+0x6be>
 8007aec:	42a6      	cmp	r6, r4
 8007aee:	f43f af50 	beq.w	8007992 <_dtoa_r+0x43a>
 8007af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007af6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b20 <_dtoa_r+0x5c8>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	f7f8 fd7d 	bl	80005f8 <__aeabi_dmul>
 8007afe:	4b08      	ldr	r3, [pc, #32]	@ (8007b20 <_dtoa_r+0x5c8>)
 8007b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b04:	2200      	movs	r2, #0
 8007b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b0a:	f7f8 fd75 	bl	80005f8 <__aeabi_dmul>
 8007b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b12:	e7c4      	b.n	8007a9e <_dtoa_r+0x546>
 8007b14:	0800b338 	.word	0x0800b338
 8007b18:	0800b310 	.word	0x0800b310
 8007b1c:	3ff00000 	.word	0x3ff00000
 8007b20:	40240000 	.word	0x40240000
 8007b24:	401c0000 	.word	0x401c0000
 8007b28:	40140000 	.word	0x40140000
 8007b2c:	3fe00000 	.word	0x3fe00000
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	f7f8 fd60 	bl	80005f8 <__aeabi_dmul>
 8007b38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007b3e:	4656      	mov	r6, sl
 8007b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b44:	f7f9 f808 	bl	8000b58 <__aeabi_d2iz>
 8007b48:	4605      	mov	r5, r0
 8007b4a:	f7f8 fceb 	bl	8000524 <__aeabi_i2d>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b56:	f7f8 fb97 	bl	8000288 <__aeabi_dsub>
 8007b5a:	3530      	adds	r5, #48	@ 0x30
 8007b5c:	f806 5b01 	strb.w	r5, [r6], #1
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	42a6      	cmp	r6, r4
 8007b66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	d124      	bne.n	8007bba <_dtoa_r+0x662>
 8007b70:	4bac      	ldr	r3, [pc, #688]	@ (8007e24 <_dtoa_r+0x8cc>)
 8007b72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b76:	f7f8 fb89 	bl	800028c <__adddf3>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b82:	f7f8 ffc9 	bl	8000b18 <__aeabi_dcmpgt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d145      	bne.n	8007c16 <_dtoa_r+0x6be>
 8007b8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b8e:	49a5      	ldr	r1, [pc, #660]	@ (8007e24 <_dtoa_r+0x8cc>)
 8007b90:	2000      	movs	r0, #0
 8007b92:	f7f8 fb79 	bl	8000288 <__aeabi_dsub>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b9e:	f7f8 ff9d 	bl	8000adc <__aeabi_dcmplt>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	f43f aef5 	beq.w	8007992 <_dtoa_r+0x43a>
 8007ba8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007baa:	1e73      	subs	r3, r6, #1
 8007bac:	9315      	str	r3, [sp, #84]	@ 0x54
 8007bae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007bb2:	2b30      	cmp	r3, #48	@ 0x30
 8007bb4:	d0f8      	beq.n	8007ba8 <_dtoa_r+0x650>
 8007bb6:	9f04      	ldr	r7, [sp, #16]
 8007bb8:	e73e      	b.n	8007a38 <_dtoa_r+0x4e0>
 8007bba:	4b9b      	ldr	r3, [pc, #620]	@ (8007e28 <_dtoa_r+0x8d0>)
 8007bbc:	f7f8 fd1c 	bl	80005f8 <__aeabi_dmul>
 8007bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc4:	e7bc      	b.n	8007b40 <_dtoa_r+0x5e8>
 8007bc6:	d10c      	bne.n	8007be2 <_dtoa_r+0x68a>
 8007bc8:	4b98      	ldr	r3, [pc, #608]	@ (8007e2c <_dtoa_r+0x8d4>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bd0:	f7f8 fd12 	bl	80005f8 <__aeabi_dmul>
 8007bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bd8:	f7f8 ff94 	bl	8000b04 <__aeabi_dcmpge>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f000 8157 	beq.w	8007e90 <_dtoa_r+0x938>
 8007be2:	2400      	movs	r4, #0
 8007be4:	4625      	mov	r5, r4
 8007be6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007be8:	43db      	mvns	r3, r3
 8007bea:	9304      	str	r3, [sp, #16]
 8007bec:	4656      	mov	r6, sl
 8007bee:	2700      	movs	r7, #0
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4658      	mov	r0, fp
 8007bf4:	f000 fbb4 	bl	8008360 <_Bfree>
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	d0dc      	beq.n	8007bb6 <_dtoa_r+0x65e>
 8007bfc:	b12f      	cbz	r7, 8007c0a <_dtoa_r+0x6b2>
 8007bfe:	42af      	cmp	r7, r5
 8007c00:	d003      	beq.n	8007c0a <_dtoa_r+0x6b2>
 8007c02:	4639      	mov	r1, r7
 8007c04:	4658      	mov	r0, fp
 8007c06:	f000 fbab 	bl	8008360 <_Bfree>
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4658      	mov	r0, fp
 8007c0e:	f000 fba7 	bl	8008360 <_Bfree>
 8007c12:	e7d0      	b.n	8007bb6 <_dtoa_r+0x65e>
 8007c14:	9704      	str	r7, [sp, #16]
 8007c16:	4633      	mov	r3, r6
 8007c18:	461e      	mov	r6, r3
 8007c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c1e:	2a39      	cmp	r2, #57	@ 0x39
 8007c20:	d107      	bne.n	8007c32 <_dtoa_r+0x6da>
 8007c22:	459a      	cmp	sl, r3
 8007c24:	d1f8      	bne.n	8007c18 <_dtoa_r+0x6c0>
 8007c26:	9a04      	ldr	r2, [sp, #16]
 8007c28:	3201      	adds	r2, #1
 8007c2a:	9204      	str	r2, [sp, #16]
 8007c2c:	2230      	movs	r2, #48	@ 0x30
 8007c2e:	f88a 2000 	strb.w	r2, [sl]
 8007c32:	781a      	ldrb	r2, [r3, #0]
 8007c34:	3201      	adds	r2, #1
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	e7bd      	b.n	8007bb6 <_dtoa_r+0x65e>
 8007c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e28 <_dtoa_r+0x8d0>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f7f8 fcdb 	bl	80005f8 <__aeabi_dmul>
 8007c42:	2200      	movs	r2, #0
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	460d      	mov	r5, r1
 8007c4a:	f7f8 ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f43f aebb 	beq.w	80079ca <_dtoa_r+0x472>
 8007c54:	e6f0      	b.n	8007a38 <_dtoa_r+0x4e0>
 8007c56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c58:	2a00      	cmp	r2, #0
 8007c5a:	f000 80db 	beq.w	8007e14 <_dtoa_r+0x8bc>
 8007c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c60:	2a01      	cmp	r2, #1
 8007c62:	f300 80bf 	bgt.w	8007de4 <_dtoa_r+0x88c>
 8007c66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	f000 80b7 	beq.w	8007ddc <_dtoa_r+0x884>
 8007c6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007c72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c74:	4646      	mov	r6, r8
 8007c76:	9a08      	ldr	r2, [sp, #32]
 8007c78:	2101      	movs	r1, #1
 8007c7a:	441a      	add	r2, r3
 8007c7c:	4658      	mov	r0, fp
 8007c7e:	4498      	add	r8, r3
 8007c80:	9208      	str	r2, [sp, #32]
 8007c82:	f000 fc6b 	bl	800855c <__i2b>
 8007c86:	4605      	mov	r5, r0
 8007c88:	b15e      	cbz	r6, 8007ca2 <_dtoa_r+0x74a>
 8007c8a:	9b08      	ldr	r3, [sp, #32]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dd08      	ble.n	8007ca2 <_dtoa_r+0x74a>
 8007c90:	42b3      	cmp	r3, r6
 8007c92:	9a08      	ldr	r2, [sp, #32]
 8007c94:	bfa8      	it	ge
 8007c96:	4633      	movge	r3, r6
 8007c98:	eba8 0803 	sub.w	r8, r8, r3
 8007c9c:	1af6      	subs	r6, r6, r3
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	9308      	str	r3, [sp, #32]
 8007ca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ca4:	b1f3      	cbz	r3, 8007ce4 <_dtoa_r+0x78c>
 8007ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 80b7 	beq.w	8007e1c <_dtoa_r+0x8c4>
 8007cae:	b18c      	cbz	r4, 8007cd4 <_dtoa_r+0x77c>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	4658      	mov	r0, fp
 8007cb6:	f000 fd11 	bl	80086dc <__pow5mult>
 8007cba:	464a      	mov	r2, r9
 8007cbc:	4601      	mov	r1, r0
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	4658      	mov	r0, fp
 8007cc2:	f000 fc61 	bl	8008588 <__multiply>
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	9004      	str	r0, [sp, #16]
 8007cca:	4658      	mov	r0, fp
 8007ccc:	f000 fb48 	bl	8008360 <_Bfree>
 8007cd0:	9b04      	ldr	r3, [sp, #16]
 8007cd2:	4699      	mov	r9, r3
 8007cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd6:	1b1a      	subs	r2, r3, r4
 8007cd8:	d004      	beq.n	8007ce4 <_dtoa_r+0x78c>
 8007cda:	4649      	mov	r1, r9
 8007cdc:	4658      	mov	r0, fp
 8007cde:	f000 fcfd 	bl	80086dc <__pow5mult>
 8007ce2:	4681      	mov	r9, r0
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f000 fc38 	bl	800855c <__i2b>
 8007cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cee:	4604      	mov	r4, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 81cf 	beq.w	8008094 <_dtoa_r+0xb3c>
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	4601      	mov	r1, r0
 8007cfa:	4658      	mov	r0, fp
 8007cfc:	f000 fcee 	bl	80086dc <__pow5mult>
 8007d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	4604      	mov	r4, r0
 8007d06:	f300 8095 	bgt.w	8007e34 <_dtoa_r+0x8dc>
 8007d0a:	9b02      	ldr	r3, [sp, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8087 	bne.w	8007e20 <_dtoa_r+0x8c8>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 8089 	bne.w	8007e30 <_dtoa_r+0x8d8>
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d24:	0d1b      	lsrs	r3, r3, #20
 8007d26:	051b      	lsls	r3, r3, #20
 8007d28:	b12b      	cbz	r3, 8007d36 <_dtoa_r+0x7de>
 8007d2a:	9b08      	ldr	r3, [sp, #32]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	9308      	str	r3, [sp, #32]
 8007d30:	f108 0801 	add.w	r8, r8, #1
 8007d34:	2301      	movs	r3, #1
 8007d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 81b0 	beq.w	80080a0 <_dtoa_r+0xb48>
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d46:	6918      	ldr	r0, [r3, #16]
 8007d48:	f000 fbbc 	bl	80084c4 <__hi0bits>
 8007d4c:	f1c0 0020 	rsb	r0, r0, #32
 8007d50:	9b08      	ldr	r3, [sp, #32]
 8007d52:	4418      	add	r0, r3
 8007d54:	f010 001f 	ands.w	r0, r0, #31
 8007d58:	d077      	beq.n	8007e4a <_dtoa_r+0x8f2>
 8007d5a:	f1c0 0320 	rsb	r3, r0, #32
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	dd6b      	ble.n	8007e3a <_dtoa_r+0x8e2>
 8007d62:	9b08      	ldr	r3, [sp, #32]
 8007d64:	f1c0 001c 	rsb	r0, r0, #28
 8007d68:	4403      	add	r3, r0
 8007d6a:	4480      	add	r8, r0
 8007d6c:	4406      	add	r6, r0
 8007d6e:	9308      	str	r3, [sp, #32]
 8007d70:	f1b8 0f00 	cmp.w	r8, #0
 8007d74:	dd05      	ble.n	8007d82 <_dtoa_r+0x82a>
 8007d76:	4649      	mov	r1, r9
 8007d78:	4642      	mov	r2, r8
 8007d7a:	4658      	mov	r0, fp
 8007d7c:	f000 fd08 	bl	8008790 <__lshift>
 8007d80:	4681      	mov	r9, r0
 8007d82:	9b08      	ldr	r3, [sp, #32]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dd05      	ble.n	8007d94 <_dtoa_r+0x83c>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	4658      	mov	r0, fp
 8007d8e:	f000 fcff 	bl	8008790 <__lshift>
 8007d92:	4604      	mov	r4, r0
 8007d94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d059      	beq.n	8007e4e <_dtoa_r+0x8f6>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4648      	mov	r0, r9
 8007d9e:	f000 fd63 	bl	8008868 <__mcmp>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	da53      	bge.n	8007e4e <_dtoa_r+0x8f6>
 8007da6:	1e7b      	subs	r3, r7, #1
 8007da8:	9304      	str	r3, [sp, #16]
 8007daa:	4649      	mov	r1, r9
 8007dac:	2300      	movs	r3, #0
 8007dae:	220a      	movs	r2, #10
 8007db0:	4658      	mov	r0, fp
 8007db2:	f000 faf7 	bl	80083a4 <__multadd>
 8007db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007db8:	4681      	mov	r9, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 8172 	beq.w	80080a4 <_dtoa_r+0xb4c>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	4658      	mov	r0, fp
 8007dc8:	f000 faec 	bl	80083a4 <__multadd>
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	dc67      	bgt.n	8007ea4 <_dtoa_r+0x94c>
 8007dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	dc41      	bgt.n	8007e5e <_dtoa_r+0x906>
 8007dda:	e063      	b.n	8007ea4 <_dtoa_r+0x94c>
 8007ddc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007dde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007de2:	e746      	b.n	8007c72 <_dtoa_r+0x71a>
 8007de4:	9b07      	ldr	r3, [sp, #28]
 8007de6:	1e5c      	subs	r4, r3, #1
 8007de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	bfbf      	itttt	lt
 8007dee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007df0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007df2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007df4:	1ae3      	sublt	r3, r4, r3
 8007df6:	bfb4      	ite	lt
 8007df8:	18d2      	addlt	r2, r2, r3
 8007dfa:	1b1c      	subge	r4, r3, r4
 8007dfc:	9b07      	ldr	r3, [sp, #28]
 8007dfe:	bfbc      	itt	lt
 8007e00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007e02:	2400      	movlt	r4, #0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bfb5      	itete	lt
 8007e08:	eba8 0603 	sublt.w	r6, r8, r3
 8007e0c:	9b07      	ldrge	r3, [sp, #28]
 8007e0e:	2300      	movlt	r3, #0
 8007e10:	4646      	movge	r6, r8
 8007e12:	e730      	b.n	8007c76 <_dtoa_r+0x71e>
 8007e14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007e18:	4646      	mov	r6, r8
 8007e1a:	e735      	b.n	8007c88 <_dtoa_r+0x730>
 8007e1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e1e:	e75c      	b.n	8007cda <_dtoa_r+0x782>
 8007e20:	2300      	movs	r3, #0
 8007e22:	e788      	b.n	8007d36 <_dtoa_r+0x7de>
 8007e24:	3fe00000 	.word	0x3fe00000
 8007e28:	40240000 	.word	0x40240000
 8007e2c:	40140000 	.word	0x40140000
 8007e30:	9b02      	ldr	r3, [sp, #8]
 8007e32:	e780      	b.n	8007d36 <_dtoa_r+0x7de>
 8007e34:	2300      	movs	r3, #0
 8007e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e38:	e782      	b.n	8007d40 <_dtoa_r+0x7e8>
 8007e3a:	d099      	beq.n	8007d70 <_dtoa_r+0x818>
 8007e3c:	9a08      	ldr	r2, [sp, #32]
 8007e3e:	331c      	adds	r3, #28
 8007e40:	441a      	add	r2, r3
 8007e42:	4498      	add	r8, r3
 8007e44:	441e      	add	r6, r3
 8007e46:	9208      	str	r2, [sp, #32]
 8007e48:	e792      	b.n	8007d70 <_dtoa_r+0x818>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	e7f6      	b.n	8007e3c <_dtoa_r+0x8e4>
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	9704      	str	r7, [sp, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dc20      	bgt.n	8007e98 <_dtoa_r+0x940>
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	dd1e      	ble.n	8007e9c <_dtoa_r+0x944>
 8007e5e:	9b00      	ldr	r3, [sp, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f47f aec0 	bne.w	8007be6 <_dtoa_r+0x68e>
 8007e66:	4621      	mov	r1, r4
 8007e68:	2205      	movs	r2, #5
 8007e6a:	4658      	mov	r0, fp
 8007e6c:	f000 fa9a 	bl	80083a4 <__multadd>
 8007e70:	4601      	mov	r1, r0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4648      	mov	r0, r9
 8007e76:	f000 fcf7 	bl	8008868 <__mcmp>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	f77f aeb3 	ble.w	8007be6 <_dtoa_r+0x68e>
 8007e80:	4656      	mov	r6, sl
 8007e82:	2331      	movs	r3, #49	@ 0x31
 8007e84:	f806 3b01 	strb.w	r3, [r6], #1
 8007e88:	9b04      	ldr	r3, [sp, #16]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	e6ae      	b.n	8007bee <_dtoa_r+0x696>
 8007e90:	9c07      	ldr	r4, [sp, #28]
 8007e92:	9704      	str	r7, [sp, #16]
 8007e94:	4625      	mov	r5, r4
 8007e96:	e7f3      	b.n	8007e80 <_dtoa_r+0x928>
 8007e98:	9b07      	ldr	r3, [sp, #28]
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 8104 	beq.w	80080ac <_dtoa_r+0xb54>
 8007ea4:	2e00      	cmp	r6, #0
 8007ea6:	dd05      	ble.n	8007eb4 <_dtoa_r+0x95c>
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4632      	mov	r2, r6
 8007eac:	4658      	mov	r0, fp
 8007eae:	f000 fc6f 	bl	8008790 <__lshift>
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d05a      	beq.n	8007f70 <_dtoa_r+0xa18>
 8007eba:	6869      	ldr	r1, [r5, #4]
 8007ebc:	4658      	mov	r0, fp
 8007ebe:	f000 fa0f 	bl	80082e0 <_Balloc>
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	b928      	cbnz	r0, 8007ed2 <_dtoa_r+0x97a>
 8007ec6:	4b84      	ldr	r3, [pc, #528]	@ (80080d8 <_dtoa_r+0xb80>)
 8007ec8:	4602      	mov	r2, r0
 8007eca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ece:	f7ff bb5a 	b.w	8007586 <_dtoa_r+0x2e>
 8007ed2:	692a      	ldr	r2, [r5, #16]
 8007ed4:	3202      	adds	r2, #2
 8007ed6:	0092      	lsls	r2, r2, #2
 8007ed8:	f105 010c 	add.w	r1, r5, #12
 8007edc:	300c      	adds	r0, #12
 8007ede:	f7ff fa9c 	bl	800741a <memcpy>
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	f000 fc52 	bl	8008790 <__lshift>
 8007eec:	f10a 0301 	add.w	r3, sl, #1
 8007ef0:	9307      	str	r3, [sp, #28]
 8007ef2:	9b00      	ldr	r3, [sp, #0]
 8007ef4:	4453      	add	r3, sl
 8007ef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ef8:	9b02      	ldr	r3, [sp, #8]
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	462f      	mov	r7, r5
 8007f00:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f02:	4605      	mov	r5, r0
 8007f04:	9b07      	ldr	r3, [sp, #28]
 8007f06:	4621      	mov	r1, r4
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	4648      	mov	r0, r9
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	f7ff fa99 	bl	8007444 <quorem>
 8007f12:	4639      	mov	r1, r7
 8007f14:	9002      	str	r0, [sp, #8]
 8007f16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f1a:	4648      	mov	r0, r9
 8007f1c:	f000 fca4 	bl	8008868 <__mcmp>
 8007f20:	462a      	mov	r2, r5
 8007f22:	9008      	str	r0, [sp, #32]
 8007f24:	4621      	mov	r1, r4
 8007f26:	4658      	mov	r0, fp
 8007f28:	f000 fcba 	bl	80088a0 <__mdiff>
 8007f2c:	68c2      	ldr	r2, [r0, #12]
 8007f2e:	4606      	mov	r6, r0
 8007f30:	bb02      	cbnz	r2, 8007f74 <_dtoa_r+0xa1c>
 8007f32:	4601      	mov	r1, r0
 8007f34:	4648      	mov	r0, r9
 8007f36:	f000 fc97 	bl	8008868 <__mcmp>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4658      	mov	r0, fp
 8007f40:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f42:	f000 fa0d 	bl	8008360 <_Bfree>
 8007f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f4a:	9e07      	ldr	r6, [sp, #28]
 8007f4c:	ea43 0102 	orr.w	r1, r3, r2
 8007f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f52:	4319      	orrs	r1, r3
 8007f54:	d110      	bne.n	8007f78 <_dtoa_r+0xa20>
 8007f56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f5a:	d029      	beq.n	8007fb0 <_dtoa_r+0xa58>
 8007f5c:	9b08      	ldr	r3, [sp, #32]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dd02      	ble.n	8007f68 <_dtoa_r+0xa10>
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007f68:	9b00      	ldr	r3, [sp, #0]
 8007f6a:	f883 8000 	strb.w	r8, [r3]
 8007f6e:	e63f      	b.n	8007bf0 <_dtoa_r+0x698>
 8007f70:	4628      	mov	r0, r5
 8007f72:	e7bb      	b.n	8007eec <_dtoa_r+0x994>
 8007f74:	2201      	movs	r2, #1
 8007f76:	e7e1      	b.n	8007f3c <_dtoa_r+0x9e4>
 8007f78:	9b08      	ldr	r3, [sp, #32]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	db04      	blt.n	8007f88 <_dtoa_r+0xa30>
 8007f7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f80:	430b      	orrs	r3, r1
 8007f82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f84:	430b      	orrs	r3, r1
 8007f86:	d120      	bne.n	8007fca <_dtoa_r+0xa72>
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	dded      	ble.n	8007f68 <_dtoa_r+0xa10>
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4658      	mov	r0, fp
 8007f92:	f000 fbfd 	bl	8008790 <__lshift>
 8007f96:	4621      	mov	r1, r4
 8007f98:	4681      	mov	r9, r0
 8007f9a:	f000 fc65 	bl	8008868 <__mcmp>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	dc03      	bgt.n	8007faa <_dtoa_r+0xa52>
 8007fa2:	d1e1      	bne.n	8007f68 <_dtoa_r+0xa10>
 8007fa4:	f018 0f01 	tst.w	r8, #1
 8007fa8:	d0de      	beq.n	8007f68 <_dtoa_r+0xa10>
 8007faa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fae:	d1d8      	bne.n	8007f62 <_dtoa_r+0xa0a>
 8007fb0:	9a00      	ldr	r2, [sp, #0]
 8007fb2:	2339      	movs	r3, #57	@ 0x39
 8007fb4:	7013      	strb	r3, [r2, #0]
 8007fb6:	4633      	mov	r3, r6
 8007fb8:	461e      	mov	r6, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007fc0:	2a39      	cmp	r2, #57	@ 0x39
 8007fc2:	d052      	beq.n	800806a <_dtoa_r+0xb12>
 8007fc4:	3201      	adds	r2, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e612      	b.n	8007bf0 <_dtoa_r+0x698>
 8007fca:	2a00      	cmp	r2, #0
 8007fcc:	dd07      	ble.n	8007fde <_dtoa_r+0xa86>
 8007fce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fd2:	d0ed      	beq.n	8007fb0 <_dtoa_r+0xa58>
 8007fd4:	9a00      	ldr	r2, [sp, #0]
 8007fd6:	f108 0301 	add.w	r3, r8, #1
 8007fda:	7013      	strb	r3, [r2, #0]
 8007fdc:	e608      	b.n	8007bf0 <_dtoa_r+0x698>
 8007fde:	9b07      	ldr	r3, [sp, #28]
 8007fe0:	9a07      	ldr	r2, [sp, #28]
 8007fe2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007fe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d028      	beq.n	800803e <_dtoa_r+0xae6>
 8007fec:	4649      	mov	r1, r9
 8007fee:	2300      	movs	r3, #0
 8007ff0:	220a      	movs	r2, #10
 8007ff2:	4658      	mov	r0, fp
 8007ff4:	f000 f9d6 	bl	80083a4 <__multadd>
 8007ff8:	42af      	cmp	r7, r5
 8007ffa:	4681      	mov	r9, r0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	f04f 020a 	mov.w	r2, #10
 8008004:	4639      	mov	r1, r7
 8008006:	4658      	mov	r0, fp
 8008008:	d107      	bne.n	800801a <_dtoa_r+0xac2>
 800800a:	f000 f9cb 	bl	80083a4 <__multadd>
 800800e:	4607      	mov	r7, r0
 8008010:	4605      	mov	r5, r0
 8008012:	9b07      	ldr	r3, [sp, #28]
 8008014:	3301      	adds	r3, #1
 8008016:	9307      	str	r3, [sp, #28]
 8008018:	e774      	b.n	8007f04 <_dtoa_r+0x9ac>
 800801a:	f000 f9c3 	bl	80083a4 <__multadd>
 800801e:	4629      	mov	r1, r5
 8008020:	4607      	mov	r7, r0
 8008022:	2300      	movs	r3, #0
 8008024:	220a      	movs	r2, #10
 8008026:	4658      	mov	r0, fp
 8008028:	f000 f9bc 	bl	80083a4 <__multadd>
 800802c:	4605      	mov	r5, r0
 800802e:	e7f0      	b.n	8008012 <_dtoa_r+0xaba>
 8008030:	9b00      	ldr	r3, [sp, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	bfcc      	ite	gt
 8008036:	461e      	movgt	r6, r3
 8008038:	2601      	movle	r6, #1
 800803a:	4456      	add	r6, sl
 800803c:	2700      	movs	r7, #0
 800803e:	4649      	mov	r1, r9
 8008040:	2201      	movs	r2, #1
 8008042:	4658      	mov	r0, fp
 8008044:	f000 fba4 	bl	8008790 <__lshift>
 8008048:	4621      	mov	r1, r4
 800804a:	4681      	mov	r9, r0
 800804c:	f000 fc0c 	bl	8008868 <__mcmp>
 8008050:	2800      	cmp	r0, #0
 8008052:	dcb0      	bgt.n	8007fb6 <_dtoa_r+0xa5e>
 8008054:	d102      	bne.n	800805c <_dtoa_r+0xb04>
 8008056:	f018 0f01 	tst.w	r8, #1
 800805a:	d1ac      	bne.n	8007fb6 <_dtoa_r+0xa5e>
 800805c:	4633      	mov	r3, r6
 800805e:	461e      	mov	r6, r3
 8008060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008064:	2a30      	cmp	r2, #48	@ 0x30
 8008066:	d0fa      	beq.n	800805e <_dtoa_r+0xb06>
 8008068:	e5c2      	b.n	8007bf0 <_dtoa_r+0x698>
 800806a:	459a      	cmp	sl, r3
 800806c:	d1a4      	bne.n	8007fb8 <_dtoa_r+0xa60>
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	3301      	adds	r3, #1
 8008072:	9304      	str	r3, [sp, #16]
 8008074:	2331      	movs	r3, #49	@ 0x31
 8008076:	f88a 3000 	strb.w	r3, [sl]
 800807a:	e5b9      	b.n	8007bf0 <_dtoa_r+0x698>
 800807c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800807e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80080dc <_dtoa_r+0xb84>
 8008082:	b11b      	cbz	r3, 800808c <_dtoa_r+0xb34>
 8008084:	f10a 0308 	add.w	r3, sl, #8
 8008088:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	4650      	mov	r0, sl
 800808e:	b019      	add	sp, #100	@ 0x64
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008096:	2b01      	cmp	r3, #1
 8008098:	f77f ae37 	ble.w	8007d0a <_dtoa_r+0x7b2>
 800809c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800809e:	930a      	str	r3, [sp, #40]	@ 0x28
 80080a0:	2001      	movs	r0, #1
 80080a2:	e655      	b.n	8007d50 <_dtoa_r+0x7f8>
 80080a4:	9b00      	ldr	r3, [sp, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f77f aed6 	ble.w	8007e58 <_dtoa_r+0x900>
 80080ac:	4656      	mov	r6, sl
 80080ae:	4621      	mov	r1, r4
 80080b0:	4648      	mov	r0, r9
 80080b2:	f7ff f9c7 	bl	8007444 <quorem>
 80080b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080ba:	f806 8b01 	strb.w	r8, [r6], #1
 80080be:	9b00      	ldr	r3, [sp, #0]
 80080c0:	eba6 020a 	sub.w	r2, r6, sl
 80080c4:	4293      	cmp	r3, r2
 80080c6:	ddb3      	ble.n	8008030 <_dtoa_r+0xad8>
 80080c8:	4649      	mov	r1, r9
 80080ca:	2300      	movs	r3, #0
 80080cc:	220a      	movs	r2, #10
 80080ce:	4658      	mov	r0, fp
 80080d0:	f000 f968 	bl	80083a4 <__multadd>
 80080d4:	4681      	mov	r9, r0
 80080d6:	e7ea      	b.n	80080ae <_dtoa_r+0xb56>
 80080d8:	0800b295 	.word	0x0800b295
 80080dc:	0800b219 	.word	0x0800b219

080080e0 <_free_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4605      	mov	r5, r0
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d041      	beq.n	800816c <_free_r+0x8c>
 80080e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ec:	1f0c      	subs	r4, r1, #4
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bfb8      	it	lt
 80080f2:	18e4      	addlt	r4, r4, r3
 80080f4:	f000 f8e8 	bl	80082c8 <__malloc_lock>
 80080f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008170 <_free_r+0x90>)
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	b933      	cbnz	r3, 800810c <_free_r+0x2c>
 80080fe:	6063      	str	r3, [r4, #4]
 8008100:	6014      	str	r4, [r2, #0]
 8008102:	4628      	mov	r0, r5
 8008104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008108:	f000 b8e4 	b.w	80082d4 <__malloc_unlock>
 800810c:	42a3      	cmp	r3, r4
 800810e:	d908      	bls.n	8008122 <_free_r+0x42>
 8008110:	6820      	ldr	r0, [r4, #0]
 8008112:	1821      	adds	r1, r4, r0
 8008114:	428b      	cmp	r3, r1
 8008116:	bf01      	itttt	eq
 8008118:	6819      	ldreq	r1, [r3, #0]
 800811a:	685b      	ldreq	r3, [r3, #4]
 800811c:	1809      	addeq	r1, r1, r0
 800811e:	6021      	streq	r1, [r4, #0]
 8008120:	e7ed      	b.n	80080fe <_free_r+0x1e>
 8008122:	461a      	mov	r2, r3
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	b10b      	cbz	r3, 800812c <_free_r+0x4c>
 8008128:	42a3      	cmp	r3, r4
 800812a:	d9fa      	bls.n	8008122 <_free_r+0x42>
 800812c:	6811      	ldr	r1, [r2, #0]
 800812e:	1850      	adds	r0, r2, r1
 8008130:	42a0      	cmp	r0, r4
 8008132:	d10b      	bne.n	800814c <_free_r+0x6c>
 8008134:	6820      	ldr	r0, [r4, #0]
 8008136:	4401      	add	r1, r0
 8008138:	1850      	adds	r0, r2, r1
 800813a:	4283      	cmp	r3, r0
 800813c:	6011      	str	r1, [r2, #0]
 800813e:	d1e0      	bne.n	8008102 <_free_r+0x22>
 8008140:	6818      	ldr	r0, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	6053      	str	r3, [r2, #4]
 8008146:	4408      	add	r0, r1
 8008148:	6010      	str	r0, [r2, #0]
 800814a:	e7da      	b.n	8008102 <_free_r+0x22>
 800814c:	d902      	bls.n	8008154 <_free_r+0x74>
 800814e:	230c      	movs	r3, #12
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	e7d6      	b.n	8008102 <_free_r+0x22>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	1821      	adds	r1, r4, r0
 8008158:	428b      	cmp	r3, r1
 800815a:	bf04      	itt	eq
 800815c:	6819      	ldreq	r1, [r3, #0]
 800815e:	685b      	ldreq	r3, [r3, #4]
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	bf04      	itt	eq
 8008164:	1809      	addeq	r1, r1, r0
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	6054      	str	r4, [r2, #4]
 800816a:	e7ca      	b.n	8008102 <_free_r+0x22>
 800816c:	bd38      	pop	{r3, r4, r5, pc}
 800816e:	bf00      	nop
 8008170:	20000614 	.word	0x20000614

08008174 <malloc>:
 8008174:	4b02      	ldr	r3, [pc, #8]	@ (8008180 <malloc+0xc>)
 8008176:	4601      	mov	r1, r0
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f000 b825 	b.w	80081c8 <_malloc_r>
 800817e:	bf00      	nop
 8008180:	20000028 	.word	0x20000028

08008184 <sbrk_aligned>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4e0f      	ldr	r6, [pc, #60]	@ (80081c4 <sbrk_aligned+0x40>)
 8008188:	460c      	mov	r4, r1
 800818a:	6831      	ldr	r1, [r6, #0]
 800818c:	4605      	mov	r5, r0
 800818e:	b911      	cbnz	r1, 8008196 <sbrk_aligned+0x12>
 8008190:	f001 fe0c 	bl	8009dac <_sbrk_r>
 8008194:	6030      	str	r0, [r6, #0]
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	f001 fe07 	bl	8009dac <_sbrk_r>
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	d103      	bne.n	80081aa <sbrk_aligned+0x26>
 80081a2:	f04f 34ff 	mov.w	r4, #4294967295
 80081a6:	4620      	mov	r0, r4
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
 80081aa:	1cc4      	adds	r4, r0, #3
 80081ac:	f024 0403 	bic.w	r4, r4, #3
 80081b0:	42a0      	cmp	r0, r4
 80081b2:	d0f8      	beq.n	80081a6 <sbrk_aligned+0x22>
 80081b4:	1a21      	subs	r1, r4, r0
 80081b6:	4628      	mov	r0, r5
 80081b8:	f001 fdf8 	bl	8009dac <_sbrk_r>
 80081bc:	3001      	adds	r0, #1
 80081be:	d1f2      	bne.n	80081a6 <sbrk_aligned+0x22>
 80081c0:	e7ef      	b.n	80081a2 <sbrk_aligned+0x1e>
 80081c2:	bf00      	nop
 80081c4:	20000610 	.word	0x20000610

080081c8 <_malloc_r>:
 80081c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081cc:	1ccd      	adds	r5, r1, #3
 80081ce:	f025 0503 	bic.w	r5, r5, #3
 80081d2:	3508      	adds	r5, #8
 80081d4:	2d0c      	cmp	r5, #12
 80081d6:	bf38      	it	cc
 80081d8:	250c      	movcc	r5, #12
 80081da:	2d00      	cmp	r5, #0
 80081dc:	4606      	mov	r6, r0
 80081de:	db01      	blt.n	80081e4 <_malloc_r+0x1c>
 80081e0:	42a9      	cmp	r1, r5
 80081e2:	d904      	bls.n	80081ee <_malloc_r+0x26>
 80081e4:	230c      	movs	r3, #12
 80081e6:	6033      	str	r3, [r6, #0]
 80081e8:	2000      	movs	r0, #0
 80081ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082c4 <_malloc_r+0xfc>
 80081f2:	f000 f869 	bl	80082c8 <__malloc_lock>
 80081f6:	f8d8 3000 	ldr.w	r3, [r8]
 80081fa:	461c      	mov	r4, r3
 80081fc:	bb44      	cbnz	r4, 8008250 <_malloc_r+0x88>
 80081fe:	4629      	mov	r1, r5
 8008200:	4630      	mov	r0, r6
 8008202:	f7ff ffbf 	bl	8008184 <sbrk_aligned>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	4604      	mov	r4, r0
 800820a:	d158      	bne.n	80082be <_malloc_r+0xf6>
 800820c:	f8d8 4000 	ldr.w	r4, [r8]
 8008210:	4627      	mov	r7, r4
 8008212:	2f00      	cmp	r7, #0
 8008214:	d143      	bne.n	800829e <_malloc_r+0xd6>
 8008216:	2c00      	cmp	r4, #0
 8008218:	d04b      	beq.n	80082b2 <_malloc_r+0xea>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	4639      	mov	r1, r7
 800821e:	4630      	mov	r0, r6
 8008220:	eb04 0903 	add.w	r9, r4, r3
 8008224:	f001 fdc2 	bl	8009dac <_sbrk_r>
 8008228:	4581      	cmp	r9, r0
 800822a:	d142      	bne.n	80082b2 <_malloc_r+0xea>
 800822c:	6821      	ldr	r1, [r4, #0]
 800822e:	1a6d      	subs	r5, r5, r1
 8008230:	4629      	mov	r1, r5
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff ffa6 	bl	8008184 <sbrk_aligned>
 8008238:	3001      	adds	r0, #1
 800823a:	d03a      	beq.n	80082b2 <_malloc_r+0xea>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	442b      	add	r3, r5
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	f8d8 3000 	ldr.w	r3, [r8]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	bb62      	cbnz	r2, 80082a4 <_malloc_r+0xdc>
 800824a:	f8c8 7000 	str.w	r7, [r8]
 800824e:	e00f      	b.n	8008270 <_malloc_r+0xa8>
 8008250:	6822      	ldr	r2, [r4, #0]
 8008252:	1b52      	subs	r2, r2, r5
 8008254:	d420      	bmi.n	8008298 <_malloc_r+0xd0>
 8008256:	2a0b      	cmp	r2, #11
 8008258:	d917      	bls.n	800828a <_malloc_r+0xc2>
 800825a:	1961      	adds	r1, r4, r5
 800825c:	42a3      	cmp	r3, r4
 800825e:	6025      	str	r5, [r4, #0]
 8008260:	bf18      	it	ne
 8008262:	6059      	strne	r1, [r3, #4]
 8008264:	6863      	ldr	r3, [r4, #4]
 8008266:	bf08      	it	eq
 8008268:	f8c8 1000 	streq.w	r1, [r8]
 800826c:	5162      	str	r2, [r4, r5]
 800826e:	604b      	str	r3, [r1, #4]
 8008270:	4630      	mov	r0, r6
 8008272:	f000 f82f 	bl	80082d4 <__malloc_unlock>
 8008276:	f104 000b 	add.w	r0, r4, #11
 800827a:	1d23      	adds	r3, r4, #4
 800827c:	f020 0007 	bic.w	r0, r0, #7
 8008280:	1ac2      	subs	r2, r0, r3
 8008282:	bf1c      	itt	ne
 8008284:	1a1b      	subne	r3, r3, r0
 8008286:	50a3      	strne	r3, [r4, r2]
 8008288:	e7af      	b.n	80081ea <_malloc_r+0x22>
 800828a:	6862      	ldr	r2, [r4, #4]
 800828c:	42a3      	cmp	r3, r4
 800828e:	bf0c      	ite	eq
 8008290:	f8c8 2000 	streq.w	r2, [r8]
 8008294:	605a      	strne	r2, [r3, #4]
 8008296:	e7eb      	b.n	8008270 <_malloc_r+0xa8>
 8008298:	4623      	mov	r3, r4
 800829a:	6864      	ldr	r4, [r4, #4]
 800829c:	e7ae      	b.n	80081fc <_malloc_r+0x34>
 800829e:	463c      	mov	r4, r7
 80082a0:	687f      	ldr	r7, [r7, #4]
 80082a2:	e7b6      	b.n	8008212 <_malloc_r+0x4a>
 80082a4:	461a      	mov	r2, r3
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	d1fb      	bne.n	80082a4 <_malloc_r+0xdc>
 80082ac:	2300      	movs	r3, #0
 80082ae:	6053      	str	r3, [r2, #4]
 80082b0:	e7de      	b.n	8008270 <_malloc_r+0xa8>
 80082b2:	230c      	movs	r3, #12
 80082b4:	6033      	str	r3, [r6, #0]
 80082b6:	4630      	mov	r0, r6
 80082b8:	f000 f80c 	bl	80082d4 <__malloc_unlock>
 80082bc:	e794      	b.n	80081e8 <_malloc_r+0x20>
 80082be:	6005      	str	r5, [r0, #0]
 80082c0:	e7d6      	b.n	8008270 <_malloc_r+0xa8>
 80082c2:	bf00      	nop
 80082c4:	20000614 	.word	0x20000614

080082c8 <__malloc_lock>:
 80082c8:	4801      	ldr	r0, [pc, #4]	@ (80082d0 <__malloc_lock+0x8>)
 80082ca:	f7ff b8a4 	b.w	8007416 <__retarget_lock_acquire_recursive>
 80082ce:	bf00      	nop
 80082d0:	2000060c 	.word	0x2000060c

080082d4 <__malloc_unlock>:
 80082d4:	4801      	ldr	r0, [pc, #4]	@ (80082dc <__malloc_unlock+0x8>)
 80082d6:	f7ff b89f 	b.w	8007418 <__retarget_lock_release_recursive>
 80082da:	bf00      	nop
 80082dc:	2000060c 	.word	0x2000060c

080082e0 <_Balloc>:
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	69c6      	ldr	r6, [r0, #28]
 80082e4:	4604      	mov	r4, r0
 80082e6:	460d      	mov	r5, r1
 80082e8:	b976      	cbnz	r6, 8008308 <_Balloc+0x28>
 80082ea:	2010      	movs	r0, #16
 80082ec:	f7ff ff42 	bl	8008174 <malloc>
 80082f0:	4602      	mov	r2, r0
 80082f2:	61e0      	str	r0, [r4, #28]
 80082f4:	b920      	cbnz	r0, 8008300 <_Balloc+0x20>
 80082f6:	4b18      	ldr	r3, [pc, #96]	@ (8008358 <_Balloc+0x78>)
 80082f8:	4818      	ldr	r0, [pc, #96]	@ (800835c <_Balloc+0x7c>)
 80082fa:	216b      	movs	r1, #107	@ 0x6b
 80082fc:	f001 fd70 	bl	8009de0 <__assert_func>
 8008300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008304:	6006      	str	r6, [r0, #0]
 8008306:	60c6      	str	r6, [r0, #12]
 8008308:	69e6      	ldr	r6, [r4, #28]
 800830a:	68f3      	ldr	r3, [r6, #12]
 800830c:	b183      	cbz	r3, 8008330 <_Balloc+0x50>
 800830e:	69e3      	ldr	r3, [r4, #28]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008316:	b9b8      	cbnz	r0, 8008348 <_Balloc+0x68>
 8008318:	2101      	movs	r1, #1
 800831a:	fa01 f605 	lsl.w	r6, r1, r5
 800831e:	1d72      	adds	r2, r6, #5
 8008320:	0092      	lsls	r2, r2, #2
 8008322:	4620      	mov	r0, r4
 8008324:	f001 fd7a 	bl	8009e1c <_calloc_r>
 8008328:	b160      	cbz	r0, 8008344 <_Balloc+0x64>
 800832a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800832e:	e00e      	b.n	800834e <_Balloc+0x6e>
 8008330:	2221      	movs	r2, #33	@ 0x21
 8008332:	2104      	movs	r1, #4
 8008334:	4620      	mov	r0, r4
 8008336:	f001 fd71 	bl	8009e1c <_calloc_r>
 800833a:	69e3      	ldr	r3, [r4, #28]
 800833c:	60f0      	str	r0, [r6, #12]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e4      	bne.n	800830e <_Balloc+0x2e>
 8008344:	2000      	movs	r0, #0
 8008346:	bd70      	pop	{r4, r5, r6, pc}
 8008348:	6802      	ldr	r2, [r0, #0]
 800834a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800834e:	2300      	movs	r3, #0
 8008350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008354:	e7f7      	b.n	8008346 <_Balloc+0x66>
 8008356:	bf00      	nop
 8008358:	0800b226 	.word	0x0800b226
 800835c:	0800b2a6 	.word	0x0800b2a6

08008360 <_Bfree>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	69c6      	ldr	r6, [r0, #28]
 8008364:	4605      	mov	r5, r0
 8008366:	460c      	mov	r4, r1
 8008368:	b976      	cbnz	r6, 8008388 <_Bfree+0x28>
 800836a:	2010      	movs	r0, #16
 800836c:	f7ff ff02 	bl	8008174 <malloc>
 8008370:	4602      	mov	r2, r0
 8008372:	61e8      	str	r0, [r5, #28]
 8008374:	b920      	cbnz	r0, 8008380 <_Bfree+0x20>
 8008376:	4b09      	ldr	r3, [pc, #36]	@ (800839c <_Bfree+0x3c>)
 8008378:	4809      	ldr	r0, [pc, #36]	@ (80083a0 <_Bfree+0x40>)
 800837a:	218f      	movs	r1, #143	@ 0x8f
 800837c:	f001 fd30 	bl	8009de0 <__assert_func>
 8008380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008384:	6006      	str	r6, [r0, #0]
 8008386:	60c6      	str	r6, [r0, #12]
 8008388:	b13c      	cbz	r4, 800839a <_Bfree+0x3a>
 800838a:	69eb      	ldr	r3, [r5, #28]
 800838c:	6862      	ldr	r2, [r4, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008394:	6021      	str	r1, [r4, #0]
 8008396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	0800b226 	.word	0x0800b226
 80083a0:	0800b2a6 	.word	0x0800b2a6

080083a4 <__multadd>:
 80083a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a8:	690d      	ldr	r5, [r1, #16]
 80083aa:	4607      	mov	r7, r0
 80083ac:	460c      	mov	r4, r1
 80083ae:	461e      	mov	r6, r3
 80083b0:	f101 0c14 	add.w	ip, r1, #20
 80083b4:	2000      	movs	r0, #0
 80083b6:	f8dc 3000 	ldr.w	r3, [ip]
 80083ba:	b299      	uxth	r1, r3
 80083bc:	fb02 6101 	mla	r1, r2, r1, r6
 80083c0:	0c1e      	lsrs	r6, r3, #16
 80083c2:	0c0b      	lsrs	r3, r1, #16
 80083c4:	fb02 3306 	mla	r3, r2, r6, r3
 80083c8:	b289      	uxth	r1, r1
 80083ca:	3001      	adds	r0, #1
 80083cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083d0:	4285      	cmp	r5, r0
 80083d2:	f84c 1b04 	str.w	r1, [ip], #4
 80083d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083da:	dcec      	bgt.n	80083b6 <__multadd+0x12>
 80083dc:	b30e      	cbz	r6, 8008422 <__multadd+0x7e>
 80083de:	68a3      	ldr	r3, [r4, #8]
 80083e0:	42ab      	cmp	r3, r5
 80083e2:	dc19      	bgt.n	8008418 <__multadd+0x74>
 80083e4:	6861      	ldr	r1, [r4, #4]
 80083e6:	4638      	mov	r0, r7
 80083e8:	3101      	adds	r1, #1
 80083ea:	f7ff ff79 	bl	80082e0 <_Balloc>
 80083ee:	4680      	mov	r8, r0
 80083f0:	b928      	cbnz	r0, 80083fe <__multadd+0x5a>
 80083f2:	4602      	mov	r2, r0
 80083f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008428 <__multadd+0x84>)
 80083f6:	480d      	ldr	r0, [pc, #52]	@ (800842c <__multadd+0x88>)
 80083f8:	21ba      	movs	r1, #186	@ 0xba
 80083fa:	f001 fcf1 	bl	8009de0 <__assert_func>
 80083fe:	6922      	ldr	r2, [r4, #16]
 8008400:	3202      	adds	r2, #2
 8008402:	f104 010c 	add.w	r1, r4, #12
 8008406:	0092      	lsls	r2, r2, #2
 8008408:	300c      	adds	r0, #12
 800840a:	f7ff f806 	bl	800741a <memcpy>
 800840e:	4621      	mov	r1, r4
 8008410:	4638      	mov	r0, r7
 8008412:	f7ff ffa5 	bl	8008360 <_Bfree>
 8008416:	4644      	mov	r4, r8
 8008418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800841c:	3501      	adds	r5, #1
 800841e:	615e      	str	r6, [r3, #20]
 8008420:	6125      	str	r5, [r4, #16]
 8008422:	4620      	mov	r0, r4
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008428:	0800b295 	.word	0x0800b295
 800842c:	0800b2a6 	.word	0x0800b2a6

08008430 <__s2b>:
 8008430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008434:	460c      	mov	r4, r1
 8008436:	4615      	mov	r5, r2
 8008438:	461f      	mov	r7, r3
 800843a:	2209      	movs	r2, #9
 800843c:	3308      	adds	r3, #8
 800843e:	4606      	mov	r6, r0
 8008440:	fb93 f3f2 	sdiv	r3, r3, r2
 8008444:	2100      	movs	r1, #0
 8008446:	2201      	movs	r2, #1
 8008448:	429a      	cmp	r2, r3
 800844a:	db09      	blt.n	8008460 <__s2b+0x30>
 800844c:	4630      	mov	r0, r6
 800844e:	f7ff ff47 	bl	80082e0 <_Balloc>
 8008452:	b940      	cbnz	r0, 8008466 <__s2b+0x36>
 8008454:	4602      	mov	r2, r0
 8008456:	4b19      	ldr	r3, [pc, #100]	@ (80084bc <__s2b+0x8c>)
 8008458:	4819      	ldr	r0, [pc, #100]	@ (80084c0 <__s2b+0x90>)
 800845a:	21d3      	movs	r1, #211	@ 0xd3
 800845c:	f001 fcc0 	bl	8009de0 <__assert_func>
 8008460:	0052      	lsls	r2, r2, #1
 8008462:	3101      	adds	r1, #1
 8008464:	e7f0      	b.n	8008448 <__s2b+0x18>
 8008466:	9b08      	ldr	r3, [sp, #32]
 8008468:	6143      	str	r3, [r0, #20]
 800846a:	2d09      	cmp	r5, #9
 800846c:	f04f 0301 	mov.w	r3, #1
 8008470:	6103      	str	r3, [r0, #16]
 8008472:	dd16      	ble.n	80084a2 <__s2b+0x72>
 8008474:	f104 0909 	add.w	r9, r4, #9
 8008478:	46c8      	mov	r8, r9
 800847a:	442c      	add	r4, r5
 800847c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008480:	4601      	mov	r1, r0
 8008482:	3b30      	subs	r3, #48	@ 0x30
 8008484:	220a      	movs	r2, #10
 8008486:	4630      	mov	r0, r6
 8008488:	f7ff ff8c 	bl	80083a4 <__multadd>
 800848c:	45a0      	cmp	r8, r4
 800848e:	d1f5      	bne.n	800847c <__s2b+0x4c>
 8008490:	f1a5 0408 	sub.w	r4, r5, #8
 8008494:	444c      	add	r4, r9
 8008496:	1b2d      	subs	r5, r5, r4
 8008498:	1963      	adds	r3, r4, r5
 800849a:	42bb      	cmp	r3, r7
 800849c:	db04      	blt.n	80084a8 <__s2b+0x78>
 800849e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a2:	340a      	adds	r4, #10
 80084a4:	2509      	movs	r5, #9
 80084a6:	e7f6      	b.n	8008496 <__s2b+0x66>
 80084a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084ac:	4601      	mov	r1, r0
 80084ae:	3b30      	subs	r3, #48	@ 0x30
 80084b0:	220a      	movs	r2, #10
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7ff ff76 	bl	80083a4 <__multadd>
 80084b8:	e7ee      	b.n	8008498 <__s2b+0x68>
 80084ba:	bf00      	nop
 80084bc:	0800b295 	.word	0x0800b295
 80084c0:	0800b2a6 	.word	0x0800b2a6

080084c4 <__hi0bits>:
 80084c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80084c8:	4603      	mov	r3, r0
 80084ca:	bf36      	itet	cc
 80084cc:	0403      	lslcc	r3, r0, #16
 80084ce:	2000      	movcs	r0, #0
 80084d0:	2010      	movcc	r0, #16
 80084d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084d6:	bf3c      	itt	cc
 80084d8:	021b      	lslcc	r3, r3, #8
 80084da:	3008      	addcc	r0, #8
 80084dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084e0:	bf3c      	itt	cc
 80084e2:	011b      	lslcc	r3, r3, #4
 80084e4:	3004      	addcc	r0, #4
 80084e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ea:	bf3c      	itt	cc
 80084ec:	009b      	lslcc	r3, r3, #2
 80084ee:	3002      	addcc	r0, #2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	db05      	blt.n	8008500 <__hi0bits+0x3c>
 80084f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80084f8:	f100 0001 	add.w	r0, r0, #1
 80084fc:	bf08      	it	eq
 80084fe:	2020      	moveq	r0, #32
 8008500:	4770      	bx	lr

08008502 <__lo0bits>:
 8008502:	6803      	ldr	r3, [r0, #0]
 8008504:	4602      	mov	r2, r0
 8008506:	f013 0007 	ands.w	r0, r3, #7
 800850a:	d00b      	beq.n	8008524 <__lo0bits+0x22>
 800850c:	07d9      	lsls	r1, r3, #31
 800850e:	d421      	bmi.n	8008554 <__lo0bits+0x52>
 8008510:	0798      	lsls	r0, r3, #30
 8008512:	bf49      	itett	mi
 8008514:	085b      	lsrmi	r3, r3, #1
 8008516:	089b      	lsrpl	r3, r3, #2
 8008518:	2001      	movmi	r0, #1
 800851a:	6013      	strmi	r3, [r2, #0]
 800851c:	bf5c      	itt	pl
 800851e:	6013      	strpl	r3, [r2, #0]
 8008520:	2002      	movpl	r0, #2
 8008522:	4770      	bx	lr
 8008524:	b299      	uxth	r1, r3
 8008526:	b909      	cbnz	r1, 800852c <__lo0bits+0x2a>
 8008528:	0c1b      	lsrs	r3, r3, #16
 800852a:	2010      	movs	r0, #16
 800852c:	b2d9      	uxtb	r1, r3
 800852e:	b909      	cbnz	r1, 8008534 <__lo0bits+0x32>
 8008530:	3008      	adds	r0, #8
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	0719      	lsls	r1, r3, #28
 8008536:	bf04      	itt	eq
 8008538:	091b      	lsreq	r3, r3, #4
 800853a:	3004      	addeq	r0, #4
 800853c:	0799      	lsls	r1, r3, #30
 800853e:	bf04      	itt	eq
 8008540:	089b      	lsreq	r3, r3, #2
 8008542:	3002      	addeq	r0, #2
 8008544:	07d9      	lsls	r1, r3, #31
 8008546:	d403      	bmi.n	8008550 <__lo0bits+0x4e>
 8008548:	085b      	lsrs	r3, r3, #1
 800854a:	f100 0001 	add.w	r0, r0, #1
 800854e:	d003      	beq.n	8008558 <__lo0bits+0x56>
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	4770      	bx	lr
 8008554:	2000      	movs	r0, #0
 8008556:	4770      	bx	lr
 8008558:	2020      	movs	r0, #32
 800855a:	4770      	bx	lr

0800855c <__i2b>:
 800855c:	b510      	push	{r4, lr}
 800855e:	460c      	mov	r4, r1
 8008560:	2101      	movs	r1, #1
 8008562:	f7ff febd 	bl	80082e0 <_Balloc>
 8008566:	4602      	mov	r2, r0
 8008568:	b928      	cbnz	r0, 8008576 <__i2b+0x1a>
 800856a:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <__i2b+0x24>)
 800856c:	4805      	ldr	r0, [pc, #20]	@ (8008584 <__i2b+0x28>)
 800856e:	f240 1145 	movw	r1, #325	@ 0x145
 8008572:	f001 fc35 	bl	8009de0 <__assert_func>
 8008576:	2301      	movs	r3, #1
 8008578:	6144      	str	r4, [r0, #20]
 800857a:	6103      	str	r3, [r0, #16]
 800857c:	bd10      	pop	{r4, pc}
 800857e:	bf00      	nop
 8008580:	0800b295 	.word	0x0800b295
 8008584:	0800b2a6 	.word	0x0800b2a6

08008588 <__multiply>:
 8008588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	4614      	mov	r4, r2
 800858e:	690a      	ldr	r2, [r1, #16]
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	429a      	cmp	r2, r3
 8008594:	bfa8      	it	ge
 8008596:	4623      	movge	r3, r4
 8008598:	460f      	mov	r7, r1
 800859a:	bfa4      	itt	ge
 800859c:	460c      	movge	r4, r1
 800859e:	461f      	movge	r7, r3
 80085a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80085a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80085a8:	68a3      	ldr	r3, [r4, #8]
 80085aa:	6861      	ldr	r1, [r4, #4]
 80085ac:	eb0a 0609 	add.w	r6, sl, r9
 80085b0:	42b3      	cmp	r3, r6
 80085b2:	b085      	sub	sp, #20
 80085b4:	bfb8      	it	lt
 80085b6:	3101      	addlt	r1, #1
 80085b8:	f7ff fe92 	bl	80082e0 <_Balloc>
 80085bc:	b930      	cbnz	r0, 80085cc <__multiply+0x44>
 80085be:	4602      	mov	r2, r0
 80085c0:	4b44      	ldr	r3, [pc, #272]	@ (80086d4 <__multiply+0x14c>)
 80085c2:	4845      	ldr	r0, [pc, #276]	@ (80086d8 <__multiply+0x150>)
 80085c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80085c8:	f001 fc0a 	bl	8009de0 <__assert_func>
 80085cc:	f100 0514 	add.w	r5, r0, #20
 80085d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085d4:	462b      	mov	r3, r5
 80085d6:	2200      	movs	r2, #0
 80085d8:	4543      	cmp	r3, r8
 80085da:	d321      	bcc.n	8008620 <__multiply+0x98>
 80085dc:	f107 0114 	add.w	r1, r7, #20
 80085e0:	f104 0214 	add.w	r2, r4, #20
 80085e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80085e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80085ec:	9302      	str	r3, [sp, #8]
 80085ee:	1b13      	subs	r3, r2, r4
 80085f0:	3b15      	subs	r3, #21
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	3304      	adds	r3, #4
 80085f8:	f104 0715 	add.w	r7, r4, #21
 80085fc:	42ba      	cmp	r2, r7
 80085fe:	bf38      	it	cc
 8008600:	2304      	movcc	r3, #4
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	9b02      	ldr	r3, [sp, #8]
 8008606:	9103      	str	r1, [sp, #12]
 8008608:	428b      	cmp	r3, r1
 800860a:	d80c      	bhi.n	8008626 <__multiply+0x9e>
 800860c:	2e00      	cmp	r6, #0
 800860e:	dd03      	ble.n	8008618 <__multiply+0x90>
 8008610:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008614:	2b00      	cmp	r3, #0
 8008616:	d05b      	beq.n	80086d0 <__multiply+0x148>
 8008618:	6106      	str	r6, [r0, #16]
 800861a:	b005      	add	sp, #20
 800861c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008620:	f843 2b04 	str.w	r2, [r3], #4
 8008624:	e7d8      	b.n	80085d8 <__multiply+0x50>
 8008626:	f8b1 a000 	ldrh.w	sl, [r1]
 800862a:	f1ba 0f00 	cmp.w	sl, #0
 800862e:	d024      	beq.n	800867a <__multiply+0xf2>
 8008630:	f104 0e14 	add.w	lr, r4, #20
 8008634:	46a9      	mov	r9, r5
 8008636:	f04f 0c00 	mov.w	ip, #0
 800863a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800863e:	f8d9 3000 	ldr.w	r3, [r9]
 8008642:	fa1f fb87 	uxth.w	fp, r7
 8008646:	b29b      	uxth	r3, r3
 8008648:	fb0a 330b 	mla	r3, sl, fp, r3
 800864c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008650:	f8d9 7000 	ldr.w	r7, [r9]
 8008654:	4463      	add	r3, ip
 8008656:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800865a:	fb0a c70b 	mla	r7, sl, fp, ip
 800865e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008662:	b29b      	uxth	r3, r3
 8008664:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008668:	4572      	cmp	r2, lr
 800866a:	f849 3b04 	str.w	r3, [r9], #4
 800866e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008672:	d8e2      	bhi.n	800863a <__multiply+0xb2>
 8008674:	9b01      	ldr	r3, [sp, #4]
 8008676:	f845 c003 	str.w	ip, [r5, r3]
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008680:	3104      	adds	r1, #4
 8008682:	f1b9 0f00 	cmp.w	r9, #0
 8008686:	d021      	beq.n	80086cc <__multiply+0x144>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	f104 0c14 	add.w	ip, r4, #20
 800868e:	46ae      	mov	lr, r5
 8008690:	f04f 0a00 	mov.w	sl, #0
 8008694:	f8bc b000 	ldrh.w	fp, [ip]
 8008698:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800869c:	fb09 770b 	mla	r7, r9, fp, r7
 80086a0:	4457      	add	r7, sl
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086a8:	f84e 3b04 	str.w	r3, [lr], #4
 80086ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80086b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086b4:	f8be 3000 	ldrh.w	r3, [lr]
 80086b8:	fb09 330a 	mla	r3, r9, sl, r3
 80086bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80086c0:	4562      	cmp	r2, ip
 80086c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086c6:	d8e5      	bhi.n	8008694 <__multiply+0x10c>
 80086c8:	9f01      	ldr	r7, [sp, #4]
 80086ca:	51eb      	str	r3, [r5, r7]
 80086cc:	3504      	adds	r5, #4
 80086ce:	e799      	b.n	8008604 <__multiply+0x7c>
 80086d0:	3e01      	subs	r6, #1
 80086d2:	e79b      	b.n	800860c <__multiply+0x84>
 80086d4:	0800b295 	.word	0x0800b295
 80086d8:	0800b2a6 	.word	0x0800b2a6

080086dc <__pow5mult>:
 80086dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e0:	4615      	mov	r5, r2
 80086e2:	f012 0203 	ands.w	r2, r2, #3
 80086e6:	4607      	mov	r7, r0
 80086e8:	460e      	mov	r6, r1
 80086ea:	d007      	beq.n	80086fc <__pow5mult+0x20>
 80086ec:	4c25      	ldr	r4, [pc, #148]	@ (8008784 <__pow5mult+0xa8>)
 80086ee:	3a01      	subs	r2, #1
 80086f0:	2300      	movs	r3, #0
 80086f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086f6:	f7ff fe55 	bl	80083a4 <__multadd>
 80086fa:	4606      	mov	r6, r0
 80086fc:	10ad      	asrs	r5, r5, #2
 80086fe:	d03d      	beq.n	800877c <__pow5mult+0xa0>
 8008700:	69fc      	ldr	r4, [r7, #28]
 8008702:	b97c      	cbnz	r4, 8008724 <__pow5mult+0x48>
 8008704:	2010      	movs	r0, #16
 8008706:	f7ff fd35 	bl	8008174 <malloc>
 800870a:	4602      	mov	r2, r0
 800870c:	61f8      	str	r0, [r7, #28]
 800870e:	b928      	cbnz	r0, 800871c <__pow5mult+0x40>
 8008710:	4b1d      	ldr	r3, [pc, #116]	@ (8008788 <__pow5mult+0xac>)
 8008712:	481e      	ldr	r0, [pc, #120]	@ (800878c <__pow5mult+0xb0>)
 8008714:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008718:	f001 fb62 	bl	8009de0 <__assert_func>
 800871c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008720:	6004      	str	r4, [r0, #0]
 8008722:	60c4      	str	r4, [r0, #12]
 8008724:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800872c:	b94c      	cbnz	r4, 8008742 <__pow5mult+0x66>
 800872e:	f240 2171 	movw	r1, #625	@ 0x271
 8008732:	4638      	mov	r0, r7
 8008734:	f7ff ff12 	bl	800855c <__i2b>
 8008738:	2300      	movs	r3, #0
 800873a:	f8c8 0008 	str.w	r0, [r8, #8]
 800873e:	4604      	mov	r4, r0
 8008740:	6003      	str	r3, [r0, #0]
 8008742:	f04f 0900 	mov.w	r9, #0
 8008746:	07eb      	lsls	r3, r5, #31
 8008748:	d50a      	bpl.n	8008760 <__pow5mult+0x84>
 800874a:	4631      	mov	r1, r6
 800874c:	4622      	mov	r2, r4
 800874e:	4638      	mov	r0, r7
 8008750:	f7ff ff1a 	bl	8008588 <__multiply>
 8008754:	4631      	mov	r1, r6
 8008756:	4680      	mov	r8, r0
 8008758:	4638      	mov	r0, r7
 800875a:	f7ff fe01 	bl	8008360 <_Bfree>
 800875e:	4646      	mov	r6, r8
 8008760:	106d      	asrs	r5, r5, #1
 8008762:	d00b      	beq.n	800877c <__pow5mult+0xa0>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	b938      	cbnz	r0, 8008778 <__pow5mult+0x9c>
 8008768:	4622      	mov	r2, r4
 800876a:	4621      	mov	r1, r4
 800876c:	4638      	mov	r0, r7
 800876e:	f7ff ff0b 	bl	8008588 <__multiply>
 8008772:	6020      	str	r0, [r4, #0]
 8008774:	f8c0 9000 	str.w	r9, [r0]
 8008778:	4604      	mov	r4, r0
 800877a:	e7e4      	b.n	8008746 <__pow5mult+0x6a>
 800877c:	4630      	mov	r0, r6
 800877e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008782:	bf00      	nop
 8008784:	0800b300 	.word	0x0800b300
 8008788:	0800b226 	.word	0x0800b226
 800878c:	0800b2a6 	.word	0x0800b2a6

08008790 <__lshift>:
 8008790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	460c      	mov	r4, r1
 8008796:	6849      	ldr	r1, [r1, #4]
 8008798:	6923      	ldr	r3, [r4, #16]
 800879a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800879e:	68a3      	ldr	r3, [r4, #8]
 80087a0:	4607      	mov	r7, r0
 80087a2:	4691      	mov	r9, r2
 80087a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087a8:	f108 0601 	add.w	r6, r8, #1
 80087ac:	42b3      	cmp	r3, r6
 80087ae:	db0b      	blt.n	80087c8 <__lshift+0x38>
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7ff fd95 	bl	80082e0 <_Balloc>
 80087b6:	4605      	mov	r5, r0
 80087b8:	b948      	cbnz	r0, 80087ce <__lshift+0x3e>
 80087ba:	4602      	mov	r2, r0
 80087bc:	4b28      	ldr	r3, [pc, #160]	@ (8008860 <__lshift+0xd0>)
 80087be:	4829      	ldr	r0, [pc, #164]	@ (8008864 <__lshift+0xd4>)
 80087c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80087c4:	f001 fb0c 	bl	8009de0 <__assert_func>
 80087c8:	3101      	adds	r1, #1
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	e7ee      	b.n	80087ac <__lshift+0x1c>
 80087ce:	2300      	movs	r3, #0
 80087d0:	f100 0114 	add.w	r1, r0, #20
 80087d4:	f100 0210 	add.w	r2, r0, #16
 80087d8:	4618      	mov	r0, r3
 80087da:	4553      	cmp	r3, sl
 80087dc:	db33      	blt.n	8008846 <__lshift+0xb6>
 80087de:	6920      	ldr	r0, [r4, #16]
 80087e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087e4:	f104 0314 	add.w	r3, r4, #20
 80087e8:	f019 091f 	ands.w	r9, r9, #31
 80087ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087f4:	d02b      	beq.n	800884e <__lshift+0xbe>
 80087f6:	f1c9 0e20 	rsb	lr, r9, #32
 80087fa:	468a      	mov	sl, r1
 80087fc:	2200      	movs	r2, #0
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	fa00 f009 	lsl.w	r0, r0, r9
 8008804:	4310      	orrs	r0, r2
 8008806:	f84a 0b04 	str.w	r0, [sl], #4
 800880a:	f853 2b04 	ldr.w	r2, [r3], #4
 800880e:	459c      	cmp	ip, r3
 8008810:	fa22 f20e 	lsr.w	r2, r2, lr
 8008814:	d8f3      	bhi.n	80087fe <__lshift+0x6e>
 8008816:	ebac 0304 	sub.w	r3, ip, r4
 800881a:	3b15      	subs	r3, #21
 800881c:	f023 0303 	bic.w	r3, r3, #3
 8008820:	3304      	adds	r3, #4
 8008822:	f104 0015 	add.w	r0, r4, #21
 8008826:	4584      	cmp	ip, r0
 8008828:	bf38      	it	cc
 800882a:	2304      	movcc	r3, #4
 800882c:	50ca      	str	r2, [r1, r3]
 800882e:	b10a      	cbz	r2, 8008834 <__lshift+0xa4>
 8008830:	f108 0602 	add.w	r6, r8, #2
 8008834:	3e01      	subs	r6, #1
 8008836:	4638      	mov	r0, r7
 8008838:	612e      	str	r6, [r5, #16]
 800883a:	4621      	mov	r1, r4
 800883c:	f7ff fd90 	bl	8008360 <_Bfree>
 8008840:	4628      	mov	r0, r5
 8008842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008846:	f842 0f04 	str.w	r0, [r2, #4]!
 800884a:	3301      	adds	r3, #1
 800884c:	e7c5      	b.n	80087da <__lshift+0x4a>
 800884e:	3904      	subs	r1, #4
 8008850:	f853 2b04 	ldr.w	r2, [r3], #4
 8008854:	f841 2f04 	str.w	r2, [r1, #4]!
 8008858:	459c      	cmp	ip, r3
 800885a:	d8f9      	bhi.n	8008850 <__lshift+0xc0>
 800885c:	e7ea      	b.n	8008834 <__lshift+0xa4>
 800885e:	bf00      	nop
 8008860:	0800b295 	.word	0x0800b295
 8008864:	0800b2a6 	.word	0x0800b2a6

08008868 <__mcmp>:
 8008868:	690a      	ldr	r2, [r1, #16]
 800886a:	4603      	mov	r3, r0
 800886c:	6900      	ldr	r0, [r0, #16]
 800886e:	1a80      	subs	r0, r0, r2
 8008870:	b530      	push	{r4, r5, lr}
 8008872:	d10e      	bne.n	8008892 <__mcmp+0x2a>
 8008874:	3314      	adds	r3, #20
 8008876:	3114      	adds	r1, #20
 8008878:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800887c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008880:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008888:	4295      	cmp	r5, r2
 800888a:	d003      	beq.n	8008894 <__mcmp+0x2c>
 800888c:	d205      	bcs.n	800889a <__mcmp+0x32>
 800888e:	f04f 30ff 	mov.w	r0, #4294967295
 8008892:	bd30      	pop	{r4, r5, pc}
 8008894:	42a3      	cmp	r3, r4
 8008896:	d3f3      	bcc.n	8008880 <__mcmp+0x18>
 8008898:	e7fb      	b.n	8008892 <__mcmp+0x2a>
 800889a:	2001      	movs	r0, #1
 800889c:	e7f9      	b.n	8008892 <__mcmp+0x2a>
	...

080088a0 <__mdiff>:
 80088a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	4689      	mov	r9, r1
 80088a6:	4606      	mov	r6, r0
 80088a8:	4611      	mov	r1, r2
 80088aa:	4648      	mov	r0, r9
 80088ac:	4614      	mov	r4, r2
 80088ae:	f7ff ffdb 	bl	8008868 <__mcmp>
 80088b2:	1e05      	subs	r5, r0, #0
 80088b4:	d112      	bne.n	80088dc <__mdiff+0x3c>
 80088b6:	4629      	mov	r1, r5
 80088b8:	4630      	mov	r0, r6
 80088ba:	f7ff fd11 	bl	80082e0 <_Balloc>
 80088be:	4602      	mov	r2, r0
 80088c0:	b928      	cbnz	r0, 80088ce <__mdiff+0x2e>
 80088c2:	4b3f      	ldr	r3, [pc, #252]	@ (80089c0 <__mdiff+0x120>)
 80088c4:	f240 2137 	movw	r1, #567	@ 0x237
 80088c8:	483e      	ldr	r0, [pc, #248]	@ (80089c4 <__mdiff+0x124>)
 80088ca:	f001 fa89 	bl	8009de0 <__assert_func>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088d4:	4610      	mov	r0, r2
 80088d6:	b003      	add	sp, #12
 80088d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088dc:	bfbc      	itt	lt
 80088de:	464b      	movlt	r3, r9
 80088e0:	46a1      	movlt	r9, r4
 80088e2:	4630      	mov	r0, r6
 80088e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80088e8:	bfba      	itte	lt
 80088ea:	461c      	movlt	r4, r3
 80088ec:	2501      	movlt	r5, #1
 80088ee:	2500      	movge	r5, #0
 80088f0:	f7ff fcf6 	bl	80082e0 <_Balloc>
 80088f4:	4602      	mov	r2, r0
 80088f6:	b918      	cbnz	r0, 8008900 <__mdiff+0x60>
 80088f8:	4b31      	ldr	r3, [pc, #196]	@ (80089c0 <__mdiff+0x120>)
 80088fa:	f240 2145 	movw	r1, #581	@ 0x245
 80088fe:	e7e3      	b.n	80088c8 <__mdiff+0x28>
 8008900:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008904:	6926      	ldr	r6, [r4, #16]
 8008906:	60c5      	str	r5, [r0, #12]
 8008908:	f109 0310 	add.w	r3, r9, #16
 800890c:	f109 0514 	add.w	r5, r9, #20
 8008910:	f104 0e14 	add.w	lr, r4, #20
 8008914:	f100 0b14 	add.w	fp, r0, #20
 8008918:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800891c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	46d9      	mov	r9, fp
 8008924:	f04f 0c00 	mov.w	ip, #0
 8008928:	9b01      	ldr	r3, [sp, #4]
 800892a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800892e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	fa1f f38a 	uxth.w	r3, sl
 8008938:	4619      	mov	r1, r3
 800893a:	b283      	uxth	r3, r0
 800893c:	1acb      	subs	r3, r1, r3
 800893e:	0c00      	lsrs	r0, r0, #16
 8008940:	4463      	add	r3, ip
 8008942:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008946:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800894a:	b29b      	uxth	r3, r3
 800894c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008950:	4576      	cmp	r6, lr
 8008952:	f849 3b04 	str.w	r3, [r9], #4
 8008956:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800895a:	d8e5      	bhi.n	8008928 <__mdiff+0x88>
 800895c:	1b33      	subs	r3, r6, r4
 800895e:	3b15      	subs	r3, #21
 8008960:	f023 0303 	bic.w	r3, r3, #3
 8008964:	3415      	adds	r4, #21
 8008966:	3304      	adds	r3, #4
 8008968:	42a6      	cmp	r6, r4
 800896a:	bf38      	it	cc
 800896c:	2304      	movcc	r3, #4
 800896e:	441d      	add	r5, r3
 8008970:	445b      	add	r3, fp
 8008972:	461e      	mov	r6, r3
 8008974:	462c      	mov	r4, r5
 8008976:	4544      	cmp	r4, r8
 8008978:	d30e      	bcc.n	8008998 <__mdiff+0xf8>
 800897a:	f108 0103 	add.w	r1, r8, #3
 800897e:	1b49      	subs	r1, r1, r5
 8008980:	f021 0103 	bic.w	r1, r1, #3
 8008984:	3d03      	subs	r5, #3
 8008986:	45a8      	cmp	r8, r5
 8008988:	bf38      	it	cc
 800898a:	2100      	movcc	r1, #0
 800898c:	440b      	add	r3, r1
 800898e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008992:	b191      	cbz	r1, 80089ba <__mdiff+0x11a>
 8008994:	6117      	str	r7, [r2, #16]
 8008996:	e79d      	b.n	80088d4 <__mdiff+0x34>
 8008998:	f854 1b04 	ldr.w	r1, [r4], #4
 800899c:	46e6      	mov	lr, ip
 800899e:	0c08      	lsrs	r0, r1, #16
 80089a0:	fa1c fc81 	uxtah	ip, ip, r1
 80089a4:	4471      	add	r1, lr
 80089a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089aa:	b289      	uxth	r1, r1
 80089ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089b0:	f846 1b04 	str.w	r1, [r6], #4
 80089b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089b8:	e7dd      	b.n	8008976 <__mdiff+0xd6>
 80089ba:	3f01      	subs	r7, #1
 80089bc:	e7e7      	b.n	800898e <__mdiff+0xee>
 80089be:	bf00      	nop
 80089c0:	0800b295 	.word	0x0800b295
 80089c4:	0800b2a6 	.word	0x0800b2a6

080089c8 <__ulp>:
 80089c8:	b082      	sub	sp, #8
 80089ca:	ed8d 0b00 	vstr	d0, [sp]
 80089ce:	9a01      	ldr	r2, [sp, #4]
 80089d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a10 <__ulp+0x48>)
 80089d2:	4013      	ands	r3, r2
 80089d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dc08      	bgt.n	80089ee <__ulp+0x26>
 80089dc:	425b      	negs	r3, r3
 80089de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80089e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80089e6:	da04      	bge.n	80089f2 <__ulp+0x2a>
 80089e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80089ec:	4113      	asrs	r3, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	e008      	b.n	8008a04 <__ulp+0x3c>
 80089f2:	f1a2 0314 	sub.w	r3, r2, #20
 80089f6:	2b1e      	cmp	r3, #30
 80089f8:	bfda      	itte	le
 80089fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80089fe:	40da      	lsrle	r2, r3
 8008a00:	2201      	movgt	r2, #1
 8008a02:	2300      	movs	r3, #0
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	ec41 0b10 	vmov	d0, r0, r1
 8008a0c:	b002      	add	sp, #8
 8008a0e:	4770      	bx	lr
 8008a10:	7ff00000 	.word	0x7ff00000

08008a14 <__b2d>:
 8008a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a18:	6906      	ldr	r6, [r0, #16]
 8008a1a:	f100 0814 	add.w	r8, r0, #20
 8008a1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008a22:	1f37      	subs	r7, r6, #4
 8008a24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008a28:	4610      	mov	r0, r2
 8008a2a:	f7ff fd4b 	bl	80084c4 <__hi0bits>
 8008a2e:	f1c0 0320 	rsb	r3, r0, #32
 8008a32:	280a      	cmp	r0, #10
 8008a34:	600b      	str	r3, [r1, #0]
 8008a36:	491b      	ldr	r1, [pc, #108]	@ (8008aa4 <__b2d+0x90>)
 8008a38:	dc15      	bgt.n	8008a66 <__b2d+0x52>
 8008a3a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008a3e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008a42:	45b8      	cmp	r8, r7
 8008a44:	ea43 0501 	orr.w	r5, r3, r1
 8008a48:	bf34      	ite	cc
 8008a4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a4e:	2300      	movcs	r3, #0
 8008a50:	3015      	adds	r0, #21
 8008a52:	fa02 f000 	lsl.w	r0, r2, r0
 8008a56:	fa23 f30c 	lsr.w	r3, r3, ip
 8008a5a:	4303      	orrs	r3, r0
 8008a5c:	461c      	mov	r4, r3
 8008a5e:	ec45 4b10 	vmov	d0, r4, r5
 8008a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a66:	45b8      	cmp	r8, r7
 8008a68:	bf3a      	itte	cc
 8008a6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a6e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008a72:	2300      	movcs	r3, #0
 8008a74:	380b      	subs	r0, #11
 8008a76:	d012      	beq.n	8008a9e <__b2d+0x8a>
 8008a78:	f1c0 0120 	rsb	r1, r0, #32
 8008a7c:	fa23 f401 	lsr.w	r4, r3, r1
 8008a80:	4082      	lsls	r2, r0
 8008a82:	4322      	orrs	r2, r4
 8008a84:	4547      	cmp	r7, r8
 8008a86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008a8a:	bf8c      	ite	hi
 8008a8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008a90:	2200      	movls	r2, #0
 8008a92:	4083      	lsls	r3, r0
 8008a94:	40ca      	lsrs	r2, r1
 8008a96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	e7de      	b.n	8008a5c <__b2d+0x48>
 8008a9e:	ea42 0501 	orr.w	r5, r2, r1
 8008aa2:	e7db      	b.n	8008a5c <__b2d+0x48>
 8008aa4:	3ff00000 	.word	0x3ff00000

08008aa8 <__d2b>:
 8008aa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008aac:	460f      	mov	r7, r1
 8008aae:	2101      	movs	r1, #1
 8008ab0:	ec59 8b10 	vmov	r8, r9, d0
 8008ab4:	4616      	mov	r6, r2
 8008ab6:	f7ff fc13 	bl	80082e0 <_Balloc>
 8008aba:	4604      	mov	r4, r0
 8008abc:	b930      	cbnz	r0, 8008acc <__d2b+0x24>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b23      	ldr	r3, [pc, #140]	@ (8008b50 <__d2b+0xa8>)
 8008ac2:	4824      	ldr	r0, [pc, #144]	@ (8008b54 <__d2b+0xac>)
 8008ac4:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ac8:	f001 f98a 	bl	8009de0 <__assert_func>
 8008acc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ad4:	b10d      	cbz	r5, 8008ada <__d2b+0x32>
 8008ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	f1b8 0300 	subs.w	r3, r8, #0
 8008ae0:	d023      	beq.n	8008b2a <__d2b+0x82>
 8008ae2:	4668      	mov	r0, sp
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	f7ff fd0c 	bl	8008502 <__lo0bits>
 8008aea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008aee:	b1d0      	cbz	r0, 8008b26 <__d2b+0x7e>
 8008af0:	f1c0 0320 	rsb	r3, r0, #32
 8008af4:	fa02 f303 	lsl.w	r3, r2, r3
 8008af8:	430b      	orrs	r3, r1
 8008afa:	40c2      	lsrs	r2, r0
 8008afc:	6163      	str	r3, [r4, #20]
 8008afe:	9201      	str	r2, [sp, #4]
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	61a3      	str	r3, [r4, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bf0c      	ite	eq
 8008b08:	2201      	moveq	r2, #1
 8008b0a:	2202      	movne	r2, #2
 8008b0c:	6122      	str	r2, [r4, #16]
 8008b0e:	b1a5      	cbz	r5, 8008b3a <__d2b+0x92>
 8008b10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b14:	4405      	add	r5, r0
 8008b16:	603d      	str	r5, [r7, #0]
 8008b18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b1c:	6030      	str	r0, [r6, #0]
 8008b1e:	4620      	mov	r0, r4
 8008b20:	b003      	add	sp, #12
 8008b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b26:	6161      	str	r1, [r4, #20]
 8008b28:	e7ea      	b.n	8008b00 <__d2b+0x58>
 8008b2a:	a801      	add	r0, sp, #4
 8008b2c:	f7ff fce9 	bl	8008502 <__lo0bits>
 8008b30:	9b01      	ldr	r3, [sp, #4]
 8008b32:	6163      	str	r3, [r4, #20]
 8008b34:	3020      	adds	r0, #32
 8008b36:	2201      	movs	r2, #1
 8008b38:	e7e8      	b.n	8008b0c <__d2b+0x64>
 8008b3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b42:	6038      	str	r0, [r7, #0]
 8008b44:	6918      	ldr	r0, [r3, #16]
 8008b46:	f7ff fcbd 	bl	80084c4 <__hi0bits>
 8008b4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b4e:	e7e5      	b.n	8008b1c <__d2b+0x74>
 8008b50:	0800b295 	.word	0x0800b295
 8008b54:	0800b2a6 	.word	0x0800b2a6

08008b58 <__ratio>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	e9cd 1000 	strd	r1, r0, [sp]
 8008b62:	a902      	add	r1, sp, #8
 8008b64:	f7ff ff56 	bl	8008a14 <__b2d>
 8008b68:	9800      	ldr	r0, [sp, #0]
 8008b6a:	a903      	add	r1, sp, #12
 8008b6c:	ec55 4b10 	vmov	r4, r5, d0
 8008b70:	f7ff ff50 	bl	8008a14 <__b2d>
 8008b74:	9b01      	ldr	r3, [sp, #4]
 8008b76:	6919      	ldr	r1, [r3, #16]
 8008b78:	9b00      	ldr	r3, [sp, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	1ac9      	subs	r1, r1, r3
 8008b7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	ec5b ab10 	vmov	sl, fp, d0
 8008b88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	bfce      	itee	gt
 8008b90:	462a      	movgt	r2, r5
 8008b92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b96:	465a      	movle	r2, fp
 8008b98:	462f      	mov	r7, r5
 8008b9a:	46d9      	mov	r9, fp
 8008b9c:	bfcc      	ite	gt
 8008b9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ba2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	4652      	mov	r2, sl
 8008baa:	4620      	mov	r0, r4
 8008bac:	4639      	mov	r1, r7
 8008bae:	f7f7 fe4d 	bl	800084c <__aeabi_ddiv>
 8008bb2:	ec41 0b10 	vmov	d0, r0, r1
 8008bb6:	b005      	add	sp, #20
 8008bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bbc <__copybits>:
 8008bbc:	3901      	subs	r1, #1
 8008bbe:	b570      	push	{r4, r5, r6, lr}
 8008bc0:	1149      	asrs	r1, r1, #5
 8008bc2:	6914      	ldr	r4, [r2, #16]
 8008bc4:	3101      	adds	r1, #1
 8008bc6:	f102 0314 	add.w	r3, r2, #20
 8008bca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008bce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bd2:	1f05      	subs	r5, r0, #4
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	d30c      	bcc.n	8008bf2 <__copybits+0x36>
 8008bd8:	1aa3      	subs	r3, r4, r2
 8008bda:	3b11      	subs	r3, #17
 8008bdc:	f023 0303 	bic.w	r3, r3, #3
 8008be0:	3211      	adds	r2, #17
 8008be2:	42a2      	cmp	r2, r4
 8008be4:	bf88      	it	hi
 8008be6:	2300      	movhi	r3, #0
 8008be8:	4418      	add	r0, r3
 8008bea:	2300      	movs	r3, #0
 8008bec:	4288      	cmp	r0, r1
 8008bee:	d305      	bcc.n	8008bfc <__copybits+0x40>
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
 8008bf2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008bf6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008bfa:	e7eb      	b.n	8008bd4 <__copybits+0x18>
 8008bfc:	f840 3b04 	str.w	r3, [r0], #4
 8008c00:	e7f4      	b.n	8008bec <__copybits+0x30>

08008c02 <__any_on>:
 8008c02:	f100 0214 	add.w	r2, r0, #20
 8008c06:	6900      	ldr	r0, [r0, #16]
 8008c08:	114b      	asrs	r3, r1, #5
 8008c0a:	4298      	cmp	r0, r3
 8008c0c:	b510      	push	{r4, lr}
 8008c0e:	db11      	blt.n	8008c34 <__any_on+0x32>
 8008c10:	dd0a      	ble.n	8008c28 <__any_on+0x26>
 8008c12:	f011 011f 	ands.w	r1, r1, #31
 8008c16:	d007      	beq.n	8008c28 <__any_on+0x26>
 8008c18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c1c:	fa24 f001 	lsr.w	r0, r4, r1
 8008c20:	fa00 f101 	lsl.w	r1, r0, r1
 8008c24:	428c      	cmp	r4, r1
 8008c26:	d10b      	bne.n	8008c40 <__any_on+0x3e>
 8008c28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d803      	bhi.n	8008c38 <__any_on+0x36>
 8008c30:	2000      	movs	r0, #0
 8008c32:	bd10      	pop	{r4, pc}
 8008c34:	4603      	mov	r3, r0
 8008c36:	e7f7      	b.n	8008c28 <__any_on+0x26>
 8008c38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	d0f5      	beq.n	8008c2c <__any_on+0x2a>
 8008c40:	2001      	movs	r0, #1
 8008c42:	e7f6      	b.n	8008c32 <__any_on+0x30>

08008c44 <sulp>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	4604      	mov	r4, r0
 8008c48:	460d      	mov	r5, r1
 8008c4a:	ec45 4b10 	vmov	d0, r4, r5
 8008c4e:	4616      	mov	r6, r2
 8008c50:	f7ff feba 	bl	80089c8 <__ulp>
 8008c54:	ec51 0b10 	vmov	r0, r1, d0
 8008c58:	b17e      	cbz	r6, 8008c7a <sulp+0x36>
 8008c5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008c5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	dd09      	ble.n	8008c7a <sulp+0x36>
 8008c66:	051b      	lsls	r3, r3, #20
 8008c68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008c6c:	2400      	movs	r4, #0
 8008c6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008c72:	4622      	mov	r2, r4
 8008c74:	462b      	mov	r3, r5
 8008c76:	f7f7 fcbf 	bl	80005f8 <__aeabi_dmul>
 8008c7a:	ec41 0b10 	vmov	d0, r0, r1
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}

08008c80 <_strtod_l>:
 8008c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c84:	b09f      	sub	sp, #124	@ 0x7c
 8008c86:	460c      	mov	r4, r1
 8008c88:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008c8e:	9005      	str	r0, [sp, #20]
 8008c90:	f04f 0a00 	mov.w	sl, #0
 8008c94:	f04f 0b00 	mov.w	fp, #0
 8008c98:	460a      	mov	r2, r1
 8008c9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c9c:	7811      	ldrb	r1, [r2, #0]
 8008c9e:	292b      	cmp	r1, #43	@ 0x2b
 8008ca0:	d04a      	beq.n	8008d38 <_strtod_l+0xb8>
 8008ca2:	d838      	bhi.n	8008d16 <_strtod_l+0x96>
 8008ca4:	290d      	cmp	r1, #13
 8008ca6:	d832      	bhi.n	8008d0e <_strtod_l+0x8e>
 8008ca8:	2908      	cmp	r1, #8
 8008caa:	d832      	bhi.n	8008d12 <_strtod_l+0x92>
 8008cac:	2900      	cmp	r1, #0
 8008cae:	d03b      	beq.n	8008d28 <_strtod_l+0xa8>
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008cb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008cb6:	782a      	ldrb	r2, [r5, #0]
 8008cb8:	2a30      	cmp	r2, #48	@ 0x30
 8008cba:	f040 80b3 	bne.w	8008e24 <_strtod_l+0x1a4>
 8008cbe:	786a      	ldrb	r2, [r5, #1]
 8008cc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cc4:	2a58      	cmp	r2, #88	@ 0x58
 8008cc6:	d16e      	bne.n	8008da6 <_strtod_l+0x126>
 8008cc8:	9302      	str	r3, [sp, #8]
 8008cca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	ab1a      	add	r3, sp, #104	@ 0x68
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	4a8e      	ldr	r2, [pc, #568]	@ (8008f0c <_strtod_l+0x28c>)
 8008cd4:	9805      	ldr	r0, [sp, #20]
 8008cd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008cd8:	a919      	add	r1, sp, #100	@ 0x64
 8008cda:	f001 f91b 	bl	8009f14 <__gethex>
 8008cde:	f010 060f 	ands.w	r6, r0, #15
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	d005      	beq.n	8008cf2 <_strtod_l+0x72>
 8008ce6:	2e06      	cmp	r6, #6
 8008ce8:	d128      	bne.n	8008d3c <_strtod_l+0xbc>
 8008cea:	3501      	adds	r5, #1
 8008cec:	2300      	movs	r3, #0
 8008cee:	9519      	str	r5, [sp, #100]	@ 0x64
 8008cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f040 858e 	bne.w	8009816 <_strtod_l+0xb96>
 8008cfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cfc:	b1cb      	cbz	r3, 8008d32 <_strtod_l+0xb2>
 8008cfe:	4652      	mov	r2, sl
 8008d00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008d04:	ec43 2b10 	vmov	d0, r2, r3
 8008d08:	b01f      	add	sp, #124	@ 0x7c
 8008d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0e:	2920      	cmp	r1, #32
 8008d10:	d1ce      	bne.n	8008cb0 <_strtod_l+0x30>
 8008d12:	3201      	adds	r2, #1
 8008d14:	e7c1      	b.n	8008c9a <_strtod_l+0x1a>
 8008d16:	292d      	cmp	r1, #45	@ 0x2d
 8008d18:	d1ca      	bne.n	8008cb0 <_strtod_l+0x30>
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008d1e:	1c51      	adds	r1, r2, #1
 8008d20:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d22:	7852      	ldrb	r2, [r2, #1]
 8008d24:	2a00      	cmp	r2, #0
 8008d26:	d1c5      	bne.n	8008cb4 <_strtod_l+0x34>
 8008d28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d2a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f040 8570 	bne.w	8009812 <_strtod_l+0xb92>
 8008d32:	4652      	mov	r2, sl
 8008d34:	465b      	mov	r3, fp
 8008d36:	e7e5      	b.n	8008d04 <_strtod_l+0x84>
 8008d38:	2100      	movs	r1, #0
 8008d3a:	e7ef      	b.n	8008d1c <_strtod_l+0x9c>
 8008d3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008d3e:	b13a      	cbz	r2, 8008d50 <_strtod_l+0xd0>
 8008d40:	2135      	movs	r1, #53	@ 0x35
 8008d42:	a81c      	add	r0, sp, #112	@ 0x70
 8008d44:	f7ff ff3a 	bl	8008bbc <__copybits>
 8008d48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d4a:	9805      	ldr	r0, [sp, #20]
 8008d4c:	f7ff fb08 	bl	8008360 <_Bfree>
 8008d50:	3e01      	subs	r6, #1
 8008d52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008d54:	2e04      	cmp	r6, #4
 8008d56:	d806      	bhi.n	8008d66 <_strtod_l+0xe6>
 8008d58:	e8df f006 	tbb	[pc, r6]
 8008d5c:	201d0314 	.word	0x201d0314
 8008d60:	14          	.byte	0x14
 8008d61:	00          	.byte	0x00
 8008d62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008d66:	05e1      	lsls	r1, r4, #23
 8008d68:	bf48      	it	mi
 8008d6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008d6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d72:	0d1b      	lsrs	r3, r3, #20
 8008d74:	051b      	lsls	r3, r3, #20
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1bb      	bne.n	8008cf2 <_strtod_l+0x72>
 8008d7a:	f7fe fb21 	bl	80073c0 <__errno>
 8008d7e:	2322      	movs	r3, #34	@ 0x22
 8008d80:	6003      	str	r3, [r0, #0]
 8008d82:	e7b6      	b.n	8008cf2 <_strtod_l+0x72>
 8008d84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008d88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008d8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d94:	e7e7      	b.n	8008d66 <_strtod_l+0xe6>
 8008d96:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008f14 <_strtod_l+0x294>
 8008d9a:	e7e4      	b.n	8008d66 <_strtod_l+0xe6>
 8008d9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008da0:	f04f 3aff 	mov.w	sl, #4294967295
 8008da4:	e7df      	b.n	8008d66 <_strtod_l+0xe6>
 8008da6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dac:	785b      	ldrb	r3, [r3, #1]
 8008dae:	2b30      	cmp	r3, #48	@ 0x30
 8008db0:	d0f9      	beq.n	8008da6 <_strtod_l+0x126>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d09d      	beq.n	8008cf2 <_strtod_l+0x72>
 8008db6:	2301      	movs	r3, #1
 8008db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9308      	str	r3, [sp, #32]
 8008dc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dc4:	461f      	mov	r7, r3
 8008dc6:	220a      	movs	r2, #10
 8008dc8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008dca:	7805      	ldrb	r5, [r0, #0]
 8008dcc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008dd0:	b2d9      	uxtb	r1, r3
 8008dd2:	2909      	cmp	r1, #9
 8008dd4:	d928      	bls.n	8008e28 <_strtod_l+0x1a8>
 8008dd6:	494e      	ldr	r1, [pc, #312]	@ (8008f10 <_strtod_l+0x290>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f000 ffd5 	bl	8009d88 <strncmp>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d032      	beq.n	8008e48 <_strtod_l+0x1c8>
 8008de2:	2000      	movs	r0, #0
 8008de4:	462a      	mov	r2, r5
 8008de6:	4681      	mov	r9, r0
 8008de8:	463d      	mov	r5, r7
 8008dea:	4603      	mov	r3, r0
 8008dec:	2a65      	cmp	r2, #101	@ 0x65
 8008dee:	d001      	beq.n	8008df4 <_strtod_l+0x174>
 8008df0:	2a45      	cmp	r2, #69	@ 0x45
 8008df2:	d114      	bne.n	8008e1e <_strtod_l+0x19e>
 8008df4:	b91d      	cbnz	r5, 8008dfe <_strtod_l+0x17e>
 8008df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df8:	4302      	orrs	r2, r0
 8008dfa:	d095      	beq.n	8008d28 <_strtod_l+0xa8>
 8008dfc:	2500      	movs	r5, #0
 8008dfe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008e00:	1c62      	adds	r2, r4, #1
 8008e02:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e04:	7862      	ldrb	r2, [r4, #1]
 8008e06:	2a2b      	cmp	r2, #43	@ 0x2b
 8008e08:	d077      	beq.n	8008efa <_strtod_l+0x27a>
 8008e0a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008e0c:	d07b      	beq.n	8008f06 <_strtod_l+0x286>
 8008e0e:	f04f 0c00 	mov.w	ip, #0
 8008e12:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008e16:	2909      	cmp	r1, #9
 8008e18:	f240 8082 	bls.w	8008f20 <_strtod_l+0x2a0>
 8008e1c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008e1e:	f04f 0800 	mov.w	r8, #0
 8008e22:	e0a2      	b.n	8008f6a <_strtod_l+0x2ea>
 8008e24:	2300      	movs	r3, #0
 8008e26:	e7c7      	b.n	8008db8 <_strtod_l+0x138>
 8008e28:	2f08      	cmp	r7, #8
 8008e2a:	bfd5      	itete	le
 8008e2c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008e2e:	9908      	ldrgt	r1, [sp, #32]
 8008e30:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e34:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008e38:	f100 0001 	add.w	r0, r0, #1
 8008e3c:	bfd4      	ite	le
 8008e3e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008e40:	9308      	strgt	r3, [sp, #32]
 8008e42:	3701      	adds	r7, #1
 8008e44:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e46:	e7bf      	b.n	8008dc8 <_strtod_l+0x148>
 8008e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e4e:	785a      	ldrb	r2, [r3, #1]
 8008e50:	b37f      	cbz	r7, 8008eb2 <_strtod_l+0x232>
 8008e52:	4681      	mov	r9, r0
 8008e54:	463d      	mov	r5, r7
 8008e56:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008e5a:	2b09      	cmp	r3, #9
 8008e5c:	d912      	bls.n	8008e84 <_strtod_l+0x204>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e7c4      	b.n	8008dec <_strtod_l+0x16c>
 8008e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e68:	785a      	ldrb	r2, [r3, #1]
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	2a30      	cmp	r2, #48	@ 0x30
 8008e6e:	d0f8      	beq.n	8008e62 <_strtod_l+0x1e2>
 8008e70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	f200 84d3 	bhi.w	8009820 <_strtod_l+0xba0>
 8008e7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e7e:	4681      	mov	r9, r0
 8008e80:	2000      	movs	r0, #0
 8008e82:	4605      	mov	r5, r0
 8008e84:	3a30      	subs	r2, #48	@ 0x30
 8008e86:	f100 0301 	add.w	r3, r0, #1
 8008e8a:	d02a      	beq.n	8008ee2 <_strtod_l+0x262>
 8008e8c:	4499      	add	r9, r3
 8008e8e:	eb00 0c05 	add.w	ip, r0, r5
 8008e92:	462b      	mov	r3, r5
 8008e94:	210a      	movs	r1, #10
 8008e96:	4563      	cmp	r3, ip
 8008e98:	d10d      	bne.n	8008eb6 <_strtod_l+0x236>
 8008e9a:	1c69      	adds	r1, r5, #1
 8008e9c:	4401      	add	r1, r0
 8008e9e:	4428      	add	r0, r5
 8008ea0:	2808      	cmp	r0, #8
 8008ea2:	dc16      	bgt.n	8008ed2 <_strtod_l+0x252>
 8008ea4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ea6:	230a      	movs	r3, #10
 8008ea8:	fb03 2300 	mla	r3, r3, r0, r2
 8008eac:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e018      	b.n	8008ee4 <_strtod_l+0x264>
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	e7da      	b.n	8008e6c <_strtod_l+0x1ec>
 8008eb6:	2b08      	cmp	r3, #8
 8008eb8:	f103 0301 	add.w	r3, r3, #1
 8008ebc:	dc03      	bgt.n	8008ec6 <_strtod_l+0x246>
 8008ebe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008ec0:	434e      	muls	r6, r1
 8008ec2:	960a      	str	r6, [sp, #40]	@ 0x28
 8008ec4:	e7e7      	b.n	8008e96 <_strtod_l+0x216>
 8008ec6:	2b10      	cmp	r3, #16
 8008ec8:	bfde      	ittt	le
 8008eca:	9e08      	ldrle	r6, [sp, #32]
 8008ecc:	434e      	mulle	r6, r1
 8008ece:	9608      	strle	r6, [sp, #32]
 8008ed0:	e7e1      	b.n	8008e96 <_strtod_l+0x216>
 8008ed2:	280f      	cmp	r0, #15
 8008ed4:	dceb      	bgt.n	8008eae <_strtod_l+0x22e>
 8008ed6:	9808      	ldr	r0, [sp, #32]
 8008ed8:	230a      	movs	r3, #10
 8008eda:	fb03 2300 	mla	r3, r3, r0, r2
 8008ede:	9308      	str	r3, [sp, #32]
 8008ee0:	e7e5      	b.n	8008eae <_strtod_l+0x22e>
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ee6:	1c50      	adds	r0, r2, #1
 8008ee8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008eea:	7852      	ldrb	r2, [r2, #1]
 8008eec:	4618      	mov	r0, r3
 8008eee:	460d      	mov	r5, r1
 8008ef0:	e7b1      	b.n	8008e56 <_strtod_l+0x1d6>
 8008ef2:	f04f 0900 	mov.w	r9, #0
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e77d      	b.n	8008df6 <_strtod_l+0x176>
 8008efa:	f04f 0c00 	mov.w	ip, #0
 8008efe:	1ca2      	adds	r2, r4, #2
 8008f00:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f02:	78a2      	ldrb	r2, [r4, #2]
 8008f04:	e785      	b.n	8008e12 <_strtod_l+0x192>
 8008f06:	f04f 0c01 	mov.w	ip, #1
 8008f0a:	e7f8      	b.n	8008efe <_strtod_l+0x27e>
 8008f0c:	0800b418 	.word	0x0800b418
 8008f10:	0800b400 	.word	0x0800b400
 8008f14:	7ff00000 	.word	0x7ff00000
 8008f18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f1a:	1c51      	adds	r1, r2, #1
 8008f1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f1e:	7852      	ldrb	r2, [r2, #1]
 8008f20:	2a30      	cmp	r2, #48	@ 0x30
 8008f22:	d0f9      	beq.n	8008f18 <_strtod_l+0x298>
 8008f24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008f28:	2908      	cmp	r1, #8
 8008f2a:	f63f af78 	bhi.w	8008e1e <_strtod_l+0x19e>
 8008f2e:	3a30      	subs	r2, #48	@ 0x30
 8008f30:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f34:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008f36:	f04f 080a 	mov.w	r8, #10
 8008f3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f3c:	1c56      	adds	r6, r2, #1
 8008f3e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008f40:	7852      	ldrb	r2, [r2, #1]
 8008f42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008f46:	f1be 0f09 	cmp.w	lr, #9
 8008f4a:	d939      	bls.n	8008fc0 <_strtod_l+0x340>
 8008f4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008f4e:	1a76      	subs	r6, r6, r1
 8008f50:	2e08      	cmp	r6, #8
 8008f52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008f56:	dc03      	bgt.n	8008f60 <_strtod_l+0x2e0>
 8008f58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f5a:	4588      	cmp	r8, r1
 8008f5c:	bfa8      	it	ge
 8008f5e:	4688      	movge	r8, r1
 8008f60:	f1bc 0f00 	cmp.w	ip, #0
 8008f64:	d001      	beq.n	8008f6a <_strtod_l+0x2ea>
 8008f66:	f1c8 0800 	rsb	r8, r8, #0
 8008f6a:	2d00      	cmp	r5, #0
 8008f6c:	d14e      	bne.n	800900c <_strtod_l+0x38c>
 8008f6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f70:	4308      	orrs	r0, r1
 8008f72:	f47f aebe 	bne.w	8008cf2 <_strtod_l+0x72>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f47f aed6 	bne.w	8008d28 <_strtod_l+0xa8>
 8008f7c:	2a69      	cmp	r2, #105	@ 0x69
 8008f7e:	d028      	beq.n	8008fd2 <_strtod_l+0x352>
 8008f80:	dc25      	bgt.n	8008fce <_strtod_l+0x34e>
 8008f82:	2a49      	cmp	r2, #73	@ 0x49
 8008f84:	d025      	beq.n	8008fd2 <_strtod_l+0x352>
 8008f86:	2a4e      	cmp	r2, #78	@ 0x4e
 8008f88:	f47f aece 	bne.w	8008d28 <_strtod_l+0xa8>
 8008f8c:	499b      	ldr	r1, [pc, #620]	@ (80091fc <_strtod_l+0x57c>)
 8008f8e:	a819      	add	r0, sp, #100	@ 0x64
 8008f90:	f001 f9e2 	bl	800a358 <__match>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	f43f aec7 	beq.w	8008d28 <_strtod_l+0xa8>
 8008f9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b28      	cmp	r3, #40	@ 0x28
 8008fa0:	d12e      	bne.n	8009000 <_strtod_l+0x380>
 8008fa2:	4997      	ldr	r1, [pc, #604]	@ (8009200 <_strtod_l+0x580>)
 8008fa4:	aa1c      	add	r2, sp, #112	@ 0x70
 8008fa6:	a819      	add	r0, sp, #100	@ 0x64
 8008fa8:	f001 f9ea 	bl	800a380 <__hexnan>
 8008fac:	2805      	cmp	r0, #5
 8008fae:	d127      	bne.n	8009000 <_strtod_l+0x380>
 8008fb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008fb2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008fb6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008fba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008fbe:	e698      	b.n	8008cf2 <_strtod_l+0x72>
 8008fc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008fc2:	fb08 2101 	mla	r1, r8, r1, r2
 8008fc6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008fca:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fcc:	e7b5      	b.n	8008f3a <_strtod_l+0x2ba>
 8008fce:	2a6e      	cmp	r2, #110	@ 0x6e
 8008fd0:	e7da      	b.n	8008f88 <_strtod_l+0x308>
 8008fd2:	498c      	ldr	r1, [pc, #560]	@ (8009204 <_strtod_l+0x584>)
 8008fd4:	a819      	add	r0, sp, #100	@ 0x64
 8008fd6:	f001 f9bf 	bl	800a358 <__match>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f43f aea4 	beq.w	8008d28 <_strtod_l+0xa8>
 8008fe0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fe2:	4989      	ldr	r1, [pc, #548]	@ (8009208 <_strtod_l+0x588>)
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	a819      	add	r0, sp, #100	@ 0x64
 8008fe8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008fea:	f001 f9b5 	bl	800a358 <__match>
 8008fee:	b910      	cbnz	r0, 8008ff6 <_strtod_l+0x376>
 8008ff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	9319      	str	r3, [sp, #100]	@ 0x64
 8008ff6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009218 <_strtod_l+0x598>
 8008ffa:	f04f 0a00 	mov.w	sl, #0
 8008ffe:	e678      	b.n	8008cf2 <_strtod_l+0x72>
 8009000:	4882      	ldr	r0, [pc, #520]	@ (800920c <_strtod_l+0x58c>)
 8009002:	f000 fee5 	bl	8009dd0 <nan>
 8009006:	ec5b ab10 	vmov	sl, fp, d0
 800900a:	e672      	b.n	8008cf2 <_strtod_l+0x72>
 800900c:	eba8 0309 	sub.w	r3, r8, r9
 8009010:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009012:	9309      	str	r3, [sp, #36]	@ 0x24
 8009014:	2f00      	cmp	r7, #0
 8009016:	bf08      	it	eq
 8009018:	462f      	moveq	r7, r5
 800901a:	2d10      	cmp	r5, #16
 800901c:	462c      	mov	r4, r5
 800901e:	bfa8      	it	ge
 8009020:	2410      	movge	r4, #16
 8009022:	f7f7 fa6f 	bl	8000504 <__aeabi_ui2d>
 8009026:	2d09      	cmp	r5, #9
 8009028:	4682      	mov	sl, r0
 800902a:	468b      	mov	fp, r1
 800902c:	dc13      	bgt.n	8009056 <_strtod_l+0x3d6>
 800902e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	f43f ae5e 	beq.w	8008cf2 <_strtod_l+0x72>
 8009036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009038:	dd78      	ble.n	800912c <_strtod_l+0x4ac>
 800903a:	2b16      	cmp	r3, #22
 800903c:	dc5f      	bgt.n	80090fe <_strtod_l+0x47e>
 800903e:	4974      	ldr	r1, [pc, #464]	@ (8009210 <_strtod_l+0x590>)
 8009040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009048:	4652      	mov	r2, sl
 800904a:	465b      	mov	r3, fp
 800904c:	f7f7 fad4 	bl	80005f8 <__aeabi_dmul>
 8009050:	4682      	mov	sl, r0
 8009052:	468b      	mov	fp, r1
 8009054:	e64d      	b.n	8008cf2 <_strtod_l+0x72>
 8009056:	4b6e      	ldr	r3, [pc, #440]	@ (8009210 <_strtod_l+0x590>)
 8009058:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800905c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009060:	f7f7 faca 	bl	80005f8 <__aeabi_dmul>
 8009064:	4682      	mov	sl, r0
 8009066:	9808      	ldr	r0, [sp, #32]
 8009068:	468b      	mov	fp, r1
 800906a:	f7f7 fa4b 	bl	8000504 <__aeabi_ui2d>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4650      	mov	r0, sl
 8009074:	4659      	mov	r1, fp
 8009076:	f7f7 f909 	bl	800028c <__adddf3>
 800907a:	2d0f      	cmp	r5, #15
 800907c:	4682      	mov	sl, r0
 800907e:	468b      	mov	fp, r1
 8009080:	ddd5      	ble.n	800902e <_strtod_l+0x3ae>
 8009082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009084:	1b2c      	subs	r4, r5, r4
 8009086:	441c      	add	r4, r3
 8009088:	2c00      	cmp	r4, #0
 800908a:	f340 8096 	ble.w	80091ba <_strtod_l+0x53a>
 800908e:	f014 030f 	ands.w	r3, r4, #15
 8009092:	d00a      	beq.n	80090aa <_strtod_l+0x42a>
 8009094:	495e      	ldr	r1, [pc, #376]	@ (8009210 <_strtod_l+0x590>)
 8009096:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800909a:	4652      	mov	r2, sl
 800909c:	465b      	mov	r3, fp
 800909e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090a2:	f7f7 faa9 	bl	80005f8 <__aeabi_dmul>
 80090a6:	4682      	mov	sl, r0
 80090a8:	468b      	mov	fp, r1
 80090aa:	f034 040f 	bics.w	r4, r4, #15
 80090ae:	d073      	beq.n	8009198 <_strtod_l+0x518>
 80090b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80090b4:	dd48      	ble.n	8009148 <_strtod_l+0x4c8>
 80090b6:	2400      	movs	r4, #0
 80090b8:	46a0      	mov	r8, r4
 80090ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80090bc:	46a1      	mov	r9, r4
 80090be:	9a05      	ldr	r2, [sp, #20]
 80090c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009218 <_strtod_l+0x598>
 80090c4:	2322      	movs	r3, #34	@ 0x22
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	f04f 0a00 	mov.w	sl, #0
 80090cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f43f ae0f 	beq.w	8008cf2 <_strtod_l+0x72>
 80090d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090d6:	9805      	ldr	r0, [sp, #20]
 80090d8:	f7ff f942 	bl	8008360 <_Bfree>
 80090dc:	9805      	ldr	r0, [sp, #20]
 80090de:	4649      	mov	r1, r9
 80090e0:	f7ff f93e 	bl	8008360 <_Bfree>
 80090e4:	9805      	ldr	r0, [sp, #20]
 80090e6:	4641      	mov	r1, r8
 80090e8:	f7ff f93a 	bl	8008360 <_Bfree>
 80090ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090ee:	9805      	ldr	r0, [sp, #20]
 80090f0:	f7ff f936 	bl	8008360 <_Bfree>
 80090f4:	9805      	ldr	r0, [sp, #20]
 80090f6:	4621      	mov	r1, r4
 80090f8:	f7ff f932 	bl	8008360 <_Bfree>
 80090fc:	e5f9      	b.n	8008cf2 <_strtod_l+0x72>
 80090fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009100:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009104:	4293      	cmp	r3, r2
 8009106:	dbbc      	blt.n	8009082 <_strtod_l+0x402>
 8009108:	4c41      	ldr	r4, [pc, #260]	@ (8009210 <_strtod_l+0x590>)
 800910a:	f1c5 050f 	rsb	r5, r5, #15
 800910e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009112:	4652      	mov	r2, sl
 8009114:	465b      	mov	r3, fp
 8009116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800911a:	f7f7 fa6d 	bl	80005f8 <__aeabi_dmul>
 800911e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009120:	1b5d      	subs	r5, r3, r5
 8009122:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009126:	e9d4 2300 	ldrd	r2, r3, [r4]
 800912a:	e78f      	b.n	800904c <_strtod_l+0x3cc>
 800912c:	3316      	adds	r3, #22
 800912e:	dba8      	blt.n	8009082 <_strtod_l+0x402>
 8009130:	4b37      	ldr	r3, [pc, #220]	@ (8009210 <_strtod_l+0x590>)
 8009132:	eba9 0808 	sub.w	r8, r9, r8
 8009136:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800913a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800913e:	4650      	mov	r0, sl
 8009140:	4659      	mov	r1, fp
 8009142:	f7f7 fb83 	bl	800084c <__aeabi_ddiv>
 8009146:	e783      	b.n	8009050 <_strtod_l+0x3d0>
 8009148:	4b32      	ldr	r3, [pc, #200]	@ (8009214 <_strtod_l+0x594>)
 800914a:	9308      	str	r3, [sp, #32]
 800914c:	2300      	movs	r3, #0
 800914e:	1124      	asrs	r4, r4, #4
 8009150:	4650      	mov	r0, sl
 8009152:	4659      	mov	r1, fp
 8009154:	461e      	mov	r6, r3
 8009156:	2c01      	cmp	r4, #1
 8009158:	dc21      	bgt.n	800919e <_strtod_l+0x51e>
 800915a:	b10b      	cbz	r3, 8009160 <_strtod_l+0x4e0>
 800915c:	4682      	mov	sl, r0
 800915e:	468b      	mov	fp, r1
 8009160:	492c      	ldr	r1, [pc, #176]	@ (8009214 <_strtod_l+0x594>)
 8009162:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009166:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800916a:	4652      	mov	r2, sl
 800916c:	465b      	mov	r3, fp
 800916e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009172:	f7f7 fa41 	bl	80005f8 <__aeabi_dmul>
 8009176:	4b28      	ldr	r3, [pc, #160]	@ (8009218 <_strtod_l+0x598>)
 8009178:	460a      	mov	r2, r1
 800917a:	400b      	ands	r3, r1
 800917c:	4927      	ldr	r1, [pc, #156]	@ (800921c <_strtod_l+0x59c>)
 800917e:	428b      	cmp	r3, r1
 8009180:	4682      	mov	sl, r0
 8009182:	d898      	bhi.n	80090b6 <_strtod_l+0x436>
 8009184:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009188:	428b      	cmp	r3, r1
 800918a:	bf86      	itte	hi
 800918c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009220 <_strtod_l+0x5a0>
 8009190:	f04f 3aff 	movhi.w	sl, #4294967295
 8009194:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009198:	2300      	movs	r3, #0
 800919a:	9308      	str	r3, [sp, #32]
 800919c:	e07a      	b.n	8009294 <_strtod_l+0x614>
 800919e:	07e2      	lsls	r2, r4, #31
 80091a0:	d505      	bpl.n	80091ae <_strtod_l+0x52e>
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f7f7 fa26 	bl	80005f8 <__aeabi_dmul>
 80091ac:	2301      	movs	r3, #1
 80091ae:	9a08      	ldr	r2, [sp, #32]
 80091b0:	3208      	adds	r2, #8
 80091b2:	3601      	adds	r6, #1
 80091b4:	1064      	asrs	r4, r4, #1
 80091b6:	9208      	str	r2, [sp, #32]
 80091b8:	e7cd      	b.n	8009156 <_strtod_l+0x4d6>
 80091ba:	d0ed      	beq.n	8009198 <_strtod_l+0x518>
 80091bc:	4264      	negs	r4, r4
 80091be:	f014 020f 	ands.w	r2, r4, #15
 80091c2:	d00a      	beq.n	80091da <_strtod_l+0x55a>
 80091c4:	4b12      	ldr	r3, [pc, #72]	@ (8009210 <_strtod_l+0x590>)
 80091c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091ca:	4650      	mov	r0, sl
 80091cc:	4659      	mov	r1, fp
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f7f7 fb3b 	bl	800084c <__aeabi_ddiv>
 80091d6:	4682      	mov	sl, r0
 80091d8:	468b      	mov	fp, r1
 80091da:	1124      	asrs	r4, r4, #4
 80091dc:	d0dc      	beq.n	8009198 <_strtod_l+0x518>
 80091de:	2c1f      	cmp	r4, #31
 80091e0:	dd20      	ble.n	8009224 <_strtod_l+0x5a4>
 80091e2:	2400      	movs	r4, #0
 80091e4:	46a0      	mov	r8, r4
 80091e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80091e8:	46a1      	mov	r9, r4
 80091ea:	9a05      	ldr	r2, [sp, #20]
 80091ec:	2322      	movs	r3, #34	@ 0x22
 80091ee:	f04f 0a00 	mov.w	sl, #0
 80091f2:	f04f 0b00 	mov.w	fp, #0
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	e768      	b.n	80090cc <_strtod_l+0x44c>
 80091fa:	bf00      	nop
 80091fc:	0800b1ed 	.word	0x0800b1ed
 8009200:	0800b404 	.word	0x0800b404
 8009204:	0800b1e5 	.word	0x0800b1e5
 8009208:	0800b21c 	.word	0x0800b21c
 800920c:	0800b5ad 	.word	0x0800b5ad
 8009210:	0800b338 	.word	0x0800b338
 8009214:	0800b310 	.word	0x0800b310
 8009218:	7ff00000 	.word	0x7ff00000
 800921c:	7ca00000 	.word	0x7ca00000
 8009220:	7fefffff 	.word	0x7fefffff
 8009224:	f014 0310 	ands.w	r3, r4, #16
 8009228:	bf18      	it	ne
 800922a:	236a      	movne	r3, #106	@ 0x6a
 800922c:	4ea9      	ldr	r6, [pc, #676]	@ (80094d4 <_strtod_l+0x854>)
 800922e:	9308      	str	r3, [sp, #32]
 8009230:	4650      	mov	r0, sl
 8009232:	4659      	mov	r1, fp
 8009234:	2300      	movs	r3, #0
 8009236:	07e2      	lsls	r2, r4, #31
 8009238:	d504      	bpl.n	8009244 <_strtod_l+0x5c4>
 800923a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800923e:	f7f7 f9db 	bl	80005f8 <__aeabi_dmul>
 8009242:	2301      	movs	r3, #1
 8009244:	1064      	asrs	r4, r4, #1
 8009246:	f106 0608 	add.w	r6, r6, #8
 800924a:	d1f4      	bne.n	8009236 <_strtod_l+0x5b6>
 800924c:	b10b      	cbz	r3, 8009252 <_strtod_l+0x5d2>
 800924e:	4682      	mov	sl, r0
 8009250:	468b      	mov	fp, r1
 8009252:	9b08      	ldr	r3, [sp, #32]
 8009254:	b1b3      	cbz	r3, 8009284 <_strtod_l+0x604>
 8009256:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800925a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800925e:	2b00      	cmp	r3, #0
 8009260:	4659      	mov	r1, fp
 8009262:	dd0f      	ble.n	8009284 <_strtod_l+0x604>
 8009264:	2b1f      	cmp	r3, #31
 8009266:	dd55      	ble.n	8009314 <_strtod_l+0x694>
 8009268:	2b34      	cmp	r3, #52	@ 0x34
 800926a:	bfde      	ittt	le
 800926c:	f04f 33ff 	movle.w	r3, #4294967295
 8009270:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009274:	4093      	lslle	r3, r2
 8009276:	f04f 0a00 	mov.w	sl, #0
 800927a:	bfcc      	ite	gt
 800927c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009280:	ea03 0b01 	andle.w	fp, r3, r1
 8009284:	2200      	movs	r2, #0
 8009286:	2300      	movs	r3, #0
 8009288:	4650      	mov	r0, sl
 800928a:	4659      	mov	r1, fp
 800928c:	f7f7 fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009290:	2800      	cmp	r0, #0
 8009292:	d1a6      	bne.n	80091e2 <_strtod_l+0x562>
 8009294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800929a:	9805      	ldr	r0, [sp, #20]
 800929c:	462b      	mov	r3, r5
 800929e:	463a      	mov	r2, r7
 80092a0:	f7ff f8c6 	bl	8008430 <__s2b>
 80092a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f43f af05 	beq.w	80090b6 <_strtod_l+0x436>
 80092ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	eba9 0308 	sub.w	r3, r9, r8
 80092b4:	bfa8      	it	ge
 80092b6:	2300      	movge	r3, #0
 80092b8:	9312      	str	r3, [sp, #72]	@ 0x48
 80092ba:	2400      	movs	r4, #0
 80092bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80092c0:	9316      	str	r3, [sp, #88]	@ 0x58
 80092c2:	46a0      	mov	r8, r4
 80092c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092c6:	9805      	ldr	r0, [sp, #20]
 80092c8:	6859      	ldr	r1, [r3, #4]
 80092ca:	f7ff f809 	bl	80082e0 <_Balloc>
 80092ce:	4681      	mov	r9, r0
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f43f aef4 	beq.w	80090be <_strtod_l+0x43e>
 80092d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092d8:	691a      	ldr	r2, [r3, #16]
 80092da:	3202      	adds	r2, #2
 80092dc:	f103 010c 	add.w	r1, r3, #12
 80092e0:	0092      	lsls	r2, r2, #2
 80092e2:	300c      	adds	r0, #12
 80092e4:	f7fe f899 	bl	800741a <memcpy>
 80092e8:	ec4b ab10 	vmov	d0, sl, fp
 80092ec:	9805      	ldr	r0, [sp, #20]
 80092ee:	aa1c      	add	r2, sp, #112	@ 0x70
 80092f0:	a91b      	add	r1, sp, #108	@ 0x6c
 80092f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80092f6:	f7ff fbd7 	bl	8008aa8 <__d2b>
 80092fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80092fc:	2800      	cmp	r0, #0
 80092fe:	f43f aede 	beq.w	80090be <_strtod_l+0x43e>
 8009302:	9805      	ldr	r0, [sp, #20]
 8009304:	2101      	movs	r1, #1
 8009306:	f7ff f929 	bl	800855c <__i2b>
 800930a:	4680      	mov	r8, r0
 800930c:	b948      	cbnz	r0, 8009322 <_strtod_l+0x6a2>
 800930e:	f04f 0800 	mov.w	r8, #0
 8009312:	e6d4      	b.n	80090be <_strtod_l+0x43e>
 8009314:	f04f 32ff 	mov.w	r2, #4294967295
 8009318:	fa02 f303 	lsl.w	r3, r2, r3
 800931c:	ea03 0a0a 	and.w	sl, r3, sl
 8009320:	e7b0      	b.n	8009284 <_strtod_l+0x604>
 8009322:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009324:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009326:	2d00      	cmp	r5, #0
 8009328:	bfab      	itete	ge
 800932a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800932c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800932e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009330:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009332:	bfac      	ite	ge
 8009334:	18ef      	addge	r7, r5, r3
 8009336:	1b5e      	sublt	r6, r3, r5
 8009338:	9b08      	ldr	r3, [sp, #32]
 800933a:	1aed      	subs	r5, r5, r3
 800933c:	4415      	add	r5, r2
 800933e:	4b66      	ldr	r3, [pc, #408]	@ (80094d8 <_strtod_l+0x858>)
 8009340:	3d01      	subs	r5, #1
 8009342:	429d      	cmp	r5, r3
 8009344:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009348:	da50      	bge.n	80093ec <_strtod_l+0x76c>
 800934a:	1b5b      	subs	r3, r3, r5
 800934c:	2b1f      	cmp	r3, #31
 800934e:	eba2 0203 	sub.w	r2, r2, r3
 8009352:	f04f 0101 	mov.w	r1, #1
 8009356:	dc3d      	bgt.n	80093d4 <_strtod_l+0x754>
 8009358:	fa01 f303 	lsl.w	r3, r1, r3
 800935c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800935e:	2300      	movs	r3, #0
 8009360:	9310      	str	r3, [sp, #64]	@ 0x40
 8009362:	18bd      	adds	r5, r7, r2
 8009364:	9b08      	ldr	r3, [sp, #32]
 8009366:	42af      	cmp	r7, r5
 8009368:	4416      	add	r6, r2
 800936a:	441e      	add	r6, r3
 800936c:	463b      	mov	r3, r7
 800936e:	bfa8      	it	ge
 8009370:	462b      	movge	r3, r5
 8009372:	42b3      	cmp	r3, r6
 8009374:	bfa8      	it	ge
 8009376:	4633      	movge	r3, r6
 8009378:	2b00      	cmp	r3, #0
 800937a:	bfc2      	ittt	gt
 800937c:	1aed      	subgt	r5, r5, r3
 800937e:	1af6      	subgt	r6, r6, r3
 8009380:	1aff      	subgt	r7, r7, r3
 8009382:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009384:	2b00      	cmp	r3, #0
 8009386:	dd16      	ble.n	80093b6 <_strtod_l+0x736>
 8009388:	4641      	mov	r1, r8
 800938a:	9805      	ldr	r0, [sp, #20]
 800938c:	461a      	mov	r2, r3
 800938e:	f7ff f9a5 	bl	80086dc <__pow5mult>
 8009392:	4680      	mov	r8, r0
 8009394:	2800      	cmp	r0, #0
 8009396:	d0ba      	beq.n	800930e <_strtod_l+0x68e>
 8009398:	4601      	mov	r1, r0
 800939a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800939c:	9805      	ldr	r0, [sp, #20]
 800939e:	f7ff f8f3 	bl	8008588 <__multiply>
 80093a2:	900e      	str	r0, [sp, #56]	@ 0x38
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f43f ae8a 	beq.w	80090be <_strtod_l+0x43e>
 80093aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093ac:	9805      	ldr	r0, [sp, #20]
 80093ae:	f7fe ffd7 	bl	8008360 <_Bfree>
 80093b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80093b6:	2d00      	cmp	r5, #0
 80093b8:	dc1d      	bgt.n	80093f6 <_strtod_l+0x776>
 80093ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd23      	ble.n	8009408 <_strtod_l+0x788>
 80093c0:	4649      	mov	r1, r9
 80093c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80093c4:	9805      	ldr	r0, [sp, #20]
 80093c6:	f7ff f989 	bl	80086dc <__pow5mult>
 80093ca:	4681      	mov	r9, r0
 80093cc:	b9e0      	cbnz	r0, 8009408 <_strtod_l+0x788>
 80093ce:	f04f 0900 	mov.w	r9, #0
 80093d2:	e674      	b.n	80090be <_strtod_l+0x43e>
 80093d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80093d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80093dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80093e0:	35e2      	adds	r5, #226	@ 0xe2
 80093e2:	fa01 f305 	lsl.w	r3, r1, r5
 80093e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80093e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80093ea:	e7ba      	b.n	8009362 <_strtod_l+0x6e2>
 80093ec:	2300      	movs	r3, #0
 80093ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80093f0:	2301      	movs	r3, #1
 80093f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093f4:	e7b5      	b.n	8009362 <_strtod_l+0x6e2>
 80093f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093f8:	9805      	ldr	r0, [sp, #20]
 80093fa:	462a      	mov	r2, r5
 80093fc:	f7ff f9c8 	bl	8008790 <__lshift>
 8009400:	901a      	str	r0, [sp, #104]	@ 0x68
 8009402:	2800      	cmp	r0, #0
 8009404:	d1d9      	bne.n	80093ba <_strtod_l+0x73a>
 8009406:	e65a      	b.n	80090be <_strtod_l+0x43e>
 8009408:	2e00      	cmp	r6, #0
 800940a:	dd07      	ble.n	800941c <_strtod_l+0x79c>
 800940c:	4649      	mov	r1, r9
 800940e:	9805      	ldr	r0, [sp, #20]
 8009410:	4632      	mov	r2, r6
 8009412:	f7ff f9bd 	bl	8008790 <__lshift>
 8009416:	4681      	mov	r9, r0
 8009418:	2800      	cmp	r0, #0
 800941a:	d0d8      	beq.n	80093ce <_strtod_l+0x74e>
 800941c:	2f00      	cmp	r7, #0
 800941e:	dd08      	ble.n	8009432 <_strtod_l+0x7b2>
 8009420:	4641      	mov	r1, r8
 8009422:	9805      	ldr	r0, [sp, #20]
 8009424:	463a      	mov	r2, r7
 8009426:	f7ff f9b3 	bl	8008790 <__lshift>
 800942a:	4680      	mov	r8, r0
 800942c:	2800      	cmp	r0, #0
 800942e:	f43f ae46 	beq.w	80090be <_strtod_l+0x43e>
 8009432:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009434:	9805      	ldr	r0, [sp, #20]
 8009436:	464a      	mov	r2, r9
 8009438:	f7ff fa32 	bl	80088a0 <__mdiff>
 800943c:	4604      	mov	r4, r0
 800943e:	2800      	cmp	r0, #0
 8009440:	f43f ae3d 	beq.w	80090be <_strtod_l+0x43e>
 8009444:	68c3      	ldr	r3, [r0, #12]
 8009446:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009448:	2300      	movs	r3, #0
 800944a:	60c3      	str	r3, [r0, #12]
 800944c:	4641      	mov	r1, r8
 800944e:	f7ff fa0b 	bl	8008868 <__mcmp>
 8009452:	2800      	cmp	r0, #0
 8009454:	da46      	bge.n	80094e4 <_strtod_l+0x864>
 8009456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009458:	ea53 030a 	orrs.w	r3, r3, sl
 800945c:	d16c      	bne.n	8009538 <_strtod_l+0x8b8>
 800945e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009462:	2b00      	cmp	r3, #0
 8009464:	d168      	bne.n	8009538 <_strtod_l+0x8b8>
 8009466:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800946a:	0d1b      	lsrs	r3, r3, #20
 800946c:	051b      	lsls	r3, r3, #20
 800946e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009472:	d961      	bls.n	8009538 <_strtod_l+0x8b8>
 8009474:	6963      	ldr	r3, [r4, #20]
 8009476:	b913      	cbnz	r3, 800947e <_strtod_l+0x7fe>
 8009478:	6923      	ldr	r3, [r4, #16]
 800947a:	2b01      	cmp	r3, #1
 800947c:	dd5c      	ble.n	8009538 <_strtod_l+0x8b8>
 800947e:	4621      	mov	r1, r4
 8009480:	2201      	movs	r2, #1
 8009482:	9805      	ldr	r0, [sp, #20]
 8009484:	f7ff f984 	bl	8008790 <__lshift>
 8009488:	4641      	mov	r1, r8
 800948a:	4604      	mov	r4, r0
 800948c:	f7ff f9ec 	bl	8008868 <__mcmp>
 8009490:	2800      	cmp	r0, #0
 8009492:	dd51      	ble.n	8009538 <_strtod_l+0x8b8>
 8009494:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009498:	9a08      	ldr	r2, [sp, #32]
 800949a:	0d1b      	lsrs	r3, r3, #20
 800949c:	051b      	lsls	r3, r3, #20
 800949e:	2a00      	cmp	r2, #0
 80094a0:	d06b      	beq.n	800957a <_strtod_l+0x8fa>
 80094a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80094a6:	d868      	bhi.n	800957a <_strtod_l+0x8fa>
 80094a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80094ac:	f67f ae9d 	bls.w	80091ea <_strtod_l+0x56a>
 80094b0:	4b0a      	ldr	r3, [pc, #40]	@ (80094dc <_strtod_l+0x85c>)
 80094b2:	4650      	mov	r0, sl
 80094b4:	4659      	mov	r1, fp
 80094b6:	2200      	movs	r2, #0
 80094b8:	f7f7 f89e 	bl	80005f8 <__aeabi_dmul>
 80094bc:	4b08      	ldr	r3, [pc, #32]	@ (80094e0 <_strtod_l+0x860>)
 80094be:	400b      	ands	r3, r1
 80094c0:	4682      	mov	sl, r0
 80094c2:	468b      	mov	fp, r1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f47f ae05 	bne.w	80090d4 <_strtod_l+0x454>
 80094ca:	9a05      	ldr	r2, [sp, #20]
 80094cc:	2322      	movs	r3, #34	@ 0x22
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	e600      	b.n	80090d4 <_strtod_l+0x454>
 80094d2:	bf00      	nop
 80094d4:	0800b430 	.word	0x0800b430
 80094d8:	fffffc02 	.word	0xfffffc02
 80094dc:	39500000 	.word	0x39500000
 80094e0:	7ff00000 	.word	0x7ff00000
 80094e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80094e8:	d165      	bne.n	80095b6 <_strtod_l+0x936>
 80094ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80094ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094f0:	b35a      	cbz	r2, 800954a <_strtod_l+0x8ca>
 80094f2:	4a9f      	ldr	r2, [pc, #636]	@ (8009770 <_strtod_l+0xaf0>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d12b      	bne.n	8009550 <_strtod_l+0x8d0>
 80094f8:	9b08      	ldr	r3, [sp, #32]
 80094fa:	4651      	mov	r1, sl
 80094fc:	b303      	cbz	r3, 8009540 <_strtod_l+0x8c0>
 80094fe:	4b9d      	ldr	r3, [pc, #628]	@ (8009774 <_strtod_l+0xaf4>)
 8009500:	465a      	mov	r2, fp
 8009502:	4013      	ands	r3, r2
 8009504:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	d81b      	bhi.n	8009546 <_strtod_l+0x8c6>
 800950e:	0d1b      	lsrs	r3, r3, #20
 8009510:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	4299      	cmp	r1, r3
 800951a:	d119      	bne.n	8009550 <_strtod_l+0x8d0>
 800951c:	4b96      	ldr	r3, [pc, #600]	@ (8009778 <_strtod_l+0xaf8>)
 800951e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009520:	429a      	cmp	r2, r3
 8009522:	d102      	bne.n	800952a <_strtod_l+0x8aa>
 8009524:	3101      	adds	r1, #1
 8009526:	f43f adca 	beq.w	80090be <_strtod_l+0x43e>
 800952a:	4b92      	ldr	r3, [pc, #584]	@ (8009774 <_strtod_l+0xaf4>)
 800952c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800952e:	401a      	ands	r2, r3
 8009530:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009534:	f04f 0a00 	mov.w	sl, #0
 8009538:	9b08      	ldr	r3, [sp, #32]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1b8      	bne.n	80094b0 <_strtod_l+0x830>
 800953e:	e5c9      	b.n	80090d4 <_strtod_l+0x454>
 8009540:	f04f 33ff 	mov.w	r3, #4294967295
 8009544:	e7e8      	b.n	8009518 <_strtod_l+0x898>
 8009546:	4613      	mov	r3, r2
 8009548:	e7e6      	b.n	8009518 <_strtod_l+0x898>
 800954a:	ea53 030a 	orrs.w	r3, r3, sl
 800954e:	d0a1      	beq.n	8009494 <_strtod_l+0x814>
 8009550:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009552:	b1db      	cbz	r3, 800958c <_strtod_l+0x90c>
 8009554:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009556:	4213      	tst	r3, r2
 8009558:	d0ee      	beq.n	8009538 <_strtod_l+0x8b8>
 800955a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800955c:	9a08      	ldr	r2, [sp, #32]
 800955e:	4650      	mov	r0, sl
 8009560:	4659      	mov	r1, fp
 8009562:	b1bb      	cbz	r3, 8009594 <_strtod_l+0x914>
 8009564:	f7ff fb6e 	bl	8008c44 <sulp>
 8009568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800956c:	ec53 2b10 	vmov	r2, r3, d0
 8009570:	f7f6 fe8c 	bl	800028c <__adddf3>
 8009574:	4682      	mov	sl, r0
 8009576:	468b      	mov	fp, r1
 8009578:	e7de      	b.n	8009538 <_strtod_l+0x8b8>
 800957a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800957e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009582:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009586:	f04f 3aff 	mov.w	sl, #4294967295
 800958a:	e7d5      	b.n	8009538 <_strtod_l+0x8b8>
 800958c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800958e:	ea13 0f0a 	tst.w	r3, sl
 8009592:	e7e1      	b.n	8009558 <_strtod_l+0x8d8>
 8009594:	f7ff fb56 	bl	8008c44 <sulp>
 8009598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800959c:	ec53 2b10 	vmov	r2, r3, d0
 80095a0:	f7f6 fe72 	bl	8000288 <__aeabi_dsub>
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	4682      	mov	sl, r0
 80095aa:	468b      	mov	fp, r1
 80095ac:	f7f7 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d0c1      	beq.n	8009538 <_strtod_l+0x8b8>
 80095b4:	e619      	b.n	80091ea <_strtod_l+0x56a>
 80095b6:	4641      	mov	r1, r8
 80095b8:	4620      	mov	r0, r4
 80095ba:	f7ff facd 	bl	8008b58 <__ratio>
 80095be:	ec57 6b10 	vmov	r6, r7, d0
 80095c2:	2200      	movs	r2, #0
 80095c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80095c8:	4630      	mov	r0, r6
 80095ca:	4639      	mov	r1, r7
 80095cc:	f7f7 fa90 	bl	8000af0 <__aeabi_dcmple>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d06f      	beq.n	80096b4 <_strtod_l+0xa34>
 80095d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d17a      	bne.n	80096d0 <_strtod_l+0xa50>
 80095da:	f1ba 0f00 	cmp.w	sl, #0
 80095de:	d158      	bne.n	8009692 <_strtod_l+0xa12>
 80095e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d15a      	bne.n	80096a0 <_strtod_l+0xa20>
 80095ea:	4b64      	ldr	r3, [pc, #400]	@ (800977c <_strtod_l+0xafc>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	4630      	mov	r0, r6
 80095f0:	4639      	mov	r1, r7
 80095f2:	f7f7 fa73 	bl	8000adc <__aeabi_dcmplt>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d159      	bne.n	80096ae <_strtod_l+0xa2e>
 80095fa:	4630      	mov	r0, r6
 80095fc:	4639      	mov	r1, r7
 80095fe:	4b60      	ldr	r3, [pc, #384]	@ (8009780 <_strtod_l+0xb00>)
 8009600:	2200      	movs	r2, #0
 8009602:	f7f6 fff9 	bl	80005f8 <__aeabi_dmul>
 8009606:	4606      	mov	r6, r0
 8009608:	460f      	mov	r7, r1
 800960a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800960e:	9606      	str	r6, [sp, #24]
 8009610:	9307      	str	r3, [sp, #28]
 8009612:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009616:	4d57      	ldr	r5, [pc, #348]	@ (8009774 <_strtod_l+0xaf4>)
 8009618:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800961c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800961e:	401d      	ands	r5, r3
 8009620:	4b58      	ldr	r3, [pc, #352]	@ (8009784 <_strtod_l+0xb04>)
 8009622:	429d      	cmp	r5, r3
 8009624:	f040 80b2 	bne.w	800978c <_strtod_l+0xb0c>
 8009628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800962a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800962e:	ec4b ab10 	vmov	d0, sl, fp
 8009632:	f7ff f9c9 	bl	80089c8 <__ulp>
 8009636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800963a:	ec51 0b10 	vmov	r0, r1, d0
 800963e:	f7f6 ffdb 	bl	80005f8 <__aeabi_dmul>
 8009642:	4652      	mov	r2, sl
 8009644:	465b      	mov	r3, fp
 8009646:	f7f6 fe21 	bl	800028c <__adddf3>
 800964a:	460b      	mov	r3, r1
 800964c:	4949      	ldr	r1, [pc, #292]	@ (8009774 <_strtod_l+0xaf4>)
 800964e:	4a4e      	ldr	r2, [pc, #312]	@ (8009788 <_strtod_l+0xb08>)
 8009650:	4019      	ands	r1, r3
 8009652:	4291      	cmp	r1, r2
 8009654:	4682      	mov	sl, r0
 8009656:	d942      	bls.n	80096de <_strtod_l+0xa5e>
 8009658:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800965a:	4b47      	ldr	r3, [pc, #284]	@ (8009778 <_strtod_l+0xaf8>)
 800965c:	429a      	cmp	r2, r3
 800965e:	d103      	bne.n	8009668 <_strtod_l+0x9e8>
 8009660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009662:	3301      	adds	r3, #1
 8009664:	f43f ad2b 	beq.w	80090be <_strtod_l+0x43e>
 8009668:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009778 <_strtod_l+0xaf8>
 800966c:	f04f 3aff 	mov.w	sl, #4294967295
 8009670:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009672:	9805      	ldr	r0, [sp, #20]
 8009674:	f7fe fe74 	bl	8008360 <_Bfree>
 8009678:	9805      	ldr	r0, [sp, #20]
 800967a:	4649      	mov	r1, r9
 800967c:	f7fe fe70 	bl	8008360 <_Bfree>
 8009680:	9805      	ldr	r0, [sp, #20]
 8009682:	4641      	mov	r1, r8
 8009684:	f7fe fe6c 	bl	8008360 <_Bfree>
 8009688:	9805      	ldr	r0, [sp, #20]
 800968a:	4621      	mov	r1, r4
 800968c:	f7fe fe68 	bl	8008360 <_Bfree>
 8009690:	e618      	b.n	80092c4 <_strtod_l+0x644>
 8009692:	f1ba 0f01 	cmp.w	sl, #1
 8009696:	d103      	bne.n	80096a0 <_strtod_l+0xa20>
 8009698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800969a:	2b00      	cmp	r3, #0
 800969c:	f43f ada5 	beq.w	80091ea <_strtod_l+0x56a>
 80096a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009750 <_strtod_l+0xad0>
 80096a4:	4f35      	ldr	r7, [pc, #212]	@ (800977c <_strtod_l+0xafc>)
 80096a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096aa:	2600      	movs	r6, #0
 80096ac:	e7b1      	b.n	8009612 <_strtod_l+0x992>
 80096ae:	4f34      	ldr	r7, [pc, #208]	@ (8009780 <_strtod_l+0xb00>)
 80096b0:	2600      	movs	r6, #0
 80096b2:	e7aa      	b.n	800960a <_strtod_l+0x98a>
 80096b4:	4b32      	ldr	r3, [pc, #200]	@ (8009780 <_strtod_l+0xb00>)
 80096b6:	4630      	mov	r0, r6
 80096b8:	4639      	mov	r1, r7
 80096ba:	2200      	movs	r2, #0
 80096bc:	f7f6 ff9c 	bl	80005f8 <__aeabi_dmul>
 80096c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096c2:	4606      	mov	r6, r0
 80096c4:	460f      	mov	r7, r1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d09f      	beq.n	800960a <_strtod_l+0x98a>
 80096ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80096ce:	e7a0      	b.n	8009612 <_strtod_l+0x992>
 80096d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009758 <_strtod_l+0xad8>
 80096d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096d8:	ec57 6b17 	vmov	r6, r7, d7
 80096dc:	e799      	b.n	8009612 <_strtod_l+0x992>
 80096de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80096e2:	9b08      	ldr	r3, [sp, #32]
 80096e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1c1      	bne.n	8009670 <_strtod_l+0x9f0>
 80096ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096f0:	0d1b      	lsrs	r3, r3, #20
 80096f2:	051b      	lsls	r3, r3, #20
 80096f4:	429d      	cmp	r5, r3
 80096f6:	d1bb      	bne.n	8009670 <_strtod_l+0x9f0>
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f7 fadc 	bl	8000cb8 <__aeabi_d2lz>
 8009700:	f7f6 ff4c 	bl	800059c <__aeabi_l2d>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4630      	mov	r0, r6
 800970a:	4639      	mov	r1, r7
 800970c:	f7f6 fdbc 	bl	8000288 <__aeabi_dsub>
 8009710:	460b      	mov	r3, r1
 8009712:	4602      	mov	r2, r0
 8009714:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009718:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800971c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800971e:	ea46 060a 	orr.w	r6, r6, sl
 8009722:	431e      	orrs	r6, r3
 8009724:	d06f      	beq.n	8009806 <_strtod_l+0xb86>
 8009726:	a30e      	add	r3, pc, #56	@ (adr r3, 8009760 <_strtod_l+0xae0>)
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	f7f7 f9d6 	bl	8000adc <__aeabi_dcmplt>
 8009730:	2800      	cmp	r0, #0
 8009732:	f47f accf 	bne.w	80090d4 <_strtod_l+0x454>
 8009736:	a30c      	add	r3, pc, #48	@ (adr r3, 8009768 <_strtod_l+0xae8>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009740:	f7f7 f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 8009744:	2800      	cmp	r0, #0
 8009746:	d093      	beq.n	8009670 <_strtod_l+0x9f0>
 8009748:	e4c4      	b.n	80090d4 <_strtod_l+0x454>
 800974a:	bf00      	nop
 800974c:	f3af 8000 	nop.w
 8009750:	00000000 	.word	0x00000000
 8009754:	bff00000 	.word	0xbff00000
 8009758:	00000000 	.word	0x00000000
 800975c:	3ff00000 	.word	0x3ff00000
 8009760:	94a03595 	.word	0x94a03595
 8009764:	3fdfffff 	.word	0x3fdfffff
 8009768:	35afe535 	.word	0x35afe535
 800976c:	3fe00000 	.word	0x3fe00000
 8009770:	000fffff 	.word	0x000fffff
 8009774:	7ff00000 	.word	0x7ff00000
 8009778:	7fefffff 	.word	0x7fefffff
 800977c:	3ff00000 	.word	0x3ff00000
 8009780:	3fe00000 	.word	0x3fe00000
 8009784:	7fe00000 	.word	0x7fe00000
 8009788:	7c9fffff 	.word	0x7c9fffff
 800978c:	9b08      	ldr	r3, [sp, #32]
 800978e:	b323      	cbz	r3, 80097da <_strtod_l+0xb5a>
 8009790:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009794:	d821      	bhi.n	80097da <_strtod_l+0xb5a>
 8009796:	a328      	add	r3, pc, #160	@ (adr r3, 8009838 <_strtod_l+0xbb8>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	4630      	mov	r0, r6
 800979e:	4639      	mov	r1, r7
 80097a0:	f7f7 f9a6 	bl	8000af0 <__aeabi_dcmple>
 80097a4:	b1a0      	cbz	r0, 80097d0 <_strtod_l+0xb50>
 80097a6:	4639      	mov	r1, r7
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7f7 f9fd 	bl	8000ba8 <__aeabi_d2uiz>
 80097ae:	2801      	cmp	r0, #1
 80097b0:	bf38      	it	cc
 80097b2:	2001      	movcc	r0, #1
 80097b4:	f7f6 fea6 	bl	8000504 <__aeabi_ui2d>
 80097b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ba:	4606      	mov	r6, r0
 80097bc:	460f      	mov	r7, r1
 80097be:	b9fb      	cbnz	r3, 8009800 <_strtod_l+0xb80>
 80097c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80097c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80097c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80097cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80097d6:	1b5b      	subs	r3, r3, r5
 80097d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80097da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80097de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80097e2:	f7ff f8f1 	bl	80089c8 <__ulp>
 80097e6:	4650      	mov	r0, sl
 80097e8:	ec53 2b10 	vmov	r2, r3, d0
 80097ec:	4659      	mov	r1, fp
 80097ee:	f7f6 ff03 	bl	80005f8 <__aeabi_dmul>
 80097f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80097f6:	f7f6 fd49 	bl	800028c <__adddf3>
 80097fa:	4682      	mov	sl, r0
 80097fc:	468b      	mov	fp, r1
 80097fe:	e770      	b.n	80096e2 <_strtod_l+0xa62>
 8009800:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009804:	e7e0      	b.n	80097c8 <_strtod_l+0xb48>
 8009806:	a30e      	add	r3, pc, #56	@ (adr r3, 8009840 <_strtod_l+0xbc0>)
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f7f7 f966 	bl	8000adc <__aeabi_dcmplt>
 8009810:	e798      	b.n	8009744 <_strtod_l+0xac4>
 8009812:	2300      	movs	r3, #0
 8009814:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009816:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	f7ff ba6d 	b.w	8008cfa <_strtod_l+0x7a>
 8009820:	2a65      	cmp	r2, #101	@ 0x65
 8009822:	f43f ab66 	beq.w	8008ef2 <_strtod_l+0x272>
 8009826:	2a45      	cmp	r2, #69	@ 0x45
 8009828:	f43f ab63 	beq.w	8008ef2 <_strtod_l+0x272>
 800982c:	2301      	movs	r3, #1
 800982e:	f7ff bb9e 	b.w	8008f6e <_strtod_l+0x2ee>
 8009832:	bf00      	nop
 8009834:	f3af 8000 	nop.w
 8009838:	ffc00000 	.word	0xffc00000
 800983c:	41dfffff 	.word	0x41dfffff
 8009840:	94a03595 	.word	0x94a03595
 8009844:	3fcfffff 	.word	0x3fcfffff

08009848 <_strtod_r>:
 8009848:	4b01      	ldr	r3, [pc, #4]	@ (8009850 <_strtod_r+0x8>)
 800984a:	f7ff ba19 	b.w	8008c80 <_strtod_l>
 800984e:	bf00      	nop
 8009850:	20000078 	.word	0x20000078

08009854 <_strtol_l.constprop.0>:
 8009854:	2b24      	cmp	r3, #36	@ 0x24
 8009856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800985a:	4686      	mov	lr, r0
 800985c:	4690      	mov	r8, r2
 800985e:	d801      	bhi.n	8009864 <_strtol_l.constprop.0+0x10>
 8009860:	2b01      	cmp	r3, #1
 8009862:	d106      	bne.n	8009872 <_strtol_l.constprop.0+0x1e>
 8009864:	f7fd fdac 	bl	80073c0 <__errno>
 8009868:	2316      	movs	r3, #22
 800986a:	6003      	str	r3, [r0, #0]
 800986c:	2000      	movs	r0, #0
 800986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009872:	4834      	ldr	r0, [pc, #208]	@ (8009944 <_strtol_l.constprop.0+0xf0>)
 8009874:	460d      	mov	r5, r1
 8009876:	462a      	mov	r2, r5
 8009878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800987c:	5d06      	ldrb	r6, [r0, r4]
 800987e:	f016 0608 	ands.w	r6, r6, #8
 8009882:	d1f8      	bne.n	8009876 <_strtol_l.constprop.0+0x22>
 8009884:	2c2d      	cmp	r4, #45	@ 0x2d
 8009886:	d12d      	bne.n	80098e4 <_strtol_l.constprop.0+0x90>
 8009888:	782c      	ldrb	r4, [r5, #0]
 800988a:	2601      	movs	r6, #1
 800988c:	1c95      	adds	r5, r2, #2
 800988e:	f033 0210 	bics.w	r2, r3, #16
 8009892:	d109      	bne.n	80098a8 <_strtol_l.constprop.0+0x54>
 8009894:	2c30      	cmp	r4, #48	@ 0x30
 8009896:	d12a      	bne.n	80098ee <_strtol_l.constprop.0+0x9a>
 8009898:	782a      	ldrb	r2, [r5, #0]
 800989a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800989e:	2a58      	cmp	r2, #88	@ 0x58
 80098a0:	d125      	bne.n	80098ee <_strtol_l.constprop.0+0x9a>
 80098a2:	786c      	ldrb	r4, [r5, #1]
 80098a4:	2310      	movs	r3, #16
 80098a6:	3502      	adds	r5, #2
 80098a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80098ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80098b0:	2200      	movs	r2, #0
 80098b2:	fbbc f9f3 	udiv	r9, ip, r3
 80098b6:	4610      	mov	r0, r2
 80098b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80098bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80098c0:	2f09      	cmp	r7, #9
 80098c2:	d81b      	bhi.n	80098fc <_strtol_l.constprop.0+0xa8>
 80098c4:	463c      	mov	r4, r7
 80098c6:	42a3      	cmp	r3, r4
 80098c8:	dd27      	ble.n	800991a <_strtol_l.constprop.0+0xc6>
 80098ca:	1c57      	adds	r7, r2, #1
 80098cc:	d007      	beq.n	80098de <_strtol_l.constprop.0+0x8a>
 80098ce:	4581      	cmp	r9, r0
 80098d0:	d320      	bcc.n	8009914 <_strtol_l.constprop.0+0xc0>
 80098d2:	d101      	bne.n	80098d8 <_strtol_l.constprop.0+0x84>
 80098d4:	45a2      	cmp	sl, r4
 80098d6:	db1d      	blt.n	8009914 <_strtol_l.constprop.0+0xc0>
 80098d8:	fb00 4003 	mla	r0, r0, r3, r4
 80098dc:	2201      	movs	r2, #1
 80098de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098e2:	e7eb      	b.n	80098bc <_strtol_l.constprop.0+0x68>
 80098e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80098e6:	bf04      	itt	eq
 80098e8:	782c      	ldrbeq	r4, [r5, #0]
 80098ea:	1c95      	addeq	r5, r2, #2
 80098ec:	e7cf      	b.n	800988e <_strtol_l.constprop.0+0x3a>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1da      	bne.n	80098a8 <_strtol_l.constprop.0+0x54>
 80098f2:	2c30      	cmp	r4, #48	@ 0x30
 80098f4:	bf0c      	ite	eq
 80098f6:	2308      	moveq	r3, #8
 80098f8:	230a      	movne	r3, #10
 80098fa:	e7d5      	b.n	80098a8 <_strtol_l.constprop.0+0x54>
 80098fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009900:	2f19      	cmp	r7, #25
 8009902:	d801      	bhi.n	8009908 <_strtol_l.constprop.0+0xb4>
 8009904:	3c37      	subs	r4, #55	@ 0x37
 8009906:	e7de      	b.n	80098c6 <_strtol_l.constprop.0+0x72>
 8009908:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800990c:	2f19      	cmp	r7, #25
 800990e:	d804      	bhi.n	800991a <_strtol_l.constprop.0+0xc6>
 8009910:	3c57      	subs	r4, #87	@ 0x57
 8009912:	e7d8      	b.n	80098c6 <_strtol_l.constprop.0+0x72>
 8009914:	f04f 32ff 	mov.w	r2, #4294967295
 8009918:	e7e1      	b.n	80098de <_strtol_l.constprop.0+0x8a>
 800991a:	1c53      	adds	r3, r2, #1
 800991c:	d108      	bne.n	8009930 <_strtol_l.constprop.0+0xdc>
 800991e:	2322      	movs	r3, #34	@ 0x22
 8009920:	f8ce 3000 	str.w	r3, [lr]
 8009924:	4660      	mov	r0, ip
 8009926:	f1b8 0f00 	cmp.w	r8, #0
 800992a:	d0a0      	beq.n	800986e <_strtol_l.constprop.0+0x1a>
 800992c:	1e69      	subs	r1, r5, #1
 800992e:	e006      	b.n	800993e <_strtol_l.constprop.0+0xea>
 8009930:	b106      	cbz	r6, 8009934 <_strtol_l.constprop.0+0xe0>
 8009932:	4240      	negs	r0, r0
 8009934:	f1b8 0f00 	cmp.w	r8, #0
 8009938:	d099      	beq.n	800986e <_strtol_l.constprop.0+0x1a>
 800993a:	2a00      	cmp	r2, #0
 800993c:	d1f6      	bne.n	800992c <_strtol_l.constprop.0+0xd8>
 800993e:	f8c8 1000 	str.w	r1, [r8]
 8009942:	e794      	b.n	800986e <_strtol_l.constprop.0+0x1a>
 8009944:	0800b459 	.word	0x0800b459

08009948 <_strtol_r>:
 8009948:	f7ff bf84 	b.w	8009854 <_strtol_l.constprop.0>

0800994c <__ssputs_r>:
 800994c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009950:	688e      	ldr	r6, [r1, #8]
 8009952:	461f      	mov	r7, r3
 8009954:	42be      	cmp	r6, r7
 8009956:	680b      	ldr	r3, [r1, #0]
 8009958:	4682      	mov	sl, r0
 800995a:	460c      	mov	r4, r1
 800995c:	4690      	mov	r8, r2
 800995e:	d82d      	bhi.n	80099bc <__ssputs_r+0x70>
 8009960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009968:	d026      	beq.n	80099b8 <__ssputs_r+0x6c>
 800996a:	6965      	ldr	r5, [r4, #20]
 800996c:	6909      	ldr	r1, [r1, #16]
 800996e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009972:	eba3 0901 	sub.w	r9, r3, r1
 8009976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800997a:	1c7b      	adds	r3, r7, #1
 800997c:	444b      	add	r3, r9
 800997e:	106d      	asrs	r5, r5, #1
 8009980:	429d      	cmp	r5, r3
 8009982:	bf38      	it	cc
 8009984:	461d      	movcc	r5, r3
 8009986:	0553      	lsls	r3, r2, #21
 8009988:	d527      	bpl.n	80099da <__ssputs_r+0x8e>
 800998a:	4629      	mov	r1, r5
 800998c:	f7fe fc1c 	bl	80081c8 <_malloc_r>
 8009990:	4606      	mov	r6, r0
 8009992:	b360      	cbz	r0, 80099ee <__ssputs_r+0xa2>
 8009994:	6921      	ldr	r1, [r4, #16]
 8009996:	464a      	mov	r2, r9
 8009998:	f7fd fd3f 	bl	800741a <memcpy>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	6126      	str	r6, [r4, #16]
 80099aa:	6165      	str	r5, [r4, #20]
 80099ac:	444e      	add	r6, r9
 80099ae:	eba5 0509 	sub.w	r5, r5, r9
 80099b2:	6026      	str	r6, [r4, #0]
 80099b4:	60a5      	str	r5, [r4, #8]
 80099b6:	463e      	mov	r6, r7
 80099b8:	42be      	cmp	r6, r7
 80099ba:	d900      	bls.n	80099be <__ssputs_r+0x72>
 80099bc:	463e      	mov	r6, r7
 80099be:	6820      	ldr	r0, [r4, #0]
 80099c0:	4632      	mov	r2, r6
 80099c2:	4641      	mov	r1, r8
 80099c4:	f000 f9c6 	bl	8009d54 <memmove>
 80099c8:	68a3      	ldr	r3, [r4, #8]
 80099ca:	1b9b      	subs	r3, r3, r6
 80099cc:	60a3      	str	r3, [r4, #8]
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	4433      	add	r3, r6
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	2000      	movs	r0, #0
 80099d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099da:	462a      	mov	r2, r5
 80099dc:	f000 fd7d 	bl	800a4da <_realloc_r>
 80099e0:	4606      	mov	r6, r0
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d1e0      	bne.n	80099a8 <__ssputs_r+0x5c>
 80099e6:	6921      	ldr	r1, [r4, #16]
 80099e8:	4650      	mov	r0, sl
 80099ea:	f7fe fb79 	bl	80080e0 <_free_r>
 80099ee:	230c      	movs	r3, #12
 80099f0:	f8ca 3000 	str.w	r3, [sl]
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009a00:	e7e9      	b.n	80099d6 <__ssputs_r+0x8a>
	...

08009a04 <_svfiprintf_r>:
 8009a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	4698      	mov	r8, r3
 8009a0a:	898b      	ldrh	r3, [r1, #12]
 8009a0c:	061b      	lsls	r3, r3, #24
 8009a0e:	b09d      	sub	sp, #116	@ 0x74
 8009a10:	4607      	mov	r7, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	4614      	mov	r4, r2
 8009a16:	d510      	bpl.n	8009a3a <_svfiprintf_r+0x36>
 8009a18:	690b      	ldr	r3, [r1, #16]
 8009a1a:	b973      	cbnz	r3, 8009a3a <_svfiprintf_r+0x36>
 8009a1c:	2140      	movs	r1, #64	@ 0x40
 8009a1e:	f7fe fbd3 	bl	80081c8 <_malloc_r>
 8009a22:	6028      	str	r0, [r5, #0]
 8009a24:	6128      	str	r0, [r5, #16]
 8009a26:	b930      	cbnz	r0, 8009a36 <_svfiprintf_r+0x32>
 8009a28:	230c      	movs	r3, #12
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a30:	b01d      	add	sp, #116	@ 0x74
 8009a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a36:	2340      	movs	r3, #64	@ 0x40
 8009a38:	616b      	str	r3, [r5, #20]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3e:	2320      	movs	r3, #32
 8009a40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a48:	2330      	movs	r3, #48	@ 0x30
 8009a4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009be8 <_svfiprintf_r+0x1e4>
 8009a4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a52:	f04f 0901 	mov.w	r9, #1
 8009a56:	4623      	mov	r3, r4
 8009a58:	469a      	mov	sl, r3
 8009a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a5e:	b10a      	cbz	r2, 8009a64 <_svfiprintf_r+0x60>
 8009a60:	2a25      	cmp	r2, #37	@ 0x25
 8009a62:	d1f9      	bne.n	8009a58 <_svfiprintf_r+0x54>
 8009a64:	ebba 0b04 	subs.w	fp, sl, r4
 8009a68:	d00b      	beq.n	8009a82 <_svfiprintf_r+0x7e>
 8009a6a:	465b      	mov	r3, fp
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4638      	mov	r0, r7
 8009a72:	f7ff ff6b 	bl	800994c <__ssputs_r>
 8009a76:	3001      	adds	r0, #1
 8009a78:	f000 80a7 	beq.w	8009bca <_svfiprintf_r+0x1c6>
 8009a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a7e:	445a      	add	r2, fp
 8009a80:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a82:	f89a 3000 	ldrb.w	r3, [sl]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 809f 	beq.w	8009bca <_svfiprintf_r+0x1c6>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a96:	f10a 0a01 	add.w	sl, sl, #1
 8009a9a:	9304      	str	r3, [sp, #16]
 8009a9c:	9307      	str	r3, [sp, #28]
 8009a9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009aa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009aa4:	4654      	mov	r4, sl
 8009aa6:	2205      	movs	r2, #5
 8009aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aac:	484e      	ldr	r0, [pc, #312]	@ (8009be8 <_svfiprintf_r+0x1e4>)
 8009aae:	f7f6 fb8f 	bl	80001d0 <memchr>
 8009ab2:	9a04      	ldr	r2, [sp, #16]
 8009ab4:	b9d8      	cbnz	r0, 8009aee <_svfiprintf_r+0xea>
 8009ab6:	06d0      	lsls	r0, r2, #27
 8009ab8:	bf44      	itt	mi
 8009aba:	2320      	movmi	r3, #32
 8009abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ac0:	0711      	lsls	r1, r2, #28
 8009ac2:	bf44      	itt	mi
 8009ac4:	232b      	movmi	r3, #43	@ 0x2b
 8009ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aca:	f89a 3000 	ldrb.w	r3, [sl]
 8009ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ad0:	d015      	beq.n	8009afe <_svfiprintf_r+0xfa>
 8009ad2:	9a07      	ldr	r2, [sp, #28]
 8009ad4:	4654      	mov	r4, sl
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	f04f 0c0a 	mov.w	ip, #10
 8009adc:	4621      	mov	r1, r4
 8009ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ae2:	3b30      	subs	r3, #48	@ 0x30
 8009ae4:	2b09      	cmp	r3, #9
 8009ae6:	d94b      	bls.n	8009b80 <_svfiprintf_r+0x17c>
 8009ae8:	b1b0      	cbz	r0, 8009b18 <_svfiprintf_r+0x114>
 8009aea:	9207      	str	r2, [sp, #28]
 8009aec:	e014      	b.n	8009b18 <_svfiprintf_r+0x114>
 8009aee:	eba0 0308 	sub.w	r3, r0, r8
 8009af2:	fa09 f303 	lsl.w	r3, r9, r3
 8009af6:	4313      	orrs	r3, r2
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	46a2      	mov	sl, r4
 8009afc:	e7d2      	b.n	8009aa4 <_svfiprintf_r+0xa0>
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	1d19      	adds	r1, r3, #4
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	9103      	str	r1, [sp, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfbb      	ittet	lt
 8009b0a:	425b      	neglt	r3, r3
 8009b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b10:	9307      	strge	r3, [sp, #28]
 8009b12:	9307      	strlt	r3, [sp, #28]
 8009b14:	bfb8      	it	lt
 8009b16:	9204      	strlt	r2, [sp, #16]
 8009b18:	7823      	ldrb	r3, [r4, #0]
 8009b1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b1c:	d10a      	bne.n	8009b34 <_svfiprintf_r+0x130>
 8009b1e:	7863      	ldrb	r3, [r4, #1]
 8009b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b22:	d132      	bne.n	8009b8a <_svfiprintf_r+0x186>
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	1d1a      	adds	r2, r3, #4
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	9203      	str	r2, [sp, #12]
 8009b2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b30:	3402      	adds	r4, #2
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009bf8 <_svfiprintf_r+0x1f4>
 8009b38:	7821      	ldrb	r1, [r4, #0]
 8009b3a:	2203      	movs	r2, #3
 8009b3c:	4650      	mov	r0, sl
 8009b3e:	f7f6 fb47 	bl	80001d0 <memchr>
 8009b42:	b138      	cbz	r0, 8009b54 <_svfiprintf_r+0x150>
 8009b44:	9b04      	ldr	r3, [sp, #16]
 8009b46:	eba0 000a 	sub.w	r0, r0, sl
 8009b4a:	2240      	movs	r2, #64	@ 0x40
 8009b4c:	4082      	lsls	r2, r0
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	3401      	adds	r4, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b58:	4824      	ldr	r0, [pc, #144]	@ (8009bec <_svfiprintf_r+0x1e8>)
 8009b5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b5e:	2206      	movs	r2, #6
 8009b60:	f7f6 fb36 	bl	80001d0 <memchr>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d036      	beq.n	8009bd6 <_svfiprintf_r+0x1d2>
 8009b68:	4b21      	ldr	r3, [pc, #132]	@ (8009bf0 <_svfiprintf_r+0x1ec>)
 8009b6a:	bb1b      	cbnz	r3, 8009bb4 <_svfiprintf_r+0x1b0>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	3307      	adds	r3, #7
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	3308      	adds	r3, #8
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7a:	4433      	add	r3, r6
 8009b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b7e:	e76a      	b.n	8009a56 <_svfiprintf_r+0x52>
 8009b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b84:	460c      	mov	r4, r1
 8009b86:	2001      	movs	r0, #1
 8009b88:	e7a8      	b.n	8009adc <_svfiprintf_r+0xd8>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	9305      	str	r3, [sp, #20]
 8009b90:	4619      	mov	r1, r3
 8009b92:	f04f 0c0a 	mov.w	ip, #10
 8009b96:	4620      	mov	r0, r4
 8009b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9c:	3a30      	subs	r2, #48	@ 0x30
 8009b9e:	2a09      	cmp	r2, #9
 8009ba0:	d903      	bls.n	8009baa <_svfiprintf_r+0x1a6>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0c6      	beq.n	8009b34 <_svfiprintf_r+0x130>
 8009ba6:	9105      	str	r1, [sp, #20]
 8009ba8:	e7c4      	b.n	8009b34 <_svfiprintf_r+0x130>
 8009baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bae:	4604      	mov	r4, r0
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7f0      	b.n	8009b96 <_svfiprintf_r+0x192>
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462a      	mov	r2, r5
 8009bba:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf4 <_svfiprintf_r+0x1f0>)
 8009bbc:	a904      	add	r1, sp, #16
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f7fc fcba 	bl	8006538 <_printf_float>
 8009bc4:	1c42      	adds	r2, r0, #1
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	d1d6      	bne.n	8009b78 <_svfiprintf_r+0x174>
 8009bca:	89ab      	ldrh	r3, [r5, #12]
 8009bcc:	065b      	lsls	r3, r3, #25
 8009bce:	f53f af2d 	bmi.w	8009a2c <_svfiprintf_r+0x28>
 8009bd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bd4:	e72c      	b.n	8009a30 <_svfiprintf_r+0x2c>
 8009bd6:	ab03      	add	r3, sp, #12
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	462a      	mov	r2, r5
 8009bdc:	4b05      	ldr	r3, [pc, #20]	@ (8009bf4 <_svfiprintf_r+0x1f0>)
 8009bde:	a904      	add	r1, sp, #16
 8009be0:	4638      	mov	r0, r7
 8009be2:	f7fc ff41 	bl	8006a68 <_printf_i>
 8009be6:	e7ed      	b.n	8009bc4 <_svfiprintf_r+0x1c0>
 8009be8:	0800b559 	.word	0x0800b559
 8009bec:	0800b563 	.word	0x0800b563
 8009bf0:	08006539 	.word	0x08006539
 8009bf4:	0800994d 	.word	0x0800994d
 8009bf8:	0800b55f 	.word	0x0800b55f

08009bfc <__sflush_r>:
 8009bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c04:	0716      	lsls	r6, r2, #28
 8009c06:	4605      	mov	r5, r0
 8009c08:	460c      	mov	r4, r1
 8009c0a:	d454      	bmi.n	8009cb6 <__sflush_r+0xba>
 8009c0c:	684b      	ldr	r3, [r1, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	dc02      	bgt.n	8009c18 <__sflush_r+0x1c>
 8009c12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dd48      	ble.n	8009caa <__sflush_r+0xae>
 8009c18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c1a:	2e00      	cmp	r6, #0
 8009c1c:	d045      	beq.n	8009caa <__sflush_r+0xae>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c24:	682f      	ldr	r7, [r5, #0]
 8009c26:	6a21      	ldr	r1, [r4, #32]
 8009c28:	602b      	str	r3, [r5, #0]
 8009c2a:	d030      	beq.n	8009c8e <__sflush_r+0x92>
 8009c2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	0759      	lsls	r1, r3, #29
 8009c32:	d505      	bpl.n	8009c40 <__sflush_r+0x44>
 8009c34:	6863      	ldr	r3, [r4, #4]
 8009c36:	1ad2      	subs	r2, r2, r3
 8009c38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c3a:	b10b      	cbz	r3, 8009c40 <__sflush_r+0x44>
 8009c3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c3e:	1ad2      	subs	r2, r2, r3
 8009c40:	2300      	movs	r3, #0
 8009c42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c44:	6a21      	ldr	r1, [r4, #32]
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b0      	blx	r6
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	d106      	bne.n	8009c5e <__sflush_r+0x62>
 8009c50:	6829      	ldr	r1, [r5, #0]
 8009c52:	291d      	cmp	r1, #29
 8009c54:	d82b      	bhi.n	8009cae <__sflush_r+0xb2>
 8009c56:	4a2a      	ldr	r2, [pc, #168]	@ (8009d00 <__sflush_r+0x104>)
 8009c58:	410a      	asrs	r2, r1
 8009c5a:	07d6      	lsls	r6, r2, #31
 8009c5c:	d427      	bmi.n	8009cae <__sflush_r+0xb2>
 8009c5e:	2200      	movs	r2, #0
 8009c60:	6062      	str	r2, [r4, #4]
 8009c62:	04d9      	lsls	r1, r3, #19
 8009c64:	6922      	ldr	r2, [r4, #16]
 8009c66:	6022      	str	r2, [r4, #0]
 8009c68:	d504      	bpl.n	8009c74 <__sflush_r+0x78>
 8009c6a:	1c42      	adds	r2, r0, #1
 8009c6c:	d101      	bne.n	8009c72 <__sflush_r+0x76>
 8009c6e:	682b      	ldr	r3, [r5, #0]
 8009c70:	b903      	cbnz	r3, 8009c74 <__sflush_r+0x78>
 8009c72:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c76:	602f      	str	r7, [r5, #0]
 8009c78:	b1b9      	cbz	r1, 8009caa <__sflush_r+0xae>
 8009c7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c7e:	4299      	cmp	r1, r3
 8009c80:	d002      	beq.n	8009c88 <__sflush_r+0x8c>
 8009c82:	4628      	mov	r0, r5
 8009c84:	f7fe fa2c 	bl	80080e0 <_free_r>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c8c:	e00d      	b.n	8009caa <__sflush_r+0xae>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b0      	blx	r6
 8009c94:	4602      	mov	r2, r0
 8009c96:	1c50      	adds	r0, r2, #1
 8009c98:	d1c9      	bne.n	8009c2e <__sflush_r+0x32>
 8009c9a:	682b      	ldr	r3, [r5, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0c6      	beq.n	8009c2e <__sflush_r+0x32>
 8009ca0:	2b1d      	cmp	r3, #29
 8009ca2:	d001      	beq.n	8009ca8 <__sflush_r+0xac>
 8009ca4:	2b16      	cmp	r3, #22
 8009ca6:	d11e      	bne.n	8009ce6 <__sflush_r+0xea>
 8009ca8:	602f      	str	r7, [r5, #0]
 8009caa:	2000      	movs	r0, #0
 8009cac:	e022      	b.n	8009cf4 <__sflush_r+0xf8>
 8009cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cb2:	b21b      	sxth	r3, r3
 8009cb4:	e01b      	b.n	8009cee <__sflush_r+0xf2>
 8009cb6:	690f      	ldr	r7, [r1, #16]
 8009cb8:	2f00      	cmp	r7, #0
 8009cba:	d0f6      	beq.n	8009caa <__sflush_r+0xae>
 8009cbc:	0793      	lsls	r3, r2, #30
 8009cbe:	680e      	ldr	r6, [r1, #0]
 8009cc0:	bf08      	it	eq
 8009cc2:	694b      	ldreq	r3, [r1, #20]
 8009cc4:	600f      	str	r7, [r1, #0]
 8009cc6:	bf18      	it	ne
 8009cc8:	2300      	movne	r3, #0
 8009cca:	eba6 0807 	sub.w	r8, r6, r7
 8009cce:	608b      	str	r3, [r1, #8]
 8009cd0:	f1b8 0f00 	cmp.w	r8, #0
 8009cd4:	dde9      	ble.n	8009caa <__sflush_r+0xae>
 8009cd6:	6a21      	ldr	r1, [r4, #32]
 8009cd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009cda:	4643      	mov	r3, r8
 8009cdc:	463a      	mov	r2, r7
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b0      	blx	r6
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	dc08      	bgt.n	8009cf8 <__sflush_r+0xfc>
 8009ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cee:	81a3      	strh	r3, [r4, #12]
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf8:	4407      	add	r7, r0
 8009cfa:	eba8 0800 	sub.w	r8, r8, r0
 8009cfe:	e7e7      	b.n	8009cd0 <__sflush_r+0xd4>
 8009d00:	dfbffffe 	.word	0xdfbffffe

08009d04 <_fflush_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	690b      	ldr	r3, [r1, #16]
 8009d08:	4605      	mov	r5, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	b913      	cbnz	r3, 8009d14 <_fflush_r+0x10>
 8009d0e:	2500      	movs	r5, #0
 8009d10:	4628      	mov	r0, r5
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	b118      	cbz	r0, 8009d1e <_fflush_r+0x1a>
 8009d16:	6a03      	ldr	r3, [r0, #32]
 8009d18:	b90b      	cbnz	r3, 8009d1e <_fflush_r+0x1a>
 8009d1a:	f7fd fa65 	bl	80071e8 <__sinit>
 8009d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0f3      	beq.n	8009d0e <_fflush_r+0xa>
 8009d26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d28:	07d0      	lsls	r0, r2, #31
 8009d2a:	d404      	bmi.n	8009d36 <_fflush_r+0x32>
 8009d2c:	0599      	lsls	r1, r3, #22
 8009d2e:	d402      	bmi.n	8009d36 <_fflush_r+0x32>
 8009d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d32:	f7fd fb70 	bl	8007416 <__retarget_lock_acquire_recursive>
 8009d36:	4628      	mov	r0, r5
 8009d38:	4621      	mov	r1, r4
 8009d3a:	f7ff ff5f 	bl	8009bfc <__sflush_r>
 8009d3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d40:	07da      	lsls	r2, r3, #31
 8009d42:	4605      	mov	r5, r0
 8009d44:	d4e4      	bmi.n	8009d10 <_fflush_r+0xc>
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	059b      	lsls	r3, r3, #22
 8009d4a:	d4e1      	bmi.n	8009d10 <_fflush_r+0xc>
 8009d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d4e:	f7fd fb63 	bl	8007418 <__retarget_lock_release_recursive>
 8009d52:	e7dd      	b.n	8009d10 <_fflush_r+0xc>

08009d54 <memmove>:
 8009d54:	4288      	cmp	r0, r1
 8009d56:	b510      	push	{r4, lr}
 8009d58:	eb01 0402 	add.w	r4, r1, r2
 8009d5c:	d902      	bls.n	8009d64 <memmove+0x10>
 8009d5e:	4284      	cmp	r4, r0
 8009d60:	4623      	mov	r3, r4
 8009d62:	d807      	bhi.n	8009d74 <memmove+0x20>
 8009d64:	1e43      	subs	r3, r0, #1
 8009d66:	42a1      	cmp	r1, r4
 8009d68:	d008      	beq.n	8009d7c <memmove+0x28>
 8009d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d72:	e7f8      	b.n	8009d66 <memmove+0x12>
 8009d74:	4402      	add	r2, r0
 8009d76:	4601      	mov	r1, r0
 8009d78:	428a      	cmp	r2, r1
 8009d7a:	d100      	bne.n	8009d7e <memmove+0x2a>
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d86:	e7f7      	b.n	8009d78 <memmove+0x24>

08009d88 <strncmp>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	b16a      	cbz	r2, 8009da8 <strncmp+0x20>
 8009d8c:	3901      	subs	r1, #1
 8009d8e:	1884      	adds	r4, r0, r2
 8009d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d103      	bne.n	8009da4 <strncmp+0x1c>
 8009d9c:	42a0      	cmp	r0, r4
 8009d9e:	d001      	beq.n	8009da4 <strncmp+0x1c>
 8009da0:	2a00      	cmp	r2, #0
 8009da2:	d1f5      	bne.n	8009d90 <strncmp+0x8>
 8009da4:	1ad0      	subs	r0, r2, r3
 8009da6:	bd10      	pop	{r4, pc}
 8009da8:	4610      	mov	r0, r2
 8009daa:	e7fc      	b.n	8009da6 <strncmp+0x1e>

08009dac <_sbrk_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4d06      	ldr	r5, [pc, #24]	@ (8009dc8 <_sbrk_r+0x1c>)
 8009db0:	2300      	movs	r3, #0
 8009db2:	4604      	mov	r4, r0
 8009db4:	4608      	mov	r0, r1
 8009db6:	602b      	str	r3, [r5, #0]
 8009db8:	f7f8 fbca 	bl	8002550 <_sbrk>
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	d102      	bne.n	8009dc6 <_sbrk_r+0x1a>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	b103      	cbz	r3, 8009dc6 <_sbrk_r+0x1a>
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	20000608 	.word	0x20000608
 8009dcc:	00000000 	.word	0x00000000

08009dd0 <nan>:
 8009dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009dd8 <nan+0x8>
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	00000000 	.word	0x00000000
 8009ddc:	7ff80000 	.word	0x7ff80000

08009de0 <__assert_func>:
 8009de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009de2:	4614      	mov	r4, r2
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b09      	ldr	r3, [pc, #36]	@ (8009e0c <__assert_func+0x2c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4605      	mov	r5, r0
 8009dec:	68d8      	ldr	r0, [r3, #12]
 8009dee:	b954      	cbnz	r4, 8009e06 <__assert_func+0x26>
 8009df0:	4b07      	ldr	r3, [pc, #28]	@ (8009e10 <__assert_func+0x30>)
 8009df2:	461c      	mov	r4, r3
 8009df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009df8:	9100      	str	r1, [sp, #0]
 8009dfa:	462b      	mov	r3, r5
 8009dfc:	4905      	ldr	r1, [pc, #20]	@ (8009e14 <__assert_func+0x34>)
 8009dfe:	f000 fba7 	bl	800a550 <fiprintf>
 8009e02:	f000 fbb7 	bl	800a574 <abort>
 8009e06:	4b04      	ldr	r3, [pc, #16]	@ (8009e18 <__assert_func+0x38>)
 8009e08:	e7f4      	b.n	8009df4 <__assert_func+0x14>
 8009e0a:	bf00      	nop
 8009e0c:	20000028 	.word	0x20000028
 8009e10:	0800b5ad 	.word	0x0800b5ad
 8009e14:	0800b57f 	.word	0x0800b57f
 8009e18:	0800b572 	.word	0x0800b572

08009e1c <_calloc_r>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	fba1 5402 	umull	r5, r4, r1, r2
 8009e22:	b93c      	cbnz	r4, 8009e34 <_calloc_r+0x18>
 8009e24:	4629      	mov	r1, r5
 8009e26:	f7fe f9cf 	bl	80081c8 <_malloc_r>
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	b928      	cbnz	r0, 8009e3a <_calloc_r+0x1e>
 8009e2e:	2600      	movs	r6, #0
 8009e30:	4630      	mov	r0, r6
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	220c      	movs	r2, #12
 8009e36:	6002      	str	r2, [r0, #0]
 8009e38:	e7f9      	b.n	8009e2e <_calloc_r+0x12>
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	f7fd fa6c 	bl	800731a <memset>
 8009e42:	e7f5      	b.n	8009e30 <_calloc_r+0x14>

08009e44 <rshift>:
 8009e44:	6903      	ldr	r3, [r0, #16]
 8009e46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e52:	f100 0414 	add.w	r4, r0, #20
 8009e56:	dd45      	ble.n	8009ee4 <rshift+0xa0>
 8009e58:	f011 011f 	ands.w	r1, r1, #31
 8009e5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e64:	d10c      	bne.n	8009e80 <rshift+0x3c>
 8009e66:	f100 0710 	add.w	r7, r0, #16
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	42b1      	cmp	r1, r6
 8009e6e:	d334      	bcc.n	8009eda <rshift+0x96>
 8009e70:	1a9b      	subs	r3, r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	1eea      	subs	r2, r5, #3
 8009e76:	4296      	cmp	r6, r2
 8009e78:	bf38      	it	cc
 8009e7a:	2300      	movcc	r3, #0
 8009e7c:	4423      	add	r3, r4
 8009e7e:	e015      	b.n	8009eac <rshift+0x68>
 8009e80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e84:	f1c1 0820 	rsb	r8, r1, #32
 8009e88:	40cf      	lsrs	r7, r1
 8009e8a:	f105 0e04 	add.w	lr, r5, #4
 8009e8e:	46a1      	mov	r9, r4
 8009e90:	4576      	cmp	r6, lr
 8009e92:	46f4      	mov	ip, lr
 8009e94:	d815      	bhi.n	8009ec2 <rshift+0x7e>
 8009e96:	1a9a      	subs	r2, r3, r2
 8009e98:	0092      	lsls	r2, r2, #2
 8009e9a:	3a04      	subs	r2, #4
 8009e9c:	3501      	adds	r5, #1
 8009e9e:	42ae      	cmp	r6, r5
 8009ea0:	bf38      	it	cc
 8009ea2:	2200      	movcc	r2, #0
 8009ea4:	18a3      	adds	r3, r4, r2
 8009ea6:	50a7      	str	r7, [r4, r2]
 8009ea8:	b107      	cbz	r7, 8009eac <rshift+0x68>
 8009eaa:	3304      	adds	r3, #4
 8009eac:	1b1a      	subs	r2, r3, r4
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009eb4:	bf08      	it	eq
 8009eb6:	2300      	moveq	r3, #0
 8009eb8:	6102      	str	r2, [r0, #16]
 8009eba:	bf08      	it	eq
 8009ebc:	6143      	streq	r3, [r0, #20]
 8009ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ec2:	f8dc c000 	ldr.w	ip, [ip]
 8009ec6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009eca:	ea4c 0707 	orr.w	r7, ip, r7
 8009ece:	f849 7b04 	str.w	r7, [r9], #4
 8009ed2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ed6:	40cf      	lsrs	r7, r1
 8009ed8:	e7da      	b.n	8009e90 <rshift+0x4c>
 8009eda:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ede:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ee2:	e7c3      	b.n	8009e6c <rshift+0x28>
 8009ee4:	4623      	mov	r3, r4
 8009ee6:	e7e1      	b.n	8009eac <rshift+0x68>

08009ee8 <__hexdig_fun>:
 8009ee8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009eec:	2b09      	cmp	r3, #9
 8009eee:	d802      	bhi.n	8009ef6 <__hexdig_fun+0xe>
 8009ef0:	3820      	subs	r0, #32
 8009ef2:	b2c0      	uxtb	r0, r0
 8009ef4:	4770      	bx	lr
 8009ef6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	d801      	bhi.n	8009f02 <__hexdig_fun+0x1a>
 8009efe:	3847      	subs	r0, #71	@ 0x47
 8009f00:	e7f7      	b.n	8009ef2 <__hexdig_fun+0xa>
 8009f02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	d801      	bhi.n	8009f0e <__hexdig_fun+0x26>
 8009f0a:	3827      	subs	r0, #39	@ 0x27
 8009f0c:	e7f1      	b.n	8009ef2 <__hexdig_fun+0xa>
 8009f0e:	2000      	movs	r0, #0
 8009f10:	4770      	bx	lr
	...

08009f14 <__gethex>:
 8009f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f18:	b085      	sub	sp, #20
 8009f1a:	468a      	mov	sl, r1
 8009f1c:	9302      	str	r3, [sp, #8]
 8009f1e:	680b      	ldr	r3, [r1, #0]
 8009f20:	9001      	str	r0, [sp, #4]
 8009f22:	4690      	mov	r8, r2
 8009f24:	1c9c      	adds	r4, r3, #2
 8009f26:	46a1      	mov	r9, r4
 8009f28:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f2c:	2830      	cmp	r0, #48	@ 0x30
 8009f2e:	d0fa      	beq.n	8009f26 <__gethex+0x12>
 8009f30:	eba9 0303 	sub.w	r3, r9, r3
 8009f34:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f38:	f7ff ffd6 	bl	8009ee8 <__hexdig_fun>
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d168      	bne.n	800a014 <__gethex+0x100>
 8009f42:	49a0      	ldr	r1, [pc, #640]	@ (800a1c4 <__gethex+0x2b0>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	4648      	mov	r0, r9
 8009f48:	f7ff ff1e 	bl	8009d88 <strncmp>
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d167      	bne.n	800a022 <__gethex+0x10e>
 8009f52:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f56:	4626      	mov	r6, r4
 8009f58:	f7ff ffc6 	bl	8009ee8 <__hexdig_fun>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d062      	beq.n	800a026 <__gethex+0x112>
 8009f60:	4623      	mov	r3, r4
 8009f62:	7818      	ldrb	r0, [r3, #0]
 8009f64:	2830      	cmp	r0, #48	@ 0x30
 8009f66:	4699      	mov	r9, r3
 8009f68:	f103 0301 	add.w	r3, r3, #1
 8009f6c:	d0f9      	beq.n	8009f62 <__gethex+0x4e>
 8009f6e:	f7ff ffbb 	bl	8009ee8 <__hexdig_fun>
 8009f72:	fab0 f580 	clz	r5, r0
 8009f76:	096d      	lsrs	r5, r5, #5
 8009f78:	f04f 0b01 	mov.w	fp, #1
 8009f7c:	464a      	mov	r2, r9
 8009f7e:	4616      	mov	r6, r2
 8009f80:	3201      	adds	r2, #1
 8009f82:	7830      	ldrb	r0, [r6, #0]
 8009f84:	f7ff ffb0 	bl	8009ee8 <__hexdig_fun>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d1f8      	bne.n	8009f7e <__gethex+0x6a>
 8009f8c:	498d      	ldr	r1, [pc, #564]	@ (800a1c4 <__gethex+0x2b0>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4630      	mov	r0, r6
 8009f92:	f7ff fef9 	bl	8009d88 <strncmp>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d13f      	bne.n	800a01a <__gethex+0x106>
 8009f9a:	b944      	cbnz	r4, 8009fae <__gethex+0x9a>
 8009f9c:	1c74      	adds	r4, r6, #1
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	4616      	mov	r6, r2
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	7830      	ldrb	r0, [r6, #0]
 8009fa6:	f7ff ff9f 	bl	8009ee8 <__hexdig_fun>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d1f8      	bne.n	8009fa0 <__gethex+0x8c>
 8009fae:	1ba4      	subs	r4, r4, r6
 8009fb0:	00a7      	lsls	r7, r4, #2
 8009fb2:	7833      	ldrb	r3, [r6, #0]
 8009fb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009fb8:	2b50      	cmp	r3, #80	@ 0x50
 8009fba:	d13e      	bne.n	800a03a <__gethex+0x126>
 8009fbc:	7873      	ldrb	r3, [r6, #1]
 8009fbe:	2b2b      	cmp	r3, #43	@ 0x2b
 8009fc0:	d033      	beq.n	800a02a <__gethex+0x116>
 8009fc2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009fc4:	d034      	beq.n	800a030 <__gethex+0x11c>
 8009fc6:	1c71      	adds	r1, r6, #1
 8009fc8:	2400      	movs	r4, #0
 8009fca:	7808      	ldrb	r0, [r1, #0]
 8009fcc:	f7ff ff8c 	bl	8009ee8 <__hexdig_fun>
 8009fd0:	1e43      	subs	r3, r0, #1
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b18      	cmp	r3, #24
 8009fd6:	d830      	bhi.n	800a03a <__gethex+0x126>
 8009fd8:	f1a0 0210 	sub.w	r2, r0, #16
 8009fdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009fe0:	f7ff ff82 	bl	8009ee8 <__hexdig_fun>
 8009fe4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009fe8:	fa5f fc8c 	uxtb.w	ip, ip
 8009fec:	f1bc 0f18 	cmp.w	ip, #24
 8009ff0:	f04f 030a 	mov.w	r3, #10
 8009ff4:	d91e      	bls.n	800a034 <__gethex+0x120>
 8009ff6:	b104      	cbz	r4, 8009ffa <__gethex+0xe6>
 8009ff8:	4252      	negs	r2, r2
 8009ffa:	4417      	add	r7, r2
 8009ffc:	f8ca 1000 	str.w	r1, [sl]
 800a000:	b1ed      	cbz	r5, 800a03e <__gethex+0x12a>
 800a002:	f1bb 0f00 	cmp.w	fp, #0
 800a006:	bf0c      	ite	eq
 800a008:	2506      	moveq	r5, #6
 800a00a:	2500      	movne	r5, #0
 800a00c:	4628      	mov	r0, r5
 800a00e:	b005      	add	sp, #20
 800a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a014:	2500      	movs	r5, #0
 800a016:	462c      	mov	r4, r5
 800a018:	e7b0      	b.n	8009f7c <__gethex+0x68>
 800a01a:	2c00      	cmp	r4, #0
 800a01c:	d1c7      	bne.n	8009fae <__gethex+0x9a>
 800a01e:	4627      	mov	r7, r4
 800a020:	e7c7      	b.n	8009fb2 <__gethex+0x9e>
 800a022:	464e      	mov	r6, r9
 800a024:	462f      	mov	r7, r5
 800a026:	2501      	movs	r5, #1
 800a028:	e7c3      	b.n	8009fb2 <__gethex+0x9e>
 800a02a:	2400      	movs	r4, #0
 800a02c:	1cb1      	adds	r1, r6, #2
 800a02e:	e7cc      	b.n	8009fca <__gethex+0xb6>
 800a030:	2401      	movs	r4, #1
 800a032:	e7fb      	b.n	800a02c <__gethex+0x118>
 800a034:	fb03 0002 	mla	r0, r3, r2, r0
 800a038:	e7ce      	b.n	8009fd8 <__gethex+0xc4>
 800a03a:	4631      	mov	r1, r6
 800a03c:	e7de      	b.n	8009ffc <__gethex+0xe8>
 800a03e:	eba6 0309 	sub.w	r3, r6, r9
 800a042:	3b01      	subs	r3, #1
 800a044:	4629      	mov	r1, r5
 800a046:	2b07      	cmp	r3, #7
 800a048:	dc0a      	bgt.n	800a060 <__gethex+0x14c>
 800a04a:	9801      	ldr	r0, [sp, #4]
 800a04c:	f7fe f948 	bl	80082e0 <_Balloc>
 800a050:	4604      	mov	r4, r0
 800a052:	b940      	cbnz	r0, 800a066 <__gethex+0x152>
 800a054:	4b5c      	ldr	r3, [pc, #368]	@ (800a1c8 <__gethex+0x2b4>)
 800a056:	4602      	mov	r2, r0
 800a058:	21e4      	movs	r1, #228	@ 0xe4
 800a05a:	485c      	ldr	r0, [pc, #368]	@ (800a1cc <__gethex+0x2b8>)
 800a05c:	f7ff fec0 	bl	8009de0 <__assert_func>
 800a060:	3101      	adds	r1, #1
 800a062:	105b      	asrs	r3, r3, #1
 800a064:	e7ef      	b.n	800a046 <__gethex+0x132>
 800a066:	f100 0a14 	add.w	sl, r0, #20
 800a06a:	2300      	movs	r3, #0
 800a06c:	4655      	mov	r5, sl
 800a06e:	469b      	mov	fp, r3
 800a070:	45b1      	cmp	r9, r6
 800a072:	d337      	bcc.n	800a0e4 <__gethex+0x1d0>
 800a074:	f845 bb04 	str.w	fp, [r5], #4
 800a078:	eba5 050a 	sub.w	r5, r5, sl
 800a07c:	10ad      	asrs	r5, r5, #2
 800a07e:	6125      	str	r5, [r4, #16]
 800a080:	4658      	mov	r0, fp
 800a082:	f7fe fa1f 	bl	80084c4 <__hi0bits>
 800a086:	016d      	lsls	r5, r5, #5
 800a088:	f8d8 6000 	ldr.w	r6, [r8]
 800a08c:	1a2d      	subs	r5, r5, r0
 800a08e:	42b5      	cmp	r5, r6
 800a090:	dd54      	ble.n	800a13c <__gethex+0x228>
 800a092:	1bad      	subs	r5, r5, r6
 800a094:	4629      	mov	r1, r5
 800a096:	4620      	mov	r0, r4
 800a098:	f7fe fdb3 	bl	8008c02 <__any_on>
 800a09c:	4681      	mov	r9, r0
 800a09e:	b178      	cbz	r0, 800a0c0 <__gethex+0x1ac>
 800a0a0:	1e6b      	subs	r3, r5, #1
 800a0a2:	1159      	asrs	r1, r3, #5
 800a0a4:	f003 021f 	and.w	r2, r3, #31
 800a0a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a0ac:	f04f 0901 	mov.w	r9, #1
 800a0b0:	fa09 f202 	lsl.w	r2, r9, r2
 800a0b4:	420a      	tst	r2, r1
 800a0b6:	d003      	beq.n	800a0c0 <__gethex+0x1ac>
 800a0b8:	454b      	cmp	r3, r9
 800a0ba:	dc36      	bgt.n	800a12a <__gethex+0x216>
 800a0bc:	f04f 0902 	mov.w	r9, #2
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff febe 	bl	8009e44 <rshift>
 800a0c8:	442f      	add	r7, r5
 800a0ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ce:	42bb      	cmp	r3, r7
 800a0d0:	da42      	bge.n	800a158 <__gethex+0x244>
 800a0d2:	9801      	ldr	r0, [sp, #4]
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f7fe f943 	bl	8008360 <_Bfree>
 800a0da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0dc:	2300      	movs	r3, #0
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	25a3      	movs	r5, #163	@ 0xa3
 800a0e2:	e793      	b.n	800a00c <__gethex+0xf8>
 800a0e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a0e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a0ea:	d012      	beq.n	800a112 <__gethex+0x1fe>
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	d104      	bne.n	800a0fa <__gethex+0x1e6>
 800a0f0:	f845 bb04 	str.w	fp, [r5], #4
 800a0f4:	f04f 0b00 	mov.w	fp, #0
 800a0f8:	465b      	mov	r3, fp
 800a0fa:	7830      	ldrb	r0, [r6, #0]
 800a0fc:	9303      	str	r3, [sp, #12]
 800a0fe:	f7ff fef3 	bl	8009ee8 <__hexdig_fun>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	f000 000f 	and.w	r0, r0, #15
 800a108:	4098      	lsls	r0, r3
 800a10a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a10e:	3304      	adds	r3, #4
 800a110:	e7ae      	b.n	800a070 <__gethex+0x15c>
 800a112:	45b1      	cmp	r9, r6
 800a114:	d8ea      	bhi.n	800a0ec <__gethex+0x1d8>
 800a116:	492b      	ldr	r1, [pc, #172]	@ (800a1c4 <__gethex+0x2b0>)
 800a118:	9303      	str	r3, [sp, #12]
 800a11a:	2201      	movs	r2, #1
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff fe33 	bl	8009d88 <strncmp>
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	2800      	cmp	r0, #0
 800a126:	d1e1      	bne.n	800a0ec <__gethex+0x1d8>
 800a128:	e7a2      	b.n	800a070 <__gethex+0x15c>
 800a12a:	1ea9      	subs	r1, r5, #2
 800a12c:	4620      	mov	r0, r4
 800a12e:	f7fe fd68 	bl	8008c02 <__any_on>
 800a132:	2800      	cmp	r0, #0
 800a134:	d0c2      	beq.n	800a0bc <__gethex+0x1a8>
 800a136:	f04f 0903 	mov.w	r9, #3
 800a13a:	e7c1      	b.n	800a0c0 <__gethex+0x1ac>
 800a13c:	da09      	bge.n	800a152 <__gethex+0x23e>
 800a13e:	1b75      	subs	r5, r6, r5
 800a140:	4621      	mov	r1, r4
 800a142:	9801      	ldr	r0, [sp, #4]
 800a144:	462a      	mov	r2, r5
 800a146:	f7fe fb23 	bl	8008790 <__lshift>
 800a14a:	1b7f      	subs	r7, r7, r5
 800a14c:	4604      	mov	r4, r0
 800a14e:	f100 0a14 	add.w	sl, r0, #20
 800a152:	f04f 0900 	mov.w	r9, #0
 800a156:	e7b8      	b.n	800a0ca <__gethex+0x1b6>
 800a158:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a15c:	42bd      	cmp	r5, r7
 800a15e:	dd6f      	ble.n	800a240 <__gethex+0x32c>
 800a160:	1bed      	subs	r5, r5, r7
 800a162:	42ae      	cmp	r6, r5
 800a164:	dc34      	bgt.n	800a1d0 <__gethex+0x2bc>
 800a166:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d022      	beq.n	800a1b4 <__gethex+0x2a0>
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d024      	beq.n	800a1bc <__gethex+0x2a8>
 800a172:	2b01      	cmp	r3, #1
 800a174:	d115      	bne.n	800a1a2 <__gethex+0x28e>
 800a176:	42ae      	cmp	r6, r5
 800a178:	d113      	bne.n	800a1a2 <__gethex+0x28e>
 800a17a:	2e01      	cmp	r6, #1
 800a17c:	d10b      	bne.n	800a196 <__gethex+0x282>
 800a17e:	9a02      	ldr	r2, [sp, #8]
 800a180:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	2301      	movs	r3, #1
 800a188:	6123      	str	r3, [r4, #16]
 800a18a:	f8ca 3000 	str.w	r3, [sl]
 800a18e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a190:	2562      	movs	r5, #98	@ 0x62
 800a192:	601c      	str	r4, [r3, #0]
 800a194:	e73a      	b.n	800a00c <__gethex+0xf8>
 800a196:	1e71      	subs	r1, r6, #1
 800a198:	4620      	mov	r0, r4
 800a19a:	f7fe fd32 	bl	8008c02 <__any_on>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d1ed      	bne.n	800a17e <__gethex+0x26a>
 800a1a2:	9801      	ldr	r0, [sp, #4]
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	f7fe f8db 	bl	8008360 <_Bfree>
 800a1aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	2550      	movs	r5, #80	@ 0x50
 800a1b2:	e72b      	b.n	800a00c <__gethex+0xf8>
 800a1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1f3      	bne.n	800a1a2 <__gethex+0x28e>
 800a1ba:	e7e0      	b.n	800a17e <__gethex+0x26a>
 800a1bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1dd      	bne.n	800a17e <__gethex+0x26a>
 800a1c2:	e7ee      	b.n	800a1a2 <__gethex+0x28e>
 800a1c4:	0800b400 	.word	0x0800b400
 800a1c8:	0800b295 	.word	0x0800b295
 800a1cc:	0800b5ae 	.word	0x0800b5ae
 800a1d0:	1e6f      	subs	r7, r5, #1
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	d130      	bne.n	800a23a <__gethex+0x326>
 800a1d8:	b127      	cbz	r7, 800a1e4 <__gethex+0x2d0>
 800a1da:	4639      	mov	r1, r7
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f7fe fd10 	bl	8008c02 <__any_on>
 800a1e2:	4681      	mov	r9, r0
 800a1e4:	117a      	asrs	r2, r7, #5
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a1ec:	f007 071f 	and.w	r7, r7, #31
 800a1f0:	40bb      	lsls	r3, r7
 800a1f2:	4213      	tst	r3, r2
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	bf18      	it	ne
 800a1fa:	f049 0902 	orrne.w	r9, r9, #2
 800a1fe:	f7ff fe21 	bl	8009e44 <rshift>
 800a202:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a206:	1b76      	subs	r6, r6, r5
 800a208:	2502      	movs	r5, #2
 800a20a:	f1b9 0f00 	cmp.w	r9, #0
 800a20e:	d047      	beq.n	800a2a0 <__gethex+0x38c>
 800a210:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d015      	beq.n	800a244 <__gethex+0x330>
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d017      	beq.n	800a24c <__gethex+0x338>
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d109      	bne.n	800a234 <__gethex+0x320>
 800a220:	f019 0f02 	tst.w	r9, #2
 800a224:	d006      	beq.n	800a234 <__gethex+0x320>
 800a226:	f8da 3000 	ldr.w	r3, [sl]
 800a22a:	ea49 0903 	orr.w	r9, r9, r3
 800a22e:	f019 0f01 	tst.w	r9, #1
 800a232:	d10e      	bne.n	800a252 <__gethex+0x33e>
 800a234:	f045 0510 	orr.w	r5, r5, #16
 800a238:	e032      	b.n	800a2a0 <__gethex+0x38c>
 800a23a:	f04f 0901 	mov.w	r9, #1
 800a23e:	e7d1      	b.n	800a1e4 <__gethex+0x2d0>
 800a240:	2501      	movs	r5, #1
 800a242:	e7e2      	b.n	800a20a <__gethex+0x2f6>
 800a244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a246:	f1c3 0301 	rsb	r3, r3, #1
 800a24a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0f0      	beq.n	800a234 <__gethex+0x320>
 800a252:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a256:	f104 0314 	add.w	r3, r4, #20
 800a25a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a25e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a262:	f04f 0c00 	mov.w	ip, #0
 800a266:	4618      	mov	r0, r3
 800a268:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a270:	d01b      	beq.n	800a2aa <__gethex+0x396>
 800a272:	3201      	adds	r2, #1
 800a274:	6002      	str	r2, [r0, #0]
 800a276:	2d02      	cmp	r5, #2
 800a278:	f104 0314 	add.w	r3, r4, #20
 800a27c:	d13c      	bne.n	800a2f8 <__gethex+0x3e4>
 800a27e:	f8d8 2000 	ldr.w	r2, [r8]
 800a282:	3a01      	subs	r2, #1
 800a284:	42b2      	cmp	r2, r6
 800a286:	d109      	bne.n	800a29c <__gethex+0x388>
 800a288:	1171      	asrs	r1, r6, #5
 800a28a:	2201      	movs	r2, #1
 800a28c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a290:	f006 061f 	and.w	r6, r6, #31
 800a294:	fa02 f606 	lsl.w	r6, r2, r6
 800a298:	421e      	tst	r6, r3
 800a29a:	d13a      	bne.n	800a312 <__gethex+0x3fe>
 800a29c:	f045 0520 	orr.w	r5, r5, #32
 800a2a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2a2:	601c      	str	r4, [r3, #0]
 800a2a4:	9b02      	ldr	r3, [sp, #8]
 800a2a6:	601f      	str	r7, [r3, #0]
 800a2a8:	e6b0      	b.n	800a00c <__gethex+0xf8>
 800a2aa:	4299      	cmp	r1, r3
 800a2ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800a2b0:	d8d9      	bhi.n	800a266 <__gethex+0x352>
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	459b      	cmp	fp, r3
 800a2b6:	db17      	blt.n	800a2e8 <__gethex+0x3d4>
 800a2b8:	6861      	ldr	r1, [r4, #4]
 800a2ba:	9801      	ldr	r0, [sp, #4]
 800a2bc:	3101      	adds	r1, #1
 800a2be:	f7fe f80f 	bl	80082e0 <_Balloc>
 800a2c2:	4681      	mov	r9, r0
 800a2c4:	b918      	cbnz	r0, 800a2ce <__gethex+0x3ba>
 800a2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a330 <__gethex+0x41c>)
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	2184      	movs	r1, #132	@ 0x84
 800a2cc:	e6c5      	b.n	800a05a <__gethex+0x146>
 800a2ce:	6922      	ldr	r2, [r4, #16]
 800a2d0:	3202      	adds	r2, #2
 800a2d2:	f104 010c 	add.w	r1, r4, #12
 800a2d6:	0092      	lsls	r2, r2, #2
 800a2d8:	300c      	adds	r0, #12
 800a2da:	f7fd f89e 	bl	800741a <memcpy>
 800a2de:	4621      	mov	r1, r4
 800a2e0:	9801      	ldr	r0, [sp, #4]
 800a2e2:	f7fe f83d 	bl	8008360 <_Bfree>
 800a2e6:	464c      	mov	r4, r9
 800a2e8:	6923      	ldr	r3, [r4, #16]
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2f0:	6122      	str	r2, [r4, #16]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	615a      	str	r2, [r3, #20]
 800a2f6:	e7be      	b.n	800a276 <__gethex+0x362>
 800a2f8:	6922      	ldr	r2, [r4, #16]
 800a2fa:	455a      	cmp	r2, fp
 800a2fc:	dd0b      	ble.n	800a316 <__gethex+0x402>
 800a2fe:	2101      	movs	r1, #1
 800a300:	4620      	mov	r0, r4
 800a302:	f7ff fd9f 	bl	8009e44 <rshift>
 800a306:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a30a:	3701      	adds	r7, #1
 800a30c:	42bb      	cmp	r3, r7
 800a30e:	f6ff aee0 	blt.w	800a0d2 <__gethex+0x1be>
 800a312:	2501      	movs	r5, #1
 800a314:	e7c2      	b.n	800a29c <__gethex+0x388>
 800a316:	f016 061f 	ands.w	r6, r6, #31
 800a31a:	d0fa      	beq.n	800a312 <__gethex+0x3fe>
 800a31c:	4453      	add	r3, sl
 800a31e:	f1c6 0620 	rsb	r6, r6, #32
 800a322:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a326:	f7fe f8cd 	bl	80084c4 <__hi0bits>
 800a32a:	42b0      	cmp	r0, r6
 800a32c:	dbe7      	blt.n	800a2fe <__gethex+0x3ea>
 800a32e:	e7f0      	b.n	800a312 <__gethex+0x3fe>
 800a330:	0800b295 	.word	0x0800b295

0800a334 <L_shift>:
 800a334:	f1c2 0208 	rsb	r2, r2, #8
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	b570      	push	{r4, r5, r6, lr}
 800a33c:	f1c2 0620 	rsb	r6, r2, #32
 800a340:	6843      	ldr	r3, [r0, #4]
 800a342:	6804      	ldr	r4, [r0, #0]
 800a344:	fa03 f506 	lsl.w	r5, r3, r6
 800a348:	432c      	orrs	r4, r5
 800a34a:	40d3      	lsrs	r3, r2
 800a34c:	6004      	str	r4, [r0, #0]
 800a34e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a352:	4288      	cmp	r0, r1
 800a354:	d3f4      	bcc.n	800a340 <L_shift+0xc>
 800a356:	bd70      	pop	{r4, r5, r6, pc}

0800a358 <__match>:
 800a358:	b530      	push	{r4, r5, lr}
 800a35a:	6803      	ldr	r3, [r0, #0]
 800a35c:	3301      	adds	r3, #1
 800a35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a362:	b914      	cbnz	r4, 800a36a <__match+0x12>
 800a364:	6003      	str	r3, [r0, #0]
 800a366:	2001      	movs	r0, #1
 800a368:	bd30      	pop	{r4, r5, pc}
 800a36a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a36e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a372:	2d19      	cmp	r5, #25
 800a374:	bf98      	it	ls
 800a376:	3220      	addls	r2, #32
 800a378:	42a2      	cmp	r2, r4
 800a37a:	d0f0      	beq.n	800a35e <__match+0x6>
 800a37c:	2000      	movs	r0, #0
 800a37e:	e7f3      	b.n	800a368 <__match+0x10>

0800a380 <__hexnan>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	680b      	ldr	r3, [r1, #0]
 800a386:	6801      	ldr	r1, [r0, #0]
 800a388:	115e      	asrs	r6, r3, #5
 800a38a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a38e:	f013 031f 	ands.w	r3, r3, #31
 800a392:	b087      	sub	sp, #28
 800a394:	bf18      	it	ne
 800a396:	3604      	addne	r6, #4
 800a398:	2500      	movs	r5, #0
 800a39a:	1f37      	subs	r7, r6, #4
 800a39c:	4682      	mov	sl, r0
 800a39e:	4690      	mov	r8, r2
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3a6:	46b9      	mov	r9, r7
 800a3a8:	463c      	mov	r4, r7
 800a3aa:	9502      	str	r5, [sp, #8]
 800a3ac:	46ab      	mov	fp, r5
 800a3ae:	784a      	ldrb	r2, [r1, #1]
 800a3b0:	1c4b      	adds	r3, r1, #1
 800a3b2:	9303      	str	r3, [sp, #12]
 800a3b4:	b342      	cbz	r2, 800a408 <__hexnan+0x88>
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	9105      	str	r1, [sp, #20]
 800a3ba:	9204      	str	r2, [sp, #16]
 800a3bc:	f7ff fd94 	bl	8009ee8 <__hexdig_fun>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d151      	bne.n	800a468 <__hexnan+0xe8>
 800a3c4:	9a04      	ldr	r2, [sp, #16]
 800a3c6:	9905      	ldr	r1, [sp, #20]
 800a3c8:	2a20      	cmp	r2, #32
 800a3ca:	d818      	bhi.n	800a3fe <__hexnan+0x7e>
 800a3cc:	9b02      	ldr	r3, [sp, #8]
 800a3ce:	459b      	cmp	fp, r3
 800a3d0:	dd13      	ble.n	800a3fa <__hexnan+0x7a>
 800a3d2:	454c      	cmp	r4, r9
 800a3d4:	d206      	bcs.n	800a3e4 <__hexnan+0x64>
 800a3d6:	2d07      	cmp	r5, #7
 800a3d8:	dc04      	bgt.n	800a3e4 <__hexnan+0x64>
 800a3da:	462a      	mov	r2, r5
 800a3dc:	4649      	mov	r1, r9
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f7ff ffa8 	bl	800a334 <L_shift>
 800a3e4:	4544      	cmp	r4, r8
 800a3e6:	d952      	bls.n	800a48e <__hexnan+0x10e>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f1a4 0904 	sub.w	r9, r4, #4
 800a3ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3f2:	f8cd b008 	str.w	fp, [sp, #8]
 800a3f6:	464c      	mov	r4, r9
 800a3f8:	461d      	mov	r5, r3
 800a3fa:	9903      	ldr	r1, [sp, #12]
 800a3fc:	e7d7      	b.n	800a3ae <__hexnan+0x2e>
 800a3fe:	2a29      	cmp	r2, #41	@ 0x29
 800a400:	d157      	bne.n	800a4b2 <__hexnan+0x132>
 800a402:	3102      	adds	r1, #2
 800a404:	f8ca 1000 	str.w	r1, [sl]
 800a408:	f1bb 0f00 	cmp.w	fp, #0
 800a40c:	d051      	beq.n	800a4b2 <__hexnan+0x132>
 800a40e:	454c      	cmp	r4, r9
 800a410:	d206      	bcs.n	800a420 <__hexnan+0xa0>
 800a412:	2d07      	cmp	r5, #7
 800a414:	dc04      	bgt.n	800a420 <__hexnan+0xa0>
 800a416:	462a      	mov	r2, r5
 800a418:	4649      	mov	r1, r9
 800a41a:	4620      	mov	r0, r4
 800a41c:	f7ff ff8a 	bl	800a334 <L_shift>
 800a420:	4544      	cmp	r4, r8
 800a422:	d936      	bls.n	800a492 <__hexnan+0x112>
 800a424:	f1a8 0204 	sub.w	r2, r8, #4
 800a428:	4623      	mov	r3, r4
 800a42a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a42e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a432:	429f      	cmp	r7, r3
 800a434:	d2f9      	bcs.n	800a42a <__hexnan+0xaa>
 800a436:	1b3b      	subs	r3, r7, r4
 800a438:	f023 0303 	bic.w	r3, r3, #3
 800a43c:	3304      	adds	r3, #4
 800a43e:	3401      	adds	r4, #1
 800a440:	3e03      	subs	r6, #3
 800a442:	42b4      	cmp	r4, r6
 800a444:	bf88      	it	hi
 800a446:	2304      	movhi	r3, #4
 800a448:	4443      	add	r3, r8
 800a44a:	2200      	movs	r2, #0
 800a44c:	f843 2b04 	str.w	r2, [r3], #4
 800a450:	429f      	cmp	r7, r3
 800a452:	d2fb      	bcs.n	800a44c <__hexnan+0xcc>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	b91b      	cbnz	r3, 800a460 <__hexnan+0xe0>
 800a458:	4547      	cmp	r7, r8
 800a45a:	d128      	bne.n	800a4ae <__hexnan+0x12e>
 800a45c:	2301      	movs	r3, #1
 800a45e:	603b      	str	r3, [r7, #0]
 800a460:	2005      	movs	r0, #5
 800a462:	b007      	add	sp, #28
 800a464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a468:	3501      	adds	r5, #1
 800a46a:	2d08      	cmp	r5, #8
 800a46c:	f10b 0b01 	add.w	fp, fp, #1
 800a470:	dd06      	ble.n	800a480 <__hexnan+0x100>
 800a472:	4544      	cmp	r4, r8
 800a474:	d9c1      	bls.n	800a3fa <__hexnan+0x7a>
 800a476:	2300      	movs	r3, #0
 800a478:	f844 3c04 	str.w	r3, [r4, #-4]
 800a47c:	2501      	movs	r5, #1
 800a47e:	3c04      	subs	r4, #4
 800a480:	6822      	ldr	r2, [r4, #0]
 800a482:	f000 000f 	and.w	r0, r0, #15
 800a486:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a48a:	6020      	str	r0, [r4, #0]
 800a48c:	e7b5      	b.n	800a3fa <__hexnan+0x7a>
 800a48e:	2508      	movs	r5, #8
 800a490:	e7b3      	b.n	800a3fa <__hexnan+0x7a>
 800a492:	9b01      	ldr	r3, [sp, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d0dd      	beq.n	800a454 <__hexnan+0xd4>
 800a498:	f1c3 0320 	rsb	r3, r3, #32
 800a49c:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a0:	40da      	lsrs	r2, r3
 800a4a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a4ac:	e7d2      	b.n	800a454 <__hexnan+0xd4>
 800a4ae:	3f04      	subs	r7, #4
 800a4b0:	e7d0      	b.n	800a454 <__hexnan+0xd4>
 800a4b2:	2004      	movs	r0, #4
 800a4b4:	e7d5      	b.n	800a462 <__hexnan+0xe2>

0800a4b6 <__ascii_mbtowc>:
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	b901      	cbnz	r1, 800a4bc <__ascii_mbtowc+0x6>
 800a4ba:	a901      	add	r1, sp, #4
 800a4bc:	b142      	cbz	r2, 800a4d0 <__ascii_mbtowc+0x1a>
 800a4be:	b14b      	cbz	r3, 800a4d4 <__ascii_mbtowc+0x1e>
 800a4c0:	7813      	ldrb	r3, [r2, #0]
 800a4c2:	600b      	str	r3, [r1, #0]
 800a4c4:	7812      	ldrb	r2, [r2, #0]
 800a4c6:	1e10      	subs	r0, r2, #0
 800a4c8:	bf18      	it	ne
 800a4ca:	2001      	movne	r0, #1
 800a4cc:	b002      	add	sp, #8
 800a4ce:	4770      	bx	lr
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	e7fb      	b.n	800a4cc <__ascii_mbtowc+0x16>
 800a4d4:	f06f 0001 	mvn.w	r0, #1
 800a4d8:	e7f8      	b.n	800a4cc <__ascii_mbtowc+0x16>

0800a4da <_realloc_r>:
 800a4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	4680      	mov	r8, r0
 800a4e0:	4615      	mov	r5, r2
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	b921      	cbnz	r1, 800a4f0 <_realloc_r+0x16>
 800a4e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	f7fd be6c 	b.w	80081c8 <_malloc_r>
 800a4f0:	b92a      	cbnz	r2, 800a4fe <_realloc_r+0x24>
 800a4f2:	f7fd fdf5 	bl	80080e0 <_free_r>
 800a4f6:	2400      	movs	r4, #0
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4fe:	f000 f840 	bl	800a582 <_malloc_usable_size_r>
 800a502:	4285      	cmp	r5, r0
 800a504:	4606      	mov	r6, r0
 800a506:	d802      	bhi.n	800a50e <_realloc_r+0x34>
 800a508:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a50c:	d8f4      	bhi.n	800a4f8 <_realloc_r+0x1e>
 800a50e:	4629      	mov	r1, r5
 800a510:	4640      	mov	r0, r8
 800a512:	f7fd fe59 	bl	80081c8 <_malloc_r>
 800a516:	4607      	mov	r7, r0
 800a518:	2800      	cmp	r0, #0
 800a51a:	d0ec      	beq.n	800a4f6 <_realloc_r+0x1c>
 800a51c:	42b5      	cmp	r5, r6
 800a51e:	462a      	mov	r2, r5
 800a520:	4621      	mov	r1, r4
 800a522:	bf28      	it	cs
 800a524:	4632      	movcs	r2, r6
 800a526:	f7fc ff78 	bl	800741a <memcpy>
 800a52a:	4621      	mov	r1, r4
 800a52c:	4640      	mov	r0, r8
 800a52e:	f7fd fdd7 	bl	80080e0 <_free_r>
 800a532:	463c      	mov	r4, r7
 800a534:	e7e0      	b.n	800a4f8 <_realloc_r+0x1e>

0800a536 <__ascii_wctomb>:
 800a536:	4603      	mov	r3, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	b141      	cbz	r1, 800a54e <__ascii_wctomb+0x18>
 800a53c:	2aff      	cmp	r2, #255	@ 0xff
 800a53e:	d904      	bls.n	800a54a <__ascii_wctomb+0x14>
 800a540:	228a      	movs	r2, #138	@ 0x8a
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	4770      	bx	lr
 800a54a:	700a      	strb	r2, [r1, #0]
 800a54c:	2001      	movs	r0, #1
 800a54e:	4770      	bx	lr

0800a550 <fiprintf>:
 800a550:	b40e      	push	{r1, r2, r3}
 800a552:	b503      	push	{r0, r1, lr}
 800a554:	4601      	mov	r1, r0
 800a556:	ab03      	add	r3, sp, #12
 800a558:	4805      	ldr	r0, [pc, #20]	@ (800a570 <fiprintf+0x20>)
 800a55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55e:	6800      	ldr	r0, [r0, #0]
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	f000 f83f 	bl	800a5e4 <_vfiprintf_r>
 800a566:	b002      	add	sp, #8
 800a568:	f85d eb04 	ldr.w	lr, [sp], #4
 800a56c:	b003      	add	sp, #12
 800a56e:	4770      	bx	lr
 800a570:	20000028 	.word	0x20000028

0800a574 <abort>:
 800a574:	b508      	push	{r3, lr}
 800a576:	2006      	movs	r0, #6
 800a578:	f000 fa08 	bl	800a98c <raise>
 800a57c:	2001      	movs	r0, #1
 800a57e:	f7f7 ff6f 	bl	8002460 <_exit>

0800a582 <_malloc_usable_size_r>:
 800a582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a586:	1f18      	subs	r0, r3, #4
 800a588:	2b00      	cmp	r3, #0
 800a58a:	bfbc      	itt	lt
 800a58c:	580b      	ldrlt	r3, [r1, r0]
 800a58e:	18c0      	addlt	r0, r0, r3
 800a590:	4770      	bx	lr

0800a592 <__sfputc_r>:
 800a592:	6893      	ldr	r3, [r2, #8]
 800a594:	3b01      	subs	r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	b410      	push	{r4}
 800a59a:	6093      	str	r3, [r2, #8]
 800a59c:	da08      	bge.n	800a5b0 <__sfputc_r+0x1e>
 800a59e:	6994      	ldr	r4, [r2, #24]
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	db01      	blt.n	800a5a8 <__sfputc_r+0x16>
 800a5a4:	290a      	cmp	r1, #10
 800a5a6:	d103      	bne.n	800a5b0 <__sfputc_r+0x1e>
 800a5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ac:	f000 b932 	b.w	800a814 <__swbuf_r>
 800a5b0:	6813      	ldr	r3, [r2, #0]
 800a5b2:	1c58      	adds	r0, r3, #1
 800a5b4:	6010      	str	r0, [r2, #0]
 800a5b6:	7019      	strb	r1, [r3, #0]
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <__sfputs_r>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	460f      	mov	r7, r1
 800a5c6:	4614      	mov	r4, r2
 800a5c8:	18d5      	adds	r5, r2, r3
 800a5ca:	42ac      	cmp	r4, r5
 800a5cc:	d101      	bne.n	800a5d2 <__sfputs_r+0x12>
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	e007      	b.n	800a5e2 <__sfputs_r+0x22>
 800a5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d6:	463a      	mov	r2, r7
 800a5d8:	4630      	mov	r0, r6
 800a5da:	f7ff ffda 	bl	800a592 <__sfputc_r>
 800a5de:	1c43      	adds	r3, r0, #1
 800a5e0:	d1f3      	bne.n	800a5ca <__sfputs_r+0xa>
 800a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5e4 <_vfiprintf_r>:
 800a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e8:	460d      	mov	r5, r1
 800a5ea:	b09d      	sub	sp, #116	@ 0x74
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	4698      	mov	r8, r3
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	b118      	cbz	r0, 800a5fc <_vfiprintf_r+0x18>
 800a5f4:	6a03      	ldr	r3, [r0, #32]
 800a5f6:	b90b      	cbnz	r3, 800a5fc <_vfiprintf_r+0x18>
 800a5f8:	f7fc fdf6 	bl	80071e8 <__sinit>
 800a5fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5fe:	07d9      	lsls	r1, r3, #31
 800a600:	d405      	bmi.n	800a60e <_vfiprintf_r+0x2a>
 800a602:	89ab      	ldrh	r3, [r5, #12]
 800a604:	059a      	lsls	r2, r3, #22
 800a606:	d402      	bmi.n	800a60e <_vfiprintf_r+0x2a>
 800a608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a60a:	f7fc ff04 	bl	8007416 <__retarget_lock_acquire_recursive>
 800a60e:	89ab      	ldrh	r3, [r5, #12]
 800a610:	071b      	lsls	r3, r3, #28
 800a612:	d501      	bpl.n	800a618 <_vfiprintf_r+0x34>
 800a614:	692b      	ldr	r3, [r5, #16]
 800a616:	b99b      	cbnz	r3, 800a640 <_vfiprintf_r+0x5c>
 800a618:	4629      	mov	r1, r5
 800a61a:	4630      	mov	r0, r6
 800a61c:	f000 f938 	bl	800a890 <__swsetup_r>
 800a620:	b170      	cbz	r0, 800a640 <_vfiprintf_r+0x5c>
 800a622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a624:	07dc      	lsls	r4, r3, #31
 800a626:	d504      	bpl.n	800a632 <_vfiprintf_r+0x4e>
 800a628:	f04f 30ff 	mov.w	r0, #4294967295
 800a62c:	b01d      	add	sp, #116	@ 0x74
 800a62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a632:	89ab      	ldrh	r3, [r5, #12]
 800a634:	0598      	lsls	r0, r3, #22
 800a636:	d4f7      	bmi.n	800a628 <_vfiprintf_r+0x44>
 800a638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a63a:	f7fc feed 	bl	8007418 <__retarget_lock_release_recursive>
 800a63e:	e7f3      	b.n	800a628 <_vfiprintf_r+0x44>
 800a640:	2300      	movs	r3, #0
 800a642:	9309      	str	r3, [sp, #36]	@ 0x24
 800a644:	2320      	movs	r3, #32
 800a646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a64a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64e:	2330      	movs	r3, #48	@ 0x30
 800a650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a800 <_vfiprintf_r+0x21c>
 800a654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a658:	f04f 0901 	mov.w	r9, #1
 800a65c:	4623      	mov	r3, r4
 800a65e:	469a      	mov	sl, r3
 800a660:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a664:	b10a      	cbz	r2, 800a66a <_vfiprintf_r+0x86>
 800a666:	2a25      	cmp	r2, #37	@ 0x25
 800a668:	d1f9      	bne.n	800a65e <_vfiprintf_r+0x7a>
 800a66a:	ebba 0b04 	subs.w	fp, sl, r4
 800a66e:	d00b      	beq.n	800a688 <_vfiprintf_r+0xa4>
 800a670:	465b      	mov	r3, fp
 800a672:	4622      	mov	r2, r4
 800a674:	4629      	mov	r1, r5
 800a676:	4630      	mov	r0, r6
 800a678:	f7ff ffa2 	bl	800a5c0 <__sfputs_r>
 800a67c:	3001      	adds	r0, #1
 800a67e:	f000 80a7 	beq.w	800a7d0 <_vfiprintf_r+0x1ec>
 800a682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a684:	445a      	add	r2, fp
 800a686:	9209      	str	r2, [sp, #36]	@ 0x24
 800a688:	f89a 3000 	ldrb.w	r3, [sl]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 809f 	beq.w	800a7d0 <_vfiprintf_r+0x1ec>
 800a692:	2300      	movs	r3, #0
 800a694:	f04f 32ff 	mov.w	r2, #4294967295
 800a698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a69c:	f10a 0a01 	add.w	sl, sl, #1
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	9307      	str	r3, [sp, #28]
 800a6a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6aa:	4654      	mov	r4, sl
 800a6ac:	2205      	movs	r2, #5
 800a6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b2:	4853      	ldr	r0, [pc, #332]	@ (800a800 <_vfiprintf_r+0x21c>)
 800a6b4:	f7f5 fd8c 	bl	80001d0 <memchr>
 800a6b8:	9a04      	ldr	r2, [sp, #16]
 800a6ba:	b9d8      	cbnz	r0, 800a6f4 <_vfiprintf_r+0x110>
 800a6bc:	06d1      	lsls	r1, r2, #27
 800a6be:	bf44      	itt	mi
 800a6c0:	2320      	movmi	r3, #32
 800a6c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6c6:	0713      	lsls	r3, r2, #28
 800a6c8:	bf44      	itt	mi
 800a6ca:	232b      	movmi	r3, #43	@ 0x2b
 800a6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6d6:	d015      	beq.n	800a704 <_vfiprintf_r+0x120>
 800a6d8:	9a07      	ldr	r2, [sp, #28]
 800a6da:	4654      	mov	r4, sl
 800a6dc:	2000      	movs	r0, #0
 800a6de:	f04f 0c0a 	mov.w	ip, #10
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e8:	3b30      	subs	r3, #48	@ 0x30
 800a6ea:	2b09      	cmp	r3, #9
 800a6ec:	d94b      	bls.n	800a786 <_vfiprintf_r+0x1a2>
 800a6ee:	b1b0      	cbz	r0, 800a71e <_vfiprintf_r+0x13a>
 800a6f0:	9207      	str	r2, [sp, #28]
 800a6f2:	e014      	b.n	800a71e <_vfiprintf_r+0x13a>
 800a6f4:	eba0 0308 	sub.w	r3, r0, r8
 800a6f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	9304      	str	r3, [sp, #16]
 800a700:	46a2      	mov	sl, r4
 800a702:	e7d2      	b.n	800a6aa <_vfiprintf_r+0xc6>
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	1d19      	adds	r1, r3, #4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	9103      	str	r1, [sp, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bfbb      	ittet	lt
 800a710:	425b      	neglt	r3, r3
 800a712:	f042 0202 	orrlt.w	r2, r2, #2
 800a716:	9307      	strge	r3, [sp, #28]
 800a718:	9307      	strlt	r3, [sp, #28]
 800a71a:	bfb8      	it	lt
 800a71c:	9204      	strlt	r2, [sp, #16]
 800a71e:	7823      	ldrb	r3, [r4, #0]
 800a720:	2b2e      	cmp	r3, #46	@ 0x2e
 800a722:	d10a      	bne.n	800a73a <_vfiprintf_r+0x156>
 800a724:	7863      	ldrb	r3, [r4, #1]
 800a726:	2b2a      	cmp	r3, #42	@ 0x2a
 800a728:	d132      	bne.n	800a790 <_vfiprintf_r+0x1ac>
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	1d1a      	adds	r2, r3, #4
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	9203      	str	r2, [sp, #12]
 800a732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a736:	3402      	adds	r4, #2
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a810 <_vfiprintf_r+0x22c>
 800a73e:	7821      	ldrb	r1, [r4, #0]
 800a740:	2203      	movs	r2, #3
 800a742:	4650      	mov	r0, sl
 800a744:	f7f5 fd44 	bl	80001d0 <memchr>
 800a748:	b138      	cbz	r0, 800a75a <_vfiprintf_r+0x176>
 800a74a:	9b04      	ldr	r3, [sp, #16]
 800a74c:	eba0 000a 	sub.w	r0, r0, sl
 800a750:	2240      	movs	r2, #64	@ 0x40
 800a752:	4082      	lsls	r2, r0
 800a754:	4313      	orrs	r3, r2
 800a756:	3401      	adds	r4, #1
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75e:	4829      	ldr	r0, [pc, #164]	@ (800a804 <_vfiprintf_r+0x220>)
 800a760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a764:	2206      	movs	r2, #6
 800a766:	f7f5 fd33 	bl	80001d0 <memchr>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d03f      	beq.n	800a7ee <_vfiprintf_r+0x20a>
 800a76e:	4b26      	ldr	r3, [pc, #152]	@ (800a808 <_vfiprintf_r+0x224>)
 800a770:	bb1b      	cbnz	r3, 800a7ba <_vfiprintf_r+0x1d6>
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	3307      	adds	r3, #7
 800a776:	f023 0307 	bic.w	r3, r3, #7
 800a77a:	3308      	adds	r3, #8
 800a77c:	9303      	str	r3, [sp, #12]
 800a77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a780:	443b      	add	r3, r7
 800a782:	9309      	str	r3, [sp, #36]	@ 0x24
 800a784:	e76a      	b.n	800a65c <_vfiprintf_r+0x78>
 800a786:	fb0c 3202 	mla	r2, ip, r2, r3
 800a78a:	460c      	mov	r4, r1
 800a78c:	2001      	movs	r0, #1
 800a78e:	e7a8      	b.n	800a6e2 <_vfiprintf_r+0xfe>
 800a790:	2300      	movs	r3, #0
 800a792:	3401      	adds	r4, #1
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	4619      	mov	r1, r3
 800a798:	f04f 0c0a 	mov.w	ip, #10
 800a79c:	4620      	mov	r0, r4
 800a79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a2:	3a30      	subs	r2, #48	@ 0x30
 800a7a4:	2a09      	cmp	r2, #9
 800a7a6:	d903      	bls.n	800a7b0 <_vfiprintf_r+0x1cc>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0c6      	beq.n	800a73a <_vfiprintf_r+0x156>
 800a7ac:	9105      	str	r1, [sp, #20]
 800a7ae:	e7c4      	b.n	800a73a <_vfiprintf_r+0x156>
 800a7b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e7f0      	b.n	800a79c <_vfiprintf_r+0x1b8>
 800a7ba:	ab03      	add	r3, sp, #12
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	462a      	mov	r2, r5
 800a7c0:	4b12      	ldr	r3, [pc, #72]	@ (800a80c <_vfiprintf_r+0x228>)
 800a7c2:	a904      	add	r1, sp, #16
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7fb feb7 	bl	8006538 <_printf_float>
 800a7ca:	4607      	mov	r7, r0
 800a7cc:	1c78      	adds	r0, r7, #1
 800a7ce:	d1d6      	bne.n	800a77e <_vfiprintf_r+0x19a>
 800a7d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7d2:	07d9      	lsls	r1, r3, #31
 800a7d4:	d405      	bmi.n	800a7e2 <_vfiprintf_r+0x1fe>
 800a7d6:	89ab      	ldrh	r3, [r5, #12]
 800a7d8:	059a      	lsls	r2, r3, #22
 800a7da:	d402      	bmi.n	800a7e2 <_vfiprintf_r+0x1fe>
 800a7dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7de:	f7fc fe1b 	bl	8007418 <__retarget_lock_release_recursive>
 800a7e2:	89ab      	ldrh	r3, [r5, #12]
 800a7e4:	065b      	lsls	r3, r3, #25
 800a7e6:	f53f af1f 	bmi.w	800a628 <_vfiprintf_r+0x44>
 800a7ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7ec:	e71e      	b.n	800a62c <_vfiprintf_r+0x48>
 800a7ee:	ab03      	add	r3, sp, #12
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	462a      	mov	r2, r5
 800a7f4:	4b05      	ldr	r3, [pc, #20]	@ (800a80c <_vfiprintf_r+0x228>)
 800a7f6:	a904      	add	r1, sp, #16
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7fc f935 	bl	8006a68 <_printf_i>
 800a7fe:	e7e4      	b.n	800a7ca <_vfiprintf_r+0x1e6>
 800a800:	0800b559 	.word	0x0800b559
 800a804:	0800b563 	.word	0x0800b563
 800a808:	08006539 	.word	0x08006539
 800a80c:	0800a5c1 	.word	0x0800a5c1
 800a810:	0800b55f 	.word	0x0800b55f

0800a814 <__swbuf_r>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	460e      	mov	r6, r1
 800a818:	4614      	mov	r4, r2
 800a81a:	4605      	mov	r5, r0
 800a81c:	b118      	cbz	r0, 800a826 <__swbuf_r+0x12>
 800a81e:	6a03      	ldr	r3, [r0, #32]
 800a820:	b90b      	cbnz	r3, 800a826 <__swbuf_r+0x12>
 800a822:	f7fc fce1 	bl	80071e8 <__sinit>
 800a826:	69a3      	ldr	r3, [r4, #24]
 800a828:	60a3      	str	r3, [r4, #8]
 800a82a:	89a3      	ldrh	r3, [r4, #12]
 800a82c:	071a      	lsls	r2, r3, #28
 800a82e:	d501      	bpl.n	800a834 <__swbuf_r+0x20>
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	b943      	cbnz	r3, 800a846 <__swbuf_r+0x32>
 800a834:	4621      	mov	r1, r4
 800a836:	4628      	mov	r0, r5
 800a838:	f000 f82a 	bl	800a890 <__swsetup_r>
 800a83c:	b118      	cbz	r0, 800a846 <__swbuf_r+0x32>
 800a83e:	f04f 37ff 	mov.w	r7, #4294967295
 800a842:	4638      	mov	r0, r7
 800a844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	6922      	ldr	r2, [r4, #16]
 800a84a:	1a98      	subs	r0, r3, r2
 800a84c:	6963      	ldr	r3, [r4, #20]
 800a84e:	b2f6      	uxtb	r6, r6
 800a850:	4283      	cmp	r3, r0
 800a852:	4637      	mov	r7, r6
 800a854:	dc05      	bgt.n	800a862 <__swbuf_r+0x4e>
 800a856:	4621      	mov	r1, r4
 800a858:	4628      	mov	r0, r5
 800a85a:	f7ff fa53 	bl	8009d04 <_fflush_r>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d1ed      	bne.n	800a83e <__swbuf_r+0x2a>
 800a862:	68a3      	ldr	r3, [r4, #8]
 800a864:	3b01      	subs	r3, #1
 800a866:	60a3      	str	r3, [r4, #8]
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	6022      	str	r2, [r4, #0]
 800a86e:	701e      	strb	r6, [r3, #0]
 800a870:	6962      	ldr	r2, [r4, #20]
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	429a      	cmp	r2, r3
 800a876:	d004      	beq.n	800a882 <__swbuf_r+0x6e>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	07db      	lsls	r3, r3, #31
 800a87c:	d5e1      	bpl.n	800a842 <__swbuf_r+0x2e>
 800a87e:	2e0a      	cmp	r6, #10
 800a880:	d1df      	bne.n	800a842 <__swbuf_r+0x2e>
 800a882:	4621      	mov	r1, r4
 800a884:	4628      	mov	r0, r5
 800a886:	f7ff fa3d 	bl	8009d04 <_fflush_r>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d0d9      	beq.n	800a842 <__swbuf_r+0x2e>
 800a88e:	e7d6      	b.n	800a83e <__swbuf_r+0x2a>

0800a890 <__swsetup_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4b29      	ldr	r3, [pc, #164]	@ (800a938 <__swsetup_r+0xa8>)
 800a894:	4605      	mov	r5, r0
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	460c      	mov	r4, r1
 800a89a:	b118      	cbz	r0, 800a8a4 <__swsetup_r+0x14>
 800a89c:	6a03      	ldr	r3, [r0, #32]
 800a89e:	b90b      	cbnz	r3, 800a8a4 <__swsetup_r+0x14>
 800a8a0:	f7fc fca2 	bl	80071e8 <__sinit>
 800a8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a8:	0719      	lsls	r1, r3, #28
 800a8aa:	d422      	bmi.n	800a8f2 <__swsetup_r+0x62>
 800a8ac:	06da      	lsls	r2, r3, #27
 800a8ae:	d407      	bmi.n	800a8c0 <__swsetup_r+0x30>
 800a8b0:	2209      	movs	r2, #9
 800a8b2:	602a      	str	r2, [r5, #0]
 800a8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b8:	81a3      	strh	r3, [r4, #12]
 800a8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a8be:	e033      	b.n	800a928 <__swsetup_r+0x98>
 800a8c0:	0758      	lsls	r0, r3, #29
 800a8c2:	d512      	bpl.n	800a8ea <__swsetup_r+0x5a>
 800a8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8c6:	b141      	cbz	r1, 800a8da <__swsetup_r+0x4a>
 800a8c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	d002      	beq.n	800a8d6 <__swsetup_r+0x46>
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	f7fd fc05 	bl	80080e0 <_free_r>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a8e0:	81a3      	strh	r3, [r4, #12]
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	6063      	str	r3, [r4, #4]
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	f043 0308 	orr.w	r3, r3, #8
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	b94b      	cbnz	r3, 800a90a <__swsetup_r+0x7a>
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a900:	d003      	beq.n	800a90a <__swsetup_r+0x7a>
 800a902:	4621      	mov	r1, r4
 800a904:	4628      	mov	r0, r5
 800a906:	f000 f883 	bl	800aa10 <__smakebuf_r>
 800a90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90e:	f013 0201 	ands.w	r2, r3, #1
 800a912:	d00a      	beq.n	800a92a <__swsetup_r+0x9a>
 800a914:	2200      	movs	r2, #0
 800a916:	60a2      	str	r2, [r4, #8]
 800a918:	6962      	ldr	r2, [r4, #20]
 800a91a:	4252      	negs	r2, r2
 800a91c:	61a2      	str	r2, [r4, #24]
 800a91e:	6922      	ldr	r2, [r4, #16]
 800a920:	b942      	cbnz	r2, 800a934 <__swsetup_r+0xa4>
 800a922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a926:	d1c5      	bne.n	800a8b4 <__swsetup_r+0x24>
 800a928:	bd38      	pop	{r3, r4, r5, pc}
 800a92a:	0799      	lsls	r1, r3, #30
 800a92c:	bf58      	it	pl
 800a92e:	6962      	ldrpl	r2, [r4, #20]
 800a930:	60a2      	str	r2, [r4, #8]
 800a932:	e7f4      	b.n	800a91e <__swsetup_r+0x8e>
 800a934:	2000      	movs	r0, #0
 800a936:	e7f7      	b.n	800a928 <__swsetup_r+0x98>
 800a938:	20000028 	.word	0x20000028

0800a93c <_raise_r>:
 800a93c:	291f      	cmp	r1, #31
 800a93e:	b538      	push	{r3, r4, r5, lr}
 800a940:	4605      	mov	r5, r0
 800a942:	460c      	mov	r4, r1
 800a944:	d904      	bls.n	800a950 <_raise_r+0x14>
 800a946:	2316      	movs	r3, #22
 800a948:	6003      	str	r3, [r0, #0]
 800a94a:	f04f 30ff 	mov.w	r0, #4294967295
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a952:	b112      	cbz	r2, 800a95a <_raise_r+0x1e>
 800a954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a958:	b94b      	cbnz	r3, 800a96e <_raise_r+0x32>
 800a95a:	4628      	mov	r0, r5
 800a95c:	f000 f830 	bl	800a9c0 <_getpid_r>
 800a960:	4622      	mov	r2, r4
 800a962:	4601      	mov	r1, r0
 800a964:	4628      	mov	r0, r5
 800a966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a96a:	f000 b817 	b.w	800a99c <_kill_r>
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d00a      	beq.n	800a988 <_raise_r+0x4c>
 800a972:	1c59      	adds	r1, r3, #1
 800a974:	d103      	bne.n	800a97e <_raise_r+0x42>
 800a976:	2316      	movs	r3, #22
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	2001      	movs	r0, #1
 800a97c:	e7e7      	b.n	800a94e <_raise_r+0x12>
 800a97e:	2100      	movs	r1, #0
 800a980:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a984:	4620      	mov	r0, r4
 800a986:	4798      	blx	r3
 800a988:	2000      	movs	r0, #0
 800a98a:	e7e0      	b.n	800a94e <_raise_r+0x12>

0800a98c <raise>:
 800a98c:	4b02      	ldr	r3, [pc, #8]	@ (800a998 <raise+0xc>)
 800a98e:	4601      	mov	r1, r0
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	f7ff bfd3 	b.w	800a93c <_raise_r>
 800a996:	bf00      	nop
 800a998:	20000028 	.word	0x20000028

0800a99c <_kill_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d07      	ldr	r5, [pc, #28]	@ (800a9bc <_kill_r+0x20>)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	602b      	str	r3, [r5, #0]
 800a9aa:	f7f7 fd49 	bl	8002440 <_kill>
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	d102      	bne.n	800a9b8 <_kill_r+0x1c>
 800a9b2:	682b      	ldr	r3, [r5, #0]
 800a9b4:	b103      	cbz	r3, 800a9b8 <_kill_r+0x1c>
 800a9b6:	6023      	str	r3, [r4, #0]
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20000608 	.word	0x20000608

0800a9c0 <_getpid_r>:
 800a9c0:	f7f7 bd36 	b.w	8002430 <_getpid>

0800a9c4 <__swhatbuf_r>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	b096      	sub	sp, #88	@ 0x58
 800a9d0:	4615      	mov	r5, r2
 800a9d2:	461e      	mov	r6, r3
 800a9d4:	da0d      	bge.n	800a9f2 <__swhatbuf_r+0x2e>
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9dc:	f04f 0100 	mov.w	r1, #0
 800a9e0:	bf14      	ite	ne
 800a9e2:	2340      	movne	r3, #64	@ 0x40
 800a9e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	6031      	str	r1, [r6, #0]
 800a9ec:	602b      	str	r3, [r5, #0]
 800a9ee:	b016      	add	sp, #88	@ 0x58
 800a9f0:	bd70      	pop	{r4, r5, r6, pc}
 800a9f2:	466a      	mov	r2, sp
 800a9f4:	f000 f848 	bl	800aa88 <_fstat_r>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	dbec      	blt.n	800a9d6 <__swhatbuf_r+0x12>
 800a9fc:	9901      	ldr	r1, [sp, #4]
 800a9fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa06:	4259      	negs	r1, r3
 800aa08:	4159      	adcs	r1, r3
 800aa0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa0e:	e7eb      	b.n	800a9e8 <__swhatbuf_r+0x24>

0800aa10 <__smakebuf_r>:
 800aa10:	898b      	ldrh	r3, [r1, #12]
 800aa12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa14:	079d      	lsls	r5, r3, #30
 800aa16:	4606      	mov	r6, r0
 800aa18:	460c      	mov	r4, r1
 800aa1a:	d507      	bpl.n	800aa2c <__smakebuf_r+0x1c>
 800aa1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	2301      	movs	r3, #1
 800aa26:	6163      	str	r3, [r4, #20]
 800aa28:	b003      	add	sp, #12
 800aa2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa2c:	ab01      	add	r3, sp, #4
 800aa2e:	466a      	mov	r2, sp
 800aa30:	f7ff ffc8 	bl	800a9c4 <__swhatbuf_r>
 800aa34:	9f00      	ldr	r7, [sp, #0]
 800aa36:	4605      	mov	r5, r0
 800aa38:	4639      	mov	r1, r7
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f7fd fbc4 	bl	80081c8 <_malloc_r>
 800aa40:	b948      	cbnz	r0, 800aa56 <__smakebuf_r+0x46>
 800aa42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa46:	059a      	lsls	r2, r3, #22
 800aa48:	d4ee      	bmi.n	800aa28 <__smakebuf_r+0x18>
 800aa4a:	f023 0303 	bic.w	r3, r3, #3
 800aa4e:	f043 0302 	orr.w	r3, r3, #2
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	e7e2      	b.n	800aa1c <__smakebuf_r+0xc>
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	6020      	str	r0, [r4, #0]
 800aa5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5e:	81a3      	strh	r3, [r4, #12]
 800aa60:	9b01      	ldr	r3, [sp, #4]
 800aa62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa66:	b15b      	cbz	r3, 800aa80 <__smakebuf_r+0x70>
 800aa68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f000 f81d 	bl	800aaac <_isatty_r>
 800aa72:	b128      	cbz	r0, 800aa80 <__smakebuf_r+0x70>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	f023 0303 	bic.w	r3, r3, #3
 800aa7a:	f043 0301 	orr.w	r3, r3, #1
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	431d      	orrs	r5, r3
 800aa84:	81a5      	strh	r5, [r4, #12]
 800aa86:	e7cf      	b.n	800aa28 <__smakebuf_r+0x18>

0800aa88 <_fstat_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d07      	ldr	r5, [pc, #28]	@ (800aaa8 <_fstat_r+0x20>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	4611      	mov	r1, r2
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	f7f7 fd33 	bl	8002500 <_fstat>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	d102      	bne.n	800aaa4 <_fstat_r+0x1c>
 800aa9e:	682b      	ldr	r3, [r5, #0]
 800aaa0:	b103      	cbz	r3, 800aaa4 <_fstat_r+0x1c>
 800aaa2:	6023      	str	r3, [r4, #0]
 800aaa4:	bd38      	pop	{r3, r4, r5, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000608 	.word	0x20000608

0800aaac <_isatty_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d06      	ldr	r5, [pc, #24]	@ (800aac8 <_isatty_r+0x1c>)
 800aab0:	2300      	movs	r3, #0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	602b      	str	r3, [r5, #0]
 800aab8:	f7f7 fd32 	bl	8002520 <_isatty>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_isatty_r+0x1a>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_isatty_r+0x1a>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20000608 	.word	0x20000608

0800aacc <atan2>:
 800aacc:	f000 b908 	b.w	800ace0 <__ieee754_atan2>

0800aad0 <sqrt>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	ed2d 8b02 	vpush	{d8}
 800aad6:	ec55 4b10 	vmov	r4, r5, d0
 800aada:	f000 f825 	bl	800ab28 <__ieee754_sqrt>
 800aade:	4622      	mov	r2, r4
 800aae0:	462b      	mov	r3, r5
 800aae2:	4620      	mov	r0, r4
 800aae4:	4629      	mov	r1, r5
 800aae6:	eeb0 8a40 	vmov.f32	s16, s0
 800aaea:	eef0 8a60 	vmov.f32	s17, s1
 800aaee:	f7f6 f81d 	bl	8000b2c <__aeabi_dcmpun>
 800aaf2:	b990      	cbnz	r0, 800ab1a <sqrt+0x4a>
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	4620      	mov	r0, r4
 800aafa:	4629      	mov	r1, r5
 800aafc:	f7f5 ffee 	bl	8000adc <__aeabi_dcmplt>
 800ab00:	b158      	cbz	r0, 800ab1a <sqrt+0x4a>
 800ab02:	f7fc fc5d 	bl	80073c0 <__errno>
 800ab06:	2321      	movs	r3, #33	@ 0x21
 800ab08:	6003      	str	r3, [r0, #0]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4610      	mov	r0, r2
 800ab10:	4619      	mov	r1, r3
 800ab12:	f7f5 fe9b 	bl	800084c <__aeabi_ddiv>
 800ab16:	ec41 0b18 	vmov	d8, r0, r1
 800ab1a:	eeb0 0a48 	vmov.f32	s0, s16
 800ab1e:	eef0 0a68 	vmov.f32	s1, s17
 800ab22:	ecbd 8b02 	vpop	{d8}
 800ab26:	bd38      	pop	{r3, r4, r5, pc}

0800ab28 <__ieee754_sqrt>:
 800ab28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	4a68      	ldr	r2, [pc, #416]	@ (800acd0 <__ieee754_sqrt+0x1a8>)
 800ab2e:	ec55 4b10 	vmov	r4, r5, d0
 800ab32:	43aa      	bics	r2, r5
 800ab34:	462b      	mov	r3, r5
 800ab36:	4621      	mov	r1, r4
 800ab38:	d110      	bne.n	800ab5c <__ieee754_sqrt+0x34>
 800ab3a:	4622      	mov	r2, r4
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f7f5 fd5a 	bl	80005f8 <__aeabi_dmul>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 fb9e 	bl	800028c <__adddf3>
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	ec45 4b10 	vmov	d0, r4, r5
 800ab58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5c:	2d00      	cmp	r5, #0
 800ab5e:	dc0e      	bgt.n	800ab7e <__ieee754_sqrt+0x56>
 800ab60:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ab64:	4322      	orrs	r2, r4
 800ab66:	d0f5      	beq.n	800ab54 <__ieee754_sqrt+0x2c>
 800ab68:	b19d      	cbz	r5, 800ab92 <__ieee754_sqrt+0x6a>
 800ab6a:	4622      	mov	r2, r4
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7f5 fb8a 	bl	8000288 <__aeabi_dsub>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	f7f5 fe68 	bl	800084c <__aeabi_ddiv>
 800ab7c:	e7e8      	b.n	800ab50 <__ieee754_sqrt+0x28>
 800ab7e:	152a      	asrs	r2, r5, #20
 800ab80:	d115      	bne.n	800abae <__ieee754_sqrt+0x86>
 800ab82:	2000      	movs	r0, #0
 800ab84:	e009      	b.n	800ab9a <__ieee754_sqrt+0x72>
 800ab86:	0acb      	lsrs	r3, r1, #11
 800ab88:	3a15      	subs	r2, #21
 800ab8a:	0549      	lsls	r1, r1, #21
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0fa      	beq.n	800ab86 <__ieee754_sqrt+0x5e>
 800ab90:	e7f7      	b.n	800ab82 <__ieee754_sqrt+0x5a>
 800ab92:	462a      	mov	r2, r5
 800ab94:	e7fa      	b.n	800ab8c <__ieee754_sqrt+0x64>
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	3001      	adds	r0, #1
 800ab9a:	02dc      	lsls	r4, r3, #11
 800ab9c:	d5fb      	bpl.n	800ab96 <__ieee754_sqrt+0x6e>
 800ab9e:	1e44      	subs	r4, r0, #1
 800aba0:	1b12      	subs	r2, r2, r4
 800aba2:	f1c0 0420 	rsb	r4, r0, #32
 800aba6:	fa21 f404 	lsr.w	r4, r1, r4
 800abaa:	4323      	orrs	r3, r4
 800abac:	4081      	lsls	r1, r0
 800abae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abb2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800abb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abba:	07d2      	lsls	r2, r2, #31
 800abbc:	bf5c      	itt	pl
 800abbe:	005b      	lslpl	r3, r3, #1
 800abc0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800abc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abc8:	bf58      	it	pl
 800abca:	0049      	lslpl	r1, r1, #1
 800abcc:	2600      	movs	r6, #0
 800abce:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800abd2:	106d      	asrs	r5, r5, #1
 800abd4:	0049      	lsls	r1, r1, #1
 800abd6:	2016      	movs	r0, #22
 800abd8:	4632      	mov	r2, r6
 800abda:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800abde:	1917      	adds	r7, r2, r4
 800abe0:	429f      	cmp	r7, r3
 800abe2:	bfde      	ittt	le
 800abe4:	193a      	addle	r2, r7, r4
 800abe6:	1bdb      	suble	r3, r3, r7
 800abe8:	1936      	addle	r6, r6, r4
 800abea:	0fcf      	lsrs	r7, r1, #31
 800abec:	3801      	subs	r0, #1
 800abee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800abf2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800abf6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800abfa:	d1f0      	bne.n	800abde <__ieee754_sqrt+0xb6>
 800abfc:	4604      	mov	r4, r0
 800abfe:	2720      	movs	r7, #32
 800ac00:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ac04:	429a      	cmp	r2, r3
 800ac06:	eb00 0e0c 	add.w	lr, r0, ip
 800ac0a:	db02      	blt.n	800ac12 <__ieee754_sqrt+0xea>
 800ac0c:	d113      	bne.n	800ac36 <__ieee754_sqrt+0x10e>
 800ac0e:	458e      	cmp	lr, r1
 800ac10:	d811      	bhi.n	800ac36 <__ieee754_sqrt+0x10e>
 800ac12:	f1be 0f00 	cmp.w	lr, #0
 800ac16:	eb0e 000c 	add.w	r0, lr, ip
 800ac1a:	da42      	bge.n	800aca2 <__ieee754_sqrt+0x17a>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	db40      	blt.n	800aca2 <__ieee754_sqrt+0x17a>
 800ac20:	f102 0801 	add.w	r8, r2, #1
 800ac24:	1a9b      	subs	r3, r3, r2
 800ac26:	458e      	cmp	lr, r1
 800ac28:	bf88      	it	hi
 800ac2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ac2e:	eba1 010e 	sub.w	r1, r1, lr
 800ac32:	4464      	add	r4, ip
 800ac34:	4642      	mov	r2, r8
 800ac36:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ac3a:	3f01      	subs	r7, #1
 800ac3c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ac40:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ac44:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ac48:	d1dc      	bne.n	800ac04 <__ieee754_sqrt+0xdc>
 800ac4a:	4319      	orrs	r1, r3
 800ac4c:	d01b      	beq.n	800ac86 <__ieee754_sqrt+0x15e>
 800ac4e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800acd4 <__ieee754_sqrt+0x1ac>
 800ac52:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800acd8 <__ieee754_sqrt+0x1b0>
 800ac56:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac5a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ac5e:	f7f5 fb13 	bl	8000288 <__aeabi_dsub>
 800ac62:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	f7f5 ff3f 	bl	8000af0 <__aeabi_dcmple>
 800ac72:	b140      	cbz	r0, 800ac86 <__ieee754_sqrt+0x15e>
 800ac74:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ac78:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac7c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ac80:	d111      	bne.n	800aca6 <__ieee754_sqrt+0x17e>
 800ac82:	3601      	adds	r6, #1
 800ac84:	463c      	mov	r4, r7
 800ac86:	1072      	asrs	r2, r6, #1
 800ac88:	0863      	lsrs	r3, r4, #1
 800ac8a:	07f1      	lsls	r1, r6, #31
 800ac8c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ac90:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ac94:	bf48      	it	mi
 800ac96:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ac9a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ac9e:	4618      	mov	r0, r3
 800aca0:	e756      	b.n	800ab50 <__ieee754_sqrt+0x28>
 800aca2:	4690      	mov	r8, r2
 800aca4:	e7be      	b.n	800ac24 <__ieee754_sqrt+0xfc>
 800aca6:	f7f5 faf1 	bl	800028c <__adddf3>
 800acaa:	e9da 8900 	ldrd	r8, r9, [sl]
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	f7f5 ff11 	bl	8000adc <__aeabi_dcmplt>
 800acba:	b120      	cbz	r0, 800acc6 <__ieee754_sqrt+0x19e>
 800acbc:	1ca0      	adds	r0, r4, #2
 800acbe:	bf08      	it	eq
 800acc0:	3601      	addeq	r6, #1
 800acc2:	3402      	adds	r4, #2
 800acc4:	e7df      	b.n	800ac86 <__ieee754_sqrt+0x15e>
 800acc6:	1c63      	adds	r3, r4, #1
 800acc8:	f023 0401 	bic.w	r4, r3, #1
 800accc:	e7db      	b.n	800ac86 <__ieee754_sqrt+0x15e>
 800acce:	bf00      	nop
 800acd0:	7ff00000 	.word	0x7ff00000
 800acd4:	200001f0 	.word	0x200001f0
 800acd8:	200001e8 	.word	0x200001e8
 800acdc:	00000000 	.word	0x00000000

0800ace0 <__ieee754_atan2>:
 800ace0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace4:	ec57 6b11 	vmov	r6, r7, d1
 800ace8:	4273      	negs	r3, r6
 800acea:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ae68 <__ieee754_atan2+0x188>
 800acee:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800acf2:	4333      	orrs	r3, r6
 800acf4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800acf8:	4543      	cmp	r3, r8
 800acfa:	ec51 0b10 	vmov	r0, r1, d0
 800acfe:	4635      	mov	r5, r6
 800ad00:	d809      	bhi.n	800ad16 <__ieee754_atan2+0x36>
 800ad02:	4244      	negs	r4, r0
 800ad04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ad08:	4304      	orrs	r4, r0
 800ad0a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ad0e:	4544      	cmp	r4, r8
 800ad10:	468e      	mov	lr, r1
 800ad12:	4681      	mov	r9, r0
 800ad14:	d907      	bls.n	800ad26 <__ieee754_atan2+0x46>
 800ad16:	4632      	mov	r2, r6
 800ad18:	463b      	mov	r3, r7
 800ad1a:	f7f5 fab7 	bl	800028c <__adddf3>
 800ad1e:	ec41 0b10 	vmov	d0, r0, r1
 800ad22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad26:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ad2a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ad2e:	4334      	orrs	r4, r6
 800ad30:	d103      	bne.n	800ad3a <__ieee754_atan2+0x5a>
 800ad32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad36:	f000 b89b 	b.w	800ae70 <atan>
 800ad3a:	17bc      	asrs	r4, r7, #30
 800ad3c:	f004 0402 	and.w	r4, r4, #2
 800ad40:	ea53 0909 	orrs.w	r9, r3, r9
 800ad44:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ad48:	d107      	bne.n	800ad5a <__ieee754_atan2+0x7a>
 800ad4a:	2c02      	cmp	r4, #2
 800ad4c:	d05f      	beq.n	800ae0e <__ieee754_atan2+0x12e>
 800ad4e:	2c03      	cmp	r4, #3
 800ad50:	d1e5      	bne.n	800ad1e <__ieee754_atan2+0x3e>
 800ad52:	a141      	add	r1, pc, #260	@ (adr r1, 800ae58 <__ieee754_atan2+0x178>)
 800ad54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad58:	e7e1      	b.n	800ad1e <__ieee754_atan2+0x3e>
 800ad5a:	4315      	orrs	r5, r2
 800ad5c:	d106      	bne.n	800ad6c <__ieee754_atan2+0x8c>
 800ad5e:	f1be 0f00 	cmp.w	lr, #0
 800ad62:	da5f      	bge.n	800ae24 <__ieee754_atan2+0x144>
 800ad64:	a13e      	add	r1, pc, #248	@ (adr r1, 800ae60 <__ieee754_atan2+0x180>)
 800ad66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad6a:	e7d8      	b.n	800ad1e <__ieee754_atan2+0x3e>
 800ad6c:	4542      	cmp	r2, r8
 800ad6e:	d10f      	bne.n	800ad90 <__ieee754_atan2+0xb0>
 800ad70:	4293      	cmp	r3, r2
 800ad72:	f104 34ff 	add.w	r4, r4, #4294967295
 800ad76:	d107      	bne.n	800ad88 <__ieee754_atan2+0xa8>
 800ad78:	2c02      	cmp	r4, #2
 800ad7a:	d84c      	bhi.n	800ae16 <__ieee754_atan2+0x136>
 800ad7c:	4b34      	ldr	r3, [pc, #208]	@ (800ae50 <__ieee754_atan2+0x170>)
 800ad7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad86:	e7ca      	b.n	800ad1e <__ieee754_atan2+0x3e>
 800ad88:	2c02      	cmp	r4, #2
 800ad8a:	d848      	bhi.n	800ae1e <__ieee754_atan2+0x13e>
 800ad8c:	4b31      	ldr	r3, [pc, #196]	@ (800ae54 <__ieee754_atan2+0x174>)
 800ad8e:	e7f6      	b.n	800ad7e <__ieee754_atan2+0x9e>
 800ad90:	4543      	cmp	r3, r8
 800ad92:	d0e4      	beq.n	800ad5e <__ieee754_atan2+0x7e>
 800ad94:	1a9b      	subs	r3, r3, r2
 800ad96:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ad9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad9e:	da1e      	bge.n	800adde <__ieee754_atan2+0xfe>
 800ada0:	2f00      	cmp	r7, #0
 800ada2:	da01      	bge.n	800ada8 <__ieee754_atan2+0xc8>
 800ada4:	323c      	adds	r2, #60	@ 0x3c
 800ada6:	db1e      	blt.n	800ade6 <__ieee754_atan2+0x106>
 800ada8:	4632      	mov	r2, r6
 800adaa:	463b      	mov	r3, r7
 800adac:	f7f5 fd4e 	bl	800084c <__aeabi_ddiv>
 800adb0:	ec41 0b10 	vmov	d0, r0, r1
 800adb4:	f000 f9f4 	bl	800b1a0 <fabs>
 800adb8:	f000 f85a 	bl	800ae70 <atan>
 800adbc:	ec51 0b10 	vmov	r0, r1, d0
 800adc0:	2c01      	cmp	r4, #1
 800adc2:	d013      	beq.n	800adec <__ieee754_atan2+0x10c>
 800adc4:	2c02      	cmp	r4, #2
 800adc6:	d015      	beq.n	800adf4 <__ieee754_atan2+0x114>
 800adc8:	2c00      	cmp	r4, #0
 800adca:	d0a8      	beq.n	800ad1e <__ieee754_atan2+0x3e>
 800adcc:	a318      	add	r3, pc, #96	@ (adr r3, 800ae30 <__ieee754_atan2+0x150>)
 800adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add2:	f7f5 fa59 	bl	8000288 <__aeabi_dsub>
 800add6:	a318      	add	r3, pc, #96	@ (adr r3, 800ae38 <__ieee754_atan2+0x158>)
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	e014      	b.n	800ae08 <__ieee754_atan2+0x128>
 800adde:	a118      	add	r1, pc, #96	@ (adr r1, 800ae40 <__ieee754_atan2+0x160>)
 800ade0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade4:	e7ec      	b.n	800adc0 <__ieee754_atan2+0xe0>
 800ade6:	2000      	movs	r0, #0
 800ade8:	2100      	movs	r1, #0
 800adea:	e7e9      	b.n	800adc0 <__ieee754_atan2+0xe0>
 800adec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800adf0:	4619      	mov	r1, r3
 800adf2:	e794      	b.n	800ad1e <__ieee754_atan2+0x3e>
 800adf4:	a30e      	add	r3, pc, #56	@ (adr r3, 800ae30 <__ieee754_atan2+0x150>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	f7f5 fa45 	bl	8000288 <__aeabi_dsub>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	a10d      	add	r1, pc, #52	@ (adr r1, 800ae38 <__ieee754_atan2+0x158>)
 800ae04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae08:	f7f5 fa3e 	bl	8000288 <__aeabi_dsub>
 800ae0c:	e787      	b.n	800ad1e <__ieee754_atan2+0x3e>
 800ae0e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ae38 <__ieee754_atan2+0x158>)
 800ae10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae14:	e783      	b.n	800ad1e <__ieee754_atan2+0x3e>
 800ae16:	a10c      	add	r1, pc, #48	@ (adr r1, 800ae48 <__ieee754_atan2+0x168>)
 800ae18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae1c:	e77f      	b.n	800ad1e <__ieee754_atan2+0x3e>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	2100      	movs	r1, #0
 800ae22:	e77c      	b.n	800ad1e <__ieee754_atan2+0x3e>
 800ae24:	a106      	add	r1, pc, #24	@ (adr r1, 800ae40 <__ieee754_atan2+0x160>)
 800ae26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae2a:	e778      	b.n	800ad1e <__ieee754_atan2+0x3e>
 800ae2c:	f3af 8000 	nop.w
 800ae30:	33145c07 	.word	0x33145c07
 800ae34:	3ca1a626 	.word	0x3ca1a626
 800ae38:	54442d18 	.word	0x54442d18
 800ae3c:	400921fb 	.word	0x400921fb
 800ae40:	54442d18 	.word	0x54442d18
 800ae44:	3ff921fb 	.word	0x3ff921fb
 800ae48:	54442d18 	.word	0x54442d18
 800ae4c:	3fe921fb 	.word	0x3fe921fb
 800ae50:	0800b628 	.word	0x0800b628
 800ae54:	0800b610 	.word	0x0800b610
 800ae58:	54442d18 	.word	0x54442d18
 800ae5c:	c00921fb 	.word	0xc00921fb
 800ae60:	54442d18 	.word	0x54442d18
 800ae64:	bff921fb 	.word	0xbff921fb
 800ae68:	7ff00000 	.word	0x7ff00000
 800ae6c:	00000000 	.word	0x00000000

0800ae70 <atan>:
 800ae70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	ec55 4b10 	vmov	r4, r5, d0
 800ae78:	4bbf      	ldr	r3, [pc, #764]	@ (800b178 <atan+0x308>)
 800ae7a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ae7e:	429e      	cmp	r6, r3
 800ae80:	46ab      	mov	fp, r5
 800ae82:	d918      	bls.n	800aeb6 <atan+0x46>
 800ae84:	4bbd      	ldr	r3, [pc, #756]	@ (800b17c <atan+0x30c>)
 800ae86:	429e      	cmp	r6, r3
 800ae88:	d801      	bhi.n	800ae8e <atan+0x1e>
 800ae8a:	d109      	bne.n	800aea0 <atan+0x30>
 800ae8c:	b144      	cbz	r4, 800aea0 <atan+0x30>
 800ae8e:	4622      	mov	r2, r4
 800ae90:	462b      	mov	r3, r5
 800ae92:	4620      	mov	r0, r4
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7f5 f9f9 	bl	800028c <__adddf3>
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	460d      	mov	r5, r1
 800ae9e:	e006      	b.n	800aeae <atan+0x3e>
 800aea0:	f1bb 0f00 	cmp.w	fp, #0
 800aea4:	f340 812b 	ble.w	800b0fe <atan+0x28e>
 800aea8:	a597      	add	r5, pc, #604	@ (adr r5, 800b108 <atan+0x298>)
 800aeaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aeae:	ec45 4b10 	vmov	d0, r4, r5
 800aeb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb6:	4bb2      	ldr	r3, [pc, #712]	@ (800b180 <atan+0x310>)
 800aeb8:	429e      	cmp	r6, r3
 800aeba:	d813      	bhi.n	800aee4 <atan+0x74>
 800aebc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800aec0:	429e      	cmp	r6, r3
 800aec2:	d80c      	bhi.n	800aede <atan+0x6e>
 800aec4:	a392      	add	r3, pc, #584	@ (adr r3, 800b110 <atan+0x2a0>)
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	4620      	mov	r0, r4
 800aecc:	4629      	mov	r1, r5
 800aece:	f7f5 f9dd 	bl	800028c <__adddf3>
 800aed2:	4bac      	ldr	r3, [pc, #688]	@ (800b184 <atan+0x314>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	f7f5 fe1f 	bl	8000b18 <__aeabi_dcmpgt>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d1e7      	bne.n	800aeae <atan+0x3e>
 800aede:	f04f 3aff 	mov.w	sl, #4294967295
 800aee2:	e029      	b.n	800af38 <atan+0xc8>
 800aee4:	f000 f95c 	bl	800b1a0 <fabs>
 800aee8:	4ba7      	ldr	r3, [pc, #668]	@ (800b188 <atan+0x318>)
 800aeea:	429e      	cmp	r6, r3
 800aeec:	ec55 4b10 	vmov	r4, r5, d0
 800aef0:	f200 80bc 	bhi.w	800b06c <atan+0x1fc>
 800aef4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800aef8:	429e      	cmp	r6, r3
 800aefa:	f200 809e 	bhi.w	800b03a <atan+0x1ca>
 800aefe:	4622      	mov	r2, r4
 800af00:	462b      	mov	r3, r5
 800af02:	4620      	mov	r0, r4
 800af04:	4629      	mov	r1, r5
 800af06:	f7f5 f9c1 	bl	800028c <__adddf3>
 800af0a:	4b9e      	ldr	r3, [pc, #632]	@ (800b184 <atan+0x314>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	f7f5 f9bb 	bl	8000288 <__aeabi_dsub>
 800af12:	2200      	movs	r2, #0
 800af14:	4606      	mov	r6, r0
 800af16:	460f      	mov	r7, r1
 800af18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af1c:	4620      	mov	r0, r4
 800af1e:	4629      	mov	r1, r5
 800af20:	f7f5 f9b4 	bl	800028c <__adddf3>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4630      	mov	r0, r6
 800af2a:	4639      	mov	r1, r7
 800af2c:	f7f5 fc8e 	bl	800084c <__aeabi_ddiv>
 800af30:	f04f 0a00 	mov.w	sl, #0
 800af34:	4604      	mov	r4, r0
 800af36:	460d      	mov	r5, r1
 800af38:	4622      	mov	r2, r4
 800af3a:	462b      	mov	r3, r5
 800af3c:	4620      	mov	r0, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	f7f5 fb5a 	bl	80005f8 <__aeabi_dmul>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4680      	mov	r8, r0
 800af4a:	4689      	mov	r9, r1
 800af4c:	f7f5 fb54 	bl	80005f8 <__aeabi_dmul>
 800af50:	a371      	add	r3, pc, #452	@ (adr r3, 800b118 <atan+0x2a8>)
 800af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af56:	4606      	mov	r6, r0
 800af58:	460f      	mov	r7, r1
 800af5a:	f7f5 fb4d 	bl	80005f8 <__aeabi_dmul>
 800af5e:	a370      	add	r3, pc, #448	@ (adr r3, 800b120 <atan+0x2b0>)
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	f7f5 f992 	bl	800028c <__adddf3>
 800af68:	4632      	mov	r2, r6
 800af6a:	463b      	mov	r3, r7
 800af6c:	f7f5 fb44 	bl	80005f8 <__aeabi_dmul>
 800af70:	a36d      	add	r3, pc, #436	@ (adr r3, 800b128 <atan+0x2b8>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	f7f5 f989 	bl	800028c <__adddf3>
 800af7a:	4632      	mov	r2, r6
 800af7c:	463b      	mov	r3, r7
 800af7e:	f7f5 fb3b 	bl	80005f8 <__aeabi_dmul>
 800af82:	a36b      	add	r3, pc, #428	@ (adr r3, 800b130 <atan+0x2c0>)
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 f980 	bl	800028c <__adddf3>
 800af8c:	4632      	mov	r2, r6
 800af8e:	463b      	mov	r3, r7
 800af90:	f7f5 fb32 	bl	80005f8 <__aeabi_dmul>
 800af94:	a368      	add	r3, pc, #416	@ (adr r3, 800b138 <atan+0x2c8>)
 800af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9a:	f7f5 f977 	bl	800028c <__adddf3>
 800af9e:	4632      	mov	r2, r6
 800afa0:	463b      	mov	r3, r7
 800afa2:	f7f5 fb29 	bl	80005f8 <__aeabi_dmul>
 800afa6:	a366      	add	r3, pc, #408	@ (adr r3, 800b140 <atan+0x2d0>)
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	f7f5 f96e 	bl	800028c <__adddf3>
 800afb0:	4642      	mov	r2, r8
 800afb2:	464b      	mov	r3, r9
 800afb4:	f7f5 fb20 	bl	80005f8 <__aeabi_dmul>
 800afb8:	a363      	add	r3, pc, #396	@ (adr r3, 800b148 <atan+0x2d8>)
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	4680      	mov	r8, r0
 800afc0:	4689      	mov	r9, r1
 800afc2:	4630      	mov	r0, r6
 800afc4:	4639      	mov	r1, r7
 800afc6:	f7f5 fb17 	bl	80005f8 <__aeabi_dmul>
 800afca:	a361      	add	r3, pc, #388	@ (adr r3, 800b150 <atan+0x2e0>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 f95a 	bl	8000288 <__aeabi_dsub>
 800afd4:	4632      	mov	r2, r6
 800afd6:	463b      	mov	r3, r7
 800afd8:	f7f5 fb0e 	bl	80005f8 <__aeabi_dmul>
 800afdc:	a35e      	add	r3, pc, #376	@ (adr r3, 800b158 <atan+0x2e8>)
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	f7f5 f951 	bl	8000288 <__aeabi_dsub>
 800afe6:	4632      	mov	r2, r6
 800afe8:	463b      	mov	r3, r7
 800afea:	f7f5 fb05 	bl	80005f8 <__aeabi_dmul>
 800afee:	a35c      	add	r3, pc, #368	@ (adr r3, 800b160 <atan+0x2f0>)
 800aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff4:	f7f5 f948 	bl	8000288 <__aeabi_dsub>
 800aff8:	4632      	mov	r2, r6
 800affa:	463b      	mov	r3, r7
 800affc:	f7f5 fafc 	bl	80005f8 <__aeabi_dmul>
 800b000:	a359      	add	r3, pc, #356	@ (adr r3, 800b168 <atan+0x2f8>)
 800b002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b006:	f7f5 f93f 	bl	8000288 <__aeabi_dsub>
 800b00a:	4632      	mov	r2, r6
 800b00c:	463b      	mov	r3, r7
 800b00e:	f7f5 faf3 	bl	80005f8 <__aeabi_dmul>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	4640      	mov	r0, r8
 800b018:	4649      	mov	r1, r9
 800b01a:	f7f5 f937 	bl	800028c <__adddf3>
 800b01e:	4622      	mov	r2, r4
 800b020:	462b      	mov	r3, r5
 800b022:	f7f5 fae9 	bl	80005f8 <__aeabi_dmul>
 800b026:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	d148      	bne.n	800b0c2 <atan+0x252>
 800b030:	4620      	mov	r0, r4
 800b032:	4629      	mov	r1, r5
 800b034:	f7f5 f928 	bl	8000288 <__aeabi_dsub>
 800b038:	e72f      	b.n	800ae9a <atan+0x2a>
 800b03a:	4b52      	ldr	r3, [pc, #328]	@ (800b184 <atan+0x314>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	4620      	mov	r0, r4
 800b040:	4629      	mov	r1, r5
 800b042:	f7f5 f921 	bl	8000288 <__aeabi_dsub>
 800b046:	4b4f      	ldr	r3, [pc, #316]	@ (800b184 <atan+0x314>)
 800b048:	4606      	mov	r6, r0
 800b04a:	460f      	mov	r7, r1
 800b04c:	2200      	movs	r2, #0
 800b04e:	4620      	mov	r0, r4
 800b050:	4629      	mov	r1, r5
 800b052:	f7f5 f91b 	bl	800028c <__adddf3>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 fbf5 	bl	800084c <__aeabi_ddiv>
 800b062:	f04f 0a01 	mov.w	sl, #1
 800b066:	4604      	mov	r4, r0
 800b068:	460d      	mov	r5, r1
 800b06a:	e765      	b.n	800af38 <atan+0xc8>
 800b06c:	4b47      	ldr	r3, [pc, #284]	@ (800b18c <atan+0x31c>)
 800b06e:	429e      	cmp	r6, r3
 800b070:	d21c      	bcs.n	800b0ac <atan+0x23c>
 800b072:	4b47      	ldr	r3, [pc, #284]	@ (800b190 <atan+0x320>)
 800b074:	2200      	movs	r2, #0
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	f7f5 f905 	bl	8000288 <__aeabi_dsub>
 800b07e:	4b44      	ldr	r3, [pc, #272]	@ (800b190 <atan+0x320>)
 800b080:	4606      	mov	r6, r0
 800b082:	460f      	mov	r7, r1
 800b084:	2200      	movs	r2, #0
 800b086:	4620      	mov	r0, r4
 800b088:	4629      	mov	r1, r5
 800b08a:	f7f5 fab5 	bl	80005f8 <__aeabi_dmul>
 800b08e:	4b3d      	ldr	r3, [pc, #244]	@ (800b184 <atan+0x314>)
 800b090:	2200      	movs	r2, #0
 800b092:	f7f5 f8fb 	bl	800028c <__adddf3>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4630      	mov	r0, r6
 800b09c:	4639      	mov	r1, r7
 800b09e:	f7f5 fbd5 	bl	800084c <__aeabi_ddiv>
 800b0a2:	f04f 0a02 	mov.w	sl, #2
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	460d      	mov	r5, r1
 800b0aa:	e745      	b.n	800af38 <atan+0xc8>
 800b0ac:	4622      	mov	r2, r4
 800b0ae:	462b      	mov	r3, r5
 800b0b0:	4938      	ldr	r1, [pc, #224]	@ (800b194 <atan+0x324>)
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	f7f5 fbca 	bl	800084c <__aeabi_ddiv>
 800b0b8:	f04f 0a03 	mov.w	sl, #3
 800b0bc:	4604      	mov	r4, r0
 800b0be:	460d      	mov	r5, r1
 800b0c0:	e73a      	b.n	800af38 <atan+0xc8>
 800b0c2:	4b35      	ldr	r3, [pc, #212]	@ (800b198 <atan+0x328>)
 800b0c4:	4e35      	ldr	r6, [pc, #212]	@ (800b19c <atan+0x32c>)
 800b0c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f7f5 f8db 	bl	8000288 <__aeabi_dsub>
 800b0d2:	4622      	mov	r2, r4
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	f7f5 f8d7 	bl	8000288 <__aeabi_dsub>
 800b0da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b0e6:	f7f5 f8cf 	bl	8000288 <__aeabi_dsub>
 800b0ea:	f1bb 0f00 	cmp.w	fp, #0
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	460d      	mov	r5, r1
 800b0f2:	f6bf aedc 	bge.w	800aeae <atan+0x3e>
 800b0f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b0fa:	461d      	mov	r5, r3
 800b0fc:	e6d7      	b.n	800aeae <atan+0x3e>
 800b0fe:	a51c      	add	r5, pc, #112	@ (adr r5, 800b170 <atan+0x300>)
 800b100:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b104:	e6d3      	b.n	800aeae <atan+0x3e>
 800b106:	bf00      	nop
 800b108:	54442d18 	.word	0x54442d18
 800b10c:	3ff921fb 	.word	0x3ff921fb
 800b110:	8800759c 	.word	0x8800759c
 800b114:	7e37e43c 	.word	0x7e37e43c
 800b118:	e322da11 	.word	0xe322da11
 800b11c:	3f90ad3a 	.word	0x3f90ad3a
 800b120:	24760deb 	.word	0x24760deb
 800b124:	3fa97b4b 	.word	0x3fa97b4b
 800b128:	a0d03d51 	.word	0xa0d03d51
 800b12c:	3fb10d66 	.word	0x3fb10d66
 800b130:	c54c206e 	.word	0xc54c206e
 800b134:	3fb745cd 	.word	0x3fb745cd
 800b138:	920083ff 	.word	0x920083ff
 800b13c:	3fc24924 	.word	0x3fc24924
 800b140:	5555550d 	.word	0x5555550d
 800b144:	3fd55555 	.word	0x3fd55555
 800b148:	2c6a6c2f 	.word	0x2c6a6c2f
 800b14c:	bfa2b444 	.word	0xbfa2b444
 800b150:	52defd9a 	.word	0x52defd9a
 800b154:	3fadde2d 	.word	0x3fadde2d
 800b158:	af749a6d 	.word	0xaf749a6d
 800b15c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b160:	fe231671 	.word	0xfe231671
 800b164:	3fbc71c6 	.word	0x3fbc71c6
 800b168:	9998ebc4 	.word	0x9998ebc4
 800b16c:	3fc99999 	.word	0x3fc99999
 800b170:	54442d18 	.word	0x54442d18
 800b174:	bff921fb 	.word	0xbff921fb
 800b178:	440fffff 	.word	0x440fffff
 800b17c:	7ff00000 	.word	0x7ff00000
 800b180:	3fdbffff 	.word	0x3fdbffff
 800b184:	3ff00000 	.word	0x3ff00000
 800b188:	3ff2ffff 	.word	0x3ff2ffff
 800b18c:	40038000 	.word	0x40038000
 800b190:	3ff80000 	.word	0x3ff80000
 800b194:	bff00000 	.word	0xbff00000
 800b198:	0800b640 	.word	0x0800b640
 800b19c:	0800b660 	.word	0x0800b660

0800b1a0 <fabs>:
 800b1a0:	ec51 0b10 	vmov	r0, r1, d0
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b1aa:	ec43 2b10 	vmov	d0, r2, r3
 800b1ae:	4770      	bx	lr

0800b1b0 <_init>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr

0800b1bc <_fini>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr
